
ECU_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000301c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003128  08003128  00013128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800315c  0800315c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800315c  0800315c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800315c  0800315c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800315c  0800315c  0001315c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003160  08003160  00013160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000014  08003178  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003178  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000914f  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001935  00000000  00000000  000291cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000810  00000000  00000000  0002ab08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000062b  00000000  00000000  0002b318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017099  00000000  00000000  0002b943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a2cd  00000000  00000000  000429dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084a03  00000000  00000000  0004cca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002058  00000000  00000000  000d16ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000d3704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08003110 	.word	0x08003110

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08003110 	.word	0x08003110

0800014c <GetDID>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint16_t GetDID(uint8_t DID_HByteString,uint8_t DID_LByteString)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
	uint16_t DID_res;
	DID_res = (DID_HByteString << 8) | DID_LByteString;
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	021b      	lsls	r3, r3, #8
 8000160:	b21a      	sxth	r2, r3
 8000162:	79bb      	ldrb	r3, [r7, #6]
 8000164:	b21b      	sxth	r3, r3
 8000166:	4313      	orrs	r3, r2
 8000168:	b21b      	sxth	r3, r3
 800016a:	81fb      	strh	r3, [r7, #14]
	return DID_res;
 800016c:	89fb      	ldrh	r3, [r7, #14]
}
 800016e:	4618      	mov	r0, r3
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr

08000178 <GetCANFrameSize>:

uint8_t GetCANFrameSize(uint8_t aData[])
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
	uint8_t SizeCount = 0;
 8000180:	2300      	movs	r3, #0
 8000182:	73fb      	strb	r3, [r7, #15]
	for(index_array=0;index_array<8;index_array++)
 8000184:	4b0f      	ldr	r3, [pc, #60]	; (80001c4 <GetCANFrameSize+0x4c>)
 8000186:	2200      	movs	r2, #0
 8000188:	701a      	strb	r2, [r3, #0]
 800018a:	e010      	b.n	80001ae <GetCANFrameSize+0x36>
	{
		if(aData[index_array]!=0)
 800018c:	4b0d      	ldr	r3, [pc, #52]	; (80001c4 <GetCANFrameSize+0x4c>)
 800018e:	781b      	ldrb	r3, [r3, #0]
 8000190:	461a      	mov	r2, r3
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4413      	add	r3, r2
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	2b00      	cmp	r3, #0
 800019a:	d002      	beq.n	80001a2 <GetCANFrameSize+0x2a>
		{
			SizeCount++;
 800019c:	7bfb      	ldrb	r3, [r7, #15]
 800019e:	3301      	adds	r3, #1
 80001a0:	73fb      	strb	r3, [r7, #15]
	for(index_array=0;index_array<8;index_array++)
 80001a2:	4b08      	ldr	r3, [pc, #32]	; (80001c4 <GetCANFrameSize+0x4c>)
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	3301      	adds	r3, #1
 80001a8:	b2da      	uxtb	r2, r3
 80001aa:	4b06      	ldr	r3, [pc, #24]	; (80001c4 <GetCANFrameSize+0x4c>)
 80001ac:	701a      	strb	r2, [r3, #0]
 80001ae:	4b05      	ldr	r3, [pc, #20]	; (80001c4 <GetCANFrameSize+0x4c>)
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	2b07      	cmp	r3, #7
 80001b4:	d9ea      	bls.n	800018c <GetCANFrameSize+0x14>
		}
	}
	return SizeCount;
 80001b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80001b8:	4618      	mov	r0, r3
 80001ba:	3714      	adds	r7, #20
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr
 80001c2:	bf00      	nop
 80001c4:	200000ee 	.word	0x200000ee

080001c8 <Check_ReadRq_Validation>:

uint8_t Check_ReadRq_Validation(uint8_t FT, uint8_t DL, uint8_t Data_buf[])
{
 80001c8:	b590      	push	{r4, r7, lr}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	603a      	str	r2, [r7, #0]
 80001d2:	71fb      	strb	r3, [r7, #7]
 80001d4:	460b      	mov	r3, r1
 80001d6:	71bb      	strb	r3, [r7, #6]
	uint8_t Resp_res;
	/*Negative response case*/
	//case 1
	if(FT > 3)
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	2b03      	cmp	r3, #3
 80001dc:	d902      	bls.n	80001e4 <Check_ReadRq_Validation+0x1c>
	{
		//transmit negative response
		Resp_res = NEGATIVE_RESPONSE;
 80001de:	2301      	movs	r3, #1
 80001e0:	73fb      	strb	r3, [r7, #15]
 80001e2:	e021      	b.n	8000228 <Check_ReadRq_Validation+0x60>
	} else
	{
		switch(FT)
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	2b03      	cmp	r3, #3
 80001e8:	d81e      	bhi.n	8000228 <Check_ReadRq_Validation+0x60>
 80001ea:	a201      	add	r2, pc, #4	; (adr r2, 80001f0 <Check_ReadRq_Validation+0x28>)
 80001ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f0:	08000201 	.word	0x08000201
 80001f4:	08000229 	.word	0x08000229
 80001f8:	08000229 	.word	0x08000229
 80001fc:	08000229 	.word	0x08000229
		{
			case 0: //single frame
			{
				if(DL>7)
 8000200:	79bb      	ldrb	r3, [r7, #6]
 8000202:	2b07      	cmp	r3, #7
 8000204:	d902      	bls.n	800020c <Check_ReadRq_Validation+0x44>
				{
					Resp_res = NEGATIVE_RESPONSE;
 8000206:	2301      	movs	r3, #1
 8000208:	73fb      	strb	r3, [r7, #15]
						Resp_res = NEGATIVE_RESPONSE;
					} else {
						Resp_res = POSITIVE_RESPONSE;
					}
				}
				break;
 800020a:	e00c      	b.n	8000226 <Check_ReadRq_Validation+0x5e>
					if(DL != (GetCANFrameSize(Data_buf)-1))
 800020c:	79bc      	ldrb	r4, [r7, #6]
 800020e:	6838      	ldr	r0, [r7, #0]
 8000210:	f7ff ffb2 	bl	8000178 <GetCANFrameSize>
 8000214:	4603      	mov	r3, r0
 8000216:	3b01      	subs	r3, #1
 8000218:	429c      	cmp	r4, r3
 800021a:	d002      	beq.n	8000222 <Check_ReadRq_Validation+0x5a>
						Resp_res = NEGATIVE_RESPONSE;
 800021c:	2301      	movs	r3, #1
 800021e:	73fb      	strb	r3, [r7, #15]
				break;
 8000220:	e001      	b.n	8000226 <Check_ReadRq_Validation+0x5e>
						Resp_res = POSITIVE_RESPONSE;
 8000222:	2300      	movs	r3, #0
 8000224:	73fb      	strb	r3, [r7, #15]
				break;
 8000226:	bf00      	nop
				break;
			}
		}
	}

	return Resp_res;
 8000228:	7bfb      	ldrb	r3, [r7, #15]
}
 800022a:	4618      	mov	r0, r3
 800022c:	3714      	adds	r7, #20
 800022e:	46bd      	mov	sp, r7
 8000230:	bd90      	pop	{r4, r7, pc}
 8000232:	bf00      	nop

08000234 <GetFrameType>:

uint8_t GetFrameType(uint8_t FT_byteString) //Frame type co the dung chung cho SF FF
{
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
	uint8_t FT_res;
	switch(FT_byteString)
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	2b03      	cmp	r3, #3
 8000242:	d817      	bhi.n	8000274 <GetFrameType+0x40>
 8000244:	a201      	add	r2, pc, #4	; (adr r2, 800024c <GetFrameType+0x18>)
 8000246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800024a:	bf00      	nop
 800024c:	0800025d 	.word	0x0800025d
 8000250:	08000263 	.word	0x08000263
 8000254:	08000269 	.word	0x08000269
 8000258:	0800026f 	.word	0x0800026f
	{
		case FT_SINGLEFRAME:
		{
			FT_res = 0;
 800025c:	2300      	movs	r3, #0
 800025e:	73fb      	strb	r3, [r7, #15]
			break;
 8000260:	e008      	b.n	8000274 <GetFrameType+0x40>
		}
		case FT_FIRSTFRAME:
		{
			FT_res = 1;
 8000262:	2301      	movs	r3, #1
 8000264:	73fb      	strb	r3, [r7, #15]
			break;
 8000266:	e005      	b.n	8000274 <GetFrameType+0x40>
		}
		case FT_CONSECUTIVEFRAME:
		{
			FT_res = 2;
 8000268:	2302      	movs	r3, #2
 800026a:	73fb      	strb	r3, [r7, #15]
			break;
 800026c:	e002      	b.n	8000274 <GetFrameType+0x40>
		}
		case FT_FLOWCONTROL:
		{
			FT_res = 3;
 800026e:	2303      	movs	r3, #3
 8000270:	73fb      	strb	r3, [r7, #15]
			break;
 8000272:	bf00      	nop
		}
	}
	return FT_res;
 8000274:	7bfb      	ldrb	r3, [r7, #15]
}
 8000276:	4618      	mov	r0, r3
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr

08000280 <GetDataLength>:

uint8_t GetDataLength(uint8_t DL_byteString) //Get datalength - co the trong tuong lai cai nay se dung chung duoc
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
	uint8_t DL_res;
	switch(DL_byteString)
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	2b70      	cmp	r3, #112	; 0x70
 800028e:	d02f      	beq.n	80002f0 <GetDataLength+0x70>
 8000290:	2b70      	cmp	r3, #112	; 0x70
 8000292:	dc30      	bgt.n	80002f6 <GetDataLength+0x76>
 8000294:	2b60      	cmp	r3, #96	; 0x60
 8000296:	d028      	beq.n	80002ea <GetDataLength+0x6a>
 8000298:	2b60      	cmp	r3, #96	; 0x60
 800029a:	dc2c      	bgt.n	80002f6 <GetDataLength+0x76>
 800029c:	2b50      	cmp	r3, #80	; 0x50
 800029e:	d021      	beq.n	80002e4 <GetDataLength+0x64>
 80002a0:	2b50      	cmp	r3, #80	; 0x50
 80002a2:	dc28      	bgt.n	80002f6 <GetDataLength+0x76>
 80002a4:	2b40      	cmp	r3, #64	; 0x40
 80002a6:	d01a      	beq.n	80002de <GetDataLength+0x5e>
 80002a8:	2b40      	cmp	r3, #64	; 0x40
 80002aa:	dc24      	bgt.n	80002f6 <GetDataLength+0x76>
 80002ac:	2b30      	cmp	r3, #48	; 0x30
 80002ae:	d013      	beq.n	80002d8 <GetDataLength+0x58>
 80002b0:	2b30      	cmp	r3, #48	; 0x30
 80002b2:	dc20      	bgt.n	80002f6 <GetDataLength+0x76>
 80002b4:	2b20      	cmp	r3, #32
 80002b6:	d00c      	beq.n	80002d2 <GetDataLength+0x52>
 80002b8:	2b20      	cmp	r3, #32
 80002ba:	dc1c      	bgt.n	80002f6 <GetDataLength+0x76>
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d002      	beq.n	80002c6 <GetDataLength+0x46>
 80002c0:	2b10      	cmp	r3, #16
 80002c2:	d003      	beq.n	80002cc <GetDataLength+0x4c>
 80002c4:	e017      	b.n	80002f6 <GetDataLength+0x76>
	{
		case DL_NONE_DATABYTE:
		{
			DL_res = 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	73fb      	strb	r3, [r7, #15]
			break;
 80002ca:	e014      	b.n	80002f6 <GetDataLength+0x76>
		}
		case DL_1_DATABYTE:
		{
			DL_res = 1;
 80002cc:	2301      	movs	r3, #1
 80002ce:	73fb      	strb	r3, [r7, #15]
			break;
 80002d0:	e011      	b.n	80002f6 <GetDataLength+0x76>
		}
		case DL_2_DATABYTE:
		{
			DL_res = 2;
 80002d2:	2302      	movs	r3, #2
 80002d4:	73fb      	strb	r3, [r7, #15]
			break;
 80002d6:	e00e      	b.n	80002f6 <GetDataLength+0x76>
		}
		case DL_3_DATABYTE:
		{
			DL_res = 3;
 80002d8:	2303      	movs	r3, #3
 80002da:	73fb      	strb	r3, [r7, #15]
			break;
 80002dc:	e00b      	b.n	80002f6 <GetDataLength+0x76>
		}
		case DL_4_DATABYTE:
		{
			DL_res = 4;
 80002de:	2304      	movs	r3, #4
 80002e0:	73fb      	strb	r3, [r7, #15]
			break;
 80002e2:	e008      	b.n	80002f6 <GetDataLength+0x76>
		}
		case DL_5_DATABYTE:
		{
			DL_res = 5;
 80002e4:	2305      	movs	r3, #5
 80002e6:	73fb      	strb	r3, [r7, #15]
			break;
 80002e8:	e005      	b.n	80002f6 <GetDataLength+0x76>
		}
		case  DL_6_DATABYTE:
		{
			DL_res = 6;
 80002ea:	2306      	movs	r3, #6
 80002ec:	73fb      	strb	r3, [r7, #15]
			break;
 80002ee:	e002      	b.n	80002f6 <GetDataLength+0x76>
		}
		case DL_7_DATABYTE:
		{
			DL_res = 7;
 80002f0:	2307      	movs	r3, #7
 80002f2:	73fb      	strb	r3, [r7, #15]
			break;
 80002f4:	bf00      	nop
		}
	}
	return DL_res;
 80002f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	3714      	adds	r7, #20
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr

08000302 <SF_N_PCI_FrameTypeHandle>:

uint8_t SF_N_PCI_FrameTypeHandle(uint8_t byteString) //SF_PCI: Single Frame Protocol Control Info: FT + DL
{
 8000302:	b480      	push	{r7}
 8000304:	b083      	sub	sp, #12
 8000306:	af00      	add	r7, sp, #0
 8000308:	4603      	mov	r3, r0
 800030a:	71fb      	strb	r3, [r7, #7]
	return (byteString >> 4) & 0x03;
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	091b      	lsrs	r3, r3, #4
 8000310:	b2db      	uxtb	r3, r3
 8000312:	f003 0303 	and.w	r3, r3, #3
 8000316:	b2db      	uxtb	r3, r3
}
 8000318:	4618      	mov	r0, r3
 800031a:	370c      	adds	r7, #12
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr

08000322 <SF_N_PCI_DataLenngthHandle>:

uint8_t SF_N_PCI_DataLenngthHandle(uint8_t byteString) //SF_PCI: Single Frame Protocol Control Info: FT + DL
{
 8000322:	b480      	push	{r7}
 8000324:	b083      	sub	sp, #12
 8000326:	af00      	add	r7, sp, #0
 8000328:	4603      	mov	r3, r0
 800032a:	71fb      	strb	r3, [r7, #7]
	return (byteString << 4) & 0x70;
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	011b      	lsls	r3, r3, #4
 8000330:	b2db      	uxtb	r3, r3
 8000332:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000336:	b2db      	uxtb	r3, r3
}
 8000338:	4618      	mov	r0, r3
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
	...

08000344 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &ReadRsp_RxHeader, ReadRsp_RxData) != HAL_OK)
 800034c:	4b09      	ldr	r3, [pc, #36]	; (8000374 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 800034e:	4a0a      	ldr	r2, [pc, #40]	; (8000378 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 8000350:	2101      	movs	r1, #1
 8000352:	6878      	ldr	r0, [r7, #4]
 8000354:	f000 fea9 	bl	80010aa <HAL_CAN_GetRxMessage>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d002      	beq.n	8000364 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>
	{
		Error_Handler();
 800035e:	f000 f9ff 	bl	8000760 <Error_Handler>
	}
	else
	{
		ReadRq_flag = 1;
	}
}
 8000362:	e002      	b.n	800036a <HAL_CAN_RxFifo1MsgPendingCallback+0x26>
		ReadRq_flag = 1;
 8000364:	4b05      	ldr	r3, [pc, #20]	; (800037c <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 8000366:	2201      	movs	r2, #1
 8000368:	701a      	strb	r2, [r3, #0]
}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	200000e0 	.word	0x200000e0
 8000378:	200000b8 	.word	0x200000b8
 800037c:	200000f0 	.word	0x200000f0

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b08c      	sub	sp, #48	; 0x30
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000386:	f000 fb33 	bl	80009f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800038a:	f000 f8f5 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038e:	f000 f99b 	bl	80006c8 <MX_GPIO_Init>
  MX_CAN_Init();
 8000392:	f000 f937 	bl	8000604 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000396:	f000 f96d 	bl	8000674 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Init(&hcan);
 800039a:	4868      	ldr	r0, [pc, #416]	; (800053c <main+0x1bc>)
 800039c:	f000 fbae 	bl	8000afc <HAL_CAN_Init>

  //Send notify signal to recieve message from actuator node
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 80003a0:	2110      	movs	r1, #16
 80003a2:	4866      	ldr	r0, [pc, #408]	; (800053c <main+0x1bc>)
 80003a4:	f000 ffa2 	bl	80012ec <HAL_CAN_ActivateNotification>

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80003a8:	2301      	movs	r3, #1
 80003aa:	62bb      	str	r3, [r7, #40]	; 0x28
  canfilterconfig.FilterBank = 2;  // anything between 0 to SlaveStartFilterBank
 80003ac:	2302      	movs	r3, #2
 80003ae:	61fb      	str	r3, [r7, #28]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 80003b0:	2301      	movs	r3, #1
 80003b2:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterIdHigh = 0x712 << 5;
 80003b4:	f24e 2340 	movw	r3, #57920	; 0xe240
 80003b8:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterIdLow = 0x0000;
 80003ba:	2300      	movs	r3, #0
 80003bc:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMaskIdHigh = 0x712 << 5;
 80003be:	f24e 2340 	movw	r3, #57920	; 0xe240
 80003c2:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80003c8:	2300      	movs	r3, #0
 80003ca:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80003cc:	2301      	movs	r3, #1
 80003ce:	627b      	str	r3, [r7, #36]	; 0x24
  //canfilterconfig.SlaveStartFilterBank = 14;

   HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80003d0:	f107 0308 	add.w	r3, r7, #8
 80003d4:	4619      	mov	r1, r3
 80003d6:	4859      	ldr	r0, [pc, #356]	; (800053c <main+0x1bc>)
 80003d8:	f000 fc8b 	bl	8000cf2 <HAL_CAN_ConfigFilter>

   HAL_CAN_Start(&hcan);
 80003dc:	4857      	ldr	r0, [pc, #348]	; (800053c <main+0x1bc>)
 80003de:	f000 fd51 	bl	8000e84 <HAL_CAN_Start>

   //Tx ECU header general
   //Config CAN Tx header
   ReadRsp_TxHeader.DLC = 8;
 80003e2:	4b57      	ldr	r3, [pc, #348]	; (8000540 <main+0x1c0>)
 80003e4:	2208      	movs	r2, #8
 80003e6:	611a      	str	r2, [r3, #16]
   ReadRsp_TxHeader.ExtId = 0;
 80003e8:	4b55      	ldr	r3, [pc, #340]	; (8000540 <main+0x1c0>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	605a      	str	r2, [r3, #4]
   ReadRsp_TxHeader.IDE = CAN_ID_STD;
 80003ee:	4b54      	ldr	r3, [pc, #336]	; (8000540 <main+0x1c0>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
   ReadRsp_TxHeader.RTR = CAN_RTR_DATA;
 80003f4:	4b52      	ldr	r3, [pc, #328]	; (8000540 <main+0x1c0>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
   ReadRsp_TxHeader.StdId = 0x7A2;
 80003fa:	4b51      	ldr	r3, [pc, #324]	; (8000540 <main+0x1c0>)
 80003fc:	f240 72a2 	movw	r2, #1954	; 0x7a2
 8000400:	601a      	str	r2, [r3, #0]
   ReadRsp_TxHeader.TransmitGlobalTime = DISABLE;
 8000402:	4b4f      	ldr	r3, [pc, #316]	; (8000540 <main+0x1c0>)
 8000404:	2200      	movs	r2, #0
 8000406:	751a      	strb	r2, [r3, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 HAL_Delay(1000);
 8000408:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800040c:	f000 fb52 	bl	8000ab4 <HAL_Delay>
	 if(ReadRq_flag) //nhan duoc yeu cau doc
 8000410:	4b4c      	ldr	r3, [pc, #304]	; (8000544 <main+0x1c4>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d0f7      	beq.n	8000408 <main+0x88>
	 {
		 //tien hanh gui tra lai du lieu theo yeu cau muon doc
		 //b1: Phan tich request
		 //b2: Gui tra lai
		 FT_String = SF_N_PCI_FrameTypeHandle(ReadRsp_RxData[0]);
 8000418:	4b4b      	ldr	r3, [pc, #300]	; (8000548 <main+0x1c8>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff ff70 	bl	8000302 <SF_N_PCI_FrameTypeHandle>
 8000422:	4603      	mov	r3, r0
 8000424:	461a      	mov	r2, r3
 8000426:	4b49      	ldr	r3, [pc, #292]	; (800054c <main+0x1cc>)
 8000428:	701a      	strb	r2, [r3, #0]
		 DL_String = SF_N_PCI_DataLenngthHandle(ReadRsp_RxData[0]);
 800042a:	4b47      	ldr	r3, [pc, #284]	; (8000548 <main+0x1c8>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff ff77 	bl	8000322 <SF_N_PCI_DataLenngthHandle>
 8000434:	4603      	mov	r3, r0
 8000436:	461a      	mov	r2, r3
 8000438:	4b45      	ldr	r3, [pc, #276]	; (8000550 <main+0x1d0>)
 800043a:	701a      	strb	r2, [r3, #0]

		 FrameType = GetFrameType(FT_String);
 800043c:	4b43      	ldr	r3, [pc, #268]	; (800054c <main+0x1cc>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff fef7 	bl	8000234 <GetFrameType>
 8000446:	4603      	mov	r3, r0
 8000448:	461a      	mov	r2, r3
 800044a:	4b42      	ldr	r3, [pc, #264]	; (8000554 <main+0x1d4>)
 800044c:	701a      	strb	r2, [r3, #0]
		 DataLength = GetDataLength(DL_String);
 800044e:	4b40      	ldr	r3, [pc, #256]	; (8000550 <main+0x1d0>)
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff ff14 	bl	8000280 <GetDataLength>
 8000458:	4603      	mov	r3, r0
 800045a:	461a      	mov	r2, r3
 800045c:	4b3e      	ldr	r3, [pc, #248]	; (8000558 <main+0x1d8>)
 800045e:	701a      	strb	r2, [r3, #0]

		 if(Check_ReadRq_Validation(FrameType,DataLength, ReadRsp_RxData) != POSITIVE_RESPONSE)
 8000460:	4b3c      	ldr	r3, [pc, #240]	; (8000554 <main+0x1d4>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	4a3c      	ldr	r2, [pc, #240]	; (8000558 <main+0x1d8>)
 8000466:	7811      	ldrb	r1, [r2, #0]
 8000468:	4a37      	ldr	r2, [pc, #220]	; (8000548 <main+0x1c8>)
 800046a:	4618      	mov	r0, r3
 800046c:	f7ff feac 	bl	80001c8 <Check_ReadRq_Validation>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d010      	beq.n	8000498 <main+0x118>
		 {
			 //transmit negative response CAN frame packet
			 if (HAL_CAN_AddTxMessage(&hcan, &ReadRsp_TxHeader,NegativeReadRsp_TxData,&ReadRspTxMailbox) != HAL_OK)
 8000476:	4b39      	ldr	r3, [pc, #228]	; (800055c <main+0x1dc>)
 8000478:	4a39      	ldr	r2, [pc, #228]	; (8000560 <main+0x1e0>)
 800047a:	4931      	ldr	r1, [pc, #196]	; (8000540 <main+0x1c0>)
 800047c:	482f      	ldr	r0, [pc, #188]	; (800053c <main+0x1bc>)
 800047e:	f000 fd45 	bl	8000f0c <HAL_CAN_AddTxMessage>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d003      	beq.n	8000490 <main+0x110>
			{
				error_flag = 1;
 8000488:	4b36      	ldr	r3, [pc, #216]	; (8000564 <main+0x1e4>)
 800048a:	2201      	movs	r2, #1
 800048c:	701a      	strb	r2, [r3, #0]
 800048e:	e7bb      	b.n	8000408 <main+0x88>
			} else //Transmit oke
			{
				//do nothing - if else block for debugging
				error_flag = 0;
 8000490:	4b34      	ldr	r3, [pc, #208]	; (8000564 <main+0x1e4>)
 8000492:	2200      	movs	r2, #0
 8000494:	701a      	strb	r2, [r3, #0]
 8000496:	e7b7      	b.n	8000408 <main+0x88>
			 //Step 1: Kiem tra DID tuong ung voi gi
			 //Step 2: Kiem tra data can doc co lon hon 7 khong
			 //Step 3.1 (Lon hon 7): Tien hanh gui first frame
			 //Step 3.2 (Be hon hoac bang 7) Tien hanh gui single frame

			 DID_Val = GetDID(ReadRsp_RxData[2], ReadRsp_RxData[3]);
 8000498:	4b2b      	ldr	r3, [pc, #172]	; (8000548 <main+0x1c8>)
 800049a:	789b      	ldrb	r3, [r3, #2]
 800049c:	4a2a      	ldr	r2, [pc, #168]	; (8000548 <main+0x1c8>)
 800049e:	78d2      	ldrb	r2, [r2, #3]
 80004a0:	4611      	mov	r1, r2
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff fe52 	bl	800014c <GetDID>
 80004a8:	4603      	mov	r3, r0
 80004aa:	461a      	mov	r2, r3
 80004ac:	4b2e      	ldr	r3, [pc, #184]	; (8000568 <main+0x1e8>)
 80004ae:	801a      	strh	r2, [r3, #0]
			 switch(DID_Val)
 80004b0:	4b2d      	ldr	r3, [pc, #180]	; (8000568 <main+0x1e8>)
 80004b2:	881b      	ldrh	r3, [r3, #0]
 80004b4:	461a      	mov	r2, r3
 80004b6:	f240 1323 	movw	r3, #291	; 0x123
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d1a4      	bne.n	8000408 <main+0x88>
			 {
			 	case 0x0123:
			 	{
			 		//uint8_t DataBuffer[] = ECU_MANUFACTURER_NAME;
			 		uint8_t DataBuffer[] = TEST_LABEL;
 80004be:	4a2b      	ldr	r2, [pc, #172]	; (800056c <main+0x1ec>)
 80004c0:	463b      	mov	r3, r7
 80004c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004c6:	6018      	str	r0, [r3, #0]
 80004c8:	3304      	adds	r3, #4
 80004ca:	7019      	strb	r1, [r3, #0]
			 			}

			 			//dieu kien
			 		} else {
			 			//gan 2 byte dau
			 			PositiveReadRsp_TxData[0] = 0x62;
 80004cc:	4b28      	ldr	r3, [pc, #160]	; (8000570 <main+0x1f0>)
 80004ce:	2262      	movs	r2, #98	; 0x62
 80004d0:	701a      	strb	r2, [r3, #0]
			 			PositiveReadRsp_TxData[1] = 0x01;
 80004d2:	4b27      	ldr	r3, [pc, #156]	; (8000570 <main+0x1f0>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	705a      	strb	r2, [r3, #1]
			 			PositiveReadRsp_TxData[2] = 0x23;
 80004d8:	4b25      	ldr	r3, [pc, #148]	; (8000570 <main+0x1f0>)
 80004da:	2223      	movs	r2, #35	; 0x23
 80004dc:	709a      	strb	r2, [r3, #2]
			 			PositiveReadRsp_TxData[3] = 0x04; //du lieu data co do dai la 4 - TEST
 80004de:	4b24      	ldr	r3, [pc, #144]	; (8000570 <main+0x1f0>)
 80004e0:	2204      	movs	r2, #4
 80004e2:	70da      	strb	r2, [r3, #3]
			 			for (index_array = 0;index_array<sizeof(DataBuffer);index_array++)
 80004e4:	4b23      	ldr	r3, [pc, #140]	; (8000574 <main+0x1f4>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	701a      	strb	r2, [r3, #0]
 80004ea:	e011      	b.n	8000510 <main+0x190>
			 			{
			 				PositiveReadRsp_TxData[index_array+4] = DataBuffer[index_array];
 80004ec:	4b21      	ldr	r3, [pc, #132]	; (8000574 <main+0x1f4>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	461a      	mov	r2, r3
 80004f2:	4b20      	ldr	r3, [pc, #128]	; (8000574 <main+0x1f4>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	3304      	adds	r3, #4
 80004f8:	3230      	adds	r2, #48	; 0x30
 80004fa:	443a      	add	r2, r7
 80004fc:	f812 1c30 	ldrb.w	r1, [r2, #-48]
 8000500:	4a1b      	ldr	r2, [pc, #108]	; (8000570 <main+0x1f0>)
 8000502:	54d1      	strb	r1, [r2, r3]
			 			for (index_array = 0;index_array<sizeof(DataBuffer);index_array++)
 8000504:	4b1b      	ldr	r3, [pc, #108]	; (8000574 <main+0x1f4>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	3301      	adds	r3, #1
 800050a:	b2da      	uxtb	r2, r3
 800050c:	4b19      	ldr	r3, [pc, #100]	; (8000574 <main+0x1f4>)
 800050e:	701a      	strb	r2, [r3, #0]
 8000510:	4b18      	ldr	r3, [pc, #96]	; (8000574 <main+0x1f4>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b04      	cmp	r3, #4
 8000516:	d9e9      	bls.n	80004ec <main+0x16c>
			 			}
			 			//gui single frame - chua toan bo du lieu
			 			if (HAL_CAN_AddTxMessage(&hcan, &ReadRsp_TxHeader,PositiveReadRsp_TxData,&ReadRspTxMailbox) != HAL_OK)
 8000518:	4b10      	ldr	r3, [pc, #64]	; (800055c <main+0x1dc>)
 800051a:	4a15      	ldr	r2, [pc, #84]	; (8000570 <main+0x1f0>)
 800051c:	4908      	ldr	r1, [pc, #32]	; (8000540 <main+0x1c0>)
 800051e:	4807      	ldr	r0, [pc, #28]	; (800053c <main+0x1bc>)
 8000520:	f000 fcf4 	bl	8000f0c <HAL_CAN_AddTxMessage>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d003      	beq.n	8000532 <main+0x1b2>
			 			{
			 				error_flag = 1;
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <main+0x1e4>)
 800052c:	2201      	movs	r2, #1
 800052e:	701a      	strb	r2, [r3, #0]
			 				error_flag = 0;
			 			}
			 		}
			 		//dung xong thi free - tam thoi bo qua
			 		//note: khi nao optimize code thi chuyen mang sang manng dong roi free mang
			 		break;
 8000530:	e002      	b.n	8000538 <main+0x1b8>
			 				error_flag = 0;
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <main+0x1e4>)
 8000534:	2200      	movs	r2, #0
 8000536:	701a      	strb	r2, [r3, #0]
			 		break;
 8000538:	bf00      	nop
	 HAL_Delay(1000);
 800053a:	e765      	b.n	8000408 <main+0x88>
 800053c:	20000030 	.word	0x20000030
 8000540:	200000a0 	.word	0x200000a0
 8000544:	200000f0 	.word	0x200000f0
 8000548:	200000e0 	.word	0x200000e0
 800054c:	200000e8 	.word	0x200000e8
 8000550:	200000e9 	.word	0x200000e9
 8000554:	200000ea 	.word	0x200000ea
 8000558:	200000eb 	.word	0x200000eb
 800055c:	200000d4 	.word	0x200000d4
 8000560:	20000000 	.word	0x20000000
 8000564:	200000ef 	.word	0x200000ef
 8000568:	200000ec 	.word	0x200000ec
 800056c:	08003128 	.word	0x08003128
 8000570:	200000d8 	.word	0x200000d8
 8000574:	200000ee 	.word	0x200000ee

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b090      	sub	sp, #64	; 0x40
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0318 	add.w	r3, r7, #24
 8000582:	2228      	movs	r2, #40	; 0x28
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f002 fd96 	bl	80030b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059a:	2301      	movs	r3, #1
 800059c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ac:	2302      	movs	r3, #2
 80005ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0318 	add.w	r3, r7, #24
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 fc37 	bl	8001e34 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005cc:	f000 f8c8 	bl	8000760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d4:	2302      	movs	r3, #2
 80005d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2102      	movs	r1, #2
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 fea4 	bl	8002338 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005f6:	f000 f8b3 	bl	8000760 <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3740      	adds	r7, #64	; 0x40
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000608:	4b18      	ldr	r3, [pc, #96]	; (800066c <MX_CAN_Init+0x68>)
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <MX_CAN_Init+0x6c>)
 800060c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800060e:	4b17      	ldr	r3, [pc, #92]	; (800066c <MX_CAN_Init+0x68>)
 8000610:	2204      	movs	r2, #4
 8000612:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <MX_CAN_Init+0x68>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800061a:	4b14      	ldr	r3, [pc, #80]	; (800066c <MX_CAN_Init+0x68>)
 800061c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000620:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000622:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_CAN_Init+0x68>)
 8000624:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000628:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <MX_CAN_Init+0x68>)
 800062c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000630:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_CAN_Init+0x68>)
 8000634:	2200      	movs	r2, #0
 8000636:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_CAN_Init+0x68>)
 800063a:	2200      	movs	r2, #0
 800063c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MX_CAN_Init+0x68>)
 8000640:	2200      	movs	r2, #0
 8000642:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_CAN_Init+0x68>)
 8000646:	2201      	movs	r2, #1
 8000648:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_CAN_Init+0x68>)
 800064c:	2200      	movs	r2, #0
 800064e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_CAN_Init+0x68>)
 8000652:	2200      	movs	r2, #0
 8000654:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_CAN_Init+0x68>)
 8000658:	f000 fa50 	bl	8000afc <HAL_CAN_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000662:	f000 f87d 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000030 	.word	0x20000030
 8000670:	40006400 	.word	0x40006400

08000674 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_USART1_UART_Init+0x4c>)
 800067a:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <MX_USART1_UART_Init+0x50>)
 800067c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_USART1_UART_Init+0x4c>)
 8000680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000684:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_USART1_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <MX_USART1_UART_Init+0x4c>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MX_USART1_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_USART1_UART_Init+0x4c>)
 800069a:	220c      	movs	r2, #12
 800069c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <MX_USART1_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_USART1_UART_Init+0x4c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_USART1_UART_Init+0x4c>)
 80006ac:	f001 ffd2 	bl	8002654 <HAL_UART_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006b6:	f000 f853 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000058 	.word	0x20000058
 80006c4:	40013800 	.word	0x40013800

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006dc:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <MX_GPIO_Init+0x90>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a1d      	ldr	r2, [pc, #116]	; (8000758 <MX_GPIO_Init+0x90>)
 80006e2:	f043 0320 	orr.w	r3, r3, #32
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <MX_GPIO_Init+0x90>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f003 0320 	and.w	r3, r3, #32
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f4:	4b18      	ldr	r3, [pc, #96]	; (8000758 <MX_GPIO_Init+0x90>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a17      	ldr	r2, [pc, #92]	; (8000758 <MX_GPIO_Init+0x90>)
 80006fa:	f043 0308 	orr.w	r3, r3, #8
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_GPIO_Init+0x90>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f003 0308 	and.w	r3, r3, #8
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_GPIO_Init+0x90>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a11      	ldr	r2, [pc, #68]	; (8000758 <MX_GPIO_Init+0x90>)
 8000712:	f043 0304 	orr.w	r3, r3, #4
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_GPIO_Init+0x90>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f003 0304 	and.w	r3, r3, #4
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEPT_LED_GPIO_Port, ACCEPT_LED_Pin, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800072a:	480c      	ldr	r0, [pc, #48]	; (800075c <MX_GPIO_Init+0x94>)
 800072c:	f001 fb6a 	bl	8001e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACCEPT_LED_Pin */
  GPIO_InitStruct.Pin = ACCEPT_LED_Pin;
 8000730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000734:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800073e:	2303      	movs	r3, #3
 8000740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCEPT_LED_GPIO_Port, &GPIO_InitStruct);
 8000742:	f107 0310 	add.w	r3, r7, #16
 8000746:	4619      	mov	r1, r3
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_GPIO_Init+0x94>)
 800074a:	f001 f9d7 	bl	8001afc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800074e:	bf00      	nop
 8000750:	3720      	adds	r7, #32
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40021000 	.word	0x40021000
 800075c:	40010c00 	.word	0x40010c00

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	e7fe      	b.n	8000768 <Error_Handler+0x8>
	...

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <HAL_MspInit+0x5c>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	4a14      	ldr	r2, [pc, #80]	; (80007c8 <HAL_MspInit+0x5c>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6193      	str	r3, [r2, #24]
 800077e:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <HAL_MspInit+0x5c>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <HAL_MspInit+0x5c>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <HAL_MspInit+0x5c>)
 8000790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000794:	61d3      	str	r3, [r2, #28]
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <HAL_MspInit+0x5c>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007a2:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <HAL_MspInit+0x60>)
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	4a04      	ldr	r2, [pc, #16]	; (80007cc <HAL_MspInit+0x60>)
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007be:	bf00      	nop
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40010000 	.word	0x40010000

080007d0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a20      	ldr	r2, [pc, #128]	; (800086c <HAL_CAN_MspInit+0x9c>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d139      	bne.n	8000864 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007f0:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <HAL_CAN_MspInit+0xa0>)
 80007f2:	69db      	ldr	r3, [r3, #28]
 80007f4:	4a1e      	ldr	r2, [pc, #120]	; (8000870 <HAL_CAN_MspInit+0xa0>)
 80007f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007fa:	61d3      	str	r3, [r2, #28]
 80007fc:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <HAL_CAN_MspInit+0xa0>)
 80007fe:	69db      	ldr	r3, [r3, #28]
 8000800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000808:	4b19      	ldr	r3, [pc, #100]	; (8000870 <HAL_CAN_MspInit+0xa0>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a18      	ldr	r2, [pc, #96]	; (8000870 <HAL_CAN_MspInit+0xa0>)
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <HAL_CAN_MspInit+0xa0>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f003 0304 	and.w	r3, r3, #4
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000820:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000824:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	f107 0310 	add.w	r3, r7, #16
 8000832:	4619      	mov	r1, r3
 8000834:	480f      	ldr	r0, [pc, #60]	; (8000874 <HAL_CAN_MspInit+0xa4>)
 8000836:	f001 f961 	bl	8001afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800083a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	4619      	mov	r1, r3
 800084e:	4809      	ldr	r0, [pc, #36]	; (8000874 <HAL_CAN_MspInit+0xa4>)
 8000850:	f001 f954 	bl	8001afc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2100      	movs	r1, #0
 8000858:	2015      	movs	r0, #21
 800085a:	f001 f866 	bl	800192a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800085e:	2015      	movs	r0, #21
 8000860:	f001 f87f 	bl	8001962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000864:	bf00      	nop
 8000866:	3720      	adds	r7, #32
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40006400 	.word	0x40006400
 8000870:	40021000 	.word	0x40021000
 8000874:	40010800 	.word	0x40010800

08000878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a20      	ldr	r2, [pc, #128]	; (8000914 <HAL_UART_MspInit+0x9c>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d139      	bne.n	800090c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <HAL_UART_MspInit+0xa0>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a1e      	ldr	r2, [pc, #120]	; (8000918 <HAL_UART_MspInit+0xa0>)
 800089e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <HAL_UART_MspInit+0xa0>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b0:	4b19      	ldr	r3, [pc, #100]	; (8000918 <HAL_UART_MspInit+0xa0>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a18      	ldr	r2, [pc, #96]	; (8000918 <HAL_UART_MspInit+0xa0>)
 80008b6:	f043 0304 	orr.w	r3, r3, #4
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b16      	ldr	r3, [pc, #88]	; (8000918 <HAL_UART_MspInit+0xa0>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f003 0304 	and.w	r3, r3, #4
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 0310 	add.w	r3, r7, #16
 80008da:	4619      	mov	r1, r3
 80008dc:	480f      	ldr	r0, [pc, #60]	; (800091c <HAL_UART_MspInit+0xa4>)
 80008de:	f001 f90d 	bl	8001afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	4619      	mov	r1, r3
 80008f6:	4809      	ldr	r0, [pc, #36]	; (800091c <HAL_UART_MspInit+0xa4>)
 80008f8:	f001 f900 	bl	8001afc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2100      	movs	r1, #0
 8000900:	2025      	movs	r0, #37	; 0x25
 8000902:	f001 f812 	bl	800192a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000906:	2025      	movs	r0, #37	; 0x25
 8000908:	f001 f82b 	bl	8001962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800090c:	bf00      	nop
 800090e:	3720      	adds	r7, #32
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40013800 	.word	0x40013800
 8000918:	40021000 	.word	0x40021000
 800091c:	40010800 	.word	0x40010800

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <NMI_Handler+0x4>

08000926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <HardFault_Handler+0x4>

0800092c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <MemManage_Handler+0x4>

08000932 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <BusFault_Handler+0x4>

08000938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <UsageFault_Handler+0x4>

0800093e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr

0800094a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr

08000956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr

08000962 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000966:	f000 f889 	bl	8000a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <CAN1_RX1_IRQHandler+0x10>)
 8000976:	f000 fcde 	bl	8001336 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000030 	.word	0x20000030

08000984 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000988:	4802      	ldr	r0, [pc, #8]	; (8000994 <USART1_IRQHandler+0x10>)
 800098a:	f001 feb3 	bl	80026f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000058 	.word	0x20000058

08000998 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009a4:	f7ff fff8 	bl	8000998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a8:	480b      	ldr	r0, [pc, #44]	; (80009d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009aa:	490c      	ldr	r1, [pc, #48]	; (80009dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009ac:	4a0c      	ldr	r2, [pc, #48]	; (80009e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b0:	e002      	b.n	80009b8 <LoopCopyDataInit>

080009b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b6:	3304      	adds	r3, #4

080009b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009bc:	d3f9      	bcc.n	80009b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009be:	4a09      	ldr	r2, [pc, #36]	; (80009e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009c0:	4c09      	ldr	r4, [pc, #36]	; (80009e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c4:	e001      	b.n	80009ca <LoopFillZerobss>

080009c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c8:	3204      	adds	r2, #4

080009ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009cc:	d3fb      	bcc.n	80009c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ce:	f002 fb7b 	bl	80030c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009d2:	f7ff fcd5 	bl	8000380 <main>
  bx lr
 80009d6:	4770      	bx	lr
  ldr r0, =_sdata
 80009d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009dc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80009e0:	08003164 	.word	0x08003164
  ldr r2, =_sbss
 80009e4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80009e8:	200000f8 	.word	0x200000f8

080009ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009ec:	e7fe      	b.n	80009ec <ADC1_2_IRQHandler>
	...

080009f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <HAL_Init+0x28>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <HAL_Init+0x28>)
 80009fa:	f043 0310 	orr.w	r3, r3, #16
 80009fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a00:	2003      	movs	r0, #3
 8000a02:	f000 ff87 	bl	8001914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a06:	200f      	movs	r0, #15
 8000a08:	f000 f808 	bl	8000a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a0c:	f7ff feae 	bl	800076c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40022000 	.word	0x40022000

08000a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <HAL_InitTick+0x54>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <HAL_InitTick+0x58>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 ff9f 	bl	800197e <HAL_SYSTICK_Config>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e00e      	b.n	8000a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b0f      	cmp	r3, #15
 8000a4e:	d80a      	bhi.n	8000a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a50:	2200      	movs	r2, #0
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295
 8000a58:	f000 ff67 	bl	800192a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a5c:	4a06      	ldr	r2, [pc, #24]	; (8000a78 <HAL_InitTick+0x5c>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a62:	2300      	movs	r3, #0
 8000a64:	e000      	b.n	8000a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000008 	.word	0x20000008
 8000a74:	20000010 	.word	0x20000010
 8000a78:	2000000c 	.word	0x2000000c

08000a7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_IncTick+0x1c>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_IncTick+0x20>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	4a03      	ldr	r2, [pc, #12]	; (8000a9c <HAL_IncTick+0x20>)
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	20000010 	.word	0x20000010
 8000a9c:	200000f4 	.word	0x200000f4

08000aa0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa4:	4b02      	ldr	r3, [pc, #8]	; (8000ab0 <HAL_GetTick+0x10>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	200000f4 	.word	0x200000f4

08000ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000abc:	f7ff fff0 	bl	8000aa0 <HAL_GetTick>
 8000ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000acc:	d005      	beq.n	8000ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <HAL_Delay+0x44>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ada:	bf00      	nop
 8000adc:	f7ff ffe0 	bl	8000aa0 <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d8f7      	bhi.n	8000adc <HAL_Delay+0x28>
  {
  }
}
 8000aec:	bf00      	nop
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000010 	.word	0x20000010

08000afc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d101      	bne.n	8000b0e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e0ed      	b.n	8000cea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d102      	bne.n	8000b20 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff fe58 	bl	80007d0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f042 0201 	orr.w	r2, r2, #1
 8000b2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b30:	f7ff ffb6 	bl	8000aa0 <HAL_GetTick>
 8000b34:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b36:	e012      	b.n	8000b5e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b38:	f7ff ffb2 	bl	8000aa0 <HAL_GetTick>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	2b0a      	cmp	r3, #10
 8000b44:	d90b      	bls.n	8000b5e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2205      	movs	r2, #5
 8000b56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e0c5      	b.n	8000cea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d0e5      	beq.n	8000b38 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f022 0202 	bic.w	r2, r2, #2
 8000b7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b7c:	f7ff ff90 	bl	8000aa0 <HAL_GetTick>
 8000b80:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b82:	e012      	b.n	8000baa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b84:	f7ff ff8c 	bl	8000aa0 <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	2b0a      	cmp	r3, #10
 8000b90:	d90b      	bls.n	8000baa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2205      	movs	r2, #5
 8000ba2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e09f      	b.n	8000cea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d1e5      	bne.n	8000b84 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	7e1b      	ldrb	r3, [r3, #24]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d108      	bne.n	8000bd2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	e007      	b.n	8000be2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000be0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	7e5b      	ldrb	r3, [r3, #25]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d108      	bne.n	8000bfc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	e007      	b.n	8000c0c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	7e9b      	ldrb	r3, [r3, #26]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d108      	bne.n	8000c26 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f042 0220 	orr.w	r2, r2, #32
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	e007      	b.n	8000c36 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f022 0220 	bic.w	r2, r2, #32
 8000c34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	7edb      	ldrb	r3, [r3, #27]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d108      	bne.n	8000c50 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f022 0210 	bic.w	r2, r2, #16
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	e007      	b.n	8000c60 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f042 0210 	orr.w	r2, r2, #16
 8000c5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	7f1b      	ldrb	r3, [r3, #28]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d108      	bne.n	8000c7a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f042 0208 	orr.w	r2, r2, #8
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	e007      	b.n	8000c8a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f022 0208 	bic.w	r2, r2, #8
 8000c88:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	7f5b      	ldrb	r3, [r3, #29]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d108      	bne.n	8000ca4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f042 0204 	orr.w	r2, r2, #4
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	e007      	b.n	8000cb4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f022 0204 	bic.w	r2, r2, #4
 8000cb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	689a      	ldr	r2, [r3, #8]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	695b      	ldr	r3, [r3, #20]
 8000cc8:	ea42 0103 	orr.w	r1, r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	1e5a      	subs	r2, r3, #1
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b087      	sub	sp, #28
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
 8000cfa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d08:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d0a:	7cfb      	ldrb	r3, [r7, #19]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d003      	beq.n	8000d18 <HAL_CAN_ConfigFilter+0x26>
 8000d10:	7cfb      	ldrb	r3, [r7, #19]
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	f040 80aa 	bne.w	8000e6c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d1e:	f043 0201 	orr.w	r2, r3, #1
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	f003 031f 	and.w	r3, r3, #31
 8000d30:	2201      	movs	r2, #1
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	43db      	mvns	r3, r3
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d123      	bne.n	8000d9a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	401a      	ands	r2, r3
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d70:	683a      	ldr	r2, [r7, #0]
 8000d72:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d74:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	3248      	adds	r2, #72	; 0x48
 8000d7a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d8e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d90:	6979      	ldr	r1, [r7, #20]
 8000d92:	3348      	adds	r3, #72	; 0x48
 8000d94:	00db      	lsls	r3, r3, #3
 8000d96:	440b      	add	r3, r1
 8000d98:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d122      	bne.n	8000de8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	431a      	orrs	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dbe:	683a      	ldr	r2, [r7, #0]
 8000dc0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000dc2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	3248      	adds	r2, #72	; 0x48
 8000dc8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ddc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dde:	6979      	ldr	r1, [r7, #20]
 8000de0:	3348      	adds	r3, #72	; 0x48
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	440b      	add	r3, r1
 8000de6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d109      	bne.n	8000e04 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000e02:	e007      	b.n	8000e14 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	691b      	ldr	r3, [r3, #16]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d109      	bne.n	8000e30 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	43db      	mvns	r3, r3
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000e2e:	e007      	b.n	8000e40 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	6a1b      	ldr	r3, [r3, #32]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d107      	bne.n	8000e58 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	431a      	orrs	r2, r3
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e5e:	f023 0201 	bic.w	r2, r3, #1
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	e006      	b.n	8000e7a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
  }
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	371c      	adds	r7, #28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d12e      	bne.n	8000ef6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f022 0201 	bic.w	r2, r2, #1
 8000eae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000eb0:	f7ff fdf6 	bl	8000aa0 <HAL_GetTick>
 8000eb4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000eb6:	e012      	b.n	8000ede <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000eb8:	f7ff fdf2 	bl	8000aa0 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b0a      	cmp	r3, #10
 8000ec4:	d90b      	bls.n	8000ede <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2205      	movs	r2, #5
 8000ed6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e012      	b.n	8000f04 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1e5      	bne.n	8000eb8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e006      	b.n	8000f04 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
  }
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
 8000f18:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f20:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f2a:	7ffb      	ldrb	r3, [r7, #31]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d003      	beq.n	8000f38 <HAL_CAN_AddTxMessage+0x2c>
 8000f30:	7ffb      	ldrb	r3, [r7, #31]
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	f040 80ad 	bne.w	8001092 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d10a      	bne.n	8000f58 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d105      	bne.n	8000f58 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 8095 	beq.w	8001082 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	0e1b      	lsrs	r3, r3, #24
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000f62:	2201      	movs	r2, #1
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10d      	bne.n	8000f90 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f7e:	68f9      	ldr	r1, [r7, #12]
 8000f80:	6809      	ldr	r1, [r1, #0]
 8000f82:	431a      	orrs	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	3318      	adds	r3, #24
 8000f88:	011b      	lsls	r3, r3, #4
 8000f8a:	440b      	add	r3, r1
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	e00f      	b.n	8000fb0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f9a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fa0:	68f9      	ldr	r1, [r7, #12]
 8000fa2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000fa4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3318      	adds	r3, #24
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	440b      	add	r3, r1
 8000fae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	6819      	ldr	r1, [r3, #0]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	691a      	ldr	r2, [r3, #16]
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	3318      	adds	r3, #24
 8000fbc:	011b      	lsls	r3, r3, #4
 8000fbe:	440b      	add	r3, r1
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	7d1b      	ldrb	r3, [r3, #20]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d111      	bne.n	8000ff0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	3318      	adds	r3, #24
 8000fd4:	011b      	lsls	r3, r3, #4
 8000fd6:	4413      	add	r3, r2
 8000fd8:	3304      	adds	r3, #4
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	6811      	ldr	r1, [r2, #0]
 8000fe0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	3318      	adds	r3, #24
 8000fe8:	011b      	lsls	r3, r3, #4
 8000fea:	440b      	add	r3, r1
 8000fec:	3304      	adds	r3, #4
 8000fee:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3307      	adds	r3, #7
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	061a      	lsls	r2, r3, #24
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3306      	adds	r3, #6
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	041b      	lsls	r3, r3, #16
 8001000:	431a      	orrs	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3305      	adds	r3, #5
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	4313      	orrs	r3, r2
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	3204      	adds	r2, #4
 8001010:	7812      	ldrb	r2, [r2, #0]
 8001012:	4610      	mov	r0, r2
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	6811      	ldr	r1, [r2, #0]
 8001018:	ea43 0200 	orr.w	r2, r3, r0
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	011b      	lsls	r3, r3, #4
 8001020:	440b      	add	r3, r1
 8001022:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001026:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3303      	adds	r3, #3
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	061a      	lsls	r2, r3, #24
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3302      	adds	r3, #2
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	041b      	lsls	r3, r3, #16
 8001038:	431a      	orrs	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3301      	adds	r3, #1
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	4313      	orrs	r3, r2
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	7812      	ldrb	r2, [r2, #0]
 8001048:	4610      	mov	r0, r2
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	6811      	ldr	r1, [r2, #0]
 800104e:	ea43 0200 	orr.w	r2, r3, r0
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	011b      	lsls	r3, r3, #4
 8001056:	440b      	add	r3, r1
 8001058:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800105c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3318      	adds	r3, #24
 8001066:	011b      	lsls	r3, r3, #4
 8001068:	4413      	add	r3, r2
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	6811      	ldr	r1, [r2, #0]
 8001070:	f043 0201 	orr.w	r2, r3, #1
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	3318      	adds	r3, #24
 8001078:	011b      	lsls	r3, r3, #4
 800107a:	440b      	add	r3, r1
 800107c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e00e      	b.n	80010a0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001086:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e006      	b.n	80010a0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001096:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
  }
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3724      	adds	r7, #36	; 0x24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr

080010aa <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80010aa:	b480      	push	{r7}
 80010ac:	b087      	sub	sp, #28
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	60f8      	str	r0, [r7, #12]
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010be:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80010c0:	7dfb      	ldrb	r3, [r7, #23]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d003      	beq.n	80010ce <HAL_CAN_GetRxMessage+0x24>
 80010c6:	7dfb      	ldrb	r3, [r7, #23]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	f040 8103 	bne.w	80012d4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d10e      	bne.n	80010f2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d116      	bne.n	8001110 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e0f7      	b.n	80012e2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d107      	bne.n	8001110 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001104:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e0e8      	b.n	80012e2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	331b      	adds	r3, #27
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	4413      	add	r3, r2
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0204 	and.w	r2, r3, #4
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10c      	bne.n	8001148 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	331b      	adds	r3, #27
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	4413      	add	r3, r2
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	0d5b      	lsrs	r3, r3, #21
 800113e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	e00b      	b.n	8001160 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	331b      	adds	r3, #27
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	4413      	add	r3, r2
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	08db      	lsrs	r3, r3, #3
 8001158:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	331b      	adds	r3, #27
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	4413      	add	r3, r2
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0202 	and.w	r2, r3, #2
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	331b      	adds	r3, #27
 800117e:	011b      	lsls	r3, r3, #4
 8001180:	4413      	add	r3, r2
 8001182:	3304      	adds	r3, #4
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0308 	and.w	r3, r3, #8
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2208      	movs	r2, #8
 8001192:	611a      	str	r2, [r3, #16]
 8001194:	e00b      	b.n	80011ae <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	331b      	adds	r3, #27
 800119e:	011b      	lsls	r3, r3, #4
 80011a0:	4413      	add	r3, r2
 80011a2:	3304      	adds	r3, #4
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 020f 	and.w	r2, r3, #15
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	331b      	adds	r3, #27
 80011b6:	011b      	lsls	r3, r3, #4
 80011b8:	4413      	add	r3, r2
 80011ba:	3304      	adds	r3, #4
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	0a1b      	lsrs	r3, r3, #8
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	331b      	adds	r3, #27
 80011ce:	011b      	lsls	r3, r3, #4
 80011d0:	4413      	add	r3, r2
 80011d2:	3304      	adds	r3, #4
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	0c1b      	lsrs	r3, r3, #16
 80011d8:	b29a      	uxth	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	011b      	lsls	r3, r3, #4
 80011e6:	4413      	add	r3, r2
 80011e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	011b      	lsls	r3, r3, #4
 80011fc:	4413      	add	r3, r2
 80011fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	0a1a      	lsrs	r2, r3, #8
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	3301      	adds	r3, #1
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	011b      	lsls	r3, r3, #4
 8001216:	4413      	add	r3, r2
 8001218:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	0c1a      	lsrs	r2, r3, #16
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	3302      	adds	r3, #2
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	011b      	lsls	r3, r3, #4
 8001230:	4413      	add	r3, r2
 8001232:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	0e1a      	lsrs	r2, r3, #24
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	3303      	adds	r3, #3
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	4413      	add	r3, r2
 800124c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	3304      	adds	r3, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	011b      	lsls	r3, r3, #4
 8001262:	4413      	add	r3, r2
 8001264:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	0a1a      	lsrs	r2, r3, #8
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	3305      	adds	r3, #5
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	011b      	lsls	r3, r3, #4
 800127c:	4413      	add	r3, r2
 800127e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	0c1a      	lsrs	r2, r3, #16
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	3306      	adds	r3, #6
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	011b      	lsls	r3, r3, #4
 8001296:	4413      	add	r3, r2
 8001298:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	0e1a      	lsrs	r2, r3, #24
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	3307      	adds	r3, #7
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d108      	bne.n	80012c0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f042 0220 	orr.w	r2, r2, #32
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	e007      	b.n	80012d0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	691a      	ldr	r2, [r3, #16]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f042 0220 	orr.w	r2, r2, #32
 80012ce:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	e006      	b.n	80012e2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
  }
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	371c      	adds	r7, #28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012fc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d002      	beq.n	800130a <HAL_CAN_ActivateNotification+0x1e>
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d109      	bne.n	800131e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6959      	ldr	r1, [r3, #20]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	430a      	orrs	r2, r1
 8001318:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	e006      	b.n	800132c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001322:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
  }
}
 800132c:	4618      	mov	r0, r3
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr

08001336 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b08a      	sub	sp, #40	; 0x28
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001372:	6a3b      	ldr	r3, [r7, #32]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d07c      	beq.n	8001476 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	d023      	beq.n	80013ce <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2201      	movs	r2, #1
 800138c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f000 f983 	bl	80016a4 <HAL_CAN_TxMailbox0CompleteCallback>
 800139e:	e016      	b.n	80013ce <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d004      	beq.n	80013b4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
 80013b2:	e00c      	b.n	80013ce <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d004      	beq.n	80013c8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
 80013c6:	e002      	b.n	80013ce <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 f986 	bl	80016da <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d024      	beq.n	8001422 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 f962 	bl	80016b6 <HAL_CAN_TxMailbox1CompleteCallback>
 80013f2:	e016      	b.n	8001422 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d004      	beq.n	8001408 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
 8001406:	e00c      	b.n	8001422 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800140e:	2b00      	cmp	r3, #0
 8001410:	d004      	beq.n	800141c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
 800141a:	e002      	b.n	8001422 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 f965 	bl	80016ec <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d024      	beq.n	8001476 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001434:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 f941 	bl	80016c8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001446:	e016      	b.n	8001476 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d004      	beq.n	800145c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
 800145a:	e00c      	b.n	8001476 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d004      	beq.n	8001470 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
 800146e:	e002      	b.n	8001476 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f000 f944 	bl	80016fe <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001476:	6a3b      	ldr	r3, [r7, #32]
 8001478:	f003 0308 	and.w	r3, r3, #8
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00c      	beq.n	800149a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f003 0310 	and.w	r3, r3, #16
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001490:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2210      	movs	r2, #16
 8001498:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800149a:	6a3b      	ldr	r3, [r7, #32]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00b      	beq.n	80014bc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d006      	beq.n	80014bc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2208      	movs	r2, #8
 80014b4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 f933 	bl	8001722 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d009      	beq.n	80014da <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d002      	beq.n	80014da <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 f91b 	bl	8001710 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00c      	beq.n	80014fe <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d007      	beq.n	80014fe <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2210      	movs	r2, #16
 80014fc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80014fe:	6a3b      	ldr	r3, [r7, #32]
 8001500:	f003 0320 	and.w	r3, r3, #32
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00b      	beq.n	8001520 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b00      	cmp	r3, #0
 8001510:	d006      	beq.n	8001520 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2208      	movs	r2, #8
 8001518:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 f90a 	bl	8001734 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	f003 0310 	and.w	r3, r3, #16
 8001526:	2b00      	cmp	r3, #0
 8001528:	d009      	beq.n	800153e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7fe ff03 	bl	8000344 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800153e:	6a3b      	ldr	r3, [r7, #32]
 8001540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00b      	beq.n	8001560 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f003 0310 	and.w	r3, r3, #16
 800154e:	2b00      	cmp	r3, #0
 8001550:	d006      	beq.n	8001560 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2210      	movs	r2, #16
 8001558:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f8f3 	bl	8001746 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001560:	6a3b      	ldr	r3, [r7, #32]
 8001562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00b      	beq.n	8001582 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	2b00      	cmp	r3, #0
 8001572:	d006      	beq.n	8001582 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2208      	movs	r2, #8
 800157a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 f8eb 	bl	8001758 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001582:	6a3b      	ldr	r3, [r7, #32]
 8001584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d07b      	beq.n	8001684 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	2b00      	cmp	r3, #0
 8001594:	d072      	beq.n	800167c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d008      	beq.n	80015ce <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d008      	beq.n	80015ea <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	f043 0304 	orr.w	r3, r3, #4
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015ea:	6a3b      	ldr	r3, [r7, #32]
 80015ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d043      	beq.n	800167c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d03e      	beq.n	800167c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001604:	2b60      	cmp	r3, #96	; 0x60
 8001606:	d02b      	beq.n	8001660 <HAL_CAN_IRQHandler+0x32a>
 8001608:	2b60      	cmp	r3, #96	; 0x60
 800160a:	d82e      	bhi.n	800166a <HAL_CAN_IRQHandler+0x334>
 800160c:	2b50      	cmp	r3, #80	; 0x50
 800160e:	d022      	beq.n	8001656 <HAL_CAN_IRQHandler+0x320>
 8001610:	2b50      	cmp	r3, #80	; 0x50
 8001612:	d82a      	bhi.n	800166a <HAL_CAN_IRQHandler+0x334>
 8001614:	2b40      	cmp	r3, #64	; 0x40
 8001616:	d019      	beq.n	800164c <HAL_CAN_IRQHandler+0x316>
 8001618:	2b40      	cmp	r3, #64	; 0x40
 800161a:	d826      	bhi.n	800166a <HAL_CAN_IRQHandler+0x334>
 800161c:	2b30      	cmp	r3, #48	; 0x30
 800161e:	d010      	beq.n	8001642 <HAL_CAN_IRQHandler+0x30c>
 8001620:	2b30      	cmp	r3, #48	; 0x30
 8001622:	d822      	bhi.n	800166a <HAL_CAN_IRQHandler+0x334>
 8001624:	2b10      	cmp	r3, #16
 8001626:	d002      	beq.n	800162e <HAL_CAN_IRQHandler+0x2f8>
 8001628:	2b20      	cmp	r3, #32
 800162a:	d005      	beq.n	8001638 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800162c:	e01d      	b.n	800166a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	f043 0308 	orr.w	r3, r3, #8
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001636:	e019      	b.n	800166c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	f043 0310 	orr.w	r3, r3, #16
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001640:	e014      	b.n	800166c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	f043 0320 	orr.w	r3, r3, #32
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800164a:	e00f      	b.n	800166c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001654:	e00a      	b.n	800166c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800165e:	e005      	b.n	800166c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001668:	e000      	b.n	800166c <HAL_CAN_IRQHandler+0x336>
            break;
 800166a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	699a      	ldr	r2, [r3, #24]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800167a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2204      	movs	r2, #4
 8001682:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	2b00      	cmp	r3, #0
 8001688:	d008      	beq.n	800169c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f867 	bl	800176a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800169c:	bf00      	nop
 800169e:	3728      	adds	r7, #40	; 0x28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr

080016b6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr

080016da <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr

080016fe <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr

08001746 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr

0800176a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <__NVIC_SetPriorityGrouping+0x44>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001798:	4013      	ands	r3, r2
 800179a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ae:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <__NVIC_SetPriorityGrouping+0x44>)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	60d3      	str	r3, [r2, #12]
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <__NVIC_GetPriorityGrouping+0x18>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	f003 0307 	and.w	r3, r3, #7
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	db0b      	blt.n	800180a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	f003 021f 	and.w	r2, r3, #31
 80017f8:	4906      	ldr	r1, [pc, #24]	; (8001814 <__NVIC_EnableIRQ+0x34>)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	095b      	lsrs	r3, r3, #5
 8001800:	2001      	movs	r0, #1
 8001802:	fa00 f202 	lsl.w	r2, r0, r2
 8001806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr
 8001814:	e000e100 	.word	0xe000e100

08001818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	2b00      	cmp	r3, #0
 800182a:	db0a      	blt.n	8001842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	490c      	ldr	r1, [pc, #48]	; (8001864 <__NVIC_SetPriority+0x4c>)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	0112      	lsls	r2, r2, #4
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	440b      	add	r3, r1
 800183c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001840:	e00a      	b.n	8001858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4908      	ldr	r1, [pc, #32]	; (8001868 <__NVIC_SetPriority+0x50>)
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	3b04      	subs	r3, #4
 8001850:	0112      	lsls	r2, r2, #4
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	440b      	add	r3, r1
 8001856:	761a      	strb	r2, [r3, #24]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000e100 	.word	0xe000e100
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f1c3 0307 	rsb	r3, r3, #7
 8001886:	2b04      	cmp	r3, #4
 8001888:	bf28      	it	cs
 800188a:	2304      	movcs	r3, #4
 800188c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3304      	adds	r3, #4
 8001892:	2b06      	cmp	r3, #6
 8001894:	d902      	bls.n	800189c <NVIC_EncodePriority+0x30>
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3b03      	subs	r3, #3
 800189a:	e000      	b.n	800189e <NVIC_EncodePriority+0x32>
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	401a      	ands	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	43d9      	mvns	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	4313      	orrs	r3, r2
         );
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3724      	adds	r7, #36	; 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e0:	d301      	bcc.n	80018e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e2:	2301      	movs	r3, #1
 80018e4:	e00f      	b.n	8001906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e6:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <SysTick_Config+0x40>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ee:	210f      	movs	r1, #15
 80018f0:	f04f 30ff 	mov.w	r0, #4294967295
 80018f4:	f7ff ff90 	bl	8001818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <SysTick_Config+0x40>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fe:	4b04      	ldr	r3, [pc, #16]	; (8001910 <SysTick_Config+0x40>)
 8001900:	2207      	movs	r2, #7
 8001902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	e000e010 	.word	0xe000e010

08001914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ff2d 	bl	800177c <__NVIC_SetPriorityGrouping>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192a:	b580      	push	{r7, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800193c:	f7ff ff42 	bl	80017c4 <__NVIC_GetPriorityGrouping>
 8001940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	6978      	ldr	r0, [r7, #20]
 8001948:	f7ff ff90 	bl	800186c <NVIC_EncodePriority>
 800194c:	4602      	mov	r2, r0
 800194e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff5f 	bl	8001818 <__NVIC_SetPriority>
}
 800195a:	bf00      	nop
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff35 	bl	80017e0 <__NVIC_EnableIRQ>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ffa2 	bl	80018d0 <SysTick_Config>
 800198c:	4603      	mov	r3, r0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001996:	b480      	push	{r7}
 8001998:	b085      	sub	sp, #20
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d008      	beq.n	80019c0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2204      	movs	r2, #4
 80019b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e020      	b.n	8001a02 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 020e 	bic.w	r2, r2, #14
 80019ce:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0201 	bic.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e8:	2101      	movs	r1, #1
 80019ea:	fa01 f202 	lsl.w	r2, r1, r2
 80019ee:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d005      	beq.n	8001a30 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2204      	movs	r2, #4
 8001a28:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	73fb      	strb	r3, [r7, #15]
 8001a2e:	e051      	b.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 020e 	bic.w	r2, r2, #14
 8001a3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0201 	bic.w	r2, r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a22      	ldr	r2, [pc, #136]	; (8001ae0 <HAL_DMA_Abort_IT+0xd4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d029      	beq.n	8001aae <HAL_DMA_Abort_IT+0xa2>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a21      	ldr	r2, [pc, #132]	; (8001ae4 <HAL_DMA_Abort_IT+0xd8>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d022      	beq.n	8001aaa <HAL_DMA_Abort_IT+0x9e>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a1f      	ldr	r2, [pc, #124]	; (8001ae8 <HAL_DMA_Abort_IT+0xdc>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d01a      	beq.n	8001aa4 <HAL_DMA_Abort_IT+0x98>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a1e      	ldr	r2, [pc, #120]	; (8001aec <HAL_DMA_Abort_IT+0xe0>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d012      	beq.n	8001a9e <HAL_DMA_Abort_IT+0x92>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a1c      	ldr	r2, [pc, #112]	; (8001af0 <HAL_DMA_Abort_IT+0xe4>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00a      	beq.n	8001a98 <HAL_DMA_Abort_IT+0x8c>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a1b      	ldr	r2, [pc, #108]	; (8001af4 <HAL_DMA_Abort_IT+0xe8>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d102      	bne.n	8001a92 <HAL_DMA_Abort_IT+0x86>
 8001a8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a90:	e00e      	b.n	8001ab0 <HAL_DMA_Abort_IT+0xa4>
 8001a92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a96:	e00b      	b.n	8001ab0 <HAL_DMA_Abort_IT+0xa4>
 8001a98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a9c:	e008      	b.n	8001ab0 <HAL_DMA_Abort_IT+0xa4>
 8001a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa2:	e005      	b.n	8001ab0 <HAL_DMA_Abort_IT+0xa4>
 8001aa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aa8:	e002      	b.n	8001ab0 <HAL_DMA_Abort_IT+0xa4>
 8001aaa:	2310      	movs	r3, #16
 8001aac:	e000      	b.n	8001ab0 <HAL_DMA_Abort_IT+0xa4>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	4a11      	ldr	r2, [pc, #68]	; (8001af8 <HAL_DMA_Abort_IT+0xec>)
 8001ab2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	4798      	blx	r3
    } 
  }
  return status;
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40020008 	.word	0x40020008
 8001ae4:	4002001c 	.word	0x4002001c
 8001ae8:	40020030 	.word	0x40020030
 8001aec:	40020044 	.word	0x40020044
 8001af0:	40020058 	.word	0x40020058
 8001af4:	4002006c 	.word	0x4002006c
 8001af8:	40020000 	.word	0x40020000

08001afc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b08b      	sub	sp, #44	; 0x2c
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b06:	2300      	movs	r3, #0
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0e:	e169      	b.n	8001de4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b10:	2201      	movs	r2, #1
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	69fa      	ldr	r2, [r7, #28]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	f040 8158 	bne.w	8001dde <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4a9a      	ldr	r2, [pc, #616]	; (8001d9c <HAL_GPIO_Init+0x2a0>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d05e      	beq.n	8001bf6 <HAL_GPIO_Init+0xfa>
 8001b38:	4a98      	ldr	r2, [pc, #608]	; (8001d9c <HAL_GPIO_Init+0x2a0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d875      	bhi.n	8001c2a <HAL_GPIO_Init+0x12e>
 8001b3e:	4a98      	ldr	r2, [pc, #608]	; (8001da0 <HAL_GPIO_Init+0x2a4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d058      	beq.n	8001bf6 <HAL_GPIO_Init+0xfa>
 8001b44:	4a96      	ldr	r2, [pc, #600]	; (8001da0 <HAL_GPIO_Init+0x2a4>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d86f      	bhi.n	8001c2a <HAL_GPIO_Init+0x12e>
 8001b4a:	4a96      	ldr	r2, [pc, #600]	; (8001da4 <HAL_GPIO_Init+0x2a8>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d052      	beq.n	8001bf6 <HAL_GPIO_Init+0xfa>
 8001b50:	4a94      	ldr	r2, [pc, #592]	; (8001da4 <HAL_GPIO_Init+0x2a8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d869      	bhi.n	8001c2a <HAL_GPIO_Init+0x12e>
 8001b56:	4a94      	ldr	r2, [pc, #592]	; (8001da8 <HAL_GPIO_Init+0x2ac>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d04c      	beq.n	8001bf6 <HAL_GPIO_Init+0xfa>
 8001b5c:	4a92      	ldr	r2, [pc, #584]	; (8001da8 <HAL_GPIO_Init+0x2ac>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d863      	bhi.n	8001c2a <HAL_GPIO_Init+0x12e>
 8001b62:	4a92      	ldr	r2, [pc, #584]	; (8001dac <HAL_GPIO_Init+0x2b0>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d046      	beq.n	8001bf6 <HAL_GPIO_Init+0xfa>
 8001b68:	4a90      	ldr	r2, [pc, #576]	; (8001dac <HAL_GPIO_Init+0x2b0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d85d      	bhi.n	8001c2a <HAL_GPIO_Init+0x12e>
 8001b6e:	2b12      	cmp	r3, #18
 8001b70:	d82a      	bhi.n	8001bc8 <HAL_GPIO_Init+0xcc>
 8001b72:	2b12      	cmp	r3, #18
 8001b74:	d859      	bhi.n	8001c2a <HAL_GPIO_Init+0x12e>
 8001b76:	a201      	add	r2, pc, #4	; (adr r2, 8001b7c <HAL_GPIO_Init+0x80>)
 8001b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7c:	08001bf7 	.word	0x08001bf7
 8001b80:	08001bd1 	.word	0x08001bd1
 8001b84:	08001be3 	.word	0x08001be3
 8001b88:	08001c25 	.word	0x08001c25
 8001b8c:	08001c2b 	.word	0x08001c2b
 8001b90:	08001c2b 	.word	0x08001c2b
 8001b94:	08001c2b 	.word	0x08001c2b
 8001b98:	08001c2b 	.word	0x08001c2b
 8001b9c:	08001c2b 	.word	0x08001c2b
 8001ba0:	08001c2b 	.word	0x08001c2b
 8001ba4:	08001c2b 	.word	0x08001c2b
 8001ba8:	08001c2b 	.word	0x08001c2b
 8001bac:	08001c2b 	.word	0x08001c2b
 8001bb0:	08001c2b 	.word	0x08001c2b
 8001bb4:	08001c2b 	.word	0x08001c2b
 8001bb8:	08001c2b 	.word	0x08001c2b
 8001bbc:	08001c2b 	.word	0x08001c2b
 8001bc0:	08001bd9 	.word	0x08001bd9
 8001bc4:	08001bed 	.word	0x08001bed
 8001bc8:	4a79      	ldr	r2, [pc, #484]	; (8001db0 <HAL_GPIO_Init+0x2b4>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d013      	beq.n	8001bf6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bce:	e02c      	b.n	8001c2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	623b      	str	r3, [r7, #32]
          break;
 8001bd6:	e029      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	623b      	str	r3, [r7, #32]
          break;
 8001be0:	e024      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	3308      	adds	r3, #8
 8001be8:	623b      	str	r3, [r7, #32]
          break;
 8001bea:	e01f      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	330c      	adds	r3, #12
 8001bf2:	623b      	str	r3, [r7, #32]
          break;
 8001bf4:	e01a      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d102      	bne.n	8001c04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bfe:	2304      	movs	r3, #4
 8001c00:	623b      	str	r3, [r7, #32]
          break;
 8001c02:	e013      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d105      	bne.n	8001c18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c0c:	2308      	movs	r3, #8
 8001c0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69fa      	ldr	r2, [r7, #28]
 8001c14:	611a      	str	r2, [r3, #16]
          break;
 8001c16:	e009      	b.n	8001c2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c18:	2308      	movs	r3, #8
 8001c1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	615a      	str	r2, [r3, #20]
          break;
 8001c22:	e003      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
          break;
 8001c28:	e000      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          break;
 8001c2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	2bff      	cmp	r3, #255	; 0xff
 8001c30:	d801      	bhi.n	8001c36 <HAL_GPIO_Init+0x13a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	e001      	b.n	8001c3a <HAL_GPIO_Init+0x13e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	2bff      	cmp	r3, #255	; 0xff
 8001c40:	d802      	bhi.n	8001c48 <HAL_GPIO_Init+0x14c>
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	e002      	b.n	8001c4e <HAL_GPIO_Init+0x152>
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	3b08      	subs	r3, #8
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	210f      	movs	r1, #15
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	401a      	ands	r2, r3
 8001c60:	6a39      	ldr	r1, [r7, #32]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	fa01 f303 	lsl.w	r3, r1, r3
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 80b1 	beq.w	8001dde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c7c:	4b4d      	ldr	r3, [pc, #308]	; (8001db4 <HAL_GPIO_Init+0x2b8>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	4a4c      	ldr	r2, [pc, #304]	; (8001db4 <HAL_GPIO_Init+0x2b8>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6193      	str	r3, [r2, #24]
 8001c88:	4b4a      	ldr	r3, [pc, #296]	; (8001db4 <HAL_GPIO_Init+0x2b8>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c94:	4a48      	ldr	r2, [pc, #288]	; (8001db8 <HAL_GPIO_Init+0x2bc>)
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	220f      	movs	r2, #15
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a40      	ldr	r2, [pc, #256]	; (8001dbc <HAL_GPIO_Init+0x2c0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d013      	beq.n	8001ce8 <HAL_GPIO_Init+0x1ec>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a3f      	ldr	r2, [pc, #252]	; (8001dc0 <HAL_GPIO_Init+0x2c4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d00d      	beq.n	8001ce4 <HAL_GPIO_Init+0x1e8>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a3e      	ldr	r2, [pc, #248]	; (8001dc4 <HAL_GPIO_Init+0x2c8>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d007      	beq.n	8001ce0 <HAL_GPIO_Init+0x1e4>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a3d      	ldr	r2, [pc, #244]	; (8001dc8 <HAL_GPIO_Init+0x2cc>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d101      	bne.n	8001cdc <HAL_GPIO_Init+0x1e0>
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e006      	b.n	8001cea <HAL_GPIO_Init+0x1ee>
 8001cdc:	2304      	movs	r3, #4
 8001cde:	e004      	b.n	8001cea <HAL_GPIO_Init+0x1ee>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e002      	b.n	8001cea <HAL_GPIO_Init+0x1ee>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <HAL_GPIO_Init+0x1ee>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cec:	f002 0203 	and.w	r2, r2, #3
 8001cf0:	0092      	lsls	r2, r2, #2
 8001cf2:	4093      	lsls	r3, r2
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cfa:	492f      	ldr	r1, [pc, #188]	; (8001db8 <HAL_GPIO_Init+0x2bc>)
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	089b      	lsrs	r3, r3, #2
 8001d00:	3302      	adds	r3, #2
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d006      	beq.n	8001d22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d14:	4b2d      	ldr	r3, [pc, #180]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	492c      	ldr	r1, [pc, #176]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	608b      	str	r3, [r1, #8]
 8001d20:	e006      	b.n	8001d30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d22:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	4928      	ldr	r1, [pc, #160]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d006      	beq.n	8001d4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d3c:	4b23      	ldr	r3, [pc, #140]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	4922      	ldr	r1, [pc, #136]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	60cb      	str	r3, [r1, #12]
 8001d48:	e006      	b.n	8001d58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d4a:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	491e      	ldr	r1, [pc, #120]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d006      	beq.n	8001d72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d64:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	4918      	ldr	r1, [pc, #96]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]
 8001d70:	e006      	b.n	8001d80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d72:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	4914      	ldr	r1, [pc, #80]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d021      	beq.n	8001dd0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	490e      	ldr	r1, [pc, #56]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	600b      	str	r3, [r1, #0]
 8001d98:	e021      	b.n	8001dde <HAL_GPIO_Init+0x2e2>
 8001d9a:	bf00      	nop
 8001d9c:	10320000 	.word	0x10320000
 8001da0:	10310000 	.word	0x10310000
 8001da4:	10220000 	.word	0x10220000
 8001da8:	10210000 	.word	0x10210000
 8001dac:	10120000 	.word	0x10120000
 8001db0:	10110000 	.word	0x10110000
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40010000 	.word	0x40010000
 8001dbc:	40010800 	.word	0x40010800
 8001dc0:	40010c00 	.word	0x40010c00
 8001dc4:	40011000 	.word	0x40011000
 8001dc8:	40011400 	.word	0x40011400
 8001dcc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_GPIO_Init+0x304>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	4909      	ldr	r1, [pc, #36]	; (8001e00 <HAL_GPIO_Init+0x304>)
 8001dda:	4013      	ands	r3, r2
 8001ddc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	3301      	adds	r3, #1
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	fa22 f303 	lsr.w	r3, r2, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f47f ae8e 	bne.w	8001b10 <HAL_GPIO_Init+0x14>
  }
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	372c      	adds	r7, #44	; 0x2c
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	40010400 	.word	0x40010400

08001e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	807b      	strh	r3, [r7, #2]
 8001e10:	4613      	mov	r3, r2
 8001e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e14:	787b      	ldrb	r3, [r7, #1]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e1a:	887a      	ldrh	r2, [r7, #2]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e20:	e003      	b.n	8001e2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e22:	887b      	ldrh	r3, [r7, #2]
 8001e24:	041a      	lsls	r2, r3, #16
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	611a      	str	r2, [r3, #16]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e272      	b.n	800232c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 8087 	beq.w	8001f62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e54:	4b92      	ldr	r3, [pc, #584]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 030c 	and.w	r3, r3, #12
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d00c      	beq.n	8001e7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e60:	4b8f      	ldr	r3, [pc, #572]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 030c 	and.w	r3, r3, #12
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d112      	bne.n	8001e92 <HAL_RCC_OscConfig+0x5e>
 8001e6c:	4b8c      	ldr	r3, [pc, #560]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e78:	d10b      	bne.n	8001e92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7a:	4b89      	ldr	r3, [pc, #548]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d06c      	beq.n	8001f60 <HAL_RCC_OscConfig+0x12c>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d168      	bne.n	8001f60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e24c      	b.n	800232c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9a:	d106      	bne.n	8001eaa <HAL_RCC_OscConfig+0x76>
 8001e9c:	4b80      	ldr	r3, [pc, #512]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a7f      	ldr	r2, [pc, #508]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea6:	6013      	str	r3, [r2, #0]
 8001ea8:	e02e      	b.n	8001f08 <HAL_RCC_OscConfig+0xd4>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10c      	bne.n	8001ecc <HAL_RCC_OscConfig+0x98>
 8001eb2:	4b7b      	ldr	r3, [pc, #492]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a7a      	ldr	r2, [pc, #488]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	4b78      	ldr	r3, [pc, #480]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a77      	ldr	r2, [pc, #476]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	e01d      	b.n	8001f08 <HAL_RCC_OscConfig+0xd4>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0xbc>
 8001ed6:	4b72      	ldr	r3, [pc, #456]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a71      	ldr	r2, [pc, #452]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b6f      	ldr	r3, [pc, #444]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a6e      	ldr	r2, [pc, #440]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e00b      	b.n	8001f08 <HAL_RCC_OscConfig+0xd4>
 8001ef0:	4b6b      	ldr	r3, [pc, #428]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a6a      	ldr	r2, [pc, #424]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	4b68      	ldr	r3, [pc, #416]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a67      	ldr	r2, [pc, #412]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d013      	beq.n	8001f38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7fe fdc6 	bl	8000aa0 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f18:	f7fe fdc2 	bl	8000aa0 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b64      	cmp	r3, #100	; 0x64
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e200      	b.n	800232c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2a:	4b5d      	ldr	r3, [pc, #372]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0xe4>
 8001f36:	e014      	b.n	8001f62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7fe fdb2 	bl	8000aa0 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f40:	f7fe fdae 	bl	8000aa0 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	; 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e1ec      	b.n	800232c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f52:	4b53      	ldr	r3, [pc, #332]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f0      	bne.n	8001f40 <HAL_RCC_OscConfig+0x10c>
 8001f5e:	e000      	b.n	8001f62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d063      	beq.n	8002036 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f6e:	4b4c      	ldr	r3, [pc, #304]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00b      	beq.n	8001f92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f7a:	4b49      	ldr	r3, [pc, #292]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d11c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x18c>
 8001f86:	4b46      	ldr	r3, [pc, #280]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d116      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f92:	4b43      	ldr	r3, [pc, #268]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_RCC_OscConfig+0x176>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d001      	beq.n	8001faa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e1c0      	b.n	800232c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001faa:	4b3d      	ldr	r3, [pc, #244]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4939      	ldr	r1, [pc, #228]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fbe:	e03a      	b.n	8002036 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d020      	beq.n	800200a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc8:	4b36      	ldr	r3, [pc, #216]	; (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fce:	f7fe fd67 	bl	8000aa0 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd6:	f7fe fd63 	bl	8000aa0 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e1a1      	b.n	800232c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe8:	4b2d      	ldr	r3, [pc, #180]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff4:	4b2a      	ldr	r3, [pc, #168]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4927      	ldr	r1, [pc, #156]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8002004:	4313      	orrs	r3, r2
 8002006:	600b      	str	r3, [r1, #0]
 8002008:	e015      	b.n	8002036 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800200a:	4b26      	ldr	r3, [pc, #152]	; (80020a4 <HAL_RCC_OscConfig+0x270>)
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002010:	f7fe fd46 	bl	8000aa0 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002018:	f7fe fd42 	bl	8000aa0 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e180      	b.n	800232c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202a:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d03a      	beq.n	80020b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d019      	beq.n	800207e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800204a:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <HAL_RCC_OscConfig+0x274>)
 800204c:	2201      	movs	r2, #1
 800204e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002050:	f7fe fd26 	bl	8000aa0 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002058:	f7fe fd22 	bl	8000aa0 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e160      	b.n	800232c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002076:	2001      	movs	r0, #1
 8002078:	f000 face 	bl	8002618 <RCC_Delay>
 800207c:	e01c      	b.n	80020b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_RCC_OscConfig+0x274>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002084:	f7fe fd0c 	bl	8000aa0 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208a:	e00f      	b.n	80020ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800208c:	f7fe fd08 	bl	8000aa0 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d908      	bls.n	80020ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e146      	b.n	800232c <HAL_RCC_OscConfig+0x4f8>
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000
 80020a4:	42420000 	.word	0x42420000
 80020a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ac:	4b92      	ldr	r3, [pc, #584]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1e9      	bne.n	800208c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 80a6 	beq.w	8002212 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c6:	2300      	movs	r3, #0
 80020c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ca:	4b8b      	ldr	r3, [pc, #556]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10d      	bne.n	80020f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d6:	4b88      	ldr	r3, [pc, #544]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	4a87      	ldr	r2, [pc, #540]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e0:	61d3      	str	r3, [r2, #28]
 80020e2:	4b85      	ldr	r3, [pc, #532]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ee:	2301      	movs	r3, #1
 80020f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f2:	4b82      	ldr	r3, [pc, #520]	; (80022fc <HAL_RCC_OscConfig+0x4c8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d118      	bne.n	8002130 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020fe:	4b7f      	ldr	r3, [pc, #508]	; (80022fc <HAL_RCC_OscConfig+0x4c8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a7e      	ldr	r2, [pc, #504]	; (80022fc <HAL_RCC_OscConfig+0x4c8>)
 8002104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800210a:	f7fe fcc9 	bl	8000aa0 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002112:	f7fe fcc5 	bl	8000aa0 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b64      	cmp	r3, #100	; 0x64
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e103      	b.n	800232c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002124:	4b75      	ldr	r3, [pc, #468]	; (80022fc <HAL_RCC_OscConfig+0x4c8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d106      	bne.n	8002146 <HAL_RCC_OscConfig+0x312>
 8002138:	4b6f      	ldr	r3, [pc, #444]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	4a6e      	ldr	r2, [pc, #440]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	6213      	str	r3, [r2, #32]
 8002144:	e02d      	b.n	80021a2 <HAL_RCC_OscConfig+0x36e>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10c      	bne.n	8002168 <HAL_RCC_OscConfig+0x334>
 800214e:	4b6a      	ldr	r3, [pc, #424]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	4a69      	ldr	r2, [pc, #420]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 8002154:	f023 0301 	bic.w	r3, r3, #1
 8002158:	6213      	str	r3, [r2, #32]
 800215a:	4b67      	ldr	r3, [pc, #412]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	4a66      	ldr	r2, [pc, #408]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 8002160:	f023 0304 	bic.w	r3, r3, #4
 8002164:	6213      	str	r3, [r2, #32]
 8002166:	e01c      	b.n	80021a2 <HAL_RCC_OscConfig+0x36e>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	2b05      	cmp	r3, #5
 800216e:	d10c      	bne.n	800218a <HAL_RCC_OscConfig+0x356>
 8002170:	4b61      	ldr	r3, [pc, #388]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	4a60      	ldr	r2, [pc, #384]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 8002176:	f043 0304 	orr.w	r3, r3, #4
 800217a:	6213      	str	r3, [r2, #32]
 800217c:	4b5e      	ldr	r3, [pc, #376]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4a5d      	ldr	r2, [pc, #372]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	6213      	str	r3, [r2, #32]
 8002188:	e00b      	b.n	80021a2 <HAL_RCC_OscConfig+0x36e>
 800218a:	4b5b      	ldr	r3, [pc, #364]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	4a5a      	ldr	r2, [pc, #360]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	6213      	str	r3, [r2, #32]
 8002196:	4b58      	ldr	r3, [pc, #352]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	4a57      	ldr	r2, [pc, #348]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 800219c:	f023 0304 	bic.w	r3, r3, #4
 80021a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d015      	beq.n	80021d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021aa:	f7fe fc79 	bl	8000aa0 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b0:	e00a      	b.n	80021c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b2:	f7fe fc75 	bl	8000aa0 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e0b1      	b.n	800232c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c8:	4b4b      	ldr	r3, [pc, #300]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0ee      	beq.n	80021b2 <HAL_RCC_OscConfig+0x37e>
 80021d4:	e014      	b.n	8002200 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d6:	f7fe fc63 	bl	8000aa0 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021dc:	e00a      	b.n	80021f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021de:	f7fe fc5f 	bl	8000aa0 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e09b      	b.n	800232c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f4:	4b40      	ldr	r3, [pc, #256]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1ee      	bne.n	80021de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002200:	7dfb      	ldrb	r3, [r7, #23]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d105      	bne.n	8002212 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002206:	4b3c      	ldr	r3, [pc, #240]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	4a3b      	ldr	r2, [pc, #236]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 800220c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002210:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 8087 	beq.w	800232a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800221c:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b08      	cmp	r3, #8
 8002226:	d061      	beq.n	80022ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d146      	bne.n	80022be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002230:	4b33      	ldr	r3, [pc, #204]	; (8002300 <HAL_RCC_OscConfig+0x4cc>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7fe fc33 	bl	8000aa0 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223e:	f7fe fc2f 	bl	8000aa0 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e06d      	b.n	800232c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002250:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f0      	bne.n	800223e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002264:	d108      	bne.n	8002278 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002266:	4b24      	ldr	r3, [pc, #144]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	4921      	ldr	r1, [pc, #132]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002278:	4b1f      	ldr	r3, [pc, #124]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a19      	ldr	r1, [r3, #32]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	430b      	orrs	r3, r1
 800228a:	491b      	ldr	r1, [pc, #108]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 800228c:	4313      	orrs	r3, r2
 800228e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002290:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <HAL_RCC_OscConfig+0x4cc>)
 8002292:	2201      	movs	r2, #1
 8002294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7fe fc03 	bl	8000aa0 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229e:	f7fe fbff 	bl	8000aa0 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e03d      	b.n	800232c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0f0      	beq.n	800229e <HAL_RCC_OscConfig+0x46a>
 80022bc:	e035      	b.n	800232a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022be:	4b10      	ldr	r3, [pc, #64]	; (8002300 <HAL_RCC_OscConfig+0x4cc>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7fe fbec 	bl	8000aa0 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022cc:	f7fe fbe8 	bl	8000aa0 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e026      	b.n	800232c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_RCC_OscConfig+0x4c4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x498>
 80022ea:	e01e      	b.n	800232a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d107      	bne.n	8002304 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e019      	b.n	800232c <HAL_RCC_OscConfig+0x4f8>
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40007000 	.word	0x40007000
 8002300:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <HAL_RCC_OscConfig+0x500>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	429a      	cmp	r2, r3
 8002316:	d106      	bne.n	8002326 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	429a      	cmp	r2, r3
 8002324:	d001      	beq.n	800232a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40021000 	.word	0x40021000

08002338 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e0d0      	b.n	80024ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800234c:	4b6a      	ldr	r3, [pc, #424]	; (80024f8 <HAL_RCC_ClockConfig+0x1c0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d910      	bls.n	800237c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b67      	ldr	r3, [pc, #412]	; (80024f8 <HAL_RCC_ClockConfig+0x1c0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 0207 	bic.w	r2, r3, #7
 8002362:	4965      	ldr	r1, [pc, #404]	; (80024f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b63      	ldr	r3, [pc, #396]	; (80024f8 <HAL_RCC_ClockConfig+0x1c0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0b8      	b.n	80024ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d020      	beq.n	80023ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002394:	4b59      	ldr	r3, [pc, #356]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4a58      	ldr	r2, [pc, #352]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800239e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023ac:	4b53      	ldr	r3, [pc, #332]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	4a52      	ldr	r2, [pc, #328]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b8:	4b50      	ldr	r3, [pc, #320]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	494d      	ldr	r1, [pc, #308]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d040      	beq.n	8002458 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d107      	bne.n	80023ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023de:	4b47      	ldr	r3, [pc, #284]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d115      	bne.n	8002416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e07f      	b.n	80024ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f6:	4b41      	ldr	r3, [pc, #260]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d109      	bne.n	8002416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e073      	b.n	80024ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002406:	4b3d      	ldr	r3, [pc, #244]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e06b      	b.n	80024ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002416:	4b39      	ldr	r3, [pc, #228]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f023 0203 	bic.w	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	4936      	ldr	r1, [pc, #216]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002428:	f7fe fb3a 	bl	8000aa0 <HAL_GetTick>
 800242c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	e00a      	b.n	8002446 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002430:	f7fe fb36 	bl	8000aa0 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f241 3288 	movw	r2, #5000	; 0x1388
 800243e:	4293      	cmp	r3, r2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e053      	b.n	80024ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002446:	4b2d      	ldr	r3, [pc, #180]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 020c 	and.w	r2, r3, #12
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	429a      	cmp	r2, r3
 8002456:	d1eb      	bne.n	8002430 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002458:	4b27      	ldr	r3, [pc, #156]	; (80024f8 <HAL_RCC_ClockConfig+0x1c0>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d210      	bcs.n	8002488 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002466:	4b24      	ldr	r3, [pc, #144]	; (80024f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 0207 	bic.w	r2, r3, #7
 800246e:	4922      	ldr	r1, [pc, #136]	; (80024f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002476:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d001      	beq.n	8002488 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e032      	b.n	80024ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002494:	4b19      	ldr	r3, [pc, #100]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4916      	ldr	r1, [pc, #88]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d009      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024b2:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	490e      	ldr	r1, [pc, #56]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024c6:	f000 f821 	bl	800250c <HAL_RCC_GetSysClockFreq>
 80024ca:	4602      	mov	r2, r0
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	490a      	ldr	r1, [pc, #40]	; (8002500 <HAL_RCC_ClockConfig+0x1c8>)
 80024d8:	5ccb      	ldrb	r3, [r1, r3]
 80024da:	fa22 f303 	lsr.w	r3, r2, r3
 80024de:	4a09      	ldr	r2, [pc, #36]	; (8002504 <HAL_RCC_ClockConfig+0x1cc>)
 80024e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024e2:	4b09      	ldr	r3, [pc, #36]	; (8002508 <HAL_RCC_ClockConfig+0x1d0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe fa98 	bl	8000a1c <HAL_InitTick>

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40022000 	.word	0x40022000
 80024fc:	40021000 	.word	0x40021000
 8002500:	08003130 	.word	0x08003130
 8002504:	20000008 	.word	0x20000008
 8002508:	2000000c 	.word	0x2000000c

0800250c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800250c:	b480      	push	{r7}
 800250e:	b087      	sub	sp, #28
 8002510:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002512:	2300      	movs	r3, #0
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	2300      	movs	r3, #0
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	2300      	movs	r3, #0
 8002520:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002526:	4b1e      	ldr	r3, [pc, #120]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b04      	cmp	r3, #4
 8002534:	d002      	beq.n	800253c <HAL_RCC_GetSysClockFreq+0x30>
 8002536:	2b08      	cmp	r3, #8
 8002538:	d003      	beq.n	8002542 <HAL_RCC_GetSysClockFreq+0x36>
 800253a:	e027      	b.n	800258c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800253c:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800253e:	613b      	str	r3, [r7, #16]
      break;
 8002540:	e027      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	0c9b      	lsrs	r3, r3, #18
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	4a17      	ldr	r2, [pc, #92]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800254c:	5cd3      	ldrb	r3, [r2, r3]
 800254e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d010      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800255a:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	0c5b      	lsrs	r3, r3, #17
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	4a11      	ldr	r2, [pc, #68]	; (80025ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8002566:	5cd3      	ldrb	r3, [r2, r3]
 8002568:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a0d      	ldr	r2, [pc, #52]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800256e:	fb03 f202 	mul.w	r2, r3, r2
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	fbb2 f3f3 	udiv	r3, r2, r3
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	e004      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a0c      	ldr	r2, [pc, #48]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002580:	fb02 f303 	mul.w	r3, r2, r3
 8002584:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	613b      	str	r3, [r7, #16]
      break;
 800258a:	e002      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800258c:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800258e:	613b      	str	r3, [r7, #16]
      break;
 8002590:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002592:	693b      	ldr	r3, [r7, #16]
}
 8002594:	4618      	mov	r0, r3
 8002596:	371c      	adds	r7, #28
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40021000 	.word	0x40021000
 80025a4:	007a1200 	.word	0x007a1200
 80025a8:	08003148 	.word	0x08003148
 80025ac:	08003158 	.word	0x08003158
 80025b0:	003d0900 	.word	0x003d0900

080025b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b8:	4b02      	ldr	r3, [pc, #8]	; (80025c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	20000008 	.word	0x20000008

080025c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025cc:	f7ff fff2 	bl	80025b4 <HAL_RCC_GetHCLKFreq>
 80025d0:	4602      	mov	r2, r0
 80025d2:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	0a1b      	lsrs	r3, r3, #8
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	4903      	ldr	r1, [pc, #12]	; (80025ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80025de:	5ccb      	ldrb	r3, [r1, r3]
 80025e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40021000 	.word	0x40021000
 80025ec:	08003140 	.word	0x08003140

080025f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025f4:	f7ff ffde 	bl	80025b4 <HAL_RCC_GetHCLKFreq>
 80025f8:	4602      	mov	r2, r0
 80025fa:	4b05      	ldr	r3, [pc, #20]	; (8002610 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	0adb      	lsrs	r3, r3, #11
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	4903      	ldr	r1, [pc, #12]	; (8002614 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002606:	5ccb      	ldrb	r3, [r1, r3]
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800260c:	4618      	mov	r0, r3
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000
 8002614:	08003140 	.word	0x08003140

08002618 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002620:	4b0a      	ldr	r3, [pc, #40]	; (800264c <RCC_Delay+0x34>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <RCC_Delay+0x38>)
 8002626:	fba2 2303 	umull	r2, r3, r2, r3
 800262a:	0a5b      	lsrs	r3, r3, #9
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	fb02 f303 	mul.w	r3, r2, r3
 8002632:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002634:	bf00      	nop
  }
  while (Delay --);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1e5a      	subs	r2, r3, #1
 800263a:	60fa      	str	r2, [r7, #12]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1f9      	bne.n	8002634 <RCC_Delay+0x1c>
}
 8002640:	bf00      	nop
 8002642:	bf00      	nop
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr
 800264c:	20000008 	.word	0x20000008
 8002650:	10624dd3 	.word	0x10624dd3

08002654 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e042      	b.n	80026ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d106      	bne.n	8002680 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7fe f8fc 	bl	8000878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2224      	movs	r2, #36	; 0x24
 8002684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002696:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 fc7f 	bl	8002f9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695a      	ldr	r2, [r3, #20]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2220      	movs	r2, #32
 80026d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b0ba      	sub	sp, #232	; 0xe8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800271a:	2300      	movs	r3, #0
 800271c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002720:	2300      	movs	r3, #0
 8002722:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002732:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10f      	bne.n	800275a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800273a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800273e:	f003 0320 	and.w	r3, r3, #32
 8002742:	2b00      	cmp	r3, #0
 8002744:	d009      	beq.n	800275a <HAL_UART_IRQHandler+0x66>
 8002746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800274a:	f003 0320 	and.w	r3, r3, #32
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fb63 	bl	8002e1e <UART_Receive_IT>
      return;
 8002758:	e25b      	b.n	8002c12 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800275a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 80de 	beq.w	8002920 <HAL_UART_IRQHandler+0x22c>
 8002764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d106      	bne.n	800277e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002774:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 80d1 	beq.w	8002920 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800277e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00b      	beq.n	80027a2 <HAL_UART_IRQHandler+0xae>
 800278a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800278e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	f043 0201 	orr.w	r2, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00b      	beq.n	80027c6 <HAL_UART_IRQHandler+0xd2>
 80027ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	f043 0202 	orr.w	r2, r3, #2
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00b      	beq.n	80027ea <HAL_UART_IRQHandler+0xf6>
 80027d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d005      	beq.n	80027ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	f043 0204 	orr.w	r2, r3, #4
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80027ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d011      	beq.n	800281a <HAL_UART_IRQHandler+0x126>
 80027f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d105      	bne.n	800280e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	f043 0208 	orr.w	r2, r3, #8
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 81f2 	beq.w	8002c08 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002828:	f003 0320 	and.w	r3, r3, #32
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_UART_IRQHandler+0x14e>
 8002830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002834:	f003 0320 	and.w	r3, r3, #32
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 faee 	bl	8002e1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284c:	2b00      	cmp	r3, #0
 800284e:	bf14      	ite	ne
 8002850:	2301      	movne	r3, #1
 8002852:	2300      	moveq	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d103      	bne.n	800286e <HAL_UART_IRQHandler+0x17a>
 8002866:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800286a:	2b00      	cmp	r3, #0
 800286c:	d04f      	beq.n	800290e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f9f8 	bl	8002c64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287e:	2b00      	cmp	r3, #0
 8002880:	d041      	beq.n	8002906 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3314      	adds	r3, #20
 8002888:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002890:	e853 3f00 	ldrex	r3, [r3]
 8002894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002898:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800289c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	3314      	adds	r3, #20
 80028aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80028ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80028b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80028ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80028be:	e841 2300 	strex	r3, r2, [r1]
 80028c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80028c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1d9      	bne.n	8002882 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d013      	beq.n	80028fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028da:	4a7e      	ldr	r2, [pc, #504]	; (8002ad4 <HAL_UART_IRQHandler+0x3e0>)
 80028dc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff f892 	bl	8001a0c <HAL_DMA_Abort_IT>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d016      	beq.n	800291c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028f8:	4610      	mov	r0, r2
 80028fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028fc:	e00e      	b.n	800291c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f99c 	bl	8002c3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002904:	e00a      	b.n	800291c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f998 	bl	8002c3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800290c:	e006      	b.n	800291c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f994 	bl	8002c3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800291a:	e175      	b.n	8002c08 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800291c:	bf00      	nop
    return;
 800291e:	e173      	b.n	8002c08 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	2b01      	cmp	r3, #1
 8002926:	f040 814f 	bne.w	8002bc8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800292a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 8148 	beq.w	8002bc8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800293c:	f003 0310 	and.w	r3, r3, #16
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 8141 	beq.w	8002bc8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002946:	2300      	movs	r3, #0
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80b6 	beq.w	8002ad8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002978:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 8145 	beq.w	8002c0c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002986:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800298a:	429a      	cmp	r2, r3
 800298c:	f080 813e 	bcs.w	8002c0c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002996:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	2b20      	cmp	r3, #32
 80029a0:	f000 8088 	beq.w	8002ab4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	330c      	adds	r3, #12
 80029aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029b2:	e853 3f00 	ldrex	r3, [r3]
 80029b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80029ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	330c      	adds	r3, #12
 80029cc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80029d0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80029dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80029e0:	e841 2300 	strex	r3, r2, [r1]
 80029e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80029e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1d9      	bne.n	80029a4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	3314      	adds	r3, #20
 80029f6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029fa:	e853 3f00 	ldrex	r3, [r3]
 80029fe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a02:	f023 0301 	bic.w	r3, r3, #1
 8002a06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	3314      	adds	r3, #20
 8002a10:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a14:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a18:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a20:	e841 2300 	strex	r3, r2, [r1]
 8002a24:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1e1      	bne.n	80029f0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	3314      	adds	r3, #20
 8002a32:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a36:	e853 3f00 	ldrex	r3, [r3]
 8002a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	3314      	adds	r3, #20
 8002a4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a50:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a58:	e841 2300 	strex	r3, r2, [r1]
 8002a5c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1e3      	bne.n	8002a2c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	330c      	adds	r3, #12
 8002a78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a7c:	e853 3f00 	ldrex	r3, [r3]
 8002a80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a84:	f023 0310 	bic.w	r3, r3, #16
 8002a88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	330c      	adds	r3, #12
 8002a92:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002a96:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a98:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a9e:	e841 2300 	strex	r3, r2, [r1]
 8002aa2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1e3      	bne.n	8002a72 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe ff71 	bl	8001996 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	4619      	mov	r1, r3
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f8bf 	bl	8002c4e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ad0:	e09c      	b.n	8002c0c <HAL_UART_IRQHandler+0x518>
 8002ad2:	bf00      	nop
 8002ad4:	08002d29 	.word	0x08002d29
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 808e 	beq.w	8002c10 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002af4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 8089 	beq.w	8002c10 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	330c      	adds	r3, #12
 8002b04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b08:	e853 3f00 	ldrex	r3, [r3]
 8002b0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	330c      	adds	r3, #12
 8002b1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002b22:	647a      	str	r2, [r7, #68]	; 0x44
 8002b24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b2a:	e841 2300 	strex	r3, r2, [r1]
 8002b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1e3      	bne.n	8002afe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	3314      	adds	r3, #20
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	e853 3f00 	ldrex	r3, [r3]
 8002b44:	623b      	str	r3, [r7, #32]
   return(result);
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	f023 0301 	bic.w	r3, r3, #1
 8002b4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	3314      	adds	r3, #20
 8002b56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b5a:	633a      	str	r2, [r7, #48]	; 0x30
 8002b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b62:	e841 2300 	strex	r3, r2, [r1]
 8002b66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1e3      	bne.n	8002b36 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2220      	movs	r2, #32
 8002b72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	330c      	adds	r3, #12
 8002b82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	e853 3f00 	ldrex	r3, [r3]
 8002b8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f023 0310 	bic.w	r3, r3, #16
 8002b92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	330c      	adds	r3, #12
 8002b9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002ba0:	61fa      	str	r2, [r7, #28]
 8002ba2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba4:	69b9      	ldr	r1, [r7, #24]
 8002ba6:	69fa      	ldr	r2, [r7, #28]
 8002ba8:	e841 2300 	strex	r3, r2, [r1]
 8002bac:	617b      	str	r3, [r7, #20]
   return(result);
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1e3      	bne.n	8002b7c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f844 	bl	8002c4e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002bc6:	e023      	b.n	8002c10 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d009      	beq.n	8002be8 <HAL_UART_IRQHandler+0x4f4>
 8002bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f8b5 	bl	8002d50 <UART_Transmit_IT>
    return;
 8002be6:	e014      	b.n	8002c12 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00e      	beq.n	8002c12 <HAL_UART_IRQHandler+0x51e>
 8002bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f8f4 	bl	8002dee <UART_EndTransmit_IT>
    return;
 8002c06:	e004      	b.n	8002c12 <HAL_UART_IRQHandler+0x51e>
    return;
 8002c08:	bf00      	nop
 8002c0a:	e002      	b.n	8002c12 <HAL_UART_IRQHandler+0x51e>
      return;
 8002c0c:	bf00      	nop
 8002c0e:	e000      	b.n	8002c12 <HAL_UART_IRQHandler+0x51e>
      return;
 8002c10:	bf00      	nop
  }
}
 8002c12:	37e8      	adds	r7, #232	; 0xe8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr

08002c2a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr

08002c4e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	460b      	mov	r3, r1
 8002c58:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr

08002c64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b095      	sub	sp, #84	; 0x54
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	330c      	adds	r3, #12
 8002c72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c76:	e853 3f00 	ldrex	r3, [r3]
 8002c7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	330c      	adds	r3, #12
 8002c8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c8c:	643a      	str	r2, [r7, #64]	; 0x40
 8002c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c94:	e841 2300 	strex	r3, r2, [r1]
 8002c98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1e5      	bne.n	8002c6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3314      	adds	r3, #20
 8002ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	e853 3f00 	ldrex	r3, [r3]
 8002cae:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f023 0301 	bic.w	r3, r3, #1
 8002cb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	3314      	adds	r3, #20
 8002cbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc8:	e841 2300 	strex	r3, r2, [r1]
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1e5      	bne.n	8002ca0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d119      	bne.n	8002d10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	330c      	adds	r3, #12
 8002ce2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	e853 3f00 	ldrex	r3, [r3]
 8002cea:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f023 0310 	bic.w	r3, r3, #16
 8002cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	330c      	adds	r3, #12
 8002cfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cfc:	61ba      	str	r2, [r7, #24]
 8002cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d00:	6979      	ldr	r1, [r7, #20]
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	e841 2300 	strex	r3, r2, [r1]
 8002d08:	613b      	str	r3, [r7, #16]
   return(result);
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1e5      	bne.n	8002cdc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d1e:	bf00      	nop
 8002d20:	3754      	adds	r7, #84	; 0x54
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr

08002d28 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f7ff ff7a 	bl	8002c3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d48:	bf00      	nop
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b21      	cmp	r3, #33	; 0x21
 8002d62:	d13e      	bne.n	8002de2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d6c:	d114      	bne.n	8002d98 <UART_Transmit_IT+0x48>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d110      	bne.n	8002d98 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d8a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	1c9a      	adds	r2, r3, #2
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	621a      	str	r2, [r3, #32]
 8002d96:	e008      	b.n	8002daa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	1c59      	adds	r1, r3, #1
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6211      	str	r1, [r2, #32]
 8002da2:	781a      	ldrb	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	4619      	mov	r1, r3
 8002db8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10f      	bne.n	8002dde <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dcc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ddc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	e000      	b.n	8002de4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002de2:	2302      	movs	r3, #2
  }
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr

08002dee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7ff ff02 	bl	8002c18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b08c      	sub	sp, #48	; 0x30
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b22      	cmp	r3, #34	; 0x22
 8002e30:	f040 80ae 	bne.w	8002f90 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e3c:	d117      	bne.n	8002e6e <UART_Receive_IT+0x50>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d113      	bne.n	8002e6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e66:	1c9a      	adds	r2, r3, #2
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	629a      	str	r2, [r3, #40]	; 0x28
 8002e6c:	e026      	b.n	8002ebc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e80:	d007      	beq.n	8002e92 <UART_Receive_IT+0x74>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10a      	bne.n	8002ea0 <UART_Receive_IT+0x82>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	701a      	strb	r2, [r3, #0]
 8002e9e:	e008      	b.n	8002eb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb6:	1c5a      	adds	r2, r3, #1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d15d      	bne.n	8002f8c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0220 	bic.w	r2, r2, #32
 8002ede:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68da      	ldr	r2, [r3, #12]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d135      	bne.n	8002f82 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	330c      	adds	r3, #12
 8002f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	e853 3f00 	ldrex	r3, [r3]
 8002f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f023 0310 	bic.w	r3, r3, #16
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	330c      	adds	r3, #12
 8002f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3c:	623a      	str	r2, [r7, #32]
 8002f3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f40:	69f9      	ldr	r1, [r7, #28]
 8002f42:	6a3a      	ldr	r2, [r7, #32]
 8002f44:	e841 2300 	strex	r3, r2, [r1]
 8002f48:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1e5      	bne.n	8002f1c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b10      	cmp	r3, #16
 8002f5c:	d10a      	bne.n	8002f74 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f78:	4619      	mov	r1, r3
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff fe67 	bl	8002c4e <HAL_UARTEx_RxEventCallback>
 8002f80:	e002      	b.n	8002f88 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7ff fe51 	bl	8002c2a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	e002      	b.n	8002f92 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e000      	b.n	8002f92 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002f90:	2302      	movs	r3, #2
  }
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3730      	adds	r7, #48	; 0x30
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002fd6:	f023 030c 	bic.w	r3, r3, #12
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699a      	ldr	r2, [r3, #24]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a2c      	ldr	r2, [pc, #176]	; (80030b0 <UART_SetConfig+0x114>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d103      	bne.n	800300c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003004:	f7ff faf4 	bl	80025f0 <HAL_RCC_GetPCLK2Freq>
 8003008:	60f8      	str	r0, [r7, #12]
 800300a:	e002      	b.n	8003012 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800300c:	f7ff fadc 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 8003010:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	009a      	lsls	r2, r3, #2
 800301c:	441a      	add	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	fbb2 f3f3 	udiv	r3, r2, r3
 8003028:	4a22      	ldr	r2, [pc, #136]	; (80030b4 <UART_SetConfig+0x118>)
 800302a:	fba2 2303 	umull	r2, r3, r2, r3
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	0119      	lsls	r1, r3, #4
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	009a      	lsls	r2, r3, #2
 800303c:	441a      	add	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	fbb2 f2f3 	udiv	r2, r2, r3
 8003048:	4b1a      	ldr	r3, [pc, #104]	; (80030b4 <UART_SetConfig+0x118>)
 800304a:	fba3 0302 	umull	r0, r3, r3, r2
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	2064      	movs	r0, #100	; 0x64
 8003052:	fb00 f303 	mul.w	r3, r0, r3
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	3332      	adds	r3, #50	; 0x32
 800305c:	4a15      	ldr	r2, [pc, #84]	; (80030b4 <UART_SetConfig+0x118>)
 800305e:	fba2 2303 	umull	r2, r3, r2, r3
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003068:	4419      	add	r1, r3
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	009a      	lsls	r2, r3, #2
 8003074:	441a      	add	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <UART_SetConfig+0x118>)
 8003082:	fba3 0302 	umull	r0, r3, r3, r2
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	2064      	movs	r0, #100	; 0x64
 800308a:	fb00 f303 	mul.w	r3, r0, r3
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	3332      	adds	r3, #50	; 0x32
 8003094:	4a07      	ldr	r2, [pc, #28]	; (80030b4 <UART_SetConfig+0x118>)
 8003096:	fba2 2303 	umull	r2, r3, r2, r3
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	f003 020f 	and.w	r2, r3, #15
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	440a      	add	r2, r1
 80030a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80030a8:	bf00      	nop
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40013800 	.word	0x40013800
 80030b4:	51eb851f 	.word	0x51eb851f

080030b8 <memset>:
 80030b8:	4603      	mov	r3, r0
 80030ba:	4402      	add	r2, r0
 80030bc:	4293      	cmp	r3, r2
 80030be:	d100      	bne.n	80030c2 <memset+0xa>
 80030c0:	4770      	bx	lr
 80030c2:	f803 1b01 	strb.w	r1, [r3], #1
 80030c6:	e7f9      	b.n	80030bc <memset+0x4>

080030c8 <__libc_init_array>:
 80030c8:	b570      	push	{r4, r5, r6, lr}
 80030ca:	2600      	movs	r6, #0
 80030cc:	4d0c      	ldr	r5, [pc, #48]	; (8003100 <__libc_init_array+0x38>)
 80030ce:	4c0d      	ldr	r4, [pc, #52]	; (8003104 <__libc_init_array+0x3c>)
 80030d0:	1b64      	subs	r4, r4, r5
 80030d2:	10a4      	asrs	r4, r4, #2
 80030d4:	42a6      	cmp	r6, r4
 80030d6:	d109      	bne.n	80030ec <__libc_init_array+0x24>
 80030d8:	f000 f81a 	bl	8003110 <_init>
 80030dc:	2600      	movs	r6, #0
 80030de:	4d0a      	ldr	r5, [pc, #40]	; (8003108 <__libc_init_array+0x40>)
 80030e0:	4c0a      	ldr	r4, [pc, #40]	; (800310c <__libc_init_array+0x44>)
 80030e2:	1b64      	subs	r4, r4, r5
 80030e4:	10a4      	asrs	r4, r4, #2
 80030e6:	42a6      	cmp	r6, r4
 80030e8:	d105      	bne.n	80030f6 <__libc_init_array+0x2e>
 80030ea:	bd70      	pop	{r4, r5, r6, pc}
 80030ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80030f0:	4798      	blx	r3
 80030f2:	3601      	adds	r6, #1
 80030f4:	e7ee      	b.n	80030d4 <__libc_init_array+0xc>
 80030f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030fa:	4798      	blx	r3
 80030fc:	3601      	adds	r6, #1
 80030fe:	e7f2      	b.n	80030e6 <__libc_init_array+0x1e>
 8003100:	0800315c 	.word	0x0800315c
 8003104:	0800315c 	.word	0x0800315c
 8003108:	0800315c 	.word	0x0800315c
 800310c:	08003160 	.word	0x08003160

08003110 <_init>:
 8003110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003112:	bf00      	nop
 8003114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003116:	bc08      	pop	{r3}
 8003118:	469e      	mov	lr, r3
 800311a:	4770      	bx	lr

0800311c <_fini>:
 800311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311e:	bf00      	nop
 8003120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003122:	bc08      	pop	{r3}
 8003124:	469e      	mov	lr, r3
 8003126:	4770      	bx	lr
