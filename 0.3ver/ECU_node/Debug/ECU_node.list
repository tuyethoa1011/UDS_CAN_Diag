
ECU_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080044ec  080044ec  000144ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045fc  080045fc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080045fc  080045fc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045fc  080045fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045fc  080045fc  000145fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004600  08004600  00014600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000070  08004674  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08004674  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   000099ca  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bb9  00000000  00000000  00029aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e8  00000000  00000000  0002b660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006c3  00000000  00000000  0002bf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001800c  00000000  00000000  0002c60b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b2c9  00000000  00000000  00044617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086bb0  00000000  00000000  0004f8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d14  00000000  00000000  000d6490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000d91a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080044d4 	.word	0x080044d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080044d4 	.word	0x080044d4

0800014c <GetSecurityLevel>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t GetSecurityLevel(uint8_t LV_byteSring, uint8_t *keyLV_byteString)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	71fb      	strb	r3, [r7, #7]
	uint8_t SecLevel_res;
	uint8_t key_lv;
	switch(LV_byteSring)
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	2b01      	cmp	r3, #1
 800015c:	d107      	bne.n	800016e <GetSecurityLevel+0x22>
	{
		case SEC_LEVEL1:
		{
			key_lv = 0x02;
 800015e:	2302      	movs	r3, #2
 8000160:	73bb      	strb	r3, [r7, #14]
			keyLV_byteString = &key_lv;
 8000162:	f107 030e 	add.w	r3, r7, #14
 8000166:	603b      	str	r3, [r7, #0]
			SecLevel_res = 0;
 8000168:	2300      	movs	r3, #0
 800016a:	73fb      	strb	r3, [r7, #15]
			break;
 800016c:	bf00      	nop
		}
	}
	return SecLevel_res;
 800016e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000170:	4618      	mov	r0, r3
 8000172:	3714      	adds	r7, #20
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr

0800017a <GetDID>:
uint16_t GetDID(uint8_t DID_HByteString,uint8_t DID_LByteString)
{
 800017a:	b480      	push	{r7}
 800017c:	b085      	sub	sp, #20
 800017e:	af00      	add	r7, sp, #0
 8000180:	4603      	mov	r3, r0
 8000182:	460a      	mov	r2, r1
 8000184:	71fb      	strb	r3, [r7, #7]
 8000186:	4613      	mov	r3, r2
 8000188:	71bb      	strb	r3, [r7, #6]
	uint16_t DID_res;
	DID_res = (DID_HByteString << 8) | DID_LByteString;
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	021b      	lsls	r3, r3, #8
 800018e:	b21a      	sxth	r2, r3
 8000190:	79bb      	ldrb	r3, [r7, #6]
 8000192:	b21b      	sxth	r3, r3
 8000194:	4313      	orrs	r3, r2
 8000196:	b21b      	sxth	r3, r3
 8000198:	81fb      	strh	r3, [r7, #14]
	return DID_res;
 800019a:	89fb      	ldrh	r3, [r7, #14]
}
 800019c:	4618      	mov	r0, r3
 800019e:	3714      	adds	r7, #20
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
	...

080001a8 <GetCANFrameSize>:
uint8_t GetCANFrameSize(uint8_t aData[])
{
 80001a8:	b480      	push	{r7}
 80001aa:	b085      	sub	sp, #20
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	uint8_t SizeCount = 0;
 80001b0:	2300      	movs	r3, #0
 80001b2:	73fb      	strb	r3, [r7, #15]
	for(index_array=0;index_array<8;index_array++)
 80001b4:	4b0f      	ldr	r3, [pc, #60]	; (80001f4 <GetCANFrameSize+0x4c>)
 80001b6:	2200      	movs	r2, #0
 80001b8:	701a      	strb	r2, [r3, #0]
 80001ba:	e010      	b.n	80001de <GetCANFrameSize+0x36>
	{
		if(aData[index_array]!=0)
 80001bc:	4b0d      	ldr	r3, [pc, #52]	; (80001f4 <GetCANFrameSize+0x4c>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	461a      	mov	r2, r3
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	4413      	add	r3, r2
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d002      	beq.n	80001d2 <GetCANFrameSize+0x2a>
		{
			SizeCount++;
 80001cc:	7bfb      	ldrb	r3, [r7, #15]
 80001ce:	3301      	adds	r3, #1
 80001d0:	73fb      	strb	r3, [r7, #15]
	for(index_array=0;index_array<8;index_array++)
 80001d2:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <GetCANFrameSize+0x4c>)
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	3301      	adds	r3, #1
 80001d8:	b2da      	uxtb	r2, r3
 80001da:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <GetCANFrameSize+0x4c>)
 80001dc:	701a      	strb	r2, [r3, #0]
 80001de:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <GetCANFrameSize+0x4c>)
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	2b07      	cmp	r3, #7
 80001e4:	d9ea      	bls.n	80001bc <GetCANFrameSize+0x14>
		}
	}
	return SizeCount;
 80001e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	20000155 	.word	0x20000155

080001f8 <Check_ReadRq_Validation>:
uint8_t Check_ReadRq_Validation(uint8_t FT, uint8_t DL, uint8_t Data_buf[])
{
 80001f8:	b590      	push	{r4, r7, lr}
 80001fa:	b085      	sub	sp, #20
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	603a      	str	r2, [r7, #0]
 8000202:	71fb      	strb	r3, [r7, #7]
 8000204:	460b      	mov	r3, r1
 8000206:	71bb      	strb	r3, [r7, #6]
	uint8_t Resp_res;
	/*Negative response case*/
	//case 1
	if(FT > 3)
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	2b03      	cmp	r3, #3
 800020c:	d902      	bls.n	8000214 <Check_ReadRq_Validation+0x1c>
	{
		//transmit negative response
		Resp_res = NEGATIVE_RESPONSE;
 800020e:	2301      	movs	r3, #1
 8000210:	73fb      	strb	r3, [r7, #15]
 8000212:	e018      	b.n	8000246 <Check_ReadRq_Validation+0x4e>
	} else
	{
		switch(FT)
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <Check_ReadRq_Validation+0x26>
 800021a:	2b01      	cmp	r3, #1
				}
				break;
			}
			case 1: //flow control
			{
				break;
 800021c:	e013      	b.n	8000246 <Check_ReadRq_Validation+0x4e>
				if(DL>7)
 800021e:	79bb      	ldrb	r3, [r7, #6]
 8000220:	2b07      	cmp	r3, #7
 8000222:	d902      	bls.n	800022a <Check_ReadRq_Validation+0x32>
					Resp_res = NEGATIVE_RESPONSE;
 8000224:	2301      	movs	r3, #1
 8000226:	73fb      	strb	r3, [r7, #15]
				break;
 8000228:	e00c      	b.n	8000244 <Check_ReadRq_Validation+0x4c>
					if(DL != (GetCANFrameSize(Data_buf)-1))
 800022a:	79bc      	ldrb	r4, [r7, #6]
 800022c:	6838      	ldr	r0, [r7, #0]
 800022e:	f7ff ffbb 	bl	80001a8 <GetCANFrameSize>
 8000232:	4603      	mov	r3, r0
 8000234:	3b01      	subs	r3, #1
 8000236:	429c      	cmp	r4, r3
 8000238:	d002      	beq.n	8000240 <Check_ReadRq_Validation+0x48>
						Resp_res = NEGATIVE_RESPONSE;
 800023a:	2301      	movs	r3, #1
 800023c:	73fb      	strb	r3, [r7, #15]
				break;
 800023e:	e001      	b.n	8000244 <Check_ReadRq_Validation+0x4c>
						Resp_res = POSITIVE_RESPONSE;
 8000240:	2300      	movs	r3, #0
 8000242:	73fb      	strb	r3, [r7, #15]
				break;
 8000244:	bf00      	nop
			}
		}
	}

	return Resp_res;
 8000246:	7bfb      	ldrb	r3, [r7, #15]
}
 8000248:	4618      	mov	r0, r3
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bd90      	pop	{r4, r7, pc}

08000250 <GetFrameType>:
uint8_t GetFrameType(uint8_t FT_byteString) //Frame type co the dung chung cho SF FF
{
 8000250:	b480      	push	{r7}
 8000252:	b085      	sub	sp, #20
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	71fb      	strb	r3, [r7, #7]
	uint8_t FT_res;
	switch(FT_byteString)
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	2b03      	cmp	r3, #3
 800025e:	d817      	bhi.n	8000290 <GetFrameType+0x40>
 8000260:	a201      	add	r2, pc, #4	; (adr r2, 8000268 <GetFrameType+0x18>)
 8000262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000266:	bf00      	nop
 8000268:	08000279 	.word	0x08000279
 800026c:	0800027f 	.word	0x0800027f
 8000270:	08000285 	.word	0x08000285
 8000274:	0800028b 	.word	0x0800028b
	{
		case FT_SINGLEFRAME:
		{
			FT_res = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	73fb      	strb	r3, [r7, #15]
			break;
 800027c:	e008      	b.n	8000290 <GetFrameType+0x40>
		}
		case FT_FIRSTFRAME:
		{
			FT_res = 1;
 800027e:	2301      	movs	r3, #1
 8000280:	73fb      	strb	r3, [r7, #15]
			break;
 8000282:	e005      	b.n	8000290 <GetFrameType+0x40>
		}
		case FT_CONSECUTIVEFRAME:
		{
			FT_res = 2;
 8000284:	2302      	movs	r3, #2
 8000286:	73fb      	strb	r3, [r7, #15]
			break;
 8000288:	e002      	b.n	8000290 <GetFrameType+0x40>
		}
		case FT_FLOWCONTROL:
		{
			FT_res = 3;
 800028a:	2303      	movs	r3, #3
 800028c:	73fb      	strb	r3, [r7, #15]
			break;
 800028e:	bf00      	nop
		}
	}
	return FT_res;
 8000290:	7bfb      	ldrb	r3, [r7, #15]
}
 8000292:	4618      	mov	r0, r3
 8000294:	3714      	adds	r7, #20
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr

0800029c <GetDataLength>:
uint8_t GetDataLength(uint8_t DL_byteString) //Get datalength - co the trong tuong lai cai nay se dung chung duoc
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
	uint8_t DL_res;
	switch(DL_byteString)
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	2b70      	cmp	r3, #112	; 0x70
 80002aa:	d02f      	beq.n	800030c <GetDataLength+0x70>
 80002ac:	2b70      	cmp	r3, #112	; 0x70
 80002ae:	dc30      	bgt.n	8000312 <GetDataLength+0x76>
 80002b0:	2b60      	cmp	r3, #96	; 0x60
 80002b2:	d028      	beq.n	8000306 <GetDataLength+0x6a>
 80002b4:	2b60      	cmp	r3, #96	; 0x60
 80002b6:	dc2c      	bgt.n	8000312 <GetDataLength+0x76>
 80002b8:	2b50      	cmp	r3, #80	; 0x50
 80002ba:	d021      	beq.n	8000300 <GetDataLength+0x64>
 80002bc:	2b50      	cmp	r3, #80	; 0x50
 80002be:	dc28      	bgt.n	8000312 <GetDataLength+0x76>
 80002c0:	2b40      	cmp	r3, #64	; 0x40
 80002c2:	d01a      	beq.n	80002fa <GetDataLength+0x5e>
 80002c4:	2b40      	cmp	r3, #64	; 0x40
 80002c6:	dc24      	bgt.n	8000312 <GetDataLength+0x76>
 80002c8:	2b30      	cmp	r3, #48	; 0x30
 80002ca:	d013      	beq.n	80002f4 <GetDataLength+0x58>
 80002cc:	2b30      	cmp	r3, #48	; 0x30
 80002ce:	dc20      	bgt.n	8000312 <GetDataLength+0x76>
 80002d0:	2b20      	cmp	r3, #32
 80002d2:	d00c      	beq.n	80002ee <GetDataLength+0x52>
 80002d4:	2b20      	cmp	r3, #32
 80002d6:	dc1c      	bgt.n	8000312 <GetDataLength+0x76>
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d002      	beq.n	80002e2 <GetDataLength+0x46>
 80002dc:	2b10      	cmp	r3, #16
 80002de:	d003      	beq.n	80002e8 <GetDataLength+0x4c>
 80002e0:	e017      	b.n	8000312 <GetDataLength+0x76>
	{
		case DL_NONE_DATABYTE:
		{
			DL_res = 0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	73fb      	strb	r3, [r7, #15]
			break;
 80002e6:	e014      	b.n	8000312 <GetDataLength+0x76>
		}
		case DL_1_DATABYTE:
		{
			DL_res = 1;
 80002e8:	2301      	movs	r3, #1
 80002ea:	73fb      	strb	r3, [r7, #15]
			break;
 80002ec:	e011      	b.n	8000312 <GetDataLength+0x76>
		}
		case DL_2_DATABYTE:
		{
			DL_res = 2;
 80002ee:	2302      	movs	r3, #2
 80002f0:	73fb      	strb	r3, [r7, #15]
			break;
 80002f2:	e00e      	b.n	8000312 <GetDataLength+0x76>
		}
		case DL_3_DATABYTE:
		{
			DL_res = 3;
 80002f4:	2303      	movs	r3, #3
 80002f6:	73fb      	strb	r3, [r7, #15]
			break;
 80002f8:	e00b      	b.n	8000312 <GetDataLength+0x76>
		}
		case DL_4_DATABYTE:
		{
			DL_res = 4;
 80002fa:	2304      	movs	r3, #4
 80002fc:	73fb      	strb	r3, [r7, #15]
			break;
 80002fe:	e008      	b.n	8000312 <GetDataLength+0x76>
		}
		case DL_5_DATABYTE:
		{
			DL_res = 5;
 8000300:	2305      	movs	r3, #5
 8000302:	73fb      	strb	r3, [r7, #15]
			break;
 8000304:	e005      	b.n	8000312 <GetDataLength+0x76>
		}
		case  DL_6_DATABYTE:
		{
			DL_res = 6;
 8000306:	2306      	movs	r3, #6
 8000308:	73fb      	strb	r3, [r7, #15]
			break;
 800030a:	e002      	b.n	8000312 <GetDataLength+0x76>
		}
		case DL_7_DATABYTE:
		{
			DL_res = 7;
 800030c:	2307      	movs	r3, #7
 800030e:	73fb      	strb	r3, [r7, #15]
			break;
 8000310:	bf00      	nop
		}
	}
	return DL_res;
 8000312:	7bfb      	ldrb	r3, [r7, #15]
}
 8000314:	4618      	mov	r0, r3
 8000316:	3714      	adds	r7, #20
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr

0800031e <SF_N_PCI_FrameTypeHandle>:
uint8_t SF_N_PCI_FrameTypeHandle(uint8_t byteString) //SF_PCI: Single Frame Protocol Control Info: FT + DL
{
 800031e:	b480      	push	{r7}
 8000320:	b083      	sub	sp, #12
 8000322:	af00      	add	r7, sp, #0
 8000324:	4603      	mov	r3, r0
 8000326:	71fb      	strb	r3, [r7, #7]
	return (byteString >> 4) & 0x03;
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	091b      	lsrs	r3, r3, #4
 800032c:	b2db      	uxtb	r3, r3
 800032e:	f003 0303 	and.w	r3, r3, #3
 8000332:	b2db      	uxtb	r3, r3
}
 8000334:	4618      	mov	r0, r3
 8000336:	370c      	adds	r7, #12
 8000338:	46bd      	mov	sp, r7
 800033a:	bc80      	pop	{r7}
 800033c:	4770      	bx	lr

0800033e <SF_N_PCI_DataLenngthHandle>:
uint8_t SF_N_PCI_DataLenngthHandle(uint8_t byteString) //SF_PCI: Single Frame Protocol Control Info: FT + DL
{
 800033e:	b480      	push	{r7}
 8000340:	b083      	sub	sp, #12
 8000342:	af00      	add	r7, sp, #0
 8000344:	4603      	mov	r3, r0
 8000346:	71fb      	strb	r3, [r7, #7]
	return (byteString << 4) & 0x70;
 8000348:	79fb      	ldrb	r3, [r7, #7]
 800034a:	011b      	lsls	r3, r3, #4
 800034c:	b2db      	uxtb	r3, r3
 800034e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000352:	b2db      	uxtb	r3, r3
}
 8000354:	4618      	mov	r0, r3
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	bc80      	pop	{r7}
 800035c:	4770      	bx	lr
	...

08000360 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &ECU_RxHeader, ECU_RxData) != HAL_OK)
 8000368:	4b09      	ldr	r3, [pc, #36]	; (8000390 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 800036a:	4a0a      	ldr	r2, [pc, #40]	; (8000394 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 800036c:	2101      	movs	r1, #1
 800036e:	6878      	ldr	r0, [r7, #4]
 8000370:	f001 f8d3 	bl	800151a <HAL_CAN_GetRxMessage>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d002      	beq.n	8000380 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>
	{
		Error_Handler();
 800037a:	f000 fb69 	bl	8000a50 <Error_Handler>
	}
	else
	{
		ReadRq_flag = 1;
	}
}
 800037e:	e002      	b.n	8000386 <HAL_CAN_RxFifo1MsgPendingCallback+0x26>
		ReadRq_flag = 1;
 8000380:	4b05      	ldr	r3, [pc, #20]	; (8000398 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 8000382:	2201      	movs	r2, #1
 8000384:	701a      	strb	r2, [r3, #0]
}
 8000386:	bf00      	nop
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000144 	.word	0x20000144
 8000394:	20000114 	.word	0x20000114
 8000398:	20000157 	.word	0x20000157

0800039c <ReadRequest_handle>:


void ReadRequest_handle(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
	FT_String = SF_N_PCI_FrameTypeHandle(ECU_RxData[0]);
 80003a2:	4b48      	ldr	r3, [pc, #288]	; (80004c4 <ReadRequest_handle+0x128>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	4618      	mov	r0, r3
 80003a8:	f7ff ffb9 	bl	800031e <SF_N_PCI_FrameTypeHandle>
 80003ac:	4603      	mov	r3, r0
 80003ae:	461a      	mov	r2, r3
 80003b0:	4b45      	ldr	r3, [pc, #276]	; (80004c8 <ReadRequest_handle+0x12c>)
 80003b2:	701a      	strb	r2, [r3, #0]
	DL_String = SF_N_PCI_DataLenngthHandle(ECU_RxData[0]);
 80003b4:	4b43      	ldr	r3, [pc, #268]	; (80004c4 <ReadRequest_handle+0x128>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff ffc0 	bl	800033e <SF_N_PCI_DataLenngthHandle>
 80003be:	4603      	mov	r3, r0
 80003c0:	461a      	mov	r2, r3
 80003c2:	4b42      	ldr	r3, [pc, #264]	; (80004cc <ReadRequest_handle+0x130>)
 80003c4:	701a      	strb	r2, [r3, #0]

	FrameType = GetFrameType(FT_String);
 80003c6:	4b40      	ldr	r3, [pc, #256]	; (80004c8 <ReadRequest_handle+0x12c>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff ff40 	bl	8000250 <GetFrameType>
 80003d0:	4603      	mov	r3, r0
 80003d2:	461a      	mov	r2, r3
 80003d4:	4b3e      	ldr	r3, [pc, #248]	; (80004d0 <ReadRequest_handle+0x134>)
 80003d6:	701a      	strb	r2, [r3, #0]
	DataLength = GetDataLength(DL_String);
 80003d8:	4b3c      	ldr	r3, [pc, #240]	; (80004cc <ReadRequest_handle+0x130>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	4618      	mov	r0, r3
 80003de:	f7ff ff5d 	bl	800029c <GetDataLength>
 80003e2:	4603      	mov	r3, r0
 80003e4:	461a      	mov	r2, r3
 80003e6:	4b3b      	ldr	r3, [pc, #236]	; (80004d4 <ReadRequest_handle+0x138>)
 80003e8:	701a      	strb	r2, [r3, #0]

	if(Check_ReadRq_Validation(FrameType,DataLength, ECU_RxData) != POSITIVE_RESPONSE)
 80003ea:	4b39      	ldr	r3, [pc, #228]	; (80004d0 <ReadRequest_handle+0x134>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	4a39      	ldr	r2, [pc, #228]	; (80004d4 <ReadRequest_handle+0x138>)
 80003f0:	7811      	ldrb	r1, [r2, #0]
 80003f2:	4a34      	ldr	r2, [pc, #208]	; (80004c4 <ReadRequest_handle+0x128>)
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff feff 	bl	80001f8 <Check_ReadRq_Validation>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d006      	beq.n	800040e <ReadRequest_handle+0x72>
	{
		//transmit negative response CAN frame packet
		HAL_CAN_AddTxMessage(&hcan, &ECU_TxHeader,NegativeReadRsp_TxData,&ECU_TxMailbox);
 8000400:	4b35      	ldr	r3, [pc, #212]	; (80004d8 <ReadRequest_handle+0x13c>)
 8000402:	4a36      	ldr	r2, [pc, #216]	; (80004dc <ReadRequest_handle+0x140>)
 8000404:	4936      	ldr	r1, [pc, #216]	; (80004e0 <ReadRequest_handle+0x144>)
 8000406:	4837      	ldr	r0, [pc, #220]	; (80004e4 <ReadRequest_handle+0x148>)
 8000408:	f000 ffb8 	bl	800137c <HAL_CAN_AddTxMessage>
					}
					//free(DataBuffer);
			break;
		}
	}
}
 800040c:	e055      	b.n	80004ba <ReadRequest_handle+0x11e>
		DID_Val = GetDID(ECU_RxData[2], ECU_RxData[3]);
 800040e:	4b2d      	ldr	r3, [pc, #180]	; (80004c4 <ReadRequest_handle+0x128>)
 8000410:	789b      	ldrb	r3, [r3, #2]
 8000412:	4a2c      	ldr	r2, [pc, #176]	; (80004c4 <ReadRequest_handle+0x128>)
 8000414:	78d2      	ldrb	r2, [r2, #3]
 8000416:	4611      	mov	r1, r2
 8000418:	4618      	mov	r0, r3
 800041a:	f7ff feae 	bl	800017a <GetDID>
 800041e:	4603      	mov	r3, r0
 8000420:	461a      	mov	r2, r3
 8000422:	4b31      	ldr	r3, [pc, #196]	; (80004e8 <ReadRequest_handle+0x14c>)
 8000424:	801a      	strh	r2, [r3, #0]
		switch(DID_Val)
 8000426:	4b30      	ldr	r3, [pc, #192]	; (80004e8 <ReadRequest_handle+0x14c>)
 8000428:	881b      	ldrh	r3, [r3, #0]
 800042a:	461a      	mov	r2, r3
 800042c:	f240 1323 	movw	r3, #291	; 0x123
 8000430:	429a      	cmp	r2, r3
 8000432:	d142      	bne.n	80004ba <ReadRequest_handle+0x11e>
				uint8_t DataBuffer[sizeof(TEST_LABEL)] = TEST_LABEL;
 8000434:	4a2d      	ldr	r2, [pc, #180]	; (80004ec <ReadRequest_handle+0x150>)
 8000436:	463b      	mov	r3, r7
 8000438:	e892 0003 	ldmia.w	r2, {r0, r1}
 800043c:	6018      	str	r0, [r3, #0]
 800043e:	3304      	adds	r3, #4
 8000440:	7019      	strb	r1, [r3, #0]
					PositiveReadRsp_TxData[0] = ECU_RxData[1] + 0x40;
 8000442:	4b20      	ldr	r3, [pc, #128]	; (80004c4 <ReadRequest_handle+0x128>)
 8000444:	785b      	ldrb	r3, [r3, #1]
 8000446:	3340      	adds	r3, #64	; 0x40
 8000448:	b2da      	uxtb	r2, r3
 800044a:	4b29      	ldr	r3, [pc, #164]	; (80004f0 <ReadRequest_handle+0x154>)
 800044c:	701a      	strb	r2, [r3, #0]
					PositiveReadRsp_TxData[1] = ECU_RxData[2];
 800044e:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <ReadRequest_handle+0x128>)
 8000450:	789a      	ldrb	r2, [r3, #2]
 8000452:	4b27      	ldr	r3, [pc, #156]	; (80004f0 <ReadRequest_handle+0x154>)
 8000454:	705a      	strb	r2, [r3, #1]
					PositiveReadRsp_TxData[2] = ECU_RxData[3];
 8000456:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <ReadRequest_handle+0x128>)
 8000458:	78da      	ldrb	r2, [r3, #3]
 800045a:	4b25      	ldr	r3, [pc, #148]	; (80004f0 <ReadRequest_handle+0x154>)
 800045c:	709a      	strb	r2, [r3, #2]
					PositiveReadRsp_TxData[3] = FT_SINGLEFRAME + sizeof(DataBuffer); //du lieu data co do dai la 4 - TEST
 800045e:	4b24      	ldr	r3, [pc, #144]	; (80004f0 <ReadRequest_handle+0x154>)
 8000460:	2205      	movs	r2, #5
 8000462:	70da      	strb	r2, [r3, #3]
					for (index_array = 0;index_array<sizeof(DataBuffer);index_array++)
 8000464:	4b23      	ldr	r3, [pc, #140]	; (80004f4 <ReadRequest_handle+0x158>)
 8000466:	2200      	movs	r2, #0
 8000468:	701a      	strb	r2, [r3, #0]
 800046a:	e011      	b.n	8000490 <ReadRequest_handle+0xf4>
						PositiveReadRsp_TxData[index_array+4] = DataBuffer[index_array];
 800046c:	4b21      	ldr	r3, [pc, #132]	; (80004f4 <ReadRequest_handle+0x158>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	461a      	mov	r2, r3
 8000472:	4b20      	ldr	r3, [pc, #128]	; (80004f4 <ReadRequest_handle+0x158>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	3304      	adds	r3, #4
 8000478:	3208      	adds	r2, #8
 800047a:	443a      	add	r2, r7
 800047c:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 8000480:	4a1b      	ldr	r2, [pc, #108]	; (80004f0 <ReadRequest_handle+0x154>)
 8000482:	54d1      	strb	r1, [r2, r3]
					for (index_array = 0;index_array<sizeof(DataBuffer);index_array++)
 8000484:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <ReadRequest_handle+0x158>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	3301      	adds	r3, #1
 800048a:	b2da      	uxtb	r2, r3
 800048c:	4b19      	ldr	r3, [pc, #100]	; (80004f4 <ReadRequest_handle+0x158>)
 800048e:	701a      	strb	r2, [r3, #0]
 8000490:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <ReadRequest_handle+0x158>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b04      	cmp	r3, #4
 8000496:	d9e9      	bls.n	800046c <ReadRequest_handle+0xd0>
					if (HAL_CAN_AddTxMessage(&hcan, &ECU_TxHeader,PositiveReadRsp_TxData,&ECU_TxMailbox) != HAL_OK)
 8000498:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <ReadRequest_handle+0x13c>)
 800049a:	4a15      	ldr	r2, [pc, #84]	; (80004f0 <ReadRequest_handle+0x154>)
 800049c:	4910      	ldr	r1, [pc, #64]	; (80004e0 <ReadRequest_handle+0x144>)
 800049e:	4811      	ldr	r0, [pc, #68]	; (80004e4 <ReadRequest_handle+0x148>)
 80004a0:	f000 ff6c 	bl	800137c <HAL_CAN_AddTxMessage>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d003      	beq.n	80004b2 <ReadRequest_handle+0x116>
								error_flag = 1;
 80004aa:	4b13      	ldr	r3, [pc, #76]	; (80004f8 <ReadRequest_handle+0x15c>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	701a      	strb	r2, [r3, #0]
			break;
 80004b0:	e002      	b.n	80004b8 <ReadRequest_handle+0x11c>
								error_flag = 0;
 80004b2:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <ReadRequest_handle+0x15c>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
			break;
 80004b8:	bf00      	nop
}
 80004ba:	bf00      	nop
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	20000144 	.word	0x20000144
 80004c8:	2000014c 	.word	0x2000014c
 80004cc:	2000014d 	.word	0x2000014d
 80004d0:	2000014e 	.word	0x2000014e
 80004d4:	2000014f 	.word	0x2000014f
 80004d8:	20000130 	.word	0x20000130
 80004dc:	20000000 	.word	0x20000000
 80004e0:	200000fc 	.word	0x200000fc
 80004e4:	2000008c 	.word	0x2000008c
 80004e8:	20000152 	.word	0x20000152
 80004ec:	080044ec 	.word	0x080044ec
 80004f0:	20000134 	.word	0x20000134
 80004f4:	20000155 	.word	0x20000155
 80004f8:	20000156 	.word	0x20000156

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08a      	sub	sp, #40	; 0x28
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f000 fcad 	bl	8000e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f9d9 	bl	80008bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 fa7f 	bl	8000a0c <MX_GPIO_Init>
  MX_CAN_Init();
 800050e:	f000 fa1b 	bl	8000948 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000512:	f000 fa51 	bl	80009b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Init(&hcan);
 8000516:	488f      	ldr	r0, [pc, #572]	; (8000754 <main+0x258>)
 8000518:	f000 fd28 	bl	8000f6c <HAL_CAN_Init>

  //Send notify signal to recieve message from actuator node
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800051c:	2110      	movs	r1, #16
 800051e:	488d      	ldr	r0, [pc, #564]	; (8000754 <main+0x258>)
 8000520:	f001 f91c 	bl	800175c <HAL_CAN_ActivateNotification>

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000524:	2301      	movs	r3, #1
 8000526:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 2;  // anything between 0 to SlaveStartFilterBank
 8000528:	2302      	movs	r3, #2
 800052a:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 800052c:	2301      	movs	r3, #1
 800052e:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x712 << 5;
 8000530:	f24e 2340 	movw	r3, #57920	; 0xe240
 8000534:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x712 << 5;
 800053a:	f24e 2340 	movw	r3, #57920	; 0xe240
 800053e:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000544:	2300      	movs	r3, #0
 8000546:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000548:	2301      	movs	r3, #1
 800054a:	61fb      	str	r3, [r7, #28]
  //canfilterconfig.SlaveStartFilterBank = 14;

   HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800054c:	463b      	mov	r3, r7
 800054e:	4619      	mov	r1, r3
 8000550:	4880      	ldr	r0, [pc, #512]	; (8000754 <main+0x258>)
 8000552:	f000 fe06 	bl	8001162 <HAL_CAN_ConfigFilter>

   HAL_CAN_Start(&hcan);
 8000556:	487f      	ldr	r0, [pc, #508]	; (8000754 <main+0x258>)
 8000558:	f000 fecc 	bl	80012f4 <HAL_CAN_Start>

   //Tx ECU header general
   //Config CAN Tx header
   ECU_TxHeader.DLC = 8;
 800055c:	4b7e      	ldr	r3, [pc, #504]	; (8000758 <main+0x25c>)
 800055e:	2208      	movs	r2, #8
 8000560:	611a      	str	r2, [r3, #16]
   ECU_TxHeader.ExtId = 0;
 8000562:	4b7d      	ldr	r3, [pc, #500]	; (8000758 <main+0x25c>)
 8000564:	2200      	movs	r2, #0
 8000566:	605a      	str	r2, [r3, #4]
   ECU_TxHeader.IDE = CAN_ID_STD;
 8000568:	4b7b      	ldr	r3, [pc, #492]	; (8000758 <main+0x25c>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
   ECU_TxHeader.RTR = CAN_RTR_DATA;
 800056e:	4b7a      	ldr	r3, [pc, #488]	; (8000758 <main+0x25c>)
 8000570:	2200      	movs	r2, #0
 8000572:	60da      	str	r2, [r3, #12]
   ECU_TxHeader.StdId = 0x7A2;
 8000574:	4b78      	ldr	r3, [pc, #480]	; (8000758 <main+0x25c>)
 8000576:	f240 72a2 	movw	r2, #1954	; 0x7a2
 800057a:	601a      	str	r2, [r3, #0]
   ECU_TxHeader.TransmitGlobalTime = DISABLE;
 800057c:	4b76      	ldr	r3, [pc, #472]	; (8000758 <main+0x25c>)
 800057e:	2200      	movs	r2, #0
 8000580:	751a      	strb	r2, [r3, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 HAL_Delay(1000);
 8000582:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000586:	f000 fccd 	bl	8000f24 <HAL_Delay>

	 switch(ecu_state)
 800058a:	4b74      	ldr	r3, [pc, #464]	; (800075c <main+0x260>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b03      	cmp	r3, #3
 8000590:	d8f7      	bhi.n	8000582 <main+0x86>
 8000592:	a201      	add	r2, pc, #4	; (adr r2, 8000598 <main+0x9c>)
 8000594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000598:	080005a9 	.word	0x080005a9
 800059c:	080005ef 	.word	0x080005ef
 80005a0:	08000603 	.word	0x08000603
 80005a4:	080005fb 	.word	0x080005fb
	 {
	 	 case IDLE_STATE:
	 	 {
	 		 if(ReadRq_flag == 1)
 80005a8:	4b6d      	ldr	r3, [pc, #436]	; (8000760 <main+0x264>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d113      	bne.n	80005d8 <main+0xdc>
	 		 {
	 			 switch(ECU_RxData[1])
 80005b0:	4b6c      	ldr	r3, [pc, #432]	; (8000764 <main+0x268>)
 80005b2:	785b      	ldrb	r3, [r3, #1]
 80005b4:	2b2e      	cmp	r3, #46	; 0x2e
 80005b6:	d018      	beq.n	80005ea <main+0xee>
 80005b8:	2b2e      	cmp	r3, #46	; 0x2e
 80005ba:	f300 8174 	bgt.w	80008a6 <main+0x3aa>
 80005be:	2b22      	cmp	r3, #34	; 0x22
 80005c0:	d002      	beq.n	80005c8 <main+0xcc>
 80005c2:	2b27      	cmp	r3, #39	; 0x27
 80005c4:	d004      	beq.n	80005d0 <main+0xd4>
	 			 }
	 		 } else if (ReadRq_flag == 0)
	 		 {
	 			 ecu_state = IDLE_STATE;
	 		 }
	 		 break;
 80005c6:	e16e      	b.n	80008a6 <main+0x3aa>
	 			 		 ecu_state = READREQUEST_STATE;
 80005c8:	4b64      	ldr	r3, [pc, #400]	; (800075c <main+0x260>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]
	 			 		 break;
 80005ce:	e00d      	b.n	80005ec <main+0xf0>
	 			 		 ecu_state = SECURITY_ACCESS_STATE;
 80005d0:	4b62      	ldr	r3, [pc, #392]	; (800075c <main+0x260>)
 80005d2:	2202      	movs	r2, #2
 80005d4:	701a      	strb	r2, [r3, #0]
	 			 		 break;
 80005d6:	e009      	b.n	80005ec <main+0xf0>
	 		 } else if (ReadRq_flag == 0)
 80005d8:	4b61      	ldr	r3, [pc, #388]	; (8000760 <main+0x264>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	f040 8162 	bne.w	80008a6 <main+0x3aa>
	 			 ecu_state = IDLE_STATE;
 80005e2:	4b5e      	ldr	r3, [pc, #376]	; (800075c <main+0x260>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
	 		 break;
 80005e8:	e15d      	b.n	80008a6 <main+0x3aa>
	 			 		 break;
 80005ea:	bf00      	nop
	 		 break;
 80005ec:	e15b      	b.n	80008a6 <main+0x3aa>
	 	 }
	 	 case READREQUEST_STATE:
	 	 {
	 		 ReadRequest_handle();
 80005ee:	f7ff fed5 	bl	800039c <ReadRequest_handle>
	 		 ecu_state = IDLE_STATE;
 80005f2:	4b5a      	ldr	r3, [pc, #360]	; (800075c <main+0x260>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]
	 		 break;
 80005f8:	e159      	b.n	80008ae <main+0x3b2>
	 	 }
	 	 case WRITEREQUEST_STATE:
	 	 {
	 		 ecu_state = IDLE_STATE;
 80005fa:	4b58      	ldr	r3, [pc, #352]	; (800075c <main+0x260>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
	 		 break;
 8000600:	e155      	b.n	80008ae <main+0x3b2>
//	 		 {
//	 			 ecu_state == WRITEREQUEST_STATE;
//	 			 getwrite_flag = 0;
//	 		 }
	 		 //phan loai frame
	 		FT_String = SF_N_PCI_FrameTypeHandle(ECU_RxData[0]);
 8000602:	4b58      	ldr	r3, [pc, #352]	; (8000764 <main+0x268>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff fe89 	bl	800031e <SF_N_PCI_FrameTypeHandle>
 800060c:	4603      	mov	r3, r0
 800060e:	461a      	mov	r2, r3
 8000610:	4b55      	ldr	r3, [pc, #340]	; (8000768 <main+0x26c>)
 8000612:	701a      	strb	r2, [r3, #0]
	 		FrameType = GetFrameType(FT_String);
 8000614:	4b54      	ldr	r3, [pc, #336]	; (8000768 <main+0x26c>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff fe19 	bl	8000250 <GetFrameType>
 800061e:	4603      	mov	r3, r0
 8000620:	461a      	mov	r2, r3
 8000622:	4b52      	ldr	r3, [pc, #328]	; (800076c <main+0x270>)
 8000624:	701a      	strb	r2, [r3, #0]
	 		SecurityLevel = GetSecurityLevel(ECU_RxData[2],&key_level);
 8000626:	4b4f      	ldr	r3, [pc, #316]	; (8000764 <main+0x268>)
 8000628:	789b      	ldrb	r3, [r3, #2]
 800062a:	4951      	ldr	r1, [pc, #324]	; (8000770 <main+0x274>)
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff fd8d 	bl	800014c <GetSecurityLevel>
 8000632:	4603      	mov	r3, r0
 8000634:	461a      	mov	r2, r3
 8000636:	4b4f      	ldr	r3, [pc, #316]	; (8000774 <main+0x278>)
 8000638:	701a      	strb	r2, [r3, #0]

	 		switch(FrameType)
 800063a:	4b4c      	ldr	r3, [pc, #304]	; (800076c <main+0x270>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b02      	cmp	r3, #2
 8000640:	f000 812b 	beq.w	800089a <main+0x39e>
 8000644:	2b02      	cmp	r3, #2
 8000646:	f300 8130 	bgt.w	80008aa <main+0x3ae>
 800064a:	2b00      	cmp	r3, #0
 800064c:	d003      	beq.n	8000656 <main+0x15a>
 800064e:	2b01      	cmp	r3, #1
 8000650:	f000 809c 	beq.w	800078c <main+0x290>
	 			{
	 				break;
	 			}
	 		}

	 		 break;
 8000654:	e129      	b.n	80008aa <main+0x3ae>
	 				switch(SecurityLevel)
 8000656:	4b47      	ldr	r3, [pc, #284]	; (8000774 <main+0x278>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	f040 811f 	bne.w	800089e <main+0x3a2>
	 						SecuritySeed_TxData[0] = 0x06;
 8000660:	4b45      	ldr	r3, [pc, #276]	; (8000778 <main+0x27c>)
 8000662:	2206      	movs	r2, #6
 8000664:	701a      	strb	r2, [r3, #0]
	 						SecuritySeed_TxData[1] = ECU_RxData[1] + 40;
 8000666:	4b3f      	ldr	r3, [pc, #252]	; (8000764 <main+0x268>)
 8000668:	785b      	ldrb	r3, [r3, #1]
 800066a:	3328      	adds	r3, #40	; 0x28
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4b42      	ldr	r3, [pc, #264]	; (8000778 <main+0x27c>)
 8000670:	705a      	strb	r2, [r3, #1]
	 						SecuritySeed_TxData[2] = ECU_RxData[2];
 8000672:	4b3c      	ldr	r3, [pc, #240]	; (8000764 <main+0x268>)
 8000674:	789a      	ldrb	r2, [r3, #2]
 8000676:	4b40      	ldr	r3, [pc, #256]	; (8000778 <main+0x27c>)
 8000678:	709a      	strb	r2, [r3, #2]
	 						seed[0] = rand()%255;
 800067a:	f002 ff3d 	bl	80034f8 <rand>
 800067e:	4602      	mov	r2, r0
 8000680:	4b3e      	ldr	r3, [pc, #248]	; (800077c <main+0x280>)
 8000682:	fb83 1302 	smull	r1, r3, r3, r2
 8000686:	4413      	add	r3, r2
 8000688:	11d9      	asrs	r1, r3, #7
 800068a:	17d3      	asrs	r3, r2, #31
 800068c:	1ac9      	subs	r1, r1, r3
 800068e:	460b      	mov	r3, r1
 8000690:	021b      	lsls	r3, r3, #8
 8000692:	1a5b      	subs	r3, r3, r1
 8000694:	1ad1      	subs	r1, r2, r3
 8000696:	b2ca      	uxtb	r2, r1
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <main+0x284>)
 800069a:	701a      	strb	r2, [r3, #0]
	 						seed[1] = rand()%255;
 800069c:	f002 ff2c 	bl	80034f8 <rand>
 80006a0:	4602      	mov	r2, r0
 80006a2:	4b36      	ldr	r3, [pc, #216]	; (800077c <main+0x280>)
 80006a4:	fb83 1302 	smull	r1, r3, r3, r2
 80006a8:	4413      	add	r3, r2
 80006aa:	11d9      	asrs	r1, r3, #7
 80006ac:	17d3      	asrs	r3, r2, #31
 80006ae:	1ac9      	subs	r1, r1, r3
 80006b0:	460b      	mov	r3, r1
 80006b2:	021b      	lsls	r3, r3, #8
 80006b4:	1a5b      	subs	r3, r3, r1
 80006b6:	1ad1      	subs	r1, r2, r3
 80006b8:	b2ca      	uxtb	r2, r1
 80006ba:	4b31      	ldr	r3, [pc, #196]	; (8000780 <main+0x284>)
 80006bc:	705a      	strb	r2, [r3, #1]
	 						seed[2] = rand()%255;
 80006be:	f002 ff1b 	bl	80034f8 <rand>
 80006c2:	4602      	mov	r2, r0
 80006c4:	4b2d      	ldr	r3, [pc, #180]	; (800077c <main+0x280>)
 80006c6:	fb83 1302 	smull	r1, r3, r3, r2
 80006ca:	4413      	add	r3, r2
 80006cc:	11d9      	asrs	r1, r3, #7
 80006ce:	17d3      	asrs	r3, r2, #31
 80006d0:	1ac9      	subs	r1, r1, r3
 80006d2:	460b      	mov	r3, r1
 80006d4:	021b      	lsls	r3, r3, #8
 80006d6:	1a5b      	subs	r3, r3, r1
 80006d8:	1ad1      	subs	r1, r2, r3
 80006da:	b2ca      	uxtb	r2, r1
 80006dc:	4b28      	ldr	r3, [pc, #160]	; (8000780 <main+0x284>)
 80006de:	709a      	strb	r2, [r3, #2]
	 						seed[3] = rand()%255;
 80006e0:	f002 ff0a 	bl	80034f8 <rand>
 80006e4:	4602      	mov	r2, r0
 80006e6:	4b25      	ldr	r3, [pc, #148]	; (800077c <main+0x280>)
 80006e8:	fb83 1302 	smull	r1, r3, r3, r2
 80006ec:	4413      	add	r3, r2
 80006ee:	11d9      	asrs	r1, r3, #7
 80006f0:	17d3      	asrs	r3, r2, #31
 80006f2:	1ac9      	subs	r1, r1, r3
 80006f4:	460b      	mov	r3, r1
 80006f6:	021b      	lsls	r3, r3, #8
 80006f8:	1a5b      	subs	r3, r3, r1
 80006fa:	1ad1      	subs	r1, r2, r3
 80006fc:	b2ca      	uxtb	r2, r1
 80006fe:	4b20      	ldr	r3, [pc, #128]	; (8000780 <main+0x284>)
 8000700:	70da      	strb	r2, [r3, #3]
	 						SecuritySeed_TxData[3] = seed[0];
 8000702:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <main+0x284>)
 8000704:	781a      	ldrb	r2, [r3, #0]
 8000706:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <main+0x27c>)
 8000708:	70da      	strb	r2, [r3, #3]
	 						SecuritySeed_TxData[4] = seed[1];
 800070a:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <main+0x284>)
 800070c:	785a      	ldrb	r2, [r3, #1]
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <main+0x27c>)
 8000710:	711a      	strb	r2, [r3, #4]
	 						SecuritySeed_TxData[5] = seed[2];
 8000712:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <main+0x284>)
 8000714:	789a      	ldrb	r2, [r3, #2]
 8000716:	4b18      	ldr	r3, [pc, #96]	; (8000778 <main+0x27c>)
 8000718:	715a      	strb	r2, [r3, #5]
	 						SecuritySeed_TxData[6] = seed[3];
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <main+0x284>)
 800071c:	78da      	ldrb	r2, [r3, #3]
 800071e:	4b16      	ldr	r3, [pc, #88]	; (8000778 <main+0x27c>)
 8000720:	719a      	strb	r2, [r3, #6]
	 						SecuritySeed_TxData[7] = 0x00;
 8000722:	4b15      	ldr	r3, [pc, #84]	; (8000778 <main+0x27c>)
 8000724:	2200      	movs	r2, #0
 8000726:	71da      	strb	r2, [r3, #7]
	 						SecuritySeed_TxData[8] = 0x00;
 8000728:	4b13      	ldr	r3, [pc, #76]	; (8000778 <main+0x27c>)
 800072a:	2200      	movs	r2, #0
 800072c:	721a      	strb	r2, [r3, #8]
	 						if(HAL_CAN_AddTxMessage(&hcan,&ECU_TxHeader,SecuritySeed_TxData,&ECU_TxMailbox) != HAL_OK)
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <main+0x288>)
 8000730:	4a11      	ldr	r2, [pc, #68]	; (8000778 <main+0x27c>)
 8000732:	4909      	ldr	r1, [pc, #36]	; (8000758 <main+0x25c>)
 8000734:	4807      	ldr	r0, [pc, #28]	; (8000754 <main+0x258>)
 8000736:	f000 fe21 	bl	800137c <HAL_CAN_AddTxMessage>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d003      	beq.n	8000748 <main+0x24c>
	 							 error_flag = 1;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <main+0x28c>)
 8000742:	2201      	movs	r2, #1
 8000744:	701a      	strb	r2, [r3, #0]
						break;
 8000746:	e002      	b.n	800074e <main+0x252>
	 							 error_flag = 0;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <main+0x28c>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
						break;
 800074e:	bf00      	nop
	 				break;
 8000750:	e0a5      	b.n	800089e <main+0x3a2>
 8000752:	bf00      	nop
 8000754:	2000008c 	.word	0x2000008c
 8000758:	200000fc 	.word	0x200000fc
 800075c:	2000016c 	.word	0x2000016c
 8000760:	20000157 	.word	0x20000157
 8000764:	20000144 	.word	0x20000144
 8000768:	2000014c 	.word	0x2000014c
 800076c:	2000014e 	.word	0x2000014e
 8000770:	20000154 	.word	0x20000154
 8000774:	20000150 	.word	0x20000150
 8000778:	2000013c 	.word	0x2000013c
 800077c:	80808081 	.word	0x80808081
 8000780:	20000158 	.word	0x20000158
 8000784:	20000130 	.word	0x20000130
 8000788:	20000156 	.word	0x20000156
	 				switch(SecurityLevel)
 800078c:	4b48      	ldr	r3, [pc, #288]	; (80008b0 <main+0x3b4>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	f040 8086 	bne.w	80008a2 <main+0x3a6>
	 						key[0] = seed[0] ^ seed[1]; //xor
 8000796:	4b47      	ldr	r3, [pc, #284]	; (80008b4 <main+0x3b8>)
 8000798:	781a      	ldrb	r2, [r3, #0]
 800079a:	4b46      	ldr	r3, [pc, #280]	; (80008b4 <main+0x3b8>)
 800079c:	785b      	ldrb	r3, [r3, #1]
 800079e:	4053      	eors	r3, r2
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4b45      	ldr	r3, [pc, #276]	; (80008b8 <main+0x3bc>)
 80007a4:	701a      	strb	r2, [r3, #0]
	 						key[1] = seed[1] + seed[2];
 80007a6:	4b43      	ldr	r3, [pc, #268]	; (80008b4 <main+0x3b8>)
 80007a8:	785a      	ldrb	r2, [r3, #1]
 80007aa:	4b42      	ldr	r3, [pc, #264]	; (80008b4 <main+0x3b8>)
 80007ac:	789b      	ldrb	r3, [r3, #2]
 80007ae:	4413      	add	r3, r2
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b41      	ldr	r3, [pc, #260]	; (80008b8 <main+0x3bc>)
 80007b4:	705a      	strb	r2, [r3, #1]
	 						key[2] = seed[2] ^ seed[3];
 80007b6:	4b3f      	ldr	r3, [pc, #252]	; (80008b4 <main+0x3b8>)
 80007b8:	789a      	ldrb	r2, [r3, #2]
 80007ba:	4b3e      	ldr	r3, [pc, #248]	; (80008b4 <main+0x3b8>)
 80007bc:	78db      	ldrb	r3, [r3, #3]
 80007be:	4053      	eors	r3, r2
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b3d      	ldr	r3, [pc, #244]	; (80008b8 <main+0x3bc>)
 80007c4:	709a      	strb	r2, [r3, #2]
	 						key[3] = seed[3] + seed[0];
 80007c6:	4b3b      	ldr	r3, [pc, #236]	; (80008b4 <main+0x3b8>)
 80007c8:	78da      	ldrb	r2, [r3, #3]
 80007ca:	4b3a      	ldr	r3, [pc, #232]	; (80008b4 <main+0x3b8>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	4413      	add	r3, r2
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4b39      	ldr	r3, [pc, #228]	; (80008b8 <main+0x3bc>)
 80007d4:	70da      	strb	r2, [r3, #3]
	 						key[4] = seed[0] | seed[1];
 80007d6:	4b37      	ldr	r3, [pc, #220]	; (80008b4 <main+0x3b8>)
 80007d8:	781a      	ldrb	r2, [r3, #0]
 80007da:	4b36      	ldr	r3, [pc, #216]	; (80008b4 <main+0x3b8>)
 80007dc:	785b      	ldrb	r3, [r3, #1]
 80007de:	4313      	orrs	r3, r2
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b35      	ldr	r3, [pc, #212]	; (80008b8 <main+0x3bc>)
 80007e4:	711a      	strb	r2, [r3, #4]
	 						key[5] = seed[1] + seed[2];
 80007e6:	4b33      	ldr	r3, [pc, #204]	; (80008b4 <main+0x3b8>)
 80007e8:	785a      	ldrb	r2, [r3, #1]
 80007ea:	4b32      	ldr	r3, [pc, #200]	; (80008b4 <main+0x3b8>)
 80007ec:	789b      	ldrb	r3, [r3, #2]
 80007ee:	4413      	add	r3, r2
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4b31      	ldr	r3, [pc, #196]	; (80008b8 <main+0x3bc>)
 80007f4:	715a      	strb	r2, [r3, #5]
	 						key[6] = seed[2] | seed[3];
 80007f6:	4b2f      	ldr	r3, [pc, #188]	; (80008b4 <main+0x3b8>)
 80007f8:	789a      	ldrb	r2, [r3, #2]
 80007fa:	4b2e      	ldr	r3, [pc, #184]	; (80008b4 <main+0x3b8>)
 80007fc:	78db      	ldrb	r3, [r3, #3]
 80007fe:	4313      	orrs	r3, r2
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b2d      	ldr	r3, [pc, #180]	; (80008b8 <main+0x3bc>)
 8000804:	719a      	strb	r2, [r3, #6]
	 						key[7] = seed[3] + seed[0];
 8000806:	4b2b      	ldr	r3, [pc, #172]	; (80008b4 <main+0x3b8>)
 8000808:	78da      	ldrb	r2, [r3, #3]
 800080a:	4b2a      	ldr	r3, [pc, #168]	; (80008b4 <main+0x3b8>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	4413      	add	r3, r2
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b29      	ldr	r3, [pc, #164]	; (80008b8 <main+0x3bc>)
 8000814:	71da      	strb	r2, [r3, #7]
	 						key[8] = seed[0] & seed[1];
 8000816:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <main+0x3b8>)
 8000818:	781a      	ldrb	r2, [r3, #0]
 800081a:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <main+0x3b8>)
 800081c:	785b      	ldrb	r3, [r3, #1]
 800081e:	4013      	ands	r3, r2
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <main+0x3bc>)
 8000824:	721a      	strb	r2, [r3, #8]
	 						key[9] = seed[1] + seed[2];
 8000826:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <main+0x3b8>)
 8000828:	785a      	ldrb	r2, [r3, #1]
 800082a:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <main+0x3b8>)
 800082c:	789b      	ldrb	r3, [r3, #2]
 800082e:	4413      	add	r3, r2
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <main+0x3bc>)
 8000834:	725a      	strb	r2, [r3, #9]
	 						key[10] = seed[2] & seed[3];
 8000836:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <main+0x3b8>)
 8000838:	789a      	ldrb	r2, [r3, #2]
 800083a:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <main+0x3b8>)
 800083c:	78db      	ldrb	r3, [r3, #3]
 800083e:	4013      	ands	r3, r2
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <main+0x3bc>)
 8000844:	729a      	strb	r2, [r3, #10]
	 						key[11] = seed[3] + seed[0];
 8000846:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <main+0x3b8>)
 8000848:	78da      	ldrb	r2, [r3, #3]
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <main+0x3b8>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	4413      	add	r3, r2
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <main+0x3bc>)
 8000854:	72da      	strb	r2, [r3, #11]
	 						key[12] = seed[0] - seed[1];
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <main+0x3b8>)
 8000858:	781a      	ldrb	r2, [r3, #0]
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <main+0x3b8>)
 800085c:	785b      	ldrb	r3, [r3, #1]
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <main+0x3bc>)
 8000864:	731a      	strb	r2, [r3, #12]
	 						key[13] = seed[1] + seed[2];
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <main+0x3b8>)
 8000868:	785a      	ldrb	r2, [r3, #1]
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <main+0x3b8>)
 800086c:	789b      	ldrb	r3, [r3, #2]
 800086e:	4413      	add	r3, r2
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <main+0x3bc>)
 8000874:	735a      	strb	r2, [r3, #13]
	 						key[14] = seed[2] - seed[3];
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <main+0x3b8>)
 8000878:	789a      	ldrb	r2, [r3, #2]
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <main+0x3b8>)
 800087c:	78db      	ldrb	r3, [r3, #3]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	b2da      	uxtb	r2, r3
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <main+0x3bc>)
 8000884:	739a      	strb	r2, [r3, #14]
	 						key[15] = seed[3] + seed[0];
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <main+0x3b8>)
 8000888:	78da      	ldrb	r2, [r3, #3]
 800088a:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <main+0x3b8>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	4413      	add	r3, r2
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <main+0x3bc>)
 8000894:	73da      	strb	r2, [r3, #15]
	 						break;
 8000896:	bf00      	nop
	 				break;
 8000898:	e003      	b.n	80008a2 <main+0x3a6>
	 				break;
 800089a:	bf00      	nop
 800089c:	e005      	b.n	80008aa <main+0x3ae>
	 				break;
 800089e:	bf00      	nop
 80008a0:	e003      	b.n	80008aa <main+0x3ae>
	 				break;
 80008a2:	bf00      	nop
	 		 break;
 80008a4:	e001      	b.n	80008aa <main+0x3ae>
	 		 break;
 80008a6:	bf00      	nop
 80008a8:	e66b      	b.n	8000582 <main+0x86>
	 		 break;
 80008aa:	bf00      	nop
 80008ac:	e669      	b.n	8000582 <main+0x86>
	 HAL_Delay(1000);
 80008ae:	e668      	b.n	8000582 <main+0x86>
 80008b0:	20000150 	.word	0x20000150
 80008b4:	20000158 	.word	0x20000158
 80008b8:	2000015c 	.word	0x2000015c

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b090      	sub	sp, #64	; 0x40
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0318 	add.w	r3, r7, #24
 80008c6:	2228      	movs	r2, #40	; 0x28
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 ff57 	bl	800377e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008de:	2301      	movs	r3, #1
 80008e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ec:	2301      	movs	r3, #1
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f0:	2302      	movs	r3, #2
 80008f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008fa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000900:	f107 0318 	add.w	r3, r7, #24
 8000904:	4618      	mov	r0, r3
 8000906:	f001 fcb5 	bl	8002274 <HAL_RCC_OscConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000910:	f000 f89e 	bl	8000a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000914:	230f      	movs	r3, #15
 8000916:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000918:	2302      	movs	r3, #2
 800091a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000924:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2102      	movs	r1, #2
 800092e:	4618      	mov	r0, r3
 8000930:	f001 ff22 	bl	8002778 <HAL_RCC_ClockConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800093a:	f000 f889 	bl	8000a50 <Error_Handler>
  }
}
 800093e:	bf00      	nop
 8000940:	3740      	adds	r7, #64	; 0x40
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <MX_CAN_Init+0x68>)
 800094e:	4a19      	ldr	r2, [pc, #100]	; (80009b4 <MX_CAN_Init+0x6c>)
 8000950:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_CAN_Init+0x68>)
 8000954:	2204      	movs	r2, #4
 8000956:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_CAN_Init+0x68>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_CAN_Init+0x68>)
 8000960:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000964:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_CAN_Init+0x68>)
 8000968:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800096c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MX_CAN_Init+0x68>)
 8000970:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000974:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_CAN_Init+0x68>)
 8000978:	2200      	movs	r2, #0
 800097a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_CAN_Init+0x68>)
 800097e:	2200      	movs	r2, #0
 8000980:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_CAN_Init+0x68>)
 8000984:	2200      	movs	r2, #0
 8000986:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_CAN_Init+0x68>)
 800098a:	2201      	movs	r2, #1
 800098c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_CAN_Init+0x68>)
 8000990:	2200      	movs	r2, #0
 8000992:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_CAN_Init+0x68>)
 8000996:	2200      	movs	r2, #0
 8000998:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_CAN_Init+0x68>)
 800099c:	f000 fae6 	bl	8000f6c <HAL_CAN_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80009a6:	f000 f853 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000008c 	.word	0x2000008c
 80009b4:	40006400 	.word	0x40006400

080009b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009be:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <MX_USART1_UART_Init+0x50>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009f0:	f002 f850 	bl	8002a94 <HAL_UART_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009fa:	f000 f829 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200000b4 	.word	0x200000b4
 8000a08:	40013800 	.word	0x40013800

08000a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_GPIO_Init+0x40>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <MX_GPIO_Init+0x40>)
 8000a18:	f043 0320 	orr.w	r3, r3, #32
 8000a1c:	6193      	str	r3, [r2, #24]
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <MX_GPIO_Init+0x40>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	f003 0320 	and.w	r3, r3, #32
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <MX_GPIO_Init+0x40>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <MX_GPIO_Init+0x40>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	6193      	str	r3, [r2, #24]
 8000a36:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <MX_GPIO_Init+0x40>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	40021000 	.word	0x40021000

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <Error_Handler+0x8>
	...

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <HAL_MspInit+0x5c>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <HAL_MspInit+0x5c>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6193      	str	r3, [r2, #24]
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_MspInit+0x5c>)
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <HAL_MspInit+0x5c>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <HAL_MspInit+0x5c>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a84:	61d3      	str	r3, [r2, #28]
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <HAL_MspInit+0x5c>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <HAL_MspInit+0x60>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	4a04      	ldr	r2, [pc, #16]	; (8000abc <HAL_MspInit+0x60>)
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40010000 	.word	0x40010000

08000ac0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a20      	ldr	r2, [pc, #128]	; (8000b5c <HAL_CAN_MspInit+0x9c>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d139      	bne.n	8000b54 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ae0:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <HAL_CAN_MspInit+0xa0>)
 8000ae2:	69db      	ldr	r3, [r3, #28]
 8000ae4:	4a1e      	ldr	r2, [pc, #120]	; (8000b60 <HAL_CAN_MspInit+0xa0>)
 8000ae6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aea:	61d3      	str	r3, [r2, #28]
 8000aec:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <HAL_CAN_MspInit+0xa0>)
 8000aee:	69db      	ldr	r3, [r3, #28]
 8000af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af8:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <HAL_CAN_MspInit+0xa0>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a18      	ldr	r2, [pc, #96]	; (8000b60 <HAL_CAN_MspInit+0xa0>)
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <HAL_CAN_MspInit+0xa0>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1e:	f107 0310 	add.w	r3, r7, #16
 8000b22:	4619      	mov	r1, r3
 8000b24:	480f      	ldr	r0, [pc, #60]	; (8000b64 <HAL_CAN_MspInit+0xa4>)
 8000b26:	f001 fa21 	bl	8001f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 0310 	add.w	r3, r7, #16
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4809      	ldr	r0, [pc, #36]	; (8000b64 <HAL_CAN_MspInit+0xa4>)
 8000b40:	f001 fa14 	bl	8001f6c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2100      	movs	r1, #0
 8000b48:	2015      	movs	r0, #21
 8000b4a:	f001 f926 	bl	8001d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000b4e:	2015      	movs	r0, #21
 8000b50:	f001 f93f 	bl	8001dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b54:	bf00      	nop
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40006400 	.word	0x40006400
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40010800 	.word	0x40010800

08000b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a20      	ldr	r2, [pc, #128]	; (8000c04 <HAL_UART_MspInit+0x9c>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d139      	bne.n	8000bfc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b88:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <HAL_UART_MspInit+0xa0>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a1e      	ldr	r2, [pc, #120]	; (8000c08 <HAL_UART_MspInit+0xa0>)
 8000b8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <HAL_UART_MspInit+0xa0>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <HAL_UART_MspInit+0xa0>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4a18      	ldr	r2, [pc, #96]	; (8000c08 <HAL_UART_MspInit+0xa0>)
 8000ba6:	f043 0304 	orr.w	r3, r3, #4
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <HAL_UART_MspInit+0xa0>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f003 0304 	and.w	r3, r3, #4
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	4619      	mov	r1, r3
 8000bcc:	480f      	ldr	r0, [pc, #60]	; (8000c0c <HAL_UART_MspInit+0xa4>)
 8000bce:	f001 f9cd 	bl	8001f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	4619      	mov	r1, r3
 8000be6:	4809      	ldr	r0, [pc, #36]	; (8000c0c <HAL_UART_MspInit+0xa4>)
 8000be8:	f001 f9c0 	bl	8001f6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2100      	movs	r1, #0
 8000bf0:	2025      	movs	r0, #37	; 0x25
 8000bf2:	f001 f8d2 	bl	8001d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bf6:	2025      	movs	r0, #37	; 0x25
 8000bf8:	f001 f8eb 	bl	8001dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bfc:	bf00      	nop
 8000bfe:	3720      	adds	r7, #32
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40013800 	.word	0x40013800
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40010800 	.word	0x40010800

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <NMI_Handler+0x4>

08000c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <MemManage_Handler+0x4>

08000c22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <BusFault_Handler+0x4>

08000c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <UsageFault_Handler+0x4>

08000c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr

08000c3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr

08000c46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr

08000c52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c56:	f000 f949 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <CAN1_RX1_IRQHandler+0x10>)
 8000c66:	f000 fd9e 	bl	80017a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	2000008c 	.word	0x2000008c

08000c74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <USART1_IRQHandler+0x10>)
 8000c7a:	f001 ff5b 	bl	8002b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200000b4 	.word	0x200000b4

08000c88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return 1;
 8000c8c:	2301      	movs	r3, #1
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr

08000c96 <_kill>:

int _kill(int pid, int sig)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ca0:	f002 fdbc 	bl	800381c <__errno>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2216      	movs	r2, #22
 8000ca8:	601a      	str	r2, [r3, #0]
  return -1;
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <_exit>:

void _exit (int status)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000cbe:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ffe7 	bl	8000c96 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000cc8:	e7fe      	b.n	8000cc8 <_exit+0x12>

08000cca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	60f8      	str	r0, [r7, #12]
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	e00a      	b.n	8000cf2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cdc:	f3af 8000 	nop.w
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	1c5a      	adds	r2, r3, #1
 8000ce6:	60ba      	str	r2, [r7, #8]
 8000ce8:	b2ca      	uxtb	r2, r1
 8000cea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	697a      	ldr	r2, [r7, #20]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	dbf0      	blt.n	8000cdc <_read+0x12>
  }

  return len;
 8000cfa:	687b      	ldr	r3, [r7, #4]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	e009      	b.n	8000d2a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	1c5a      	adds	r2, r3, #1
 8000d1a:	60ba      	str	r2, [r7, #8]
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	3301      	adds	r3, #1
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	dbf1      	blt.n	8000d16 <_write+0x12>
  }
  return len;
 8000d32:	687b      	ldr	r3, [r7, #4]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <_close>:

int _close(int file)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr

08000d52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d62:	605a      	str	r2, [r3, #4]
  return 0;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <_isatty>:

int _isatty(int file)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d78:	2301      	movs	r3, #1
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr

08000d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da4:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <_sbrk+0x5c>)
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <_sbrk+0x60>)
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <_sbrk+0x64>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <_sbrk+0x68>)
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d207      	bcs.n	8000ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dcc:	f002 fd26 	bl	800381c <__errno>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	e009      	b.n	8000df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <_sbrk+0x64>)
 8000dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20005000 	.word	0x20005000
 8000dfc:	00000400 	.word	0x00000400
 8000e00:	20000170 	.word	0x20000170
 8000e04:	200002c8 	.word	0x200002c8

08000e08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e14:	f7ff fff8 	bl	8000e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e18:	480b      	ldr	r0, [pc, #44]	; (8000e48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e1a:	490c      	ldr	r1, [pc, #48]	; (8000e4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e1c:	4a0c      	ldr	r2, [pc, #48]	; (8000e50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e20:	e002      	b.n	8000e28 <LoopCopyDataInit>

08000e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e26:	3304      	adds	r3, #4

08000e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e2c:	d3f9      	bcc.n	8000e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2e:	4a09      	ldr	r2, [pc, #36]	; (8000e54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e30:	4c09      	ldr	r4, [pc, #36]	; (8000e58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e34:	e001      	b.n	8000e3a <LoopFillZerobss>

08000e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e38:	3204      	adds	r2, #4

08000e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e3c:	d3fb      	bcc.n	8000e36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f002 fcf3 	bl	8003828 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e42:	f7ff fb5b 	bl	80004fc <main>
  bx lr
 8000e46:	4770      	bx	lr
  ldr r0, =_sdata
 8000e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e4c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e50:	08004604 	.word	0x08004604
  ldr r2, =_sbss
 8000e54:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e58:	200002c4 	.word	0x200002c4

08000e5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e5c:	e7fe      	b.n	8000e5c <ADC1_2_IRQHandler>
	...

08000e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_Init+0x28>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <HAL_Init+0x28>)
 8000e6a:	f043 0310 	orr.w	r3, r3, #16
 8000e6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f000 ff87 	bl	8001d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e76:	200f      	movs	r0, #15
 8000e78:	f000 f808 	bl	8000e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e7c:	f7ff fdee 	bl	8000a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40022000 	.word	0x40022000

08000e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_InitTick+0x54>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0x58>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 ff9f 	bl	8001dee <HAL_SYSTICK_Config>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00e      	b.n	8000ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d80a      	bhi.n	8000ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f000 ff67 	bl	8001d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ecc:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <HAL_InitTick+0x5c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e000      	b.n	8000ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000010 	.word	0x20000010
 8000ee8:	2000000c 	.word	0x2000000c

08000eec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <HAL_IncTick+0x1c>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <HAL_IncTick+0x20>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a03      	ldr	r2, [pc, #12]	; (8000f0c <HAL_IncTick+0x20>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	20000010 	.word	0x20000010
 8000f0c:	20000174 	.word	0x20000174

08000f10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b02      	ldr	r3, [pc, #8]	; (8000f20 <HAL_GetTick+0x10>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	20000174 	.word	0x20000174

08000f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff fff0 	bl	8000f10 <HAL_GetTick>
 8000f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f3c:	d005      	beq.n	8000f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_Delay+0x44>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f4a:	bf00      	nop
 8000f4c:	f7ff ffe0 	bl	8000f10 <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d8f7      	bhi.n	8000f4c <HAL_Delay+0x28>
  {
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000010 	.word	0x20000010

08000f6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e0ed      	b.n	800115a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d102      	bne.n	8000f90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff fd98 	bl	8000ac0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f042 0201 	orr.w	r2, r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fa0:	f7ff ffb6 	bl	8000f10 <HAL_GetTick>
 8000fa4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fa6:	e012      	b.n	8000fce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fa8:	f7ff ffb2 	bl	8000f10 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b0a      	cmp	r3, #10
 8000fb4:	d90b      	bls.n	8000fce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2205      	movs	r2, #5
 8000fc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e0c5      	b.n	800115a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0e5      	beq.n	8000fa8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0202 	bic.w	r2, r2, #2
 8000fea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fec:	f7ff ff90 	bl	8000f10 <HAL_GetTick>
 8000ff0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ff2:	e012      	b.n	800101a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ff4:	f7ff ff8c 	bl	8000f10 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b0a      	cmp	r3, #10
 8001000:	d90b      	bls.n	800101a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001006:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2205      	movs	r2, #5
 8001012:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e09f      	b.n	800115a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1e5      	bne.n	8000ff4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7e1b      	ldrb	r3, [r3, #24]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d108      	bne.n	8001042 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	e007      	b.n	8001052 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001050:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	7e5b      	ldrb	r3, [r3, #25]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d108      	bne.n	800106c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	e007      	b.n	800107c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800107a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7e9b      	ldrb	r3, [r3, #26]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d108      	bne.n	8001096 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 0220 	orr.w	r2, r2, #32
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	e007      	b.n	80010a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 0220 	bic.w	r2, r2, #32
 80010a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	7edb      	ldrb	r3, [r3, #27]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d108      	bne.n	80010c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f022 0210 	bic.w	r2, r2, #16
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	e007      	b.n	80010d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f042 0210 	orr.w	r2, r2, #16
 80010ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	7f1b      	ldrb	r3, [r3, #28]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d108      	bne.n	80010ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f042 0208 	orr.w	r2, r2, #8
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	e007      	b.n	80010fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f022 0208 	bic.w	r2, r2, #8
 80010f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7f5b      	ldrb	r3, [r3, #29]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d108      	bne.n	8001114 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f042 0204 	orr.w	r2, r2, #4
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	e007      	b.n	8001124 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0204 	bic.w	r2, r2, #4
 8001122:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	431a      	orrs	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	431a      	orrs	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	ea42 0103 	orr.w	r1, r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	1e5a      	subs	r2, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	430a      	orrs	r2, r1
 8001148:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2201      	movs	r2, #1
 8001154:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001162:	b480      	push	{r7}
 8001164:	b087      	sub	sp, #28
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001178:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800117a:	7cfb      	ldrb	r3, [r7, #19]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d003      	beq.n	8001188 <HAL_CAN_ConfigFilter+0x26>
 8001180:	7cfb      	ldrb	r3, [r7, #19]
 8001182:	2b02      	cmp	r3, #2
 8001184:	f040 80aa 	bne.w	80012dc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800118e:	f043 0201 	orr.w	r2, r3, #1
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	f003 031f 	and.w	r3, r3, #31
 80011a0:	2201      	movs	r2, #1
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d123      	bne.n	800120a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	401a      	ands	r2, r3
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011e4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3248      	adds	r2, #72	; 0x48
 80011ea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011fe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001200:	6979      	ldr	r1, [r7, #20]
 8001202:	3348      	adds	r3, #72	; 0x48
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	440b      	add	r3, r1
 8001208:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d122      	bne.n	8001258 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	431a      	orrs	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001232:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	3248      	adds	r2, #72	; 0x48
 8001238:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800124c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800124e:	6979      	ldr	r1, [r7, #20]
 8001250:	3348      	adds	r3, #72	; 0x48
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	440b      	add	r3, r1
 8001256:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d109      	bne.n	8001274 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	43db      	mvns	r3, r3
 800126a:	401a      	ands	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001272:	e007      	b.n	8001284 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	431a      	orrs	r2, r3
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d109      	bne.n	80012a0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	43db      	mvns	r3, r3
 8001296:	401a      	ands	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800129e:	e007      	b.n	80012b0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	431a      	orrs	r2, r3
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d107      	bne.n	80012c8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	431a      	orrs	r2, r3
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012ce:	f023 0201 	bic.w	r2, r3, #1
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80012d8:	2300      	movs	r3, #0
 80012da:	e006      	b.n	80012ea <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
  }
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	371c      	adds	r7, #28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b01      	cmp	r3, #1
 8001306:	d12e      	bne.n	8001366 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2202      	movs	r2, #2
 800130c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0201 	bic.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001320:	f7ff fdf6 	bl	8000f10 <HAL_GetTick>
 8001324:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001326:	e012      	b.n	800134e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001328:	f7ff fdf2 	bl	8000f10 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b0a      	cmp	r3, #10
 8001334:	d90b      	bls.n	800134e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2205      	movs	r2, #5
 8001346:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e012      	b.n	8001374 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1e5      	bne.n	8001328 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	e006      	b.n	8001374 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
  }
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
 8001388:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001390:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800139a:	7ffb      	ldrb	r3, [r7, #31]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d003      	beq.n	80013a8 <HAL_CAN_AddTxMessage+0x2c>
 80013a0:	7ffb      	ldrb	r3, [r7, #31]
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	f040 80ad 	bne.w	8001502 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10a      	bne.n	80013c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d105      	bne.n	80013c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 8095 	beq.w	80014f2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	0e1b      	lsrs	r3, r3, #24
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80013d2:	2201      	movs	r2, #1
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	409a      	lsls	r2, r3
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d10d      	bne.n	8001400 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013ee:	68f9      	ldr	r1, [r7, #12]
 80013f0:	6809      	ldr	r1, [r1, #0]
 80013f2:	431a      	orrs	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	3318      	adds	r3, #24
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	440b      	add	r3, r1
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	e00f      	b.n	8001420 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800140a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001410:	68f9      	ldr	r1, [r7, #12]
 8001412:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001414:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3318      	adds	r3, #24
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	440b      	add	r3, r1
 800141e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6819      	ldr	r1, [r3, #0]
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	691a      	ldr	r2, [r3, #16]
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	3318      	adds	r3, #24
 800142c:	011b      	lsls	r3, r3, #4
 800142e:	440b      	add	r3, r1
 8001430:	3304      	adds	r3, #4
 8001432:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	7d1b      	ldrb	r3, [r3, #20]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d111      	bne.n	8001460 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	3318      	adds	r3, #24
 8001444:	011b      	lsls	r3, r3, #4
 8001446:	4413      	add	r3, r2
 8001448:	3304      	adds	r3, #4
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	6811      	ldr	r1, [r2, #0]
 8001450:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	3318      	adds	r3, #24
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	440b      	add	r3, r1
 800145c:	3304      	adds	r3, #4
 800145e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3307      	adds	r3, #7
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	061a      	lsls	r2, r3, #24
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3306      	adds	r3, #6
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	041b      	lsls	r3, r3, #16
 8001470:	431a      	orrs	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3305      	adds	r3, #5
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	021b      	lsls	r3, r3, #8
 800147a:	4313      	orrs	r3, r2
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	3204      	adds	r2, #4
 8001480:	7812      	ldrb	r2, [r2, #0]
 8001482:	4610      	mov	r0, r2
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	6811      	ldr	r1, [r2, #0]
 8001488:	ea43 0200 	orr.w	r2, r3, r0
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	440b      	add	r3, r1
 8001492:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001496:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3303      	adds	r3, #3
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	061a      	lsls	r2, r3, #24
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3302      	adds	r3, #2
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	041b      	lsls	r3, r3, #16
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3301      	adds	r3, #1
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	4313      	orrs	r3, r2
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	7812      	ldrb	r2, [r2, #0]
 80014b8:	4610      	mov	r0, r2
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	6811      	ldr	r1, [r2, #0]
 80014be:	ea43 0200 	orr.w	r2, r3, r0
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	440b      	add	r3, r1
 80014c8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80014cc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	3318      	adds	r3, #24
 80014d6:	011b      	lsls	r3, r3, #4
 80014d8:	4413      	add	r3, r2
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	6811      	ldr	r1, [r2, #0]
 80014e0:	f043 0201 	orr.w	r2, r3, #1
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	3318      	adds	r3, #24
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	440b      	add	r3, r1
 80014ec:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e00e      	b.n	8001510 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e006      	b.n	8001510 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001506:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
  }
}
 8001510:	4618      	mov	r0, r3
 8001512:	3724      	adds	r7, #36	; 0x24
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr

0800151a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800151a:	b480      	push	{r7}
 800151c:	b087      	sub	sp, #28
 800151e:	af00      	add	r7, sp, #0
 8001520:	60f8      	str	r0, [r7, #12]
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800152e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001530:	7dfb      	ldrb	r3, [r7, #23]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d003      	beq.n	800153e <HAL_CAN_GetRxMessage+0x24>
 8001536:	7dfb      	ldrb	r3, [r7, #23]
 8001538:	2b02      	cmp	r3, #2
 800153a:	f040 8103 	bne.w	8001744 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10e      	bne.n	8001562 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d116      	bne.n	8001580 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001556:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e0f7      	b.n	8001752 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d107      	bne.n	8001580 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e0e8      	b.n	8001752 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	331b      	adds	r3, #27
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	4413      	add	r3, r2
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0204 	and.w	r2, r3, #4
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10c      	bne.n	80015b8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	331b      	adds	r3, #27
 80015a6:	011b      	lsls	r3, r3, #4
 80015a8:	4413      	add	r3, r2
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	0d5b      	lsrs	r3, r3, #21
 80015ae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	e00b      	b.n	80015d0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	331b      	adds	r3, #27
 80015c0:	011b      	lsls	r3, r3, #4
 80015c2:	4413      	add	r3, r2
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	08db      	lsrs	r3, r3, #3
 80015c8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	331b      	adds	r3, #27
 80015d8:	011b      	lsls	r3, r3, #4
 80015da:	4413      	add	r3, r2
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0202 	and.w	r2, r3, #2
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	331b      	adds	r3, #27
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	4413      	add	r3, r2
 80015f2:	3304      	adds	r3, #4
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2208      	movs	r2, #8
 8001602:	611a      	str	r2, [r3, #16]
 8001604:	e00b      	b.n	800161e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	331b      	adds	r3, #27
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	4413      	add	r3, r2
 8001612:	3304      	adds	r3, #4
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 020f 	and.w	r2, r3, #15
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	331b      	adds	r3, #27
 8001626:	011b      	lsls	r3, r3, #4
 8001628:	4413      	add	r3, r2
 800162a:	3304      	adds	r3, #4
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	0a1b      	lsrs	r3, r3, #8
 8001630:	b2da      	uxtb	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	331b      	adds	r3, #27
 800163e:	011b      	lsls	r3, r3, #4
 8001640:	4413      	add	r3, r2
 8001642:	3304      	adds	r3, #4
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	0c1b      	lsrs	r3, r3, #16
 8001648:	b29a      	uxth	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	011b      	lsls	r3, r3, #4
 8001656:	4413      	add	r3, r2
 8001658:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	b2da      	uxtb	r2, r3
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	011b      	lsls	r3, r3, #4
 800166c:	4413      	add	r3, r2
 800166e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	0a1a      	lsrs	r2, r3, #8
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	3301      	adds	r3, #1
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	4413      	add	r3, r2
 8001688:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	0c1a      	lsrs	r2, r3, #16
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	3302      	adds	r3, #2
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	4413      	add	r3, r2
 80016a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	0e1a      	lsrs	r2, r3, #24
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	3303      	adds	r3, #3
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	4413      	add	r3, r2
 80016bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	3304      	adds	r3, #4
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	011b      	lsls	r3, r3, #4
 80016d2:	4413      	add	r3, r2
 80016d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	0a1a      	lsrs	r2, r3, #8
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	3305      	adds	r3, #5
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	4413      	add	r3, r2
 80016ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	0c1a      	lsrs	r2, r3, #16
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	3306      	adds	r3, #6
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	011b      	lsls	r3, r3, #4
 8001706:	4413      	add	r3, r2
 8001708:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	0e1a      	lsrs	r2, r3, #24
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	3307      	adds	r3, #7
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d108      	bne.n	8001730 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68da      	ldr	r2, [r3, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f042 0220 	orr.w	r2, r2, #32
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	e007      	b.n	8001740 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	691a      	ldr	r2, [r3, #16]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0220 	orr.w	r2, r2, #32
 800173e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	e006      	b.n	8001752 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
  }
}
 8001752:	4618      	mov	r0, r3
 8001754:	371c      	adds	r7, #28
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800176c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d002      	beq.n	800177a <HAL_CAN_ActivateNotification+0x1e>
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d109      	bne.n	800178e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6959      	ldr	r1, [r3, #20]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	e006      	b.n	800179c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
  }
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b08a      	sub	sp, #40	; 0x28
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d07c      	beq.n	80018e6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d023      	beq.n	800183e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2201      	movs	r2, #1
 80017fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 f983 	bl	8001b14 <HAL_CAN_TxMailbox0CompleteCallback>
 800180e:	e016      	b.n	800183e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	2b00      	cmp	r3, #0
 8001818:	d004      	beq.n	8001824 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
 8001822:	e00c      	b.n	800183e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b00      	cmp	r3, #0
 800182c:	d004      	beq.n	8001838 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
 8001836:	e002      	b.n	800183e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 f986 	bl	8001b4a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001844:	2b00      	cmp	r3, #0
 8001846:	d024      	beq.n	8001892 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001850:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 f962 	bl	8001b26 <HAL_CAN_TxMailbox1CompleteCallback>
 8001862:	e016      	b.n	8001892 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186a:	2b00      	cmp	r3, #0
 800186c:	d004      	beq.n	8001878 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
 8001876:	e00c      	b.n	8001892 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800187e:	2b00      	cmp	r3, #0
 8001880:	d004      	beq.n	800188c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
 800188a:	e002      	b.n	8001892 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f965 	bl	8001b5c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d024      	beq.n	80018e6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 f941 	bl	8001b38 <HAL_CAN_TxMailbox2CompleteCallback>
 80018b6:	e016      	b.n	80018e6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d004      	beq.n	80018cc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
 80018ca:	e00c      	b.n	80018e6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d004      	beq.n	80018e0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
 80018de:	e002      	b.n	80018e6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 f944 	bl	8001b6e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80018e6:	6a3b      	ldr	r3, [r7, #32]
 80018e8:	f003 0308 	and.w	r3, r3, #8
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00c      	beq.n	800190a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f003 0310 	and.w	r3, r3, #16
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d007      	beq.n	800190a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001900:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2210      	movs	r2, #16
 8001908:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800190a:	6a3b      	ldr	r3, [r7, #32]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00b      	beq.n	800192c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d006      	beq.n	800192c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2208      	movs	r2, #8
 8001924:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f933 	bl	8001b92 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800192c:	6a3b      	ldr	r3, [r7, #32]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d009      	beq.n	800194a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d002      	beq.n	800194a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f91b 	bl	8001b80 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00c      	beq.n	800196e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	f003 0310 	and.w	r3, r3, #16
 800195a:	2b00      	cmp	r3, #0
 800195c:	d007      	beq.n	800196e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001964:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2210      	movs	r2, #16
 800196c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800196e:	6a3b      	ldr	r3, [r7, #32]
 8001970:	f003 0320 	and.w	r3, r3, #32
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00b      	beq.n	8001990 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	2b00      	cmp	r3, #0
 8001980:	d006      	beq.n	8001990 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2208      	movs	r2, #8
 8001988:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f90a 	bl	8001ba4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001990:	6a3b      	ldr	r3, [r7, #32]
 8001992:	f003 0310 	and.w	r3, r3, #16
 8001996:	2b00      	cmp	r3, #0
 8001998:	d009      	beq.n	80019ae <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d002      	beq.n	80019ae <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7fe fcd9 	bl	8000360 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80019ae:	6a3b      	ldr	r3, [r7, #32]
 80019b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00b      	beq.n	80019d0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f003 0310 	and.w	r3, r3, #16
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d006      	beq.n	80019d0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2210      	movs	r2, #16
 80019c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f8f3 	bl	8001bb6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00b      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d006      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2208      	movs	r2, #8
 80019ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 f8eb 	bl	8001bc8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d07b      	beq.n	8001af4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d072      	beq.n	8001aec <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d008      	beq.n	8001a22 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d008      	beq.n	8001a3e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	f043 0302 	orr.w	r3, r3, #2
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a3e:	6a3b      	ldr	r3, [r7, #32]
 8001a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d008      	beq.n	8001a5a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a5a:	6a3b      	ldr	r3, [r7, #32]
 8001a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d043      	beq.n	8001aec <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d03e      	beq.n	8001aec <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a74:	2b60      	cmp	r3, #96	; 0x60
 8001a76:	d02b      	beq.n	8001ad0 <HAL_CAN_IRQHandler+0x32a>
 8001a78:	2b60      	cmp	r3, #96	; 0x60
 8001a7a:	d82e      	bhi.n	8001ada <HAL_CAN_IRQHandler+0x334>
 8001a7c:	2b50      	cmp	r3, #80	; 0x50
 8001a7e:	d022      	beq.n	8001ac6 <HAL_CAN_IRQHandler+0x320>
 8001a80:	2b50      	cmp	r3, #80	; 0x50
 8001a82:	d82a      	bhi.n	8001ada <HAL_CAN_IRQHandler+0x334>
 8001a84:	2b40      	cmp	r3, #64	; 0x40
 8001a86:	d019      	beq.n	8001abc <HAL_CAN_IRQHandler+0x316>
 8001a88:	2b40      	cmp	r3, #64	; 0x40
 8001a8a:	d826      	bhi.n	8001ada <HAL_CAN_IRQHandler+0x334>
 8001a8c:	2b30      	cmp	r3, #48	; 0x30
 8001a8e:	d010      	beq.n	8001ab2 <HAL_CAN_IRQHandler+0x30c>
 8001a90:	2b30      	cmp	r3, #48	; 0x30
 8001a92:	d822      	bhi.n	8001ada <HAL_CAN_IRQHandler+0x334>
 8001a94:	2b10      	cmp	r3, #16
 8001a96:	d002      	beq.n	8001a9e <HAL_CAN_IRQHandler+0x2f8>
 8001a98:	2b20      	cmp	r3, #32
 8001a9a:	d005      	beq.n	8001aa8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a9c:	e01d      	b.n	8001ada <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	f043 0308 	orr.w	r3, r3, #8
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001aa6:	e019      	b.n	8001adc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	f043 0310 	orr.w	r3, r3, #16
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ab0:	e014      	b.n	8001adc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	f043 0320 	orr.w	r3, r3, #32
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001aba:	e00f      	b.n	8001adc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ac4:	e00a      	b.n	8001adc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ace:	e005      	b.n	8001adc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ad8:	e000      	b.n	8001adc <HAL_CAN_IRQHandler+0x336>
            break;
 8001ada:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	699a      	ldr	r2, [r3, #24]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001aea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2204      	movs	r2, #4
 8001af2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d008      	beq.n	8001b0c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f867 	bl	8001bda <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	3728      	adds	r7, #40	; 0x28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr

08001b26 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr

08001b4a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr

08001b6e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr

08001b80 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr

08001b92 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr

08001bda <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1e:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	60d3      	str	r3, [r2, #12]
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <__NVIC_GetPriorityGrouping+0x18>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	f003 0307 	and.w	r3, r3, #7
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	db0b      	blt.n	8001c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	f003 021f 	and.w	r2, r3, #31
 8001c68:	4906      	ldr	r1, [pc, #24]	; (8001c84 <__NVIC_EnableIRQ+0x34>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	2001      	movs	r0, #1
 8001c72:	fa00 f202 	lsl.w	r2, r0, r2
 8001c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	e000e100 	.word	0xe000e100

08001c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	6039      	str	r1, [r7, #0]
 8001c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	db0a      	blt.n	8001cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	490c      	ldr	r1, [pc, #48]	; (8001cd4 <__NVIC_SetPriority+0x4c>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	0112      	lsls	r2, r2, #4
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	440b      	add	r3, r1
 8001cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb0:	e00a      	b.n	8001cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4908      	ldr	r1, [pc, #32]	; (8001cd8 <__NVIC_SetPriority+0x50>)
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	3b04      	subs	r3, #4
 8001cc0:	0112      	lsls	r2, r2, #4
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	761a      	strb	r2, [r3, #24]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000e100 	.word	0xe000e100
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f1c3 0307 	rsb	r3, r3, #7
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	bf28      	it	cs
 8001cfa:	2304      	movcs	r3, #4
 8001cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3304      	adds	r3, #4
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d902      	bls.n	8001d0c <NVIC_EncodePriority+0x30>
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3b03      	subs	r3, #3
 8001d0a:	e000      	b.n	8001d0e <NVIC_EncodePriority+0x32>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	f04f 32ff 	mov.w	r2, #4294967295
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	401a      	ands	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	43d9      	mvns	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	4313      	orrs	r3, r2
         );
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3724      	adds	r7, #36	; 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d50:	d301      	bcc.n	8001d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d52:	2301      	movs	r3, #1
 8001d54:	e00f      	b.n	8001d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <SysTick_Config+0x40>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d5e:	210f      	movs	r1, #15
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295
 8001d64:	f7ff ff90 	bl	8001c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <SysTick_Config+0x40>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d6e:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <SysTick_Config+0x40>)
 8001d70:	2207      	movs	r2, #7
 8001d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	e000e010 	.word	0xe000e010

08001d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ff2d 	bl	8001bec <__NVIC_SetPriorityGrouping>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dac:	f7ff ff42 	bl	8001c34 <__NVIC_GetPriorityGrouping>
 8001db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68b9      	ldr	r1, [r7, #8]
 8001db6:	6978      	ldr	r0, [r7, #20]
 8001db8:	f7ff ff90 	bl	8001cdc <NVIC_EncodePriority>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff5f 	bl	8001c88 <__NVIC_SetPriority>
}
 8001dca:	bf00      	nop
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4603      	mov	r3, r0
 8001dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff35 	bl	8001c50 <__NVIC_EnableIRQ>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff ffa2 	bl	8001d40 <SysTick_Config>
 8001dfc:	4603      	mov	r3, r0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b085      	sub	sp, #20
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d008      	beq.n	8001e30 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2204      	movs	r2, #4
 8001e22:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e020      	b.n	8001e72 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 020e 	bic.w	r2, r2, #14
 8001e3e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0201 	bic.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e58:	2101      	movs	r1, #1
 8001e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d005      	beq.n	8001ea0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2204      	movs	r2, #4
 8001e98:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	73fb      	strb	r3, [r7, #15]
 8001e9e:	e051      	b.n	8001f44 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 020e 	bic.w	r2, r2, #14
 8001eae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0201 	bic.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a22      	ldr	r2, [pc, #136]	; (8001f50 <HAL_DMA_Abort_IT+0xd4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d029      	beq.n	8001f1e <HAL_DMA_Abort_IT+0xa2>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a21      	ldr	r2, [pc, #132]	; (8001f54 <HAL_DMA_Abort_IT+0xd8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d022      	beq.n	8001f1a <HAL_DMA_Abort_IT+0x9e>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a1f      	ldr	r2, [pc, #124]	; (8001f58 <HAL_DMA_Abort_IT+0xdc>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d01a      	beq.n	8001f14 <HAL_DMA_Abort_IT+0x98>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a1e      	ldr	r2, [pc, #120]	; (8001f5c <HAL_DMA_Abort_IT+0xe0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d012      	beq.n	8001f0e <HAL_DMA_Abort_IT+0x92>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a1c      	ldr	r2, [pc, #112]	; (8001f60 <HAL_DMA_Abort_IT+0xe4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00a      	beq.n	8001f08 <HAL_DMA_Abort_IT+0x8c>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a1b      	ldr	r2, [pc, #108]	; (8001f64 <HAL_DMA_Abort_IT+0xe8>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d102      	bne.n	8001f02 <HAL_DMA_Abort_IT+0x86>
 8001efc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f00:	e00e      	b.n	8001f20 <HAL_DMA_Abort_IT+0xa4>
 8001f02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f06:	e00b      	b.n	8001f20 <HAL_DMA_Abort_IT+0xa4>
 8001f08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f0c:	e008      	b.n	8001f20 <HAL_DMA_Abort_IT+0xa4>
 8001f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f12:	e005      	b.n	8001f20 <HAL_DMA_Abort_IT+0xa4>
 8001f14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f18:	e002      	b.n	8001f20 <HAL_DMA_Abort_IT+0xa4>
 8001f1a:	2310      	movs	r3, #16
 8001f1c:	e000      	b.n	8001f20 <HAL_DMA_Abort_IT+0xa4>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	4a11      	ldr	r2, [pc, #68]	; (8001f68 <HAL_DMA_Abort_IT+0xec>)
 8001f22:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	4798      	blx	r3
    } 
  }
  return status;
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40020008 	.word	0x40020008
 8001f54:	4002001c 	.word	0x4002001c
 8001f58:	40020030 	.word	0x40020030
 8001f5c:	40020044 	.word	0x40020044
 8001f60:	40020058 	.word	0x40020058
 8001f64:	4002006c 	.word	0x4002006c
 8001f68:	40020000 	.word	0x40020000

08001f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b08b      	sub	sp, #44	; 0x2c
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f76:	2300      	movs	r3, #0
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f7e:	e169      	b.n	8002254 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f80:	2201      	movs	r2, #1
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	69fa      	ldr	r2, [r7, #28]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	f040 8158 	bne.w	800224e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4a9a      	ldr	r2, [pc, #616]	; (800220c <HAL_GPIO_Init+0x2a0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d05e      	beq.n	8002066 <HAL_GPIO_Init+0xfa>
 8001fa8:	4a98      	ldr	r2, [pc, #608]	; (800220c <HAL_GPIO_Init+0x2a0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d875      	bhi.n	800209a <HAL_GPIO_Init+0x12e>
 8001fae:	4a98      	ldr	r2, [pc, #608]	; (8002210 <HAL_GPIO_Init+0x2a4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d058      	beq.n	8002066 <HAL_GPIO_Init+0xfa>
 8001fb4:	4a96      	ldr	r2, [pc, #600]	; (8002210 <HAL_GPIO_Init+0x2a4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d86f      	bhi.n	800209a <HAL_GPIO_Init+0x12e>
 8001fba:	4a96      	ldr	r2, [pc, #600]	; (8002214 <HAL_GPIO_Init+0x2a8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d052      	beq.n	8002066 <HAL_GPIO_Init+0xfa>
 8001fc0:	4a94      	ldr	r2, [pc, #592]	; (8002214 <HAL_GPIO_Init+0x2a8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d869      	bhi.n	800209a <HAL_GPIO_Init+0x12e>
 8001fc6:	4a94      	ldr	r2, [pc, #592]	; (8002218 <HAL_GPIO_Init+0x2ac>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d04c      	beq.n	8002066 <HAL_GPIO_Init+0xfa>
 8001fcc:	4a92      	ldr	r2, [pc, #584]	; (8002218 <HAL_GPIO_Init+0x2ac>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d863      	bhi.n	800209a <HAL_GPIO_Init+0x12e>
 8001fd2:	4a92      	ldr	r2, [pc, #584]	; (800221c <HAL_GPIO_Init+0x2b0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d046      	beq.n	8002066 <HAL_GPIO_Init+0xfa>
 8001fd8:	4a90      	ldr	r2, [pc, #576]	; (800221c <HAL_GPIO_Init+0x2b0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d85d      	bhi.n	800209a <HAL_GPIO_Init+0x12e>
 8001fde:	2b12      	cmp	r3, #18
 8001fe0:	d82a      	bhi.n	8002038 <HAL_GPIO_Init+0xcc>
 8001fe2:	2b12      	cmp	r3, #18
 8001fe4:	d859      	bhi.n	800209a <HAL_GPIO_Init+0x12e>
 8001fe6:	a201      	add	r2, pc, #4	; (adr r2, 8001fec <HAL_GPIO_Init+0x80>)
 8001fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fec:	08002067 	.word	0x08002067
 8001ff0:	08002041 	.word	0x08002041
 8001ff4:	08002053 	.word	0x08002053
 8001ff8:	08002095 	.word	0x08002095
 8001ffc:	0800209b 	.word	0x0800209b
 8002000:	0800209b 	.word	0x0800209b
 8002004:	0800209b 	.word	0x0800209b
 8002008:	0800209b 	.word	0x0800209b
 800200c:	0800209b 	.word	0x0800209b
 8002010:	0800209b 	.word	0x0800209b
 8002014:	0800209b 	.word	0x0800209b
 8002018:	0800209b 	.word	0x0800209b
 800201c:	0800209b 	.word	0x0800209b
 8002020:	0800209b 	.word	0x0800209b
 8002024:	0800209b 	.word	0x0800209b
 8002028:	0800209b 	.word	0x0800209b
 800202c:	0800209b 	.word	0x0800209b
 8002030:	08002049 	.word	0x08002049
 8002034:	0800205d 	.word	0x0800205d
 8002038:	4a79      	ldr	r2, [pc, #484]	; (8002220 <HAL_GPIO_Init+0x2b4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d013      	beq.n	8002066 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800203e:	e02c      	b.n	800209a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	623b      	str	r3, [r7, #32]
          break;
 8002046:	e029      	b.n	800209c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	3304      	adds	r3, #4
 800204e:	623b      	str	r3, [r7, #32]
          break;
 8002050:	e024      	b.n	800209c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	3308      	adds	r3, #8
 8002058:	623b      	str	r3, [r7, #32]
          break;
 800205a:	e01f      	b.n	800209c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	330c      	adds	r3, #12
 8002062:	623b      	str	r3, [r7, #32]
          break;
 8002064:	e01a      	b.n	800209c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d102      	bne.n	8002074 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800206e:	2304      	movs	r3, #4
 8002070:	623b      	str	r3, [r7, #32]
          break;
 8002072:	e013      	b.n	800209c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d105      	bne.n	8002088 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800207c:	2308      	movs	r3, #8
 800207e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69fa      	ldr	r2, [r7, #28]
 8002084:	611a      	str	r2, [r3, #16]
          break;
 8002086:	e009      	b.n	800209c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002088:	2308      	movs	r3, #8
 800208a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	615a      	str	r2, [r3, #20]
          break;
 8002092:	e003      	b.n	800209c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002094:	2300      	movs	r3, #0
 8002096:	623b      	str	r3, [r7, #32]
          break;
 8002098:	e000      	b.n	800209c <HAL_GPIO_Init+0x130>
          break;
 800209a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	2bff      	cmp	r3, #255	; 0xff
 80020a0:	d801      	bhi.n	80020a6 <HAL_GPIO_Init+0x13a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	e001      	b.n	80020aa <HAL_GPIO_Init+0x13e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3304      	adds	r3, #4
 80020aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	2bff      	cmp	r3, #255	; 0xff
 80020b0:	d802      	bhi.n	80020b8 <HAL_GPIO_Init+0x14c>
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	e002      	b.n	80020be <HAL_GPIO_Init+0x152>
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	3b08      	subs	r3, #8
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	210f      	movs	r1, #15
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	fa01 f303 	lsl.w	r3, r1, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	401a      	ands	r2, r3
 80020d0:	6a39      	ldr	r1, [r7, #32]
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	fa01 f303 	lsl.w	r3, r1, r3
 80020d8:	431a      	orrs	r2, r3
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 80b1 	beq.w	800224e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020ec:	4b4d      	ldr	r3, [pc, #308]	; (8002224 <HAL_GPIO_Init+0x2b8>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	4a4c      	ldr	r2, [pc, #304]	; (8002224 <HAL_GPIO_Init+0x2b8>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6193      	str	r3, [r2, #24]
 80020f8:	4b4a      	ldr	r3, [pc, #296]	; (8002224 <HAL_GPIO_Init+0x2b8>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002104:	4a48      	ldr	r2, [pc, #288]	; (8002228 <HAL_GPIO_Init+0x2bc>)
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	089b      	lsrs	r3, r3, #2
 800210a:	3302      	adds	r3, #2
 800210c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002110:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	220f      	movs	r2, #15
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4013      	ands	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a40      	ldr	r2, [pc, #256]	; (800222c <HAL_GPIO_Init+0x2c0>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d013      	beq.n	8002158 <HAL_GPIO_Init+0x1ec>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a3f      	ldr	r2, [pc, #252]	; (8002230 <HAL_GPIO_Init+0x2c4>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d00d      	beq.n	8002154 <HAL_GPIO_Init+0x1e8>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a3e      	ldr	r2, [pc, #248]	; (8002234 <HAL_GPIO_Init+0x2c8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d007      	beq.n	8002150 <HAL_GPIO_Init+0x1e4>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a3d      	ldr	r2, [pc, #244]	; (8002238 <HAL_GPIO_Init+0x2cc>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d101      	bne.n	800214c <HAL_GPIO_Init+0x1e0>
 8002148:	2303      	movs	r3, #3
 800214a:	e006      	b.n	800215a <HAL_GPIO_Init+0x1ee>
 800214c:	2304      	movs	r3, #4
 800214e:	e004      	b.n	800215a <HAL_GPIO_Init+0x1ee>
 8002150:	2302      	movs	r3, #2
 8002152:	e002      	b.n	800215a <HAL_GPIO_Init+0x1ee>
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <HAL_GPIO_Init+0x1ee>
 8002158:	2300      	movs	r3, #0
 800215a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800215c:	f002 0203 	and.w	r2, r2, #3
 8002160:	0092      	lsls	r2, r2, #2
 8002162:	4093      	lsls	r3, r2
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	4313      	orrs	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800216a:	492f      	ldr	r1, [pc, #188]	; (8002228 <HAL_GPIO_Init+0x2bc>)
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	089b      	lsrs	r3, r3, #2
 8002170:	3302      	adds	r3, #2
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d006      	beq.n	8002192 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002184:	4b2d      	ldr	r3, [pc, #180]	; (800223c <HAL_GPIO_Init+0x2d0>)
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	492c      	ldr	r1, [pc, #176]	; (800223c <HAL_GPIO_Init+0x2d0>)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	608b      	str	r3, [r1, #8]
 8002190:	e006      	b.n	80021a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002192:	4b2a      	ldr	r3, [pc, #168]	; (800223c <HAL_GPIO_Init+0x2d0>)
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	43db      	mvns	r3, r3
 800219a:	4928      	ldr	r1, [pc, #160]	; (800223c <HAL_GPIO_Init+0x2d0>)
 800219c:	4013      	ands	r3, r2
 800219e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d006      	beq.n	80021ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021ac:	4b23      	ldr	r3, [pc, #140]	; (800223c <HAL_GPIO_Init+0x2d0>)
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	4922      	ldr	r1, [pc, #136]	; (800223c <HAL_GPIO_Init+0x2d0>)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	60cb      	str	r3, [r1, #12]
 80021b8:	e006      	b.n	80021c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021ba:	4b20      	ldr	r3, [pc, #128]	; (800223c <HAL_GPIO_Init+0x2d0>)
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	491e      	ldr	r1, [pc, #120]	; (800223c <HAL_GPIO_Init+0x2d0>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d006      	beq.n	80021e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021d4:	4b19      	ldr	r3, [pc, #100]	; (800223c <HAL_GPIO_Init+0x2d0>)
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	4918      	ldr	r1, [pc, #96]	; (800223c <HAL_GPIO_Init+0x2d0>)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	604b      	str	r3, [r1, #4]
 80021e0:	e006      	b.n	80021f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021e2:	4b16      	ldr	r3, [pc, #88]	; (800223c <HAL_GPIO_Init+0x2d0>)
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	4914      	ldr	r1, [pc, #80]	; (800223c <HAL_GPIO_Init+0x2d0>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d021      	beq.n	8002240 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <HAL_GPIO_Init+0x2d0>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	490e      	ldr	r1, [pc, #56]	; (800223c <HAL_GPIO_Init+0x2d0>)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	600b      	str	r3, [r1, #0]
 8002208:	e021      	b.n	800224e <HAL_GPIO_Init+0x2e2>
 800220a:	bf00      	nop
 800220c:	10320000 	.word	0x10320000
 8002210:	10310000 	.word	0x10310000
 8002214:	10220000 	.word	0x10220000
 8002218:	10210000 	.word	0x10210000
 800221c:	10120000 	.word	0x10120000
 8002220:	10110000 	.word	0x10110000
 8002224:	40021000 	.word	0x40021000
 8002228:	40010000 	.word	0x40010000
 800222c:	40010800 	.word	0x40010800
 8002230:	40010c00 	.word	0x40010c00
 8002234:	40011000 	.word	0x40011000
 8002238:	40011400 	.word	0x40011400
 800223c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_GPIO_Init+0x304>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	43db      	mvns	r3, r3
 8002248:	4909      	ldr	r1, [pc, #36]	; (8002270 <HAL_GPIO_Init+0x304>)
 800224a:	4013      	ands	r3, r2
 800224c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	3301      	adds	r3, #1
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	fa22 f303 	lsr.w	r3, r2, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	f47f ae8e 	bne.w	8001f80 <HAL_GPIO_Init+0x14>
  }
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop
 8002268:	372c      	adds	r7, #44	; 0x2c
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	40010400 	.word	0x40010400

08002274 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e272      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 8087 	beq.w	80023a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002294:	4b92      	ldr	r3, [pc, #584]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	2b04      	cmp	r3, #4
 800229e:	d00c      	beq.n	80022ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022a0:	4b8f      	ldr	r3, [pc, #572]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d112      	bne.n	80022d2 <HAL_RCC_OscConfig+0x5e>
 80022ac:	4b8c      	ldr	r3, [pc, #560]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b8:	d10b      	bne.n	80022d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ba:	4b89      	ldr	r3, [pc, #548]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d06c      	beq.n	80023a0 <HAL_RCC_OscConfig+0x12c>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d168      	bne.n	80023a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e24c      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022da:	d106      	bne.n	80022ea <HAL_RCC_OscConfig+0x76>
 80022dc:	4b80      	ldr	r3, [pc, #512]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a7f      	ldr	r2, [pc, #508]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	e02e      	b.n	8002348 <HAL_RCC_OscConfig+0xd4>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10c      	bne.n	800230c <HAL_RCC_OscConfig+0x98>
 80022f2:	4b7b      	ldr	r3, [pc, #492]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a7a      	ldr	r2, [pc, #488]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	4b78      	ldr	r3, [pc, #480]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a77      	ldr	r2, [pc, #476]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002304:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e01d      	b.n	8002348 <HAL_RCC_OscConfig+0xd4>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002314:	d10c      	bne.n	8002330 <HAL_RCC_OscConfig+0xbc>
 8002316:	4b72      	ldr	r3, [pc, #456]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a71      	ldr	r2, [pc, #452]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 800231c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	4b6f      	ldr	r3, [pc, #444]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a6e      	ldr	r2, [pc, #440]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e00b      	b.n	8002348 <HAL_RCC_OscConfig+0xd4>
 8002330:	4b6b      	ldr	r3, [pc, #428]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a6a      	ldr	r2, [pc, #424]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b68      	ldr	r3, [pc, #416]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a67      	ldr	r2, [pc, #412]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002346:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d013      	beq.n	8002378 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002350:	f7fe fdde 	bl	8000f10 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002358:	f7fe fdda 	bl	8000f10 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	; 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e200      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	4b5d      	ldr	r3, [pc, #372]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0xe4>
 8002376:	e014      	b.n	80023a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7fe fdca 	bl	8000f10 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002380:	f7fe fdc6 	bl	8000f10 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	; 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e1ec      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002392:	4b53      	ldr	r3, [pc, #332]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x10c>
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d063      	beq.n	8002476 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ae:	4b4c      	ldr	r3, [pc, #304]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00b      	beq.n	80023d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023ba:	4b49      	ldr	r3, [pc, #292]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d11c      	bne.n	8002400 <HAL_RCC_OscConfig+0x18c>
 80023c6:	4b46      	ldr	r3, [pc, #280]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d116      	bne.n	8002400 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d2:	4b43      	ldr	r3, [pc, #268]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_RCC_OscConfig+0x176>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d001      	beq.n	80023ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e1c0      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ea:	4b3d      	ldr	r3, [pc, #244]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	4939      	ldr	r1, [pc, #228]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fe:	e03a      	b.n	8002476 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d020      	beq.n	800244a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002408:	4b36      	ldr	r3, [pc, #216]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 800240a:	2201      	movs	r2, #1
 800240c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240e:	f7fe fd7f 	bl	8000f10 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002416:	f7fe fd7b 	bl	8000f10 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e1a1      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002428:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002434:	4b2a      	ldr	r3, [pc, #168]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4927      	ldr	r1, [pc, #156]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]
 8002448:	e015      	b.n	8002476 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800244a:	4b26      	ldr	r3, [pc, #152]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002450:	f7fe fd5e 	bl	8000f10 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002458:	f7fe fd5a 	bl	8000f10 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e180      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246a:	4b1d      	ldr	r3, [pc, #116]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d03a      	beq.n	80024f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d019      	beq.n	80024be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800248a:	4b17      	ldr	r3, [pc, #92]	; (80024e8 <HAL_RCC_OscConfig+0x274>)
 800248c:	2201      	movs	r2, #1
 800248e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002490:	f7fe fd3e 	bl	8000f10 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002498:	f7fe fd3a 	bl	8000f10 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e160      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024aa:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024b6:	2001      	movs	r0, #1
 80024b8:	f000 face 	bl	8002a58 <RCC_Delay>
 80024bc:	e01c      	b.n	80024f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024be:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <HAL_RCC_OscConfig+0x274>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c4:	f7fe fd24 	bl	8000f10 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ca:	e00f      	b.n	80024ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024cc:	f7fe fd20 	bl	8000f10 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d908      	bls.n	80024ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e146      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
 80024de:	bf00      	nop
 80024e0:	40021000 	.word	0x40021000
 80024e4:	42420000 	.word	0x42420000
 80024e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ec:	4b92      	ldr	r3, [pc, #584]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1e9      	bne.n	80024cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 80a6 	beq.w	8002652 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002506:	2300      	movs	r3, #0
 8002508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800250a:	4b8b      	ldr	r3, [pc, #556]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10d      	bne.n	8002532 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002516:	4b88      	ldr	r3, [pc, #544]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	4a87      	ldr	r2, [pc, #540]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 800251c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002520:	61d3      	str	r3, [r2, #28]
 8002522:	4b85      	ldr	r3, [pc, #532]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252e:	2301      	movs	r3, #1
 8002530:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002532:	4b82      	ldr	r3, [pc, #520]	; (800273c <HAL_RCC_OscConfig+0x4c8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d118      	bne.n	8002570 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800253e:	4b7f      	ldr	r3, [pc, #508]	; (800273c <HAL_RCC_OscConfig+0x4c8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a7e      	ldr	r2, [pc, #504]	; (800273c <HAL_RCC_OscConfig+0x4c8>)
 8002544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800254a:	f7fe fce1 	bl	8000f10 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002552:	f7fe fcdd 	bl	8000f10 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b64      	cmp	r3, #100	; 0x64
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e103      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002564:	4b75      	ldr	r3, [pc, #468]	; (800273c <HAL_RCC_OscConfig+0x4c8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d106      	bne.n	8002586 <HAL_RCC_OscConfig+0x312>
 8002578:	4b6f      	ldr	r3, [pc, #444]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	4a6e      	ldr	r2, [pc, #440]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	6213      	str	r3, [r2, #32]
 8002584:	e02d      	b.n	80025e2 <HAL_RCC_OscConfig+0x36e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x334>
 800258e:	4b6a      	ldr	r3, [pc, #424]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	4a69      	ldr	r2, [pc, #420]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	6213      	str	r3, [r2, #32]
 800259a:	4b67      	ldr	r3, [pc, #412]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	4a66      	ldr	r2, [pc, #408]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	f023 0304 	bic.w	r3, r3, #4
 80025a4:	6213      	str	r3, [r2, #32]
 80025a6:	e01c      	b.n	80025e2 <HAL_RCC_OscConfig+0x36e>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2b05      	cmp	r3, #5
 80025ae:	d10c      	bne.n	80025ca <HAL_RCC_OscConfig+0x356>
 80025b0:	4b61      	ldr	r3, [pc, #388]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	4a60      	ldr	r2, [pc, #384]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025b6:	f043 0304 	orr.w	r3, r3, #4
 80025ba:	6213      	str	r3, [r2, #32]
 80025bc:	4b5e      	ldr	r3, [pc, #376]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4a5d      	ldr	r2, [pc, #372]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6213      	str	r3, [r2, #32]
 80025c8:	e00b      	b.n	80025e2 <HAL_RCC_OscConfig+0x36e>
 80025ca:	4b5b      	ldr	r3, [pc, #364]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	4a5a      	ldr	r2, [pc, #360]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	f023 0301 	bic.w	r3, r3, #1
 80025d4:	6213      	str	r3, [r2, #32]
 80025d6:	4b58      	ldr	r3, [pc, #352]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	4a57      	ldr	r2, [pc, #348]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	f023 0304 	bic.w	r3, r3, #4
 80025e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d015      	beq.n	8002616 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ea:	f7fe fc91 	bl	8000f10 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f0:	e00a      	b.n	8002608 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f2:	f7fe fc8d 	bl	8000f10 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002600:	4293      	cmp	r3, r2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e0b1      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002608:	4b4b      	ldr	r3, [pc, #300]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0ee      	beq.n	80025f2 <HAL_RCC_OscConfig+0x37e>
 8002614:	e014      	b.n	8002640 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002616:	f7fe fc7b 	bl	8000f10 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800261c:	e00a      	b.n	8002634 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261e:	f7fe fc77 	bl	8000f10 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	f241 3288 	movw	r2, #5000	; 0x1388
 800262c:	4293      	cmp	r3, r2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e09b      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002634:	4b40      	ldr	r3, [pc, #256]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1ee      	bne.n	800261e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002640:	7dfb      	ldrb	r3, [r7, #23]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d105      	bne.n	8002652 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002646:	4b3c      	ldr	r3, [pc, #240]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	4a3b      	ldr	r2, [pc, #236]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 800264c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002650:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 8087 	beq.w	800276a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800265c:	4b36      	ldr	r3, [pc, #216]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 030c 	and.w	r3, r3, #12
 8002664:	2b08      	cmp	r3, #8
 8002666:	d061      	beq.n	800272c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	2b02      	cmp	r3, #2
 800266e:	d146      	bne.n	80026fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002670:	4b33      	ldr	r3, [pc, #204]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002676:	f7fe fc4b 	bl	8000f10 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267e:	f7fe fc47 	bl	8000f10 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e06d      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002690:	4b29      	ldr	r3, [pc, #164]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f0      	bne.n	800267e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a4:	d108      	bne.n	80026b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026a6:	4b24      	ldr	r3, [pc, #144]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	4921      	ldr	r1, [pc, #132]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026b8:	4b1f      	ldr	r3, [pc, #124]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a19      	ldr	r1, [r3, #32]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	430b      	orrs	r3, r1
 80026ca:	491b      	ldr	r1, [pc, #108]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d0:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d6:	f7fe fc1b 	bl	8000f10 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026de:	f7fe fc17 	bl	8000f10 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e03d      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026f0:	4b11      	ldr	r3, [pc, #68]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x46a>
 80026fc:	e035      	b.n	800276a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7fe fc04 	bl	8000f10 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270c:	f7fe fc00 	bl	8000f10 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e026      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x498>
 800272a:	e01e      	b.n	800276a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d107      	bne.n	8002744 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e019      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
 8002738:	40021000 	.word	0x40021000
 800273c:	40007000 	.word	0x40007000
 8002740:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_RCC_OscConfig+0x500>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	429a      	cmp	r2, r3
 8002756:	d106      	bne.n	8002766 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002762:	429a      	cmp	r2, r3
 8002764:	d001      	beq.n	800276a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40021000 	.word	0x40021000

08002778 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0d0      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800278c:	4b6a      	ldr	r3, [pc, #424]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d910      	bls.n	80027bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279a:	4b67      	ldr	r3, [pc, #412]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 0207 	bic.w	r2, r3, #7
 80027a2:	4965      	ldr	r1, [pc, #404]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	4b63      	ldr	r3, [pc, #396]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0b8      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d020      	beq.n	800280a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027d4:	4b59      	ldr	r3, [pc, #356]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	4a58      	ldr	r2, [pc, #352]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027ec:	4b53      	ldr	r3, [pc, #332]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	4a52      	ldr	r2, [pc, #328]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f8:	4b50      	ldr	r3, [pc, #320]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	494d      	ldr	r1, [pc, #308]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	4313      	orrs	r3, r2
 8002808:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d040      	beq.n	8002898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d107      	bne.n	800282e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281e:	4b47      	ldr	r3, [pc, #284]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d115      	bne.n	8002856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e07f      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d107      	bne.n	8002846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002836:	4b41      	ldr	r3, [pc, #260]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d109      	bne.n	8002856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e073      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002846:	4b3d      	ldr	r3, [pc, #244]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e06b      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002856:	4b39      	ldr	r3, [pc, #228]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f023 0203 	bic.w	r2, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4936      	ldr	r1, [pc, #216]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002868:	f7fe fb52 	bl	8000f10 <HAL_GetTick>
 800286c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286e:	e00a      	b.n	8002886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002870:	f7fe fb4e 	bl	8000f10 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f241 3288 	movw	r2, #5000	; 0x1388
 800287e:	4293      	cmp	r3, r2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e053      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002886:	4b2d      	ldr	r3, [pc, #180]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 020c 	and.w	r2, r3, #12
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	429a      	cmp	r2, r3
 8002896:	d1eb      	bne.n	8002870 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002898:	4b27      	ldr	r3, [pc, #156]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d210      	bcs.n	80028c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a6:	4b24      	ldr	r3, [pc, #144]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 0207 	bic.w	r2, r3, #7
 80028ae:	4922      	ldr	r1, [pc, #136]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b20      	ldr	r3, [pc, #128]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e032      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028d4:	4b19      	ldr	r3, [pc, #100]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4916      	ldr	r1, [pc, #88]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028f2:	4b12      	ldr	r3, [pc, #72]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	490e      	ldr	r1, [pc, #56]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002902:	4313      	orrs	r3, r2
 8002904:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002906:	f000 f821 	bl	800294c <HAL_RCC_GetSysClockFreq>
 800290a:	4602      	mov	r2, r0
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	490a      	ldr	r1, [pc, #40]	; (8002940 <HAL_RCC_ClockConfig+0x1c8>)
 8002918:	5ccb      	ldrb	r3, [r1, r3]
 800291a:	fa22 f303 	lsr.w	r3, r2, r3
 800291e:	4a09      	ldr	r2, [pc, #36]	; (8002944 <HAL_RCC_ClockConfig+0x1cc>)
 8002920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002922:	4b09      	ldr	r3, [pc, #36]	; (8002948 <HAL_RCC_ClockConfig+0x1d0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fab0 	bl	8000e8c <HAL_InitTick>

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40022000 	.word	0x40022000
 800293c:	40021000 	.word	0x40021000
 8002940:	080044f4 	.word	0x080044f4
 8002944:	20000008 	.word	0x20000008
 8002948:	2000000c 	.word	0x2000000c

0800294c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	2300      	movs	r3, #0
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	2300      	movs	r3, #0
 8002960:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002966:	4b1e      	ldr	r3, [pc, #120]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b04      	cmp	r3, #4
 8002974:	d002      	beq.n	800297c <HAL_RCC_GetSysClockFreq+0x30>
 8002976:	2b08      	cmp	r3, #8
 8002978:	d003      	beq.n	8002982 <HAL_RCC_GetSysClockFreq+0x36>
 800297a:	e027      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800297c:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800297e:	613b      	str	r3, [r7, #16]
      break;
 8002980:	e027      	b.n	80029d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	0c9b      	lsrs	r3, r3, #18
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	4a17      	ldr	r2, [pc, #92]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800298c:	5cd3      	ldrb	r3, [r2, r3]
 800298e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d010      	beq.n	80029bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	0c5b      	lsrs	r3, r3, #17
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	4a11      	ldr	r2, [pc, #68]	; (80029ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80029a6:	5cd3      	ldrb	r3, [r2, r3]
 80029a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a0d      	ldr	r2, [pc, #52]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80029ae:	fb03 f202 	mul.w	r2, r3, r2
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	e004      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a0c      	ldr	r2, [pc, #48]	; (80029f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029c0:	fb02 f303 	mul.w	r3, r2, r3
 80029c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	613b      	str	r3, [r7, #16]
      break;
 80029ca:	e002      	b.n	80029d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029cc:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80029ce:	613b      	str	r3, [r7, #16]
      break;
 80029d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029d2:	693b      	ldr	r3, [r7, #16]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	371c      	adds	r7, #28
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
 80029e4:	007a1200 	.word	0x007a1200
 80029e8:	0800450c 	.word	0x0800450c
 80029ec:	0800451c 	.word	0x0800451c
 80029f0:	003d0900 	.word	0x003d0900

080029f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f8:	4b02      	ldr	r3, [pc, #8]	; (8002a04 <HAL_RCC_GetHCLKFreq+0x10>)
 80029fa:	681b      	ldr	r3, [r3, #0]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr
 8002a04:	20000008 	.word	0x20000008

08002a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a0c:	f7ff fff2 	bl	80029f4 <HAL_RCC_GetHCLKFreq>
 8002a10:	4602      	mov	r2, r0
 8002a12:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	0a1b      	lsrs	r3, r3, #8
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	4903      	ldr	r1, [pc, #12]	; (8002a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a1e:	5ccb      	ldrb	r3, [r1, r3]
 8002a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	08004504 	.word	0x08004504

08002a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a34:	f7ff ffde 	bl	80029f4 <HAL_RCC_GetHCLKFreq>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	0adb      	lsrs	r3, r3, #11
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	4903      	ldr	r1, [pc, #12]	; (8002a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a46:	5ccb      	ldrb	r3, [r1, r3]
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40021000 	.word	0x40021000
 8002a54:	08004504 	.word	0x08004504

08002a58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a60:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <RCC_Delay+0x34>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0a      	ldr	r2, [pc, #40]	; (8002a90 <RCC_Delay+0x38>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	0a5b      	lsrs	r3, r3, #9
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	fb02 f303 	mul.w	r3, r2, r3
 8002a72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a74:	bf00      	nop
  }
  while (Delay --);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1e5a      	subs	r2, r3, #1
 8002a7a:	60fa      	str	r2, [r7, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1f9      	bne.n	8002a74 <RCC_Delay+0x1c>
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	20000008 	.word	0x20000008
 8002a90:	10624dd3 	.word	0x10624dd3

08002a94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e042      	b.n	8002b2c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fe f854 	bl	8000b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2224      	movs	r2, #36	; 0x24
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ad6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fc7f 	bl	80033dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002afc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b0ba      	sub	sp, #232	; 0xe8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002b72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10f      	bne.n	8002b9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d009      	beq.n	8002b9a <HAL_UART_IRQHandler+0x66>
 8002b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fb63 	bl	800325e <UART_Receive_IT>
      return;
 8002b98:	e25b      	b.n	8003052 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 80de 	beq.w	8002d60 <HAL_UART_IRQHandler+0x22c>
 8002ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d106      	bne.n	8002bbe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bb4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80d1 	beq.w	8002d60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00b      	beq.n	8002be2 <HAL_UART_IRQHandler+0xae>
 8002bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d005      	beq.n	8002be2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	f043 0201 	orr.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00b      	beq.n	8002c06 <HAL_UART_IRQHandler+0xd2>
 8002bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d005      	beq.n	8002c06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	f043 0202 	orr.w	r2, r3, #2
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00b      	beq.n	8002c2a <HAL_UART_IRQHandler+0xf6>
 8002c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	f043 0204 	orr.w	r2, r3, #4
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d011      	beq.n	8002c5a <HAL_UART_IRQHandler+0x126>
 8002c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c3a:	f003 0320 	and.w	r3, r3, #32
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d105      	bne.n	8002c4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d005      	beq.n	8002c5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	f043 0208 	orr.w	r2, r3, #8
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 81f2 	beq.w	8003048 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_UART_IRQHandler+0x14e>
 8002c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c74:	f003 0320 	and.w	r3, r3, #32
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 faee 	bl	800325e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	bf14      	ite	ne
 8002c90:	2301      	movne	r3, #1
 8002c92:	2300      	moveq	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d103      	bne.n	8002cae <HAL_UART_IRQHandler+0x17a>
 8002ca6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d04f      	beq.n	8002d4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f9f8 	bl	80030a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d041      	beq.n	8002d46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	3314      	adds	r3, #20
 8002cc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cd0:	e853 3f00 	ldrex	r3, [r3]
 8002cd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002cd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3314      	adds	r3, #20
 8002cea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002cee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002cfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002cfe:	e841 2300 	strex	r3, r2, [r1]
 8002d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1d9      	bne.n	8002cc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d013      	beq.n	8002d3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1a:	4a7e      	ldr	r2, [pc, #504]	; (8002f14 <HAL_UART_IRQHandler+0x3e0>)
 8002d1c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff f8aa 	bl	8001e7c <HAL_DMA_Abort_IT>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d016      	beq.n	8002d5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d38:	4610      	mov	r0, r2
 8002d3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d3c:	e00e      	b.n	8002d5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f99c 	bl	800307c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d44:	e00a      	b.n	8002d5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f998 	bl	800307c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d4c:	e006      	b.n	8002d5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f994 	bl	800307c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002d5a:	e175      	b.n	8003048 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d5c:	bf00      	nop
    return;
 8002d5e:	e173      	b.n	8003048 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	f040 814f 	bne.w	8003008 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d6e:	f003 0310 	and.w	r3, r3, #16
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 8148 	beq.w	8003008 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 8141 	beq.w	8003008 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d86:	2300      	movs	r3, #0
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	60bb      	str	r3, [r7, #8]
 8002d9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 80b6 	beq.w	8002f18 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002db8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 8145 	beq.w	800304c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002dc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	f080 813e 	bcs.w	800304c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002dd6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	2b20      	cmp	r3, #32
 8002de0:	f000 8088 	beq.w	8002ef4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	330c      	adds	r3, #12
 8002dea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002df2:	e853 3f00 	ldrex	r3, [r3]
 8002df6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002dfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	330c      	adds	r3, #12
 8002e0c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002e10:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e18:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e20:	e841 2300 	strex	r3, r2, [r1]
 8002e24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1d9      	bne.n	8002de4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3314      	adds	r3, #20
 8002e36:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e3a:	e853 3f00 	ldrex	r3, [r3]
 8002e3e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002e40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e42:	f023 0301 	bic.w	r3, r3, #1
 8002e46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	3314      	adds	r3, #20
 8002e50:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e54:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e58:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e60:	e841 2300 	strex	r3, r2, [r1]
 8002e64:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1e1      	bne.n	8002e30 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3314      	adds	r3, #20
 8002e72:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e76:	e853 3f00 	ldrex	r3, [r3]
 8002e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	3314      	adds	r3, #20
 8002e8c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e90:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e94:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e98:	e841 2300 	strex	r3, r2, [r1]
 8002e9c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1e3      	bne.n	8002e6c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	330c      	adds	r3, #12
 8002eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ebc:	e853 3f00 	ldrex	r3, [r3]
 8002ec0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ec4:	f023 0310 	bic.w	r3, r3, #16
 8002ec8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	330c      	adds	r3, #12
 8002ed2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002ed6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ed8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002edc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ede:	e841 2300 	strex	r3, r2, [r1]
 8002ee2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1e3      	bne.n	8002eb2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fe ff89 	bl	8001e06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	4619      	mov	r1, r3
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f8bf 	bl	800308e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f10:	e09c      	b.n	800304c <HAL_UART_IRQHandler+0x518>
 8002f12:	bf00      	nop
 8002f14:	08003169 	.word	0x08003169
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 808e 	beq.w	8003050 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002f34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 8089 	beq.w	8003050 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	330c      	adds	r3, #12
 8002f44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f48:	e853 3f00 	ldrex	r3, [r3]
 8002f4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	330c      	adds	r3, #12
 8002f5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002f62:	647a      	str	r2, [r7, #68]	; 0x44
 8002f64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f6a:	e841 2300 	strex	r3, r2, [r1]
 8002f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1e3      	bne.n	8002f3e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	3314      	adds	r3, #20
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	e853 3f00 	ldrex	r3, [r3]
 8002f84:	623b      	str	r3, [r7, #32]
   return(result);
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	f023 0301 	bic.w	r3, r3, #1
 8002f8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3314      	adds	r3, #20
 8002f96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f9a:	633a      	str	r2, [r7, #48]	; 0x30
 8002f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fa2:	e841 2300 	strex	r3, r2, [r1]
 8002fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1e3      	bne.n	8002f76 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	330c      	adds	r3, #12
 8002fc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	e853 3f00 	ldrex	r3, [r3]
 8002fca:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0310 	bic.w	r3, r3, #16
 8002fd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	330c      	adds	r3, #12
 8002fdc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002fe0:	61fa      	str	r2, [r7, #28]
 8002fe2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe4:	69b9      	ldr	r1, [r7, #24]
 8002fe6:	69fa      	ldr	r2, [r7, #28]
 8002fe8:	e841 2300 	strex	r3, r2, [r1]
 8002fec:	617b      	str	r3, [r7, #20]
   return(result);
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1e3      	bne.n	8002fbc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ffa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ffe:	4619      	mov	r1, r3
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f844 	bl	800308e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003006:	e023      	b.n	8003050 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800300c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003010:	2b00      	cmp	r3, #0
 8003012:	d009      	beq.n	8003028 <HAL_UART_IRQHandler+0x4f4>
 8003014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f8b5 	bl	8003190 <UART_Transmit_IT>
    return;
 8003026:	e014      	b.n	8003052 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800302c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00e      	beq.n	8003052 <HAL_UART_IRQHandler+0x51e>
 8003034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303c:	2b00      	cmp	r3, #0
 800303e:	d008      	beq.n	8003052 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f8f4 	bl	800322e <UART_EndTransmit_IT>
    return;
 8003046:	e004      	b.n	8003052 <HAL_UART_IRQHandler+0x51e>
    return;
 8003048:	bf00      	nop
 800304a:	e002      	b.n	8003052 <HAL_UART_IRQHandler+0x51e>
      return;
 800304c:	bf00      	nop
 800304e:	e000      	b.n	8003052 <HAL_UART_IRQHandler+0x51e>
      return;
 8003050:	bf00      	nop
  }
}
 8003052:	37e8      	adds	r7, #232	; 0xe8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr

0800306a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr

0800307c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b095      	sub	sp, #84	; 0x54
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	330c      	adds	r3, #12
 80030b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b6:	e853 3f00 	ldrex	r3, [r3]
 80030ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	330c      	adds	r3, #12
 80030ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030cc:	643a      	str	r2, [r7, #64]	; 0x40
 80030ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030d4:	e841 2300 	strex	r3, r2, [r1]
 80030d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1e5      	bne.n	80030ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	3314      	adds	r3, #20
 80030e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	e853 3f00 	ldrex	r3, [r3]
 80030ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f023 0301 	bic.w	r3, r3, #1
 80030f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3314      	adds	r3, #20
 80030fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003100:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003102:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003104:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003108:	e841 2300 	strex	r3, r2, [r1]
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1e5      	bne.n	80030e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	2b01      	cmp	r3, #1
 800311a:	d119      	bne.n	8003150 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	330c      	adds	r3, #12
 8003122:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	e853 3f00 	ldrex	r3, [r3]
 800312a:	60bb      	str	r3, [r7, #8]
   return(result);
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f023 0310 	bic.w	r3, r3, #16
 8003132:	647b      	str	r3, [r7, #68]	; 0x44
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	330c      	adds	r3, #12
 800313a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800313c:	61ba      	str	r2, [r7, #24]
 800313e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003140:	6979      	ldr	r1, [r7, #20]
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	e841 2300 	strex	r3, r2, [r1]
 8003148:	613b      	str	r3, [r7, #16]
   return(result);
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1e5      	bne.n	800311c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800315e:	bf00      	nop
 8003160:	3754      	adds	r7, #84	; 0x54
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr

08003168 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f7ff ff7a 	bl	800307c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003188:	bf00      	nop
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b21      	cmp	r3, #33	; 0x21
 80031a2:	d13e      	bne.n	8003222 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ac:	d114      	bne.n	80031d8 <UART_Transmit_IT+0x48>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d110      	bne.n	80031d8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	1c9a      	adds	r2, r3, #2
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	621a      	str	r2, [r3, #32]
 80031d6:	e008      	b.n	80031ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	1c59      	adds	r1, r3, #1
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6211      	str	r1, [r2, #32]
 80031e2:	781a      	ldrb	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	4619      	mov	r1, r3
 80031f8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10f      	bne.n	800321e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800320c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800321c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	e000      	b.n	8003224 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003222:	2302      	movs	r3, #2
  }
}
 8003224:	4618      	mov	r0, r3
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr

0800322e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b082      	sub	sp, #8
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003244:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff ff02 	bl	8003058 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b08c      	sub	sp, #48	; 0x30
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b22      	cmp	r3, #34	; 0x22
 8003270:	f040 80ae 	bne.w	80033d0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800327c:	d117      	bne.n	80032ae <UART_Receive_IT+0x50>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d113      	bne.n	80032ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003286:	2300      	movs	r3, #0
 8003288:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	b29b      	uxth	r3, r3
 8003298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800329c:	b29a      	uxth	r2, r3
 800329e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a6:	1c9a      	adds	r2, r3, #2
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28
 80032ac:	e026      	b.n	80032fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c0:	d007      	beq.n	80032d2 <UART_Receive_IT+0x74>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10a      	bne.n	80032e0 <UART_Receive_IT+0x82>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032dc:	701a      	strb	r2, [r3, #0]
 80032de:	e008      	b.n	80032f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	1c5a      	adds	r2, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	b29b      	uxth	r3, r3
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	4619      	mov	r1, r3
 800330a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800330c:	2b00      	cmp	r3, #0
 800330e:	d15d      	bne.n	80033cc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0220 	bic.w	r2, r2, #32
 800331e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800332e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695a      	ldr	r2, [r3, #20]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0201 	bic.w	r2, r2, #1
 800333e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	2b01      	cmp	r3, #1
 8003354:	d135      	bne.n	80033c2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	330c      	adds	r3, #12
 8003362:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	e853 3f00 	ldrex	r3, [r3]
 800336a:	613b      	str	r3, [r7, #16]
   return(result);
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	f023 0310 	bic.w	r3, r3, #16
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	330c      	adds	r3, #12
 800337a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337c:	623a      	str	r2, [r7, #32]
 800337e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003380:	69f9      	ldr	r1, [r7, #28]
 8003382:	6a3a      	ldr	r2, [r7, #32]
 8003384:	e841 2300 	strex	r3, r2, [r1]
 8003388:	61bb      	str	r3, [r7, #24]
   return(result);
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1e5      	bne.n	800335c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0310 	and.w	r3, r3, #16
 800339a:	2b10      	cmp	r3, #16
 800339c:	d10a      	bne.n	80033b4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033b8:	4619      	mov	r1, r3
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff fe67 	bl	800308e <HAL_UARTEx_RxEventCallback>
 80033c0:	e002      	b.n	80033c8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff fe51 	bl	800306a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	e002      	b.n	80033d2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e000      	b.n	80033d2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80033d0:	2302      	movs	r3, #2
  }
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3730      	adds	r7, #48	; 0x30
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003416:	f023 030c 	bic.w	r3, r3, #12
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6812      	ldr	r2, [r2, #0]
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	430b      	orrs	r3, r1
 8003422:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699a      	ldr	r2, [r3, #24]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a2c      	ldr	r2, [pc, #176]	; (80034f0 <UART_SetConfig+0x114>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d103      	bne.n	800344c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003444:	f7ff faf4 	bl	8002a30 <HAL_RCC_GetPCLK2Freq>
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	e002      	b.n	8003452 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800344c:	f7ff fadc 	bl	8002a08 <HAL_RCC_GetPCLK1Freq>
 8003450:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	009a      	lsls	r2, r3, #2
 800345c:	441a      	add	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	fbb2 f3f3 	udiv	r3, r2, r3
 8003468:	4a22      	ldr	r2, [pc, #136]	; (80034f4 <UART_SetConfig+0x118>)
 800346a:	fba2 2303 	umull	r2, r3, r2, r3
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	0119      	lsls	r1, r3, #4
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	009a      	lsls	r2, r3, #2
 800347c:	441a      	add	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	fbb2 f2f3 	udiv	r2, r2, r3
 8003488:	4b1a      	ldr	r3, [pc, #104]	; (80034f4 <UART_SetConfig+0x118>)
 800348a:	fba3 0302 	umull	r0, r3, r3, r2
 800348e:	095b      	lsrs	r3, r3, #5
 8003490:	2064      	movs	r0, #100	; 0x64
 8003492:	fb00 f303 	mul.w	r3, r0, r3
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	3332      	adds	r3, #50	; 0x32
 800349c:	4a15      	ldr	r2, [pc, #84]	; (80034f4 <UART_SetConfig+0x118>)
 800349e:	fba2 2303 	umull	r2, r3, r2, r3
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034a8:	4419      	add	r1, r3
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	009a      	lsls	r2, r3, #2
 80034b4:	441a      	add	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80034c0:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <UART_SetConfig+0x118>)
 80034c2:	fba3 0302 	umull	r0, r3, r3, r2
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	2064      	movs	r0, #100	; 0x64
 80034ca:	fb00 f303 	mul.w	r3, r0, r3
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	3332      	adds	r3, #50	; 0x32
 80034d4:	4a07      	ldr	r2, [pc, #28]	; (80034f4 <UART_SetConfig+0x118>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	f003 020f 	and.w	r2, r3, #15
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	440a      	add	r2, r1
 80034e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034e8:	bf00      	nop
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40013800 	.word	0x40013800
 80034f4:	51eb851f 	.word	0x51eb851f

080034f8 <rand>:
 80034f8:	4b16      	ldr	r3, [pc, #88]	; (8003554 <rand+0x5c>)
 80034fa:	b510      	push	{r4, lr}
 80034fc:	681c      	ldr	r4, [r3, #0]
 80034fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003500:	b9b3      	cbnz	r3, 8003530 <rand+0x38>
 8003502:	2018      	movs	r0, #24
 8003504:	f000 fa1e 	bl	8003944 <malloc>
 8003508:	4602      	mov	r2, r0
 800350a:	6320      	str	r0, [r4, #48]	; 0x30
 800350c:	b920      	cbnz	r0, 8003518 <rand+0x20>
 800350e:	2152      	movs	r1, #82	; 0x52
 8003510:	4b11      	ldr	r3, [pc, #68]	; (8003558 <rand+0x60>)
 8003512:	4812      	ldr	r0, [pc, #72]	; (800355c <rand+0x64>)
 8003514:	f000 f9b0 	bl	8003878 <__assert_func>
 8003518:	4911      	ldr	r1, [pc, #68]	; (8003560 <rand+0x68>)
 800351a:	4b12      	ldr	r3, [pc, #72]	; (8003564 <rand+0x6c>)
 800351c:	e9c0 1300 	strd	r1, r3, [r0]
 8003520:	4b11      	ldr	r3, [pc, #68]	; (8003568 <rand+0x70>)
 8003522:	2100      	movs	r1, #0
 8003524:	6083      	str	r3, [r0, #8]
 8003526:	230b      	movs	r3, #11
 8003528:	8183      	strh	r3, [r0, #12]
 800352a:	2001      	movs	r0, #1
 800352c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003530:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003532:	480e      	ldr	r0, [pc, #56]	; (800356c <rand+0x74>)
 8003534:	690b      	ldr	r3, [r1, #16]
 8003536:	694c      	ldr	r4, [r1, #20]
 8003538:	4358      	muls	r0, r3
 800353a:	4a0d      	ldr	r2, [pc, #52]	; (8003570 <rand+0x78>)
 800353c:	fb02 0004 	mla	r0, r2, r4, r0
 8003540:	fba3 3202 	umull	r3, r2, r3, r2
 8003544:	3301      	adds	r3, #1
 8003546:	eb40 0002 	adc.w	r0, r0, r2
 800354a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800354e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003552:	bd10      	pop	{r4, pc}
 8003554:	2000006c 	.word	0x2000006c
 8003558:	0800451e 	.word	0x0800451e
 800355c:	08004535 	.word	0x08004535
 8003560:	abcd330e 	.word	0xabcd330e
 8003564:	e66d1234 	.word	0xe66d1234
 8003568:	0005deec 	.word	0x0005deec
 800356c:	5851f42d 	.word	0x5851f42d
 8003570:	4c957f2d 	.word	0x4c957f2d

08003574 <std>:
 8003574:	2300      	movs	r3, #0
 8003576:	b510      	push	{r4, lr}
 8003578:	4604      	mov	r4, r0
 800357a:	e9c0 3300 	strd	r3, r3, [r0]
 800357e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003582:	6083      	str	r3, [r0, #8]
 8003584:	8181      	strh	r1, [r0, #12]
 8003586:	6643      	str	r3, [r0, #100]	; 0x64
 8003588:	81c2      	strh	r2, [r0, #14]
 800358a:	6183      	str	r3, [r0, #24]
 800358c:	4619      	mov	r1, r3
 800358e:	2208      	movs	r2, #8
 8003590:	305c      	adds	r0, #92	; 0x5c
 8003592:	f000 f8f4 	bl	800377e <memset>
 8003596:	4b0d      	ldr	r3, [pc, #52]	; (80035cc <std+0x58>)
 8003598:	6224      	str	r4, [r4, #32]
 800359a:	6263      	str	r3, [r4, #36]	; 0x24
 800359c:	4b0c      	ldr	r3, [pc, #48]	; (80035d0 <std+0x5c>)
 800359e:	62a3      	str	r3, [r4, #40]	; 0x28
 80035a0:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <std+0x60>)
 80035a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035a4:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <std+0x64>)
 80035a6:	6323      	str	r3, [r4, #48]	; 0x30
 80035a8:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <std+0x68>)
 80035aa:	429c      	cmp	r4, r3
 80035ac:	d006      	beq.n	80035bc <std+0x48>
 80035ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80035b2:	4294      	cmp	r4, r2
 80035b4:	d002      	beq.n	80035bc <std+0x48>
 80035b6:	33d0      	adds	r3, #208	; 0xd0
 80035b8:	429c      	cmp	r4, r3
 80035ba:	d105      	bne.n	80035c8 <std+0x54>
 80035bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80035c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035c4:	f000 b954 	b.w	8003870 <__retarget_lock_init_recursive>
 80035c8:	bd10      	pop	{r4, pc}
 80035ca:	bf00      	nop
 80035cc:	080036f9 	.word	0x080036f9
 80035d0:	0800371b 	.word	0x0800371b
 80035d4:	08003753 	.word	0x08003753
 80035d8:	08003777 	.word	0x08003777
 80035dc:	20000178 	.word	0x20000178

080035e0 <stdio_exit_handler>:
 80035e0:	4a02      	ldr	r2, [pc, #8]	; (80035ec <stdio_exit_handler+0xc>)
 80035e2:	4903      	ldr	r1, [pc, #12]	; (80035f0 <stdio_exit_handler+0x10>)
 80035e4:	4803      	ldr	r0, [pc, #12]	; (80035f4 <stdio_exit_handler+0x14>)
 80035e6:	f000 b869 	b.w	80036bc <_fwalk_sglue>
 80035ea:	bf00      	nop
 80035ec:	20000014 	.word	0x20000014
 80035f0:	08003bb1 	.word	0x08003bb1
 80035f4:	20000020 	.word	0x20000020

080035f8 <cleanup_stdio>:
 80035f8:	6841      	ldr	r1, [r0, #4]
 80035fa:	4b0c      	ldr	r3, [pc, #48]	; (800362c <cleanup_stdio+0x34>)
 80035fc:	b510      	push	{r4, lr}
 80035fe:	4299      	cmp	r1, r3
 8003600:	4604      	mov	r4, r0
 8003602:	d001      	beq.n	8003608 <cleanup_stdio+0x10>
 8003604:	f000 fad4 	bl	8003bb0 <_fflush_r>
 8003608:	68a1      	ldr	r1, [r4, #8]
 800360a:	4b09      	ldr	r3, [pc, #36]	; (8003630 <cleanup_stdio+0x38>)
 800360c:	4299      	cmp	r1, r3
 800360e:	d002      	beq.n	8003616 <cleanup_stdio+0x1e>
 8003610:	4620      	mov	r0, r4
 8003612:	f000 facd 	bl	8003bb0 <_fflush_r>
 8003616:	68e1      	ldr	r1, [r4, #12]
 8003618:	4b06      	ldr	r3, [pc, #24]	; (8003634 <cleanup_stdio+0x3c>)
 800361a:	4299      	cmp	r1, r3
 800361c:	d004      	beq.n	8003628 <cleanup_stdio+0x30>
 800361e:	4620      	mov	r0, r4
 8003620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003624:	f000 bac4 	b.w	8003bb0 <_fflush_r>
 8003628:	bd10      	pop	{r4, pc}
 800362a:	bf00      	nop
 800362c:	20000178 	.word	0x20000178
 8003630:	200001e0 	.word	0x200001e0
 8003634:	20000248 	.word	0x20000248

08003638 <global_stdio_init.part.0>:
 8003638:	b510      	push	{r4, lr}
 800363a:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <global_stdio_init.part.0+0x30>)
 800363c:	4c0b      	ldr	r4, [pc, #44]	; (800366c <global_stdio_init.part.0+0x34>)
 800363e:	4a0c      	ldr	r2, [pc, #48]	; (8003670 <global_stdio_init.part.0+0x38>)
 8003640:	4620      	mov	r0, r4
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	2104      	movs	r1, #4
 8003646:	2200      	movs	r2, #0
 8003648:	f7ff ff94 	bl	8003574 <std>
 800364c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003650:	2201      	movs	r2, #1
 8003652:	2109      	movs	r1, #9
 8003654:	f7ff ff8e 	bl	8003574 <std>
 8003658:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800365c:	2202      	movs	r2, #2
 800365e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003662:	2112      	movs	r1, #18
 8003664:	f7ff bf86 	b.w	8003574 <std>
 8003668:	200002b0 	.word	0x200002b0
 800366c:	20000178 	.word	0x20000178
 8003670:	080035e1 	.word	0x080035e1

08003674 <__sfp_lock_acquire>:
 8003674:	4801      	ldr	r0, [pc, #4]	; (800367c <__sfp_lock_acquire+0x8>)
 8003676:	f000 b8fc 	b.w	8003872 <__retarget_lock_acquire_recursive>
 800367a:	bf00      	nop
 800367c:	200002b9 	.word	0x200002b9

08003680 <__sfp_lock_release>:
 8003680:	4801      	ldr	r0, [pc, #4]	; (8003688 <__sfp_lock_release+0x8>)
 8003682:	f000 b8f7 	b.w	8003874 <__retarget_lock_release_recursive>
 8003686:	bf00      	nop
 8003688:	200002b9 	.word	0x200002b9

0800368c <__sinit>:
 800368c:	b510      	push	{r4, lr}
 800368e:	4604      	mov	r4, r0
 8003690:	f7ff fff0 	bl	8003674 <__sfp_lock_acquire>
 8003694:	6a23      	ldr	r3, [r4, #32]
 8003696:	b11b      	cbz	r3, 80036a0 <__sinit+0x14>
 8003698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800369c:	f7ff bff0 	b.w	8003680 <__sfp_lock_release>
 80036a0:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <__sinit+0x28>)
 80036a2:	6223      	str	r3, [r4, #32]
 80036a4:	4b04      	ldr	r3, [pc, #16]	; (80036b8 <__sinit+0x2c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f5      	bne.n	8003698 <__sinit+0xc>
 80036ac:	f7ff ffc4 	bl	8003638 <global_stdio_init.part.0>
 80036b0:	e7f2      	b.n	8003698 <__sinit+0xc>
 80036b2:	bf00      	nop
 80036b4:	080035f9 	.word	0x080035f9
 80036b8:	200002b0 	.word	0x200002b0

080036bc <_fwalk_sglue>:
 80036bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036c0:	4607      	mov	r7, r0
 80036c2:	4688      	mov	r8, r1
 80036c4:	4614      	mov	r4, r2
 80036c6:	2600      	movs	r6, #0
 80036c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036cc:	f1b9 0901 	subs.w	r9, r9, #1
 80036d0:	d505      	bpl.n	80036de <_fwalk_sglue+0x22>
 80036d2:	6824      	ldr	r4, [r4, #0]
 80036d4:	2c00      	cmp	r4, #0
 80036d6:	d1f7      	bne.n	80036c8 <_fwalk_sglue+0xc>
 80036d8:	4630      	mov	r0, r6
 80036da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036de:	89ab      	ldrh	r3, [r5, #12]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d907      	bls.n	80036f4 <_fwalk_sglue+0x38>
 80036e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036e8:	3301      	adds	r3, #1
 80036ea:	d003      	beq.n	80036f4 <_fwalk_sglue+0x38>
 80036ec:	4629      	mov	r1, r5
 80036ee:	4638      	mov	r0, r7
 80036f0:	47c0      	blx	r8
 80036f2:	4306      	orrs	r6, r0
 80036f4:	3568      	adds	r5, #104	; 0x68
 80036f6:	e7e9      	b.n	80036cc <_fwalk_sglue+0x10>

080036f8 <__sread>:
 80036f8:	b510      	push	{r4, lr}
 80036fa:	460c      	mov	r4, r1
 80036fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003700:	f000 f868 	bl	80037d4 <_read_r>
 8003704:	2800      	cmp	r0, #0
 8003706:	bfab      	itete	ge
 8003708:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800370a:	89a3      	ldrhlt	r3, [r4, #12]
 800370c:	181b      	addge	r3, r3, r0
 800370e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003712:	bfac      	ite	ge
 8003714:	6563      	strge	r3, [r4, #84]	; 0x54
 8003716:	81a3      	strhlt	r3, [r4, #12]
 8003718:	bd10      	pop	{r4, pc}

0800371a <__swrite>:
 800371a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800371e:	461f      	mov	r7, r3
 8003720:	898b      	ldrh	r3, [r1, #12]
 8003722:	4605      	mov	r5, r0
 8003724:	05db      	lsls	r3, r3, #23
 8003726:	460c      	mov	r4, r1
 8003728:	4616      	mov	r6, r2
 800372a:	d505      	bpl.n	8003738 <__swrite+0x1e>
 800372c:	2302      	movs	r3, #2
 800372e:	2200      	movs	r2, #0
 8003730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003734:	f000 f83c 	bl	80037b0 <_lseek_r>
 8003738:	89a3      	ldrh	r3, [r4, #12]
 800373a:	4632      	mov	r2, r6
 800373c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003740:	81a3      	strh	r3, [r4, #12]
 8003742:	4628      	mov	r0, r5
 8003744:	463b      	mov	r3, r7
 8003746:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800374a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800374e:	f000 b853 	b.w	80037f8 <_write_r>

08003752 <__sseek>:
 8003752:	b510      	push	{r4, lr}
 8003754:	460c      	mov	r4, r1
 8003756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800375a:	f000 f829 	bl	80037b0 <_lseek_r>
 800375e:	1c43      	adds	r3, r0, #1
 8003760:	89a3      	ldrh	r3, [r4, #12]
 8003762:	bf15      	itete	ne
 8003764:	6560      	strne	r0, [r4, #84]	; 0x54
 8003766:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800376a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800376e:	81a3      	strheq	r3, [r4, #12]
 8003770:	bf18      	it	ne
 8003772:	81a3      	strhne	r3, [r4, #12]
 8003774:	bd10      	pop	{r4, pc}

08003776 <__sclose>:
 8003776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800377a:	f000 b809 	b.w	8003790 <_close_r>

0800377e <memset>:
 800377e:	4603      	mov	r3, r0
 8003780:	4402      	add	r2, r0
 8003782:	4293      	cmp	r3, r2
 8003784:	d100      	bne.n	8003788 <memset+0xa>
 8003786:	4770      	bx	lr
 8003788:	f803 1b01 	strb.w	r1, [r3], #1
 800378c:	e7f9      	b.n	8003782 <memset+0x4>
	...

08003790 <_close_r>:
 8003790:	b538      	push	{r3, r4, r5, lr}
 8003792:	2300      	movs	r3, #0
 8003794:	4d05      	ldr	r5, [pc, #20]	; (80037ac <_close_r+0x1c>)
 8003796:	4604      	mov	r4, r0
 8003798:	4608      	mov	r0, r1
 800379a:	602b      	str	r3, [r5, #0]
 800379c:	f7fd face 	bl	8000d3c <_close>
 80037a0:	1c43      	adds	r3, r0, #1
 80037a2:	d102      	bne.n	80037aa <_close_r+0x1a>
 80037a4:	682b      	ldr	r3, [r5, #0]
 80037a6:	b103      	cbz	r3, 80037aa <_close_r+0x1a>
 80037a8:	6023      	str	r3, [r4, #0]
 80037aa:	bd38      	pop	{r3, r4, r5, pc}
 80037ac:	200002b4 	.word	0x200002b4

080037b0 <_lseek_r>:
 80037b0:	b538      	push	{r3, r4, r5, lr}
 80037b2:	4604      	mov	r4, r0
 80037b4:	4608      	mov	r0, r1
 80037b6:	4611      	mov	r1, r2
 80037b8:	2200      	movs	r2, #0
 80037ba:	4d05      	ldr	r5, [pc, #20]	; (80037d0 <_lseek_r+0x20>)
 80037bc:	602a      	str	r2, [r5, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	f7fd fae0 	bl	8000d84 <_lseek>
 80037c4:	1c43      	adds	r3, r0, #1
 80037c6:	d102      	bne.n	80037ce <_lseek_r+0x1e>
 80037c8:	682b      	ldr	r3, [r5, #0]
 80037ca:	b103      	cbz	r3, 80037ce <_lseek_r+0x1e>
 80037cc:	6023      	str	r3, [r4, #0]
 80037ce:	bd38      	pop	{r3, r4, r5, pc}
 80037d0:	200002b4 	.word	0x200002b4

080037d4 <_read_r>:
 80037d4:	b538      	push	{r3, r4, r5, lr}
 80037d6:	4604      	mov	r4, r0
 80037d8:	4608      	mov	r0, r1
 80037da:	4611      	mov	r1, r2
 80037dc:	2200      	movs	r2, #0
 80037de:	4d05      	ldr	r5, [pc, #20]	; (80037f4 <_read_r+0x20>)
 80037e0:	602a      	str	r2, [r5, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	f7fd fa71 	bl	8000cca <_read>
 80037e8:	1c43      	adds	r3, r0, #1
 80037ea:	d102      	bne.n	80037f2 <_read_r+0x1e>
 80037ec:	682b      	ldr	r3, [r5, #0]
 80037ee:	b103      	cbz	r3, 80037f2 <_read_r+0x1e>
 80037f0:	6023      	str	r3, [r4, #0]
 80037f2:	bd38      	pop	{r3, r4, r5, pc}
 80037f4:	200002b4 	.word	0x200002b4

080037f8 <_write_r>:
 80037f8:	b538      	push	{r3, r4, r5, lr}
 80037fa:	4604      	mov	r4, r0
 80037fc:	4608      	mov	r0, r1
 80037fe:	4611      	mov	r1, r2
 8003800:	2200      	movs	r2, #0
 8003802:	4d05      	ldr	r5, [pc, #20]	; (8003818 <_write_r+0x20>)
 8003804:	602a      	str	r2, [r5, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	f7fd fa7c 	bl	8000d04 <_write>
 800380c:	1c43      	adds	r3, r0, #1
 800380e:	d102      	bne.n	8003816 <_write_r+0x1e>
 8003810:	682b      	ldr	r3, [r5, #0]
 8003812:	b103      	cbz	r3, 8003816 <_write_r+0x1e>
 8003814:	6023      	str	r3, [r4, #0]
 8003816:	bd38      	pop	{r3, r4, r5, pc}
 8003818:	200002b4 	.word	0x200002b4

0800381c <__errno>:
 800381c:	4b01      	ldr	r3, [pc, #4]	; (8003824 <__errno+0x8>)
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	2000006c 	.word	0x2000006c

08003828 <__libc_init_array>:
 8003828:	b570      	push	{r4, r5, r6, lr}
 800382a:	2600      	movs	r6, #0
 800382c:	4d0c      	ldr	r5, [pc, #48]	; (8003860 <__libc_init_array+0x38>)
 800382e:	4c0d      	ldr	r4, [pc, #52]	; (8003864 <__libc_init_array+0x3c>)
 8003830:	1b64      	subs	r4, r4, r5
 8003832:	10a4      	asrs	r4, r4, #2
 8003834:	42a6      	cmp	r6, r4
 8003836:	d109      	bne.n	800384c <__libc_init_array+0x24>
 8003838:	f000 fe4c 	bl	80044d4 <_init>
 800383c:	2600      	movs	r6, #0
 800383e:	4d0a      	ldr	r5, [pc, #40]	; (8003868 <__libc_init_array+0x40>)
 8003840:	4c0a      	ldr	r4, [pc, #40]	; (800386c <__libc_init_array+0x44>)
 8003842:	1b64      	subs	r4, r4, r5
 8003844:	10a4      	asrs	r4, r4, #2
 8003846:	42a6      	cmp	r6, r4
 8003848:	d105      	bne.n	8003856 <__libc_init_array+0x2e>
 800384a:	bd70      	pop	{r4, r5, r6, pc}
 800384c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003850:	4798      	blx	r3
 8003852:	3601      	adds	r6, #1
 8003854:	e7ee      	b.n	8003834 <__libc_init_array+0xc>
 8003856:	f855 3b04 	ldr.w	r3, [r5], #4
 800385a:	4798      	blx	r3
 800385c:	3601      	adds	r6, #1
 800385e:	e7f2      	b.n	8003846 <__libc_init_array+0x1e>
 8003860:	080045fc 	.word	0x080045fc
 8003864:	080045fc 	.word	0x080045fc
 8003868:	080045fc 	.word	0x080045fc
 800386c:	08004600 	.word	0x08004600

08003870 <__retarget_lock_init_recursive>:
 8003870:	4770      	bx	lr

08003872 <__retarget_lock_acquire_recursive>:
 8003872:	4770      	bx	lr

08003874 <__retarget_lock_release_recursive>:
 8003874:	4770      	bx	lr
	...

08003878 <__assert_func>:
 8003878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800387a:	4614      	mov	r4, r2
 800387c:	461a      	mov	r2, r3
 800387e:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <__assert_func+0x2c>)
 8003880:	4605      	mov	r5, r0
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68d8      	ldr	r0, [r3, #12]
 8003886:	b14c      	cbz	r4, 800389c <__assert_func+0x24>
 8003888:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <__assert_func+0x30>)
 800388a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800388e:	9100      	str	r1, [sp, #0]
 8003890:	462b      	mov	r3, r5
 8003892:	4906      	ldr	r1, [pc, #24]	; (80038ac <__assert_func+0x34>)
 8003894:	f000 f9b4 	bl	8003c00 <fiprintf>
 8003898:	f000 f9d4 	bl	8003c44 <abort>
 800389c:	4b04      	ldr	r3, [pc, #16]	; (80038b0 <__assert_func+0x38>)
 800389e:	461c      	mov	r4, r3
 80038a0:	e7f3      	b.n	800388a <__assert_func+0x12>
 80038a2:	bf00      	nop
 80038a4:	2000006c 	.word	0x2000006c
 80038a8:	0800458d 	.word	0x0800458d
 80038ac:	0800459a 	.word	0x0800459a
 80038b0:	080045c8 	.word	0x080045c8

080038b4 <_free_r>:
 80038b4:	b538      	push	{r3, r4, r5, lr}
 80038b6:	4605      	mov	r5, r0
 80038b8:	2900      	cmp	r1, #0
 80038ba:	d040      	beq.n	800393e <_free_r+0x8a>
 80038bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038c0:	1f0c      	subs	r4, r1, #4
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	bfb8      	it	lt
 80038c6:	18e4      	addlt	r4, r4, r3
 80038c8:	f000 f8e4 	bl	8003a94 <__malloc_lock>
 80038cc:	4a1c      	ldr	r2, [pc, #112]	; (8003940 <_free_r+0x8c>)
 80038ce:	6813      	ldr	r3, [r2, #0]
 80038d0:	b933      	cbnz	r3, 80038e0 <_free_r+0x2c>
 80038d2:	6063      	str	r3, [r4, #4]
 80038d4:	6014      	str	r4, [r2, #0]
 80038d6:	4628      	mov	r0, r5
 80038d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038dc:	f000 b8e0 	b.w	8003aa0 <__malloc_unlock>
 80038e0:	42a3      	cmp	r3, r4
 80038e2:	d908      	bls.n	80038f6 <_free_r+0x42>
 80038e4:	6820      	ldr	r0, [r4, #0]
 80038e6:	1821      	adds	r1, r4, r0
 80038e8:	428b      	cmp	r3, r1
 80038ea:	bf01      	itttt	eq
 80038ec:	6819      	ldreq	r1, [r3, #0]
 80038ee:	685b      	ldreq	r3, [r3, #4]
 80038f0:	1809      	addeq	r1, r1, r0
 80038f2:	6021      	streq	r1, [r4, #0]
 80038f4:	e7ed      	b.n	80038d2 <_free_r+0x1e>
 80038f6:	461a      	mov	r2, r3
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	b10b      	cbz	r3, 8003900 <_free_r+0x4c>
 80038fc:	42a3      	cmp	r3, r4
 80038fe:	d9fa      	bls.n	80038f6 <_free_r+0x42>
 8003900:	6811      	ldr	r1, [r2, #0]
 8003902:	1850      	adds	r0, r2, r1
 8003904:	42a0      	cmp	r0, r4
 8003906:	d10b      	bne.n	8003920 <_free_r+0x6c>
 8003908:	6820      	ldr	r0, [r4, #0]
 800390a:	4401      	add	r1, r0
 800390c:	1850      	adds	r0, r2, r1
 800390e:	4283      	cmp	r3, r0
 8003910:	6011      	str	r1, [r2, #0]
 8003912:	d1e0      	bne.n	80038d6 <_free_r+0x22>
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	4408      	add	r0, r1
 800391a:	6010      	str	r0, [r2, #0]
 800391c:	6053      	str	r3, [r2, #4]
 800391e:	e7da      	b.n	80038d6 <_free_r+0x22>
 8003920:	d902      	bls.n	8003928 <_free_r+0x74>
 8003922:	230c      	movs	r3, #12
 8003924:	602b      	str	r3, [r5, #0]
 8003926:	e7d6      	b.n	80038d6 <_free_r+0x22>
 8003928:	6820      	ldr	r0, [r4, #0]
 800392a:	1821      	adds	r1, r4, r0
 800392c:	428b      	cmp	r3, r1
 800392e:	bf01      	itttt	eq
 8003930:	6819      	ldreq	r1, [r3, #0]
 8003932:	685b      	ldreq	r3, [r3, #4]
 8003934:	1809      	addeq	r1, r1, r0
 8003936:	6021      	streq	r1, [r4, #0]
 8003938:	6063      	str	r3, [r4, #4]
 800393a:	6054      	str	r4, [r2, #4]
 800393c:	e7cb      	b.n	80038d6 <_free_r+0x22>
 800393e:	bd38      	pop	{r3, r4, r5, pc}
 8003940:	200002bc 	.word	0x200002bc

08003944 <malloc>:
 8003944:	4b02      	ldr	r3, [pc, #8]	; (8003950 <malloc+0xc>)
 8003946:	4601      	mov	r1, r0
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	f000 b823 	b.w	8003994 <_malloc_r>
 800394e:	bf00      	nop
 8003950:	2000006c 	.word	0x2000006c

08003954 <sbrk_aligned>:
 8003954:	b570      	push	{r4, r5, r6, lr}
 8003956:	4e0e      	ldr	r6, [pc, #56]	; (8003990 <sbrk_aligned+0x3c>)
 8003958:	460c      	mov	r4, r1
 800395a:	6831      	ldr	r1, [r6, #0]
 800395c:	4605      	mov	r5, r0
 800395e:	b911      	cbnz	r1, 8003966 <sbrk_aligned+0x12>
 8003960:	f000 f960 	bl	8003c24 <_sbrk_r>
 8003964:	6030      	str	r0, [r6, #0]
 8003966:	4621      	mov	r1, r4
 8003968:	4628      	mov	r0, r5
 800396a:	f000 f95b 	bl	8003c24 <_sbrk_r>
 800396e:	1c43      	adds	r3, r0, #1
 8003970:	d00a      	beq.n	8003988 <sbrk_aligned+0x34>
 8003972:	1cc4      	adds	r4, r0, #3
 8003974:	f024 0403 	bic.w	r4, r4, #3
 8003978:	42a0      	cmp	r0, r4
 800397a:	d007      	beq.n	800398c <sbrk_aligned+0x38>
 800397c:	1a21      	subs	r1, r4, r0
 800397e:	4628      	mov	r0, r5
 8003980:	f000 f950 	bl	8003c24 <_sbrk_r>
 8003984:	3001      	adds	r0, #1
 8003986:	d101      	bne.n	800398c <sbrk_aligned+0x38>
 8003988:	f04f 34ff 	mov.w	r4, #4294967295
 800398c:	4620      	mov	r0, r4
 800398e:	bd70      	pop	{r4, r5, r6, pc}
 8003990:	200002c0 	.word	0x200002c0

08003994 <_malloc_r>:
 8003994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003998:	1ccd      	adds	r5, r1, #3
 800399a:	f025 0503 	bic.w	r5, r5, #3
 800399e:	3508      	adds	r5, #8
 80039a0:	2d0c      	cmp	r5, #12
 80039a2:	bf38      	it	cc
 80039a4:	250c      	movcc	r5, #12
 80039a6:	2d00      	cmp	r5, #0
 80039a8:	4607      	mov	r7, r0
 80039aa:	db01      	blt.n	80039b0 <_malloc_r+0x1c>
 80039ac:	42a9      	cmp	r1, r5
 80039ae:	d905      	bls.n	80039bc <_malloc_r+0x28>
 80039b0:	230c      	movs	r3, #12
 80039b2:	2600      	movs	r6, #0
 80039b4:	603b      	str	r3, [r7, #0]
 80039b6:	4630      	mov	r0, r6
 80039b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a90 <_malloc_r+0xfc>
 80039c0:	f000 f868 	bl	8003a94 <__malloc_lock>
 80039c4:	f8d8 3000 	ldr.w	r3, [r8]
 80039c8:	461c      	mov	r4, r3
 80039ca:	bb5c      	cbnz	r4, 8003a24 <_malloc_r+0x90>
 80039cc:	4629      	mov	r1, r5
 80039ce:	4638      	mov	r0, r7
 80039d0:	f7ff ffc0 	bl	8003954 <sbrk_aligned>
 80039d4:	1c43      	adds	r3, r0, #1
 80039d6:	4604      	mov	r4, r0
 80039d8:	d155      	bne.n	8003a86 <_malloc_r+0xf2>
 80039da:	f8d8 4000 	ldr.w	r4, [r8]
 80039de:	4626      	mov	r6, r4
 80039e0:	2e00      	cmp	r6, #0
 80039e2:	d145      	bne.n	8003a70 <_malloc_r+0xdc>
 80039e4:	2c00      	cmp	r4, #0
 80039e6:	d048      	beq.n	8003a7a <_malloc_r+0xe6>
 80039e8:	6823      	ldr	r3, [r4, #0]
 80039ea:	4631      	mov	r1, r6
 80039ec:	4638      	mov	r0, r7
 80039ee:	eb04 0903 	add.w	r9, r4, r3
 80039f2:	f000 f917 	bl	8003c24 <_sbrk_r>
 80039f6:	4581      	cmp	r9, r0
 80039f8:	d13f      	bne.n	8003a7a <_malloc_r+0xe6>
 80039fa:	6821      	ldr	r1, [r4, #0]
 80039fc:	4638      	mov	r0, r7
 80039fe:	1a6d      	subs	r5, r5, r1
 8003a00:	4629      	mov	r1, r5
 8003a02:	f7ff ffa7 	bl	8003954 <sbrk_aligned>
 8003a06:	3001      	adds	r0, #1
 8003a08:	d037      	beq.n	8003a7a <_malloc_r+0xe6>
 8003a0a:	6823      	ldr	r3, [r4, #0]
 8003a0c:	442b      	add	r3, r5
 8003a0e:	6023      	str	r3, [r4, #0]
 8003a10:	f8d8 3000 	ldr.w	r3, [r8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d038      	beq.n	8003a8a <_malloc_r+0xf6>
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	42a2      	cmp	r2, r4
 8003a1c:	d12b      	bne.n	8003a76 <_malloc_r+0xe2>
 8003a1e:	2200      	movs	r2, #0
 8003a20:	605a      	str	r2, [r3, #4]
 8003a22:	e00f      	b.n	8003a44 <_malloc_r+0xb0>
 8003a24:	6822      	ldr	r2, [r4, #0]
 8003a26:	1b52      	subs	r2, r2, r5
 8003a28:	d41f      	bmi.n	8003a6a <_malloc_r+0xd6>
 8003a2a:	2a0b      	cmp	r2, #11
 8003a2c:	d917      	bls.n	8003a5e <_malloc_r+0xca>
 8003a2e:	1961      	adds	r1, r4, r5
 8003a30:	42a3      	cmp	r3, r4
 8003a32:	6025      	str	r5, [r4, #0]
 8003a34:	bf18      	it	ne
 8003a36:	6059      	strne	r1, [r3, #4]
 8003a38:	6863      	ldr	r3, [r4, #4]
 8003a3a:	bf08      	it	eq
 8003a3c:	f8c8 1000 	streq.w	r1, [r8]
 8003a40:	5162      	str	r2, [r4, r5]
 8003a42:	604b      	str	r3, [r1, #4]
 8003a44:	4638      	mov	r0, r7
 8003a46:	f104 060b 	add.w	r6, r4, #11
 8003a4a:	f000 f829 	bl	8003aa0 <__malloc_unlock>
 8003a4e:	f026 0607 	bic.w	r6, r6, #7
 8003a52:	1d23      	adds	r3, r4, #4
 8003a54:	1af2      	subs	r2, r6, r3
 8003a56:	d0ae      	beq.n	80039b6 <_malloc_r+0x22>
 8003a58:	1b9b      	subs	r3, r3, r6
 8003a5a:	50a3      	str	r3, [r4, r2]
 8003a5c:	e7ab      	b.n	80039b6 <_malloc_r+0x22>
 8003a5e:	42a3      	cmp	r3, r4
 8003a60:	6862      	ldr	r2, [r4, #4]
 8003a62:	d1dd      	bne.n	8003a20 <_malloc_r+0x8c>
 8003a64:	f8c8 2000 	str.w	r2, [r8]
 8003a68:	e7ec      	b.n	8003a44 <_malloc_r+0xb0>
 8003a6a:	4623      	mov	r3, r4
 8003a6c:	6864      	ldr	r4, [r4, #4]
 8003a6e:	e7ac      	b.n	80039ca <_malloc_r+0x36>
 8003a70:	4634      	mov	r4, r6
 8003a72:	6876      	ldr	r6, [r6, #4]
 8003a74:	e7b4      	b.n	80039e0 <_malloc_r+0x4c>
 8003a76:	4613      	mov	r3, r2
 8003a78:	e7cc      	b.n	8003a14 <_malloc_r+0x80>
 8003a7a:	230c      	movs	r3, #12
 8003a7c:	4638      	mov	r0, r7
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	f000 f80e 	bl	8003aa0 <__malloc_unlock>
 8003a84:	e797      	b.n	80039b6 <_malloc_r+0x22>
 8003a86:	6025      	str	r5, [r4, #0]
 8003a88:	e7dc      	b.n	8003a44 <_malloc_r+0xb0>
 8003a8a:	605b      	str	r3, [r3, #4]
 8003a8c:	deff      	udf	#255	; 0xff
 8003a8e:	bf00      	nop
 8003a90:	200002bc 	.word	0x200002bc

08003a94 <__malloc_lock>:
 8003a94:	4801      	ldr	r0, [pc, #4]	; (8003a9c <__malloc_lock+0x8>)
 8003a96:	f7ff beec 	b.w	8003872 <__retarget_lock_acquire_recursive>
 8003a9a:	bf00      	nop
 8003a9c:	200002b8 	.word	0x200002b8

08003aa0 <__malloc_unlock>:
 8003aa0:	4801      	ldr	r0, [pc, #4]	; (8003aa8 <__malloc_unlock+0x8>)
 8003aa2:	f7ff bee7 	b.w	8003874 <__retarget_lock_release_recursive>
 8003aa6:	bf00      	nop
 8003aa8:	200002b8 	.word	0x200002b8

08003aac <__sflush_r>:
 8003aac:	898a      	ldrh	r2, [r1, #12]
 8003aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab0:	4605      	mov	r5, r0
 8003ab2:	0710      	lsls	r0, r2, #28
 8003ab4:	460c      	mov	r4, r1
 8003ab6:	d457      	bmi.n	8003b68 <__sflush_r+0xbc>
 8003ab8:	684b      	ldr	r3, [r1, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	dc04      	bgt.n	8003ac8 <__sflush_r+0x1c>
 8003abe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	dc01      	bgt.n	8003ac8 <__sflush_r+0x1c>
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ac8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003aca:	2e00      	cmp	r6, #0
 8003acc:	d0fa      	beq.n	8003ac4 <__sflush_r+0x18>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ad4:	682f      	ldr	r7, [r5, #0]
 8003ad6:	6a21      	ldr	r1, [r4, #32]
 8003ad8:	602b      	str	r3, [r5, #0]
 8003ada:	d032      	beq.n	8003b42 <__sflush_r+0x96>
 8003adc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ade:	89a3      	ldrh	r3, [r4, #12]
 8003ae0:	075a      	lsls	r2, r3, #29
 8003ae2:	d505      	bpl.n	8003af0 <__sflush_r+0x44>
 8003ae4:	6863      	ldr	r3, [r4, #4]
 8003ae6:	1ac0      	subs	r0, r0, r3
 8003ae8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003aea:	b10b      	cbz	r3, 8003af0 <__sflush_r+0x44>
 8003aec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003aee:	1ac0      	subs	r0, r0, r3
 8003af0:	2300      	movs	r3, #0
 8003af2:	4602      	mov	r2, r0
 8003af4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003af6:	4628      	mov	r0, r5
 8003af8:	6a21      	ldr	r1, [r4, #32]
 8003afa:	47b0      	blx	r6
 8003afc:	1c43      	adds	r3, r0, #1
 8003afe:	89a3      	ldrh	r3, [r4, #12]
 8003b00:	d106      	bne.n	8003b10 <__sflush_r+0x64>
 8003b02:	6829      	ldr	r1, [r5, #0]
 8003b04:	291d      	cmp	r1, #29
 8003b06:	d82b      	bhi.n	8003b60 <__sflush_r+0xb4>
 8003b08:	4a28      	ldr	r2, [pc, #160]	; (8003bac <__sflush_r+0x100>)
 8003b0a:	410a      	asrs	r2, r1
 8003b0c:	07d6      	lsls	r6, r2, #31
 8003b0e:	d427      	bmi.n	8003b60 <__sflush_r+0xb4>
 8003b10:	2200      	movs	r2, #0
 8003b12:	6062      	str	r2, [r4, #4]
 8003b14:	6922      	ldr	r2, [r4, #16]
 8003b16:	04d9      	lsls	r1, r3, #19
 8003b18:	6022      	str	r2, [r4, #0]
 8003b1a:	d504      	bpl.n	8003b26 <__sflush_r+0x7a>
 8003b1c:	1c42      	adds	r2, r0, #1
 8003b1e:	d101      	bne.n	8003b24 <__sflush_r+0x78>
 8003b20:	682b      	ldr	r3, [r5, #0]
 8003b22:	b903      	cbnz	r3, 8003b26 <__sflush_r+0x7a>
 8003b24:	6560      	str	r0, [r4, #84]	; 0x54
 8003b26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b28:	602f      	str	r7, [r5, #0]
 8003b2a:	2900      	cmp	r1, #0
 8003b2c:	d0ca      	beq.n	8003ac4 <__sflush_r+0x18>
 8003b2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b32:	4299      	cmp	r1, r3
 8003b34:	d002      	beq.n	8003b3c <__sflush_r+0x90>
 8003b36:	4628      	mov	r0, r5
 8003b38:	f7ff febc 	bl	80038b4 <_free_r>
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	6360      	str	r0, [r4, #52]	; 0x34
 8003b40:	e7c1      	b.n	8003ac6 <__sflush_r+0x1a>
 8003b42:	2301      	movs	r3, #1
 8003b44:	4628      	mov	r0, r5
 8003b46:	47b0      	blx	r6
 8003b48:	1c41      	adds	r1, r0, #1
 8003b4a:	d1c8      	bne.n	8003ade <__sflush_r+0x32>
 8003b4c:	682b      	ldr	r3, [r5, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0c5      	beq.n	8003ade <__sflush_r+0x32>
 8003b52:	2b1d      	cmp	r3, #29
 8003b54:	d001      	beq.n	8003b5a <__sflush_r+0xae>
 8003b56:	2b16      	cmp	r3, #22
 8003b58:	d101      	bne.n	8003b5e <__sflush_r+0xb2>
 8003b5a:	602f      	str	r7, [r5, #0]
 8003b5c:	e7b2      	b.n	8003ac4 <__sflush_r+0x18>
 8003b5e:	89a3      	ldrh	r3, [r4, #12]
 8003b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b64:	81a3      	strh	r3, [r4, #12]
 8003b66:	e7ae      	b.n	8003ac6 <__sflush_r+0x1a>
 8003b68:	690f      	ldr	r7, [r1, #16]
 8003b6a:	2f00      	cmp	r7, #0
 8003b6c:	d0aa      	beq.n	8003ac4 <__sflush_r+0x18>
 8003b6e:	0793      	lsls	r3, r2, #30
 8003b70:	bf18      	it	ne
 8003b72:	2300      	movne	r3, #0
 8003b74:	680e      	ldr	r6, [r1, #0]
 8003b76:	bf08      	it	eq
 8003b78:	694b      	ldreq	r3, [r1, #20]
 8003b7a:	1bf6      	subs	r6, r6, r7
 8003b7c:	600f      	str	r7, [r1, #0]
 8003b7e:	608b      	str	r3, [r1, #8]
 8003b80:	2e00      	cmp	r6, #0
 8003b82:	dd9f      	ble.n	8003ac4 <__sflush_r+0x18>
 8003b84:	4633      	mov	r3, r6
 8003b86:	463a      	mov	r2, r7
 8003b88:	4628      	mov	r0, r5
 8003b8a:	6a21      	ldr	r1, [r4, #32]
 8003b8c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003b90:	47e0      	blx	ip
 8003b92:	2800      	cmp	r0, #0
 8003b94:	dc06      	bgt.n	8003ba4 <__sflush_r+0xf8>
 8003b96:	89a3      	ldrh	r3, [r4, #12]
 8003b98:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ba0:	81a3      	strh	r3, [r4, #12]
 8003ba2:	e790      	b.n	8003ac6 <__sflush_r+0x1a>
 8003ba4:	4407      	add	r7, r0
 8003ba6:	1a36      	subs	r6, r6, r0
 8003ba8:	e7ea      	b.n	8003b80 <__sflush_r+0xd4>
 8003baa:	bf00      	nop
 8003bac:	dfbffffe 	.word	0xdfbffffe

08003bb0 <_fflush_r>:
 8003bb0:	b538      	push	{r3, r4, r5, lr}
 8003bb2:	690b      	ldr	r3, [r1, #16]
 8003bb4:	4605      	mov	r5, r0
 8003bb6:	460c      	mov	r4, r1
 8003bb8:	b913      	cbnz	r3, 8003bc0 <_fflush_r+0x10>
 8003bba:	2500      	movs	r5, #0
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	bd38      	pop	{r3, r4, r5, pc}
 8003bc0:	b118      	cbz	r0, 8003bca <_fflush_r+0x1a>
 8003bc2:	6a03      	ldr	r3, [r0, #32]
 8003bc4:	b90b      	cbnz	r3, 8003bca <_fflush_r+0x1a>
 8003bc6:	f7ff fd61 	bl	800368c <__sinit>
 8003bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f3      	beq.n	8003bba <_fflush_r+0xa>
 8003bd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003bd4:	07d0      	lsls	r0, r2, #31
 8003bd6:	d404      	bmi.n	8003be2 <_fflush_r+0x32>
 8003bd8:	0599      	lsls	r1, r3, #22
 8003bda:	d402      	bmi.n	8003be2 <_fflush_r+0x32>
 8003bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bde:	f7ff fe48 	bl	8003872 <__retarget_lock_acquire_recursive>
 8003be2:	4628      	mov	r0, r5
 8003be4:	4621      	mov	r1, r4
 8003be6:	f7ff ff61 	bl	8003aac <__sflush_r>
 8003bea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bec:	4605      	mov	r5, r0
 8003bee:	07da      	lsls	r2, r3, #31
 8003bf0:	d4e4      	bmi.n	8003bbc <_fflush_r+0xc>
 8003bf2:	89a3      	ldrh	r3, [r4, #12]
 8003bf4:	059b      	lsls	r3, r3, #22
 8003bf6:	d4e1      	bmi.n	8003bbc <_fflush_r+0xc>
 8003bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bfa:	f7ff fe3b 	bl	8003874 <__retarget_lock_release_recursive>
 8003bfe:	e7dd      	b.n	8003bbc <_fflush_r+0xc>

08003c00 <fiprintf>:
 8003c00:	b40e      	push	{r1, r2, r3}
 8003c02:	b503      	push	{r0, r1, lr}
 8003c04:	4601      	mov	r1, r0
 8003c06:	ab03      	add	r3, sp, #12
 8003c08:	4805      	ldr	r0, [pc, #20]	; (8003c20 <fiprintf+0x20>)
 8003c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c0e:	6800      	ldr	r0, [r0, #0]
 8003c10:	9301      	str	r3, [sp, #4]
 8003c12:	f000 f845 	bl	8003ca0 <_vfiprintf_r>
 8003c16:	b002      	add	sp, #8
 8003c18:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c1c:	b003      	add	sp, #12
 8003c1e:	4770      	bx	lr
 8003c20:	2000006c 	.word	0x2000006c

08003c24 <_sbrk_r>:
 8003c24:	b538      	push	{r3, r4, r5, lr}
 8003c26:	2300      	movs	r3, #0
 8003c28:	4d05      	ldr	r5, [pc, #20]	; (8003c40 <_sbrk_r+0x1c>)
 8003c2a:	4604      	mov	r4, r0
 8003c2c:	4608      	mov	r0, r1
 8003c2e:	602b      	str	r3, [r5, #0]
 8003c30:	f7fd f8b4 	bl	8000d9c <_sbrk>
 8003c34:	1c43      	adds	r3, r0, #1
 8003c36:	d102      	bne.n	8003c3e <_sbrk_r+0x1a>
 8003c38:	682b      	ldr	r3, [r5, #0]
 8003c3a:	b103      	cbz	r3, 8003c3e <_sbrk_r+0x1a>
 8003c3c:	6023      	str	r3, [r4, #0]
 8003c3e:	bd38      	pop	{r3, r4, r5, pc}
 8003c40:	200002b4 	.word	0x200002b4

08003c44 <abort>:
 8003c44:	2006      	movs	r0, #6
 8003c46:	b508      	push	{r3, lr}
 8003c48:	f000 fb96 	bl	8004378 <raise>
 8003c4c:	2001      	movs	r0, #1
 8003c4e:	f7fd f832 	bl	8000cb6 <_exit>

08003c52 <__sfputc_r>:
 8003c52:	6893      	ldr	r3, [r2, #8]
 8003c54:	b410      	push	{r4}
 8003c56:	3b01      	subs	r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	6093      	str	r3, [r2, #8]
 8003c5c:	da07      	bge.n	8003c6e <__sfputc_r+0x1c>
 8003c5e:	6994      	ldr	r4, [r2, #24]
 8003c60:	42a3      	cmp	r3, r4
 8003c62:	db01      	blt.n	8003c68 <__sfputc_r+0x16>
 8003c64:	290a      	cmp	r1, #10
 8003c66:	d102      	bne.n	8003c6e <__sfputc_r+0x1c>
 8003c68:	bc10      	pop	{r4}
 8003c6a:	f000 bac7 	b.w	80041fc <__swbuf_r>
 8003c6e:	6813      	ldr	r3, [r2, #0]
 8003c70:	1c58      	adds	r0, r3, #1
 8003c72:	6010      	str	r0, [r2, #0]
 8003c74:	7019      	strb	r1, [r3, #0]
 8003c76:	4608      	mov	r0, r1
 8003c78:	bc10      	pop	{r4}
 8003c7a:	4770      	bx	lr

08003c7c <__sfputs_r>:
 8003c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7e:	4606      	mov	r6, r0
 8003c80:	460f      	mov	r7, r1
 8003c82:	4614      	mov	r4, r2
 8003c84:	18d5      	adds	r5, r2, r3
 8003c86:	42ac      	cmp	r4, r5
 8003c88:	d101      	bne.n	8003c8e <__sfputs_r+0x12>
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	e007      	b.n	8003c9e <__sfputs_r+0x22>
 8003c8e:	463a      	mov	r2, r7
 8003c90:	4630      	mov	r0, r6
 8003c92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c96:	f7ff ffdc 	bl	8003c52 <__sfputc_r>
 8003c9a:	1c43      	adds	r3, r0, #1
 8003c9c:	d1f3      	bne.n	8003c86 <__sfputs_r+0xa>
 8003c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003ca0 <_vfiprintf_r>:
 8003ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca4:	460d      	mov	r5, r1
 8003ca6:	4614      	mov	r4, r2
 8003ca8:	4698      	mov	r8, r3
 8003caa:	4606      	mov	r6, r0
 8003cac:	b09d      	sub	sp, #116	; 0x74
 8003cae:	b118      	cbz	r0, 8003cb8 <_vfiprintf_r+0x18>
 8003cb0:	6a03      	ldr	r3, [r0, #32]
 8003cb2:	b90b      	cbnz	r3, 8003cb8 <_vfiprintf_r+0x18>
 8003cb4:	f7ff fcea 	bl	800368c <__sinit>
 8003cb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cba:	07d9      	lsls	r1, r3, #31
 8003cbc:	d405      	bmi.n	8003cca <_vfiprintf_r+0x2a>
 8003cbe:	89ab      	ldrh	r3, [r5, #12]
 8003cc0:	059a      	lsls	r2, r3, #22
 8003cc2:	d402      	bmi.n	8003cca <_vfiprintf_r+0x2a>
 8003cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cc6:	f7ff fdd4 	bl	8003872 <__retarget_lock_acquire_recursive>
 8003cca:	89ab      	ldrh	r3, [r5, #12]
 8003ccc:	071b      	lsls	r3, r3, #28
 8003cce:	d501      	bpl.n	8003cd4 <_vfiprintf_r+0x34>
 8003cd0:	692b      	ldr	r3, [r5, #16]
 8003cd2:	b99b      	cbnz	r3, 8003cfc <_vfiprintf_r+0x5c>
 8003cd4:	4629      	mov	r1, r5
 8003cd6:	4630      	mov	r0, r6
 8003cd8:	f000 face 	bl	8004278 <__swsetup_r>
 8003cdc:	b170      	cbz	r0, 8003cfc <_vfiprintf_r+0x5c>
 8003cde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ce0:	07dc      	lsls	r4, r3, #31
 8003ce2:	d504      	bpl.n	8003cee <_vfiprintf_r+0x4e>
 8003ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce8:	b01d      	add	sp, #116	; 0x74
 8003cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cee:	89ab      	ldrh	r3, [r5, #12]
 8003cf0:	0598      	lsls	r0, r3, #22
 8003cf2:	d4f7      	bmi.n	8003ce4 <_vfiprintf_r+0x44>
 8003cf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cf6:	f7ff fdbd 	bl	8003874 <__retarget_lock_release_recursive>
 8003cfa:	e7f3      	b.n	8003ce4 <_vfiprintf_r+0x44>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8003d00:	2320      	movs	r3, #32
 8003d02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d06:	2330      	movs	r3, #48	; 0x30
 8003d08:	f04f 0901 	mov.w	r9, #1
 8003d0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d10:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003ec0 <_vfiprintf_r+0x220>
 8003d14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d18:	4623      	mov	r3, r4
 8003d1a:	469a      	mov	sl, r3
 8003d1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d20:	b10a      	cbz	r2, 8003d26 <_vfiprintf_r+0x86>
 8003d22:	2a25      	cmp	r2, #37	; 0x25
 8003d24:	d1f9      	bne.n	8003d1a <_vfiprintf_r+0x7a>
 8003d26:	ebba 0b04 	subs.w	fp, sl, r4
 8003d2a:	d00b      	beq.n	8003d44 <_vfiprintf_r+0xa4>
 8003d2c:	465b      	mov	r3, fp
 8003d2e:	4622      	mov	r2, r4
 8003d30:	4629      	mov	r1, r5
 8003d32:	4630      	mov	r0, r6
 8003d34:	f7ff ffa2 	bl	8003c7c <__sfputs_r>
 8003d38:	3001      	adds	r0, #1
 8003d3a:	f000 80a9 	beq.w	8003e90 <_vfiprintf_r+0x1f0>
 8003d3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d40:	445a      	add	r2, fp
 8003d42:	9209      	str	r2, [sp, #36]	; 0x24
 8003d44:	f89a 3000 	ldrb.w	r3, [sl]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80a1 	beq.w	8003e90 <_vfiprintf_r+0x1f0>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	f04f 32ff 	mov.w	r2, #4294967295
 8003d54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d58:	f10a 0a01 	add.w	sl, sl, #1
 8003d5c:	9304      	str	r3, [sp, #16]
 8003d5e:	9307      	str	r3, [sp, #28]
 8003d60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d64:	931a      	str	r3, [sp, #104]	; 0x68
 8003d66:	4654      	mov	r4, sl
 8003d68:	2205      	movs	r2, #5
 8003d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d6e:	4854      	ldr	r0, [pc, #336]	; (8003ec0 <_vfiprintf_r+0x220>)
 8003d70:	f000 fb1e 	bl	80043b0 <memchr>
 8003d74:	9a04      	ldr	r2, [sp, #16]
 8003d76:	b9d8      	cbnz	r0, 8003db0 <_vfiprintf_r+0x110>
 8003d78:	06d1      	lsls	r1, r2, #27
 8003d7a:	bf44      	itt	mi
 8003d7c:	2320      	movmi	r3, #32
 8003d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d82:	0713      	lsls	r3, r2, #28
 8003d84:	bf44      	itt	mi
 8003d86:	232b      	movmi	r3, #43	; 0x2b
 8003d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8003d90:	2b2a      	cmp	r3, #42	; 0x2a
 8003d92:	d015      	beq.n	8003dc0 <_vfiprintf_r+0x120>
 8003d94:	4654      	mov	r4, sl
 8003d96:	2000      	movs	r0, #0
 8003d98:	f04f 0c0a 	mov.w	ip, #10
 8003d9c:	9a07      	ldr	r2, [sp, #28]
 8003d9e:	4621      	mov	r1, r4
 8003da0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003da4:	3b30      	subs	r3, #48	; 0x30
 8003da6:	2b09      	cmp	r3, #9
 8003da8:	d94d      	bls.n	8003e46 <_vfiprintf_r+0x1a6>
 8003daa:	b1b0      	cbz	r0, 8003dda <_vfiprintf_r+0x13a>
 8003dac:	9207      	str	r2, [sp, #28]
 8003dae:	e014      	b.n	8003dda <_vfiprintf_r+0x13a>
 8003db0:	eba0 0308 	sub.w	r3, r0, r8
 8003db4:	fa09 f303 	lsl.w	r3, r9, r3
 8003db8:	4313      	orrs	r3, r2
 8003dba:	46a2      	mov	sl, r4
 8003dbc:	9304      	str	r3, [sp, #16]
 8003dbe:	e7d2      	b.n	8003d66 <_vfiprintf_r+0xc6>
 8003dc0:	9b03      	ldr	r3, [sp, #12]
 8003dc2:	1d19      	adds	r1, r3, #4
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	9103      	str	r1, [sp, #12]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	bfbb      	ittet	lt
 8003dcc:	425b      	neglt	r3, r3
 8003dce:	f042 0202 	orrlt.w	r2, r2, #2
 8003dd2:	9307      	strge	r3, [sp, #28]
 8003dd4:	9307      	strlt	r3, [sp, #28]
 8003dd6:	bfb8      	it	lt
 8003dd8:	9204      	strlt	r2, [sp, #16]
 8003dda:	7823      	ldrb	r3, [r4, #0]
 8003ddc:	2b2e      	cmp	r3, #46	; 0x2e
 8003dde:	d10c      	bne.n	8003dfa <_vfiprintf_r+0x15a>
 8003de0:	7863      	ldrb	r3, [r4, #1]
 8003de2:	2b2a      	cmp	r3, #42	; 0x2a
 8003de4:	d134      	bne.n	8003e50 <_vfiprintf_r+0x1b0>
 8003de6:	9b03      	ldr	r3, [sp, #12]
 8003de8:	3402      	adds	r4, #2
 8003dea:	1d1a      	adds	r2, r3, #4
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	9203      	str	r2, [sp, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bfb8      	it	lt
 8003df4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003df8:	9305      	str	r3, [sp, #20]
 8003dfa:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ec4 <_vfiprintf_r+0x224>
 8003dfe:	2203      	movs	r2, #3
 8003e00:	4650      	mov	r0, sl
 8003e02:	7821      	ldrb	r1, [r4, #0]
 8003e04:	f000 fad4 	bl	80043b0 <memchr>
 8003e08:	b138      	cbz	r0, 8003e1a <_vfiprintf_r+0x17a>
 8003e0a:	2240      	movs	r2, #64	; 0x40
 8003e0c:	9b04      	ldr	r3, [sp, #16]
 8003e0e:	eba0 000a 	sub.w	r0, r0, sl
 8003e12:	4082      	lsls	r2, r0
 8003e14:	4313      	orrs	r3, r2
 8003e16:	3401      	adds	r4, #1
 8003e18:	9304      	str	r3, [sp, #16]
 8003e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e1e:	2206      	movs	r2, #6
 8003e20:	4829      	ldr	r0, [pc, #164]	; (8003ec8 <_vfiprintf_r+0x228>)
 8003e22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e26:	f000 fac3 	bl	80043b0 <memchr>
 8003e2a:	2800      	cmp	r0, #0
 8003e2c:	d03f      	beq.n	8003eae <_vfiprintf_r+0x20e>
 8003e2e:	4b27      	ldr	r3, [pc, #156]	; (8003ecc <_vfiprintf_r+0x22c>)
 8003e30:	bb1b      	cbnz	r3, 8003e7a <_vfiprintf_r+0x1da>
 8003e32:	9b03      	ldr	r3, [sp, #12]
 8003e34:	3307      	adds	r3, #7
 8003e36:	f023 0307 	bic.w	r3, r3, #7
 8003e3a:	3308      	adds	r3, #8
 8003e3c:	9303      	str	r3, [sp, #12]
 8003e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e40:	443b      	add	r3, r7
 8003e42:	9309      	str	r3, [sp, #36]	; 0x24
 8003e44:	e768      	b.n	8003d18 <_vfiprintf_r+0x78>
 8003e46:	460c      	mov	r4, r1
 8003e48:	2001      	movs	r0, #1
 8003e4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e4e:	e7a6      	b.n	8003d9e <_vfiprintf_r+0xfe>
 8003e50:	2300      	movs	r3, #0
 8003e52:	f04f 0c0a 	mov.w	ip, #10
 8003e56:	4619      	mov	r1, r3
 8003e58:	3401      	adds	r4, #1
 8003e5a:	9305      	str	r3, [sp, #20]
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e62:	3a30      	subs	r2, #48	; 0x30
 8003e64:	2a09      	cmp	r2, #9
 8003e66:	d903      	bls.n	8003e70 <_vfiprintf_r+0x1d0>
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0c6      	beq.n	8003dfa <_vfiprintf_r+0x15a>
 8003e6c:	9105      	str	r1, [sp, #20]
 8003e6e:	e7c4      	b.n	8003dfa <_vfiprintf_r+0x15a>
 8003e70:	4604      	mov	r4, r0
 8003e72:	2301      	movs	r3, #1
 8003e74:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e78:	e7f0      	b.n	8003e5c <_vfiprintf_r+0x1bc>
 8003e7a:	ab03      	add	r3, sp, #12
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	462a      	mov	r2, r5
 8003e80:	4630      	mov	r0, r6
 8003e82:	4b13      	ldr	r3, [pc, #76]	; (8003ed0 <_vfiprintf_r+0x230>)
 8003e84:	a904      	add	r1, sp, #16
 8003e86:	f3af 8000 	nop.w
 8003e8a:	4607      	mov	r7, r0
 8003e8c:	1c78      	adds	r0, r7, #1
 8003e8e:	d1d6      	bne.n	8003e3e <_vfiprintf_r+0x19e>
 8003e90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e92:	07d9      	lsls	r1, r3, #31
 8003e94:	d405      	bmi.n	8003ea2 <_vfiprintf_r+0x202>
 8003e96:	89ab      	ldrh	r3, [r5, #12]
 8003e98:	059a      	lsls	r2, r3, #22
 8003e9a:	d402      	bmi.n	8003ea2 <_vfiprintf_r+0x202>
 8003e9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e9e:	f7ff fce9 	bl	8003874 <__retarget_lock_release_recursive>
 8003ea2:	89ab      	ldrh	r3, [r5, #12]
 8003ea4:	065b      	lsls	r3, r3, #25
 8003ea6:	f53f af1d 	bmi.w	8003ce4 <_vfiprintf_r+0x44>
 8003eaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003eac:	e71c      	b.n	8003ce8 <_vfiprintf_r+0x48>
 8003eae:	ab03      	add	r3, sp, #12
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	462a      	mov	r2, r5
 8003eb4:	4630      	mov	r0, r6
 8003eb6:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <_vfiprintf_r+0x230>)
 8003eb8:	a904      	add	r1, sp, #16
 8003eba:	f000 f87d 	bl	8003fb8 <_printf_i>
 8003ebe:	e7e4      	b.n	8003e8a <_vfiprintf_r+0x1ea>
 8003ec0:	080045c9 	.word	0x080045c9
 8003ec4:	080045cf 	.word	0x080045cf
 8003ec8:	080045d3 	.word	0x080045d3
 8003ecc:	00000000 	.word	0x00000000
 8003ed0:	08003c7d 	.word	0x08003c7d

08003ed4 <_printf_common>:
 8003ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed8:	4616      	mov	r6, r2
 8003eda:	4699      	mov	r9, r3
 8003edc:	688a      	ldr	r2, [r1, #8]
 8003ede:	690b      	ldr	r3, [r1, #16]
 8003ee0:	4607      	mov	r7, r0
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	bfb8      	it	lt
 8003ee6:	4613      	movlt	r3, r2
 8003ee8:	6033      	str	r3, [r6, #0]
 8003eea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003eee:	460c      	mov	r4, r1
 8003ef0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ef4:	b10a      	cbz	r2, 8003efa <_printf_common+0x26>
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	6033      	str	r3, [r6, #0]
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	0699      	lsls	r1, r3, #26
 8003efe:	bf42      	ittt	mi
 8003f00:	6833      	ldrmi	r3, [r6, #0]
 8003f02:	3302      	addmi	r3, #2
 8003f04:	6033      	strmi	r3, [r6, #0]
 8003f06:	6825      	ldr	r5, [r4, #0]
 8003f08:	f015 0506 	ands.w	r5, r5, #6
 8003f0c:	d106      	bne.n	8003f1c <_printf_common+0x48>
 8003f0e:	f104 0a19 	add.w	sl, r4, #25
 8003f12:	68e3      	ldr	r3, [r4, #12]
 8003f14:	6832      	ldr	r2, [r6, #0]
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	42ab      	cmp	r3, r5
 8003f1a:	dc2b      	bgt.n	8003f74 <_printf_common+0xa0>
 8003f1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f20:	1e13      	subs	r3, r2, #0
 8003f22:	6822      	ldr	r2, [r4, #0]
 8003f24:	bf18      	it	ne
 8003f26:	2301      	movne	r3, #1
 8003f28:	0692      	lsls	r2, r2, #26
 8003f2a:	d430      	bmi.n	8003f8e <_printf_common+0xba>
 8003f2c:	4649      	mov	r1, r9
 8003f2e:	4638      	mov	r0, r7
 8003f30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f34:	47c0      	blx	r8
 8003f36:	3001      	adds	r0, #1
 8003f38:	d023      	beq.n	8003f82 <_printf_common+0xae>
 8003f3a:	6823      	ldr	r3, [r4, #0]
 8003f3c:	6922      	ldr	r2, [r4, #16]
 8003f3e:	f003 0306 	and.w	r3, r3, #6
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	bf14      	ite	ne
 8003f46:	2500      	movne	r5, #0
 8003f48:	6833      	ldreq	r3, [r6, #0]
 8003f4a:	f04f 0600 	mov.w	r6, #0
 8003f4e:	bf08      	it	eq
 8003f50:	68e5      	ldreq	r5, [r4, #12]
 8003f52:	f104 041a 	add.w	r4, r4, #26
 8003f56:	bf08      	it	eq
 8003f58:	1aed      	subeq	r5, r5, r3
 8003f5a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003f5e:	bf08      	it	eq
 8003f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f64:	4293      	cmp	r3, r2
 8003f66:	bfc4      	itt	gt
 8003f68:	1a9b      	subgt	r3, r3, r2
 8003f6a:	18ed      	addgt	r5, r5, r3
 8003f6c:	42b5      	cmp	r5, r6
 8003f6e:	d11a      	bne.n	8003fa6 <_printf_common+0xd2>
 8003f70:	2000      	movs	r0, #0
 8003f72:	e008      	b.n	8003f86 <_printf_common+0xb2>
 8003f74:	2301      	movs	r3, #1
 8003f76:	4652      	mov	r2, sl
 8003f78:	4649      	mov	r1, r9
 8003f7a:	4638      	mov	r0, r7
 8003f7c:	47c0      	blx	r8
 8003f7e:	3001      	adds	r0, #1
 8003f80:	d103      	bne.n	8003f8a <_printf_common+0xb6>
 8003f82:	f04f 30ff 	mov.w	r0, #4294967295
 8003f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f8a:	3501      	adds	r5, #1
 8003f8c:	e7c1      	b.n	8003f12 <_printf_common+0x3e>
 8003f8e:	2030      	movs	r0, #48	; 0x30
 8003f90:	18e1      	adds	r1, r4, r3
 8003f92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f9c:	4422      	add	r2, r4
 8003f9e:	3302      	adds	r3, #2
 8003fa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fa4:	e7c2      	b.n	8003f2c <_printf_common+0x58>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	4622      	mov	r2, r4
 8003faa:	4649      	mov	r1, r9
 8003fac:	4638      	mov	r0, r7
 8003fae:	47c0      	blx	r8
 8003fb0:	3001      	adds	r0, #1
 8003fb2:	d0e6      	beq.n	8003f82 <_printf_common+0xae>
 8003fb4:	3601      	adds	r6, #1
 8003fb6:	e7d9      	b.n	8003f6c <_printf_common+0x98>

08003fb8 <_printf_i>:
 8003fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fbc:	7e0f      	ldrb	r7, [r1, #24]
 8003fbe:	4691      	mov	r9, r2
 8003fc0:	2f78      	cmp	r7, #120	; 0x78
 8003fc2:	4680      	mov	r8, r0
 8003fc4:	460c      	mov	r4, r1
 8003fc6:	469a      	mov	sl, r3
 8003fc8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003fce:	d807      	bhi.n	8003fe0 <_printf_i+0x28>
 8003fd0:	2f62      	cmp	r7, #98	; 0x62
 8003fd2:	d80a      	bhi.n	8003fea <_printf_i+0x32>
 8003fd4:	2f00      	cmp	r7, #0
 8003fd6:	f000 80d5 	beq.w	8004184 <_printf_i+0x1cc>
 8003fda:	2f58      	cmp	r7, #88	; 0x58
 8003fdc:	f000 80c1 	beq.w	8004162 <_printf_i+0x1aa>
 8003fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fe4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fe8:	e03a      	b.n	8004060 <_printf_i+0xa8>
 8003fea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fee:	2b15      	cmp	r3, #21
 8003ff0:	d8f6      	bhi.n	8003fe0 <_printf_i+0x28>
 8003ff2:	a101      	add	r1, pc, #4	; (adr r1, 8003ff8 <_printf_i+0x40>)
 8003ff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ff8:	08004051 	.word	0x08004051
 8003ffc:	08004065 	.word	0x08004065
 8004000:	08003fe1 	.word	0x08003fe1
 8004004:	08003fe1 	.word	0x08003fe1
 8004008:	08003fe1 	.word	0x08003fe1
 800400c:	08003fe1 	.word	0x08003fe1
 8004010:	08004065 	.word	0x08004065
 8004014:	08003fe1 	.word	0x08003fe1
 8004018:	08003fe1 	.word	0x08003fe1
 800401c:	08003fe1 	.word	0x08003fe1
 8004020:	08003fe1 	.word	0x08003fe1
 8004024:	0800416b 	.word	0x0800416b
 8004028:	08004091 	.word	0x08004091
 800402c:	08004125 	.word	0x08004125
 8004030:	08003fe1 	.word	0x08003fe1
 8004034:	08003fe1 	.word	0x08003fe1
 8004038:	0800418d 	.word	0x0800418d
 800403c:	08003fe1 	.word	0x08003fe1
 8004040:	08004091 	.word	0x08004091
 8004044:	08003fe1 	.word	0x08003fe1
 8004048:	08003fe1 	.word	0x08003fe1
 800404c:	0800412d 	.word	0x0800412d
 8004050:	682b      	ldr	r3, [r5, #0]
 8004052:	1d1a      	adds	r2, r3, #4
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	602a      	str	r2, [r5, #0]
 8004058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800405c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004060:	2301      	movs	r3, #1
 8004062:	e0a0      	b.n	80041a6 <_printf_i+0x1ee>
 8004064:	6820      	ldr	r0, [r4, #0]
 8004066:	682b      	ldr	r3, [r5, #0]
 8004068:	0607      	lsls	r7, r0, #24
 800406a:	f103 0104 	add.w	r1, r3, #4
 800406e:	6029      	str	r1, [r5, #0]
 8004070:	d501      	bpl.n	8004076 <_printf_i+0xbe>
 8004072:	681e      	ldr	r6, [r3, #0]
 8004074:	e003      	b.n	800407e <_printf_i+0xc6>
 8004076:	0646      	lsls	r6, r0, #25
 8004078:	d5fb      	bpl.n	8004072 <_printf_i+0xba>
 800407a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800407e:	2e00      	cmp	r6, #0
 8004080:	da03      	bge.n	800408a <_printf_i+0xd2>
 8004082:	232d      	movs	r3, #45	; 0x2d
 8004084:	4276      	negs	r6, r6
 8004086:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800408a:	230a      	movs	r3, #10
 800408c:	4859      	ldr	r0, [pc, #356]	; (80041f4 <_printf_i+0x23c>)
 800408e:	e012      	b.n	80040b6 <_printf_i+0xfe>
 8004090:	682b      	ldr	r3, [r5, #0]
 8004092:	6820      	ldr	r0, [r4, #0]
 8004094:	1d19      	adds	r1, r3, #4
 8004096:	6029      	str	r1, [r5, #0]
 8004098:	0605      	lsls	r5, r0, #24
 800409a:	d501      	bpl.n	80040a0 <_printf_i+0xe8>
 800409c:	681e      	ldr	r6, [r3, #0]
 800409e:	e002      	b.n	80040a6 <_printf_i+0xee>
 80040a0:	0641      	lsls	r1, r0, #25
 80040a2:	d5fb      	bpl.n	800409c <_printf_i+0xe4>
 80040a4:	881e      	ldrh	r6, [r3, #0]
 80040a6:	2f6f      	cmp	r7, #111	; 0x6f
 80040a8:	bf0c      	ite	eq
 80040aa:	2308      	moveq	r3, #8
 80040ac:	230a      	movne	r3, #10
 80040ae:	4851      	ldr	r0, [pc, #324]	; (80041f4 <_printf_i+0x23c>)
 80040b0:	2100      	movs	r1, #0
 80040b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040b6:	6865      	ldr	r5, [r4, #4]
 80040b8:	2d00      	cmp	r5, #0
 80040ba:	bfa8      	it	ge
 80040bc:	6821      	ldrge	r1, [r4, #0]
 80040be:	60a5      	str	r5, [r4, #8]
 80040c0:	bfa4      	itt	ge
 80040c2:	f021 0104 	bicge.w	r1, r1, #4
 80040c6:	6021      	strge	r1, [r4, #0]
 80040c8:	b90e      	cbnz	r6, 80040ce <_printf_i+0x116>
 80040ca:	2d00      	cmp	r5, #0
 80040cc:	d04b      	beq.n	8004166 <_printf_i+0x1ae>
 80040ce:	4615      	mov	r5, r2
 80040d0:	fbb6 f1f3 	udiv	r1, r6, r3
 80040d4:	fb03 6711 	mls	r7, r3, r1, r6
 80040d8:	5dc7      	ldrb	r7, [r0, r7]
 80040da:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040de:	4637      	mov	r7, r6
 80040e0:	42bb      	cmp	r3, r7
 80040e2:	460e      	mov	r6, r1
 80040e4:	d9f4      	bls.n	80040d0 <_printf_i+0x118>
 80040e6:	2b08      	cmp	r3, #8
 80040e8:	d10b      	bne.n	8004102 <_printf_i+0x14a>
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	07de      	lsls	r6, r3, #31
 80040ee:	d508      	bpl.n	8004102 <_printf_i+0x14a>
 80040f0:	6923      	ldr	r3, [r4, #16]
 80040f2:	6861      	ldr	r1, [r4, #4]
 80040f4:	4299      	cmp	r1, r3
 80040f6:	bfde      	ittt	le
 80040f8:	2330      	movle	r3, #48	; 0x30
 80040fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004102:	1b52      	subs	r2, r2, r5
 8004104:	6122      	str	r2, [r4, #16]
 8004106:	464b      	mov	r3, r9
 8004108:	4621      	mov	r1, r4
 800410a:	4640      	mov	r0, r8
 800410c:	f8cd a000 	str.w	sl, [sp]
 8004110:	aa03      	add	r2, sp, #12
 8004112:	f7ff fedf 	bl	8003ed4 <_printf_common>
 8004116:	3001      	adds	r0, #1
 8004118:	d14a      	bne.n	80041b0 <_printf_i+0x1f8>
 800411a:	f04f 30ff 	mov.w	r0, #4294967295
 800411e:	b004      	add	sp, #16
 8004120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	f043 0320 	orr.w	r3, r3, #32
 800412a:	6023      	str	r3, [r4, #0]
 800412c:	2778      	movs	r7, #120	; 0x78
 800412e:	4832      	ldr	r0, [pc, #200]	; (80041f8 <_printf_i+0x240>)
 8004130:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	6829      	ldr	r1, [r5, #0]
 8004138:	061f      	lsls	r7, r3, #24
 800413a:	f851 6b04 	ldr.w	r6, [r1], #4
 800413e:	d402      	bmi.n	8004146 <_printf_i+0x18e>
 8004140:	065f      	lsls	r7, r3, #25
 8004142:	bf48      	it	mi
 8004144:	b2b6      	uxthmi	r6, r6
 8004146:	07df      	lsls	r7, r3, #31
 8004148:	bf48      	it	mi
 800414a:	f043 0320 	orrmi.w	r3, r3, #32
 800414e:	6029      	str	r1, [r5, #0]
 8004150:	bf48      	it	mi
 8004152:	6023      	strmi	r3, [r4, #0]
 8004154:	b91e      	cbnz	r6, 800415e <_printf_i+0x1a6>
 8004156:	6823      	ldr	r3, [r4, #0]
 8004158:	f023 0320 	bic.w	r3, r3, #32
 800415c:	6023      	str	r3, [r4, #0]
 800415e:	2310      	movs	r3, #16
 8004160:	e7a6      	b.n	80040b0 <_printf_i+0xf8>
 8004162:	4824      	ldr	r0, [pc, #144]	; (80041f4 <_printf_i+0x23c>)
 8004164:	e7e4      	b.n	8004130 <_printf_i+0x178>
 8004166:	4615      	mov	r5, r2
 8004168:	e7bd      	b.n	80040e6 <_printf_i+0x12e>
 800416a:	682b      	ldr	r3, [r5, #0]
 800416c:	6826      	ldr	r6, [r4, #0]
 800416e:	1d18      	adds	r0, r3, #4
 8004170:	6961      	ldr	r1, [r4, #20]
 8004172:	6028      	str	r0, [r5, #0]
 8004174:	0635      	lsls	r5, r6, #24
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	d501      	bpl.n	800417e <_printf_i+0x1c6>
 800417a:	6019      	str	r1, [r3, #0]
 800417c:	e002      	b.n	8004184 <_printf_i+0x1cc>
 800417e:	0670      	lsls	r0, r6, #25
 8004180:	d5fb      	bpl.n	800417a <_printf_i+0x1c2>
 8004182:	8019      	strh	r1, [r3, #0]
 8004184:	2300      	movs	r3, #0
 8004186:	4615      	mov	r5, r2
 8004188:	6123      	str	r3, [r4, #16]
 800418a:	e7bc      	b.n	8004106 <_printf_i+0x14e>
 800418c:	682b      	ldr	r3, [r5, #0]
 800418e:	2100      	movs	r1, #0
 8004190:	1d1a      	adds	r2, r3, #4
 8004192:	602a      	str	r2, [r5, #0]
 8004194:	681d      	ldr	r5, [r3, #0]
 8004196:	6862      	ldr	r2, [r4, #4]
 8004198:	4628      	mov	r0, r5
 800419a:	f000 f909 	bl	80043b0 <memchr>
 800419e:	b108      	cbz	r0, 80041a4 <_printf_i+0x1ec>
 80041a0:	1b40      	subs	r0, r0, r5
 80041a2:	6060      	str	r0, [r4, #4]
 80041a4:	6863      	ldr	r3, [r4, #4]
 80041a6:	6123      	str	r3, [r4, #16]
 80041a8:	2300      	movs	r3, #0
 80041aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ae:	e7aa      	b.n	8004106 <_printf_i+0x14e>
 80041b0:	462a      	mov	r2, r5
 80041b2:	4649      	mov	r1, r9
 80041b4:	4640      	mov	r0, r8
 80041b6:	6923      	ldr	r3, [r4, #16]
 80041b8:	47d0      	blx	sl
 80041ba:	3001      	adds	r0, #1
 80041bc:	d0ad      	beq.n	800411a <_printf_i+0x162>
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	079b      	lsls	r3, r3, #30
 80041c2:	d413      	bmi.n	80041ec <_printf_i+0x234>
 80041c4:	68e0      	ldr	r0, [r4, #12]
 80041c6:	9b03      	ldr	r3, [sp, #12]
 80041c8:	4298      	cmp	r0, r3
 80041ca:	bfb8      	it	lt
 80041cc:	4618      	movlt	r0, r3
 80041ce:	e7a6      	b.n	800411e <_printf_i+0x166>
 80041d0:	2301      	movs	r3, #1
 80041d2:	4632      	mov	r2, r6
 80041d4:	4649      	mov	r1, r9
 80041d6:	4640      	mov	r0, r8
 80041d8:	47d0      	blx	sl
 80041da:	3001      	adds	r0, #1
 80041dc:	d09d      	beq.n	800411a <_printf_i+0x162>
 80041de:	3501      	adds	r5, #1
 80041e0:	68e3      	ldr	r3, [r4, #12]
 80041e2:	9903      	ldr	r1, [sp, #12]
 80041e4:	1a5b      	subs	r3, r3, r1
 80041e6:	42ab      	cmp	r3, r5
 80041e8:	dcf2      	bgt.n	80041d0 <_printf_i+0x218>
 80041ea:	e7eb      	b.n	80041c4 <_printf_i+0x20c>
 80041ec:	2500      	movs	r5, #0
 80041ee:	f104 0619 	add.w	r6, r4, #25
 80041f2:	e7f5      	b.n	80041e0 <_printf_i+0x228>
 80041f4:	080045da 	.word	0x080045da
 80041f8:	080045eb 	.word	0x080045eb

080041fc <__swbuf_r>:
 80041fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041fe:	460e      	mov	r6, r1
 8004200:	4614      	mov	r4, r2
 8004202:	4605      	mov	r5, r0
 8004204:	b118      	cbz	r0, 800420e <__swbuf_r+0x12>
 8004206:	6a03      	ldr	r3, [r0, #32]
 8004208:	b90b      	cbnz	r3, 800420e <__swbuf_r+0x12>
 800420a:	f7ff fa3f 	bl	800368c <__sinit>
 800420e:	69a3      	ldr	r3, [r4, #24]
 8004210:	60a3      	str	r3, [r4, #8]
 8004212:	89a3      	ldrh	r3, [r4, #12]
 8004214:	071a      	lsls	r2, r3, #28
 8004216:	d525      	bpl.n	8004264 <__swbuf_r+0x68>
 8004218:	6923      	ldr	r3, [r4, #16]
 800421a:	b31b      	cbz	r3, 8004264 <__swbuf_r+0x68>
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	6922      	ldr	r2, [r4, #16]
 8004220:	b2f6      	uxtb	r6, r6
 8004222:	1a98      	subs	r0, r3, r2
 8004224:	6963      	ldr	r3, [r4, #20]
 8004226:	4637      	mov	r7, r6
 8004228:	4283      	cmp	r3, r0
 800422a:	dc04      	bgt.n	8004236 <__swbuf_r+0x3a>
 800422c:	4621      	mov	r1, r4
 800422e:	4628      	mov	r0, r5
 8004230:	f7ff fcbe 	bl	8003bb0 <_fflush_r>
 8004234:	b9e0      	cbnz	r0, 8004270 <__swbuf_r+0x74>
 8004236:	68a3      	ldr	r3, [r4, #8]
 8004238:	3b01      	subs	r3, #1
 800423a:	60a3      	str	r3, [r4, #8]
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	6022      	str	r2, [r4, #0]
 8004242:	701e      	strb	r6, [r3, #0]
 8004244:	6962      	ldr	r2, [r4, #20]
 8004246:	1c43      	adds	r3, r0, #1
 8004248:	429a      	cmp	r2, r3
 800424a:	d004      	beq.n	8004256 <__swbuf_r+0x5a>
 800424c:	89a3      	ldrh	r3, [r4, #12]
 800424e:	07db      	lsls	r3, r3, #31
 8004250:	d506      	bpl.n	8004260 <__swbuf_r+0x64>
 8004252:	2e0a      	cmp	r6, #10
 8004254:	d104      	bne.n	8004260 <__swbuf_r+0x64>
 8004256:	4621      	mov	r1, r4
 8004258:	4628      	mov	r0, r5
 800425a:	f7ff fca9 	bl	8003bb0 <_fflush_r>
 800425e:	b938      	cbnz	r0, 8004270 <__swbuf_r+0x74>
 8004260:	4638      	mov	r0, r7
 8004262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004264:	4621      	mov	r1, r4
 8004266:	4628      	mov	r0, r5
 8004268:	f000 f806 	bl	8004278 <__swsetup_r>
 800426c:	2800      	cmp	r0, #0
 800426e:	d0d5      	beq.n	800421c <__swbuf_r+0x20>
 8004270:	f04f 37ff 	mov.w	r7, #4294967295
 8004274:	e7f4      	b.n	8004260 <__swbuf_r+0x64>
	...

08004278 <__swsetup_r>:
 8004278:	b538      	push	{r3, r4, r5, lr}
 800427a:	4b2a      	ldr	r3, [pc, #168]	; (8004324 <__swsetup_r+0xac>)
 800427c:	4605      	mov	r5, r0
 800427e:	6818      	ldr	r0, [r3, #0]
 8004280:	460c      	mov	r4, r1
 8004282:	b118      	cbz	r0, 800428c <__swsetup_r+0x14>
 8004284:	6a03      	ldr	r3, [r0, #32]
 8004286:	b90b      	cbnz	r3, 800428c <__swsetup_r+0x14>
 8004288:	f7ff fa00 	bl	800368c <__sinit>
 800428c:	89a3      	ldrh	r3, [r4, #12]
 800428e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004292:	0718      	lsls	r0, r3, #28
 8004294:	d422      	bmi.n	80042dc <__swsetup_r+0x64>
 8004296:	06d9      	lsls	r1, r3, #27
 8004298:	d407      	bmi.n	80042aa <__swsetup_r+0x32>
 800429a:	2309      	movs	r3, #9
 800429c:	602b      	str	r3, [r5, #0]
 800429e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80042a2:	f04f 30ff 	mov.w	r0, #4294967295
 80042a6:	81a3      	strh	r3, [r4, #12]
 80042a8:	e034      	b.n	8004314 <__swsetup_r+0x9c>
 80042aa:	0758      	lsls	r0, r3, #29
 80042ac:	d512      	bpl.n	80042d4 <__swsetup_r+0x5c>
 80042ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042b0:	b141      	cbz	r1, 80042c4 <__swsetup_r+0x4c>
 80042b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042b6:	4299      	cmp	r1, r3
 80042b8:	d002      	beq.n	80042c0 <__swsetup_r+0x48>
 80042ba:	4628      	mov	r0, r5
 80042bc:	f7ff fafa 	bl	80038b4 <_free_r>
 80042c0:	2300      	movs	r3, #0
 80042c2:	6363      	str	r3, [r4, #52]	; 0x34
 80042c4:	89a3      	ldrh	r3, [r4, #12]
 80042c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80042ca:	81a3      	strh	r3, [r4, #12]
 80042cc:	2300      	movs	r3, #0
 80042ce:	6063      	str	r3, [r4, #4]
 80042d0:	6923      	ldr	r3, [r4, #16]
 80042d2:	6023      	str	r3, [r4, #0]
 80042d4:	89a3      	ldrh	r3, [r4, #12]
 80042d6:	f043 0308 	orr.w	r3, r3, #8
 80042da:	81a3      	strh	r3, [r4, #12]
 80042dc:	6923      	ldr	r3, [r4, #16]
 80042de:	b94b      	cbnz	r3, 80042f4 <__swsetup_r+0x7c>
 80042e0:	89a3      	ldrh	r3, [r4, #12]
 80042e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80042e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ea:	d003      	beq.n	80042f4 <__swsetup_r+0x7c>
 80042ec:	4621      	mov	r1, r4
 80042ee:	4628      	mov	r0, r5
 80042f0:	f000 f891 	bl	8004416 <__smakebuf_r>
 80042f4:	89a0      	ldrh	r0, [r4, #12]
 80042f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042fa:	f010 0301 	ands.w	r3, r0, #1
 80042fe:	d00a      	beq.n	8004316 <__swsetup_r+0x9e>
 8004300:	2300      	movs	r3, #0
 8004302:	60a3      	str	r3, [r4, #8]
 8004304:	6963      	ldr	r3, [r4, #20]
 8004306:	425b      	negs	r3, r3
 8004308:	61a3      	str	r3, [r4, #24]
 800430a:	6923      	ldr	r3, [r4, #16]
 800430c:	b943      	cbnz	r3, 8004320 <__swsetup_r+0xa8>
 800430e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004312:	d1c4      	bne.n	800429e <__swsetup_r+0x26>
 8004314:	bd38      	pop	{r3, r4, r5, pc}
 8004316:	0781      	lsls	r1, r0, #30
 8004318:	bf58      	it	pl
 800431a:	6963      	ldrpl	r3, [r4, #20]
 800431c:	60a3      	str	r3, [r4, #8]
 800431e:	e7f4      	b.n	800430a <__swsetup_r+0x92>
 8004320:	2000      	movs	r0, #0
 8004322:	e7f7      	b.n	8004314 <__swsetup_r+0x9c>
 8004324:	2000006c 	.word	0x2000006c

08004328 <_raise_r>:
 8004328:	291f      	cmp	r1, #31
 800432a:	b538      	push	{r3, r4, r5, lr}
 800432c:	4604      	mov	r4, r0
 800432e:	460d      	mov	r5, r1
 8004330:	d904      	bls.n	800433c <_raise_r+0x14>
 8004332:	2316      	movs	r3, #22
 8004334:	6003      	str	r3, [r0, #0]
 8004336:	f04f 30ff 	mov.w	r0, #4294967295
 800433a:	bd38      	pop	{r3, r4, r5, pc}
 800433c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800433e:	b112      	cbz	r2, 8004346 <_raise_r+0x1e>
 8004340:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004344:	b94b      	cbnz	r3, 800435a <_raise_r+0x32>
 8004346:	4620      	mov	r0, r4
 8004348:	f000 f830 	bl	80043ac <_getpid_r>
 800434c:	462a      	mov	r2, r5
 800434e:	4601      	mov	r1, r0
 8004350:	4620      	mov	r0, r4
 8004352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004356:	f000 b817 	b.w	8004388 <_kill_r>
 800435a:	2b01      	cmp	r3, #1
 800435c:	d00a      	beq.n	8004374 <_raise_r+0x4c>
 800435e:	1c59      	adds	r1, r3, #1
 8004360:	d103      	bne.n	800436a <_raise_r+0x42>
 8004362:	2316      	movs	r3, #22
 8004364:	6003      	str	r3, [r0, #0]
 8004366:	2001      	movs	r0, #1
 8004368:	e7e7      	b.n	800433a <_raise_r+0x12>
 800436a:	2400      	movs	r4, #0
 800436c:	4628      	mov	r0, r5
 800436e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004372:	4798      	blx	r3
 8004374:	2000      	movs	r0, #0
 8004376:	e7e0      	b.n	800433a <_raise_r+0x12>

08004378 <raise>:
 8004378:	4b02      	ldr	r3, [pc, #8]	; (8004384 <raise+0xc>)
 800437a:	4601      	mov	r1, r0
 800437c:	6818      	ldr	r0, [r3, #0]
 800437e:	f7ff bfd3 	b.w	8004328 <_raise_r>
 8004382:	bf00      	nop
 8004384:	2000006c 	.word	0x2000006c

08004388 <_kill_r>:
 8004388:	b538      	push	{r3, r4, r5, lr}
 800438a:	2300      	movs	r3, #0
 800438c:	4d06      	ldr	r5, [pc, #24]	; (80043a8 <_kill_r+0x20>)
 800438e:	4604      	mov	r4, r0
 8004390:	4608      	mov	r0, r1
 8004392:	4611      	mov	r1, r2
 8004394:	602b      	str	r3, [r5, #0]
 8004396:	f7fc fc7e 	bl	8000c96 <_kill>
 800439a:	1c43      	adds	r3, r0, #1
 800439c:	d102      	bne.n	80043a4 <_kill_r+0x1c>
 800439e:	682b      	ldr	r3, [r5, #0]
 80043a0:	b103      	cbz	r3, 80043a4 <_kill_r+0x1c>
 80043a2:	6023      	str	r3, [r4, #0]
 80043a4:	bd38      	pop	{r3, r4, r5, pc}
 80043a6:	bf00      	nop
 80043a8:	200002b4 	.word	0x200002b4

080043ac <_getpid_r>:
 80043ac:	f7fc bc6c 	b.w	8000c88 <_getpid>

080043b0 <memchr>:
 80043b0:	4603      	mov	r3, r0
 80043b2:	b510      	push	{r4, lr}
 80043b4:	b2c9      	uxtb	r1, r1
 80043b6:	4402      	add	r2, r0
 80043b8:	4293      	cmp	r3, r2
 80043ba:	4618      	mov	r0, r3
 80043bc:	d101      	bne.n	80043c2 <memchr+0x12>
 80043be:	2000      	movs	r0, #0
 80043c0:	e003      	b.n	80043ca <memchr+0x1a>
 80043c2:	7804      	ldrb	r4, [r0, #0]
 80043c4:	3301      	adds	r3, #1
 80043c6:	428c      	cmp	r4, r1
 80043c8:	d1f6      	bne.n	80043b8 <memchr+0x8>
 80043ca:	bd10      	pop	{r4, pc}

080043cc <__swhatbuf_r>:
 80043cc:	b570      	push	{r4, r5, r6, lr}
 80043ce:	460c      	mov	r4, r1
 80043d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043d4:	4615      	mov	r5, r2
 80043d6:	2900      	cmp	r1, #0
 80043d8:	461e      	mov	r6, r3
 80043da:	b096      	sub	sp, #88	; 0x58
 80043dc:	da0c      	bge.n	80043f8 <__swhatbuf_r+0x2c>
 80043de:	89a3      	ldrh	r3, [r4, #12]
 80043e0:	2100      	movs	r1, #0
 80043e2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80043e6:	bf0c      	ite	eq
 80043e8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80043ec:	2340      	movne	r3, #64	; 0x40
 80043ee:	2000      	movs	r0, #0
 80043f0:	6031      	str	r1, [r6, #0]
 80043f2:	602b      	str	r3, [r5, #0]
 80043f4:	b016      	add	sp, #88	; 0x58
 80043f6:	bd70      	pop	{r4, r5, r6, pc}
 80043f8:	466a      	mov	r2, sp
 80043fa:	f000 f849 	bl	8004490 <_fstat_r>
 80043fe:	2800      	cmp	r0, #0
 8004400:	dbed      	blt.n	80043de <__swhatbuf_r+0x12>
 8004402:	9901      	ldr	r1, [sp, #4]
 8004404:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004408:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800440c:	4259      	negs	r1, r3
 800440e:	4159      	adcs	r1, r3
 8004410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004414:	e7eb      	b.n	80043ee <__swhatbuf_r+0x22>

08004416 <__smakebuf_r>:
 8004416:	898b      	ldrh	r3, [r1, #12]
 8004418:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800441a:	079d      	lsls	r5, r3, #30
 800441c:	4606      	mov	r6, r0
 800441e:	460c      	mov	r4, r1
 8004420:	d507      	bpl.n	8004432 <__smakebuf_r+0x1c>
 8004422:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004426:	6023      	str	r3, [r4, #0]
 8004428:	6123      	str	r3, [r4, #16]
 800442a:	2301      	movs	r3, #1
 800442c:	6163      	str	r3, [r4, #20]
 800442e:	b002      	add	sp, #8
 8004430:	bd70      	pop	{r4, r5, r6, pc}
 8004432:	466a      	mov	r2, sp
 8004434:	ab01      	add	r3, sp, #4
 8004436:	f7ff ffc9 	bl	80043cc <__swhatbuf_r>
 800443a:	9900      	ldr	r1, [sp, #0]
 800443c:	4605      	mov	r5, r0
 800443e:	4630      	mov	r0, r6
 8004440:	f7ff faa8 	bl	8003994 <_malloc_r>
 8004444:	b948      	cbnz	r0, 800445a <__smakebuf_r+0x44>
 8004446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800444a:	059a      	lsls	r2, r3, #22
 800444c:	d4ef      	bmi.n	800442e <__smakebuf_r+0x18>
 800444e:	f023 0303 	bic.w	r3, r3, #3
 8004452:	f043 0302 	orr.w	r3, r3, #2
 8004456:	81a3      	strh	r3, [r4, #12]
 8004458:	e7e3      	b.n	8004422 <__smakebuf_r+0xc>
 800445a:	89a3      	ldrh	r3, [r4, #12]
 800445c:	6020      	str	r0, [r4, #0]
 800445e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004462:	81a3      	strh	r3, [r4, #12]
 8004464:	9b00      	ldr	r3, [sp, #0]
 8004466:	6120      	str	r0, [r4, #16]
 8004468:	6163      	str	r3, [r4, #20]
 800446a:	9b01      	ldr	r3, [sp, #4]
 800446c:	b15b      	cbz	r3, 8004486 <__smakebuf_r+0x70>
 800446e:	4630      	mov	r0, r6
 8004470:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004474:	f000 f81e 	bl	80044b4 <_isatty_r>
 8004478:	b128      	cbz	r0, 8004486 <__smakebuf_r+0x70>
 800447a:	89a3      	ldrh	r3, [r4, #12]
 800447c:	f023 0303 	bic.w	r3, r3, #3
 8004480:	f043 0301 	orr.w	r3, r3, #1
 8004484:	81a3      	strh	r3, [r4, #12]
 8004486:	89a3      	ldrh	r3, [r4, #12]
 8004488:	431d      	orrs	r5, r3
 800448a:	81a5      	strh	r5, [r4, #12]
 800448c:	e7cf      	b.n	800442e <__smakebuf_r+0x18>
	...

08004490 <_fstat_r>:
 8004490:	b538      	push	{r3, r4, r5, lr}
 8004492:	2300      	movs	r3, #0
 8004494:	4d06      	ldr	r5, [pc, #24]	; (80044b0 <_fstat_r+0x20>)
 8004496:	4604      	mov	r4, r0
 8004498:	4608      	mov	r0, r1
 800449a:	4611      	mov	r1, r2
 800449c:	602b      	str	r3, [r5, #0]
 800449e:	f7fc fc58 	bl	8000d52 <_fstat>
 80044a2:	1c43      	adds	r3, r0, #1
 80044a4:	d102      	bne.n	80044ac <_fstat_r+0x1c>
 80044a6:	682b      	ldr	r3, [r5, #0]
 80044a8:	b103      	cbz	r3, 80044ac <_fstat_r+0x1c>
 80044aa:	6023      	str	r3, [r4, #0]
 80044ac:	bd38      	pop	{r3, r4, r5, pc}
 80044ae:	bf00      	nop
 80044b0:	200002b4 	.word	0x200002b4

080044b4 <_isatty_r>:
 80044b4:	b538      	push	{r3, r4, r5, lr}
 80044b6:	2300      	movs	r3, #0
 80044b8:	4d05      	ldr	r5, [pc, #20]	; (80044d0 <_isatty_r+0x1c>)
 80044ba:	4604      	mov	r4, r0
 80044bc:	4608      	mov	r0, r1
 80044be:	602b      	str	r3, [r5, #0]
 80044c0:	f7fc fc56 	bl	8000d70 <_isatty>
 80044c4:	1c43      	adds	r3, r0, #1
 80044c6:	d102      	bne.n	80044ce <_isatty_r+0x1a>
 80044c8:	682b      	ldr	r3, [r5, #0]
 80044ca:	b103      	cbz	r3, 80044ce <_isatty_r+0x1a>
 80044cc:	6023      	str	r3, [r4, #0]
 80044ce:	bd38      	pop	{r3, r4, r5, pc}
 80044d0:	200002b4 	.word	0x200002b4

080044d4 <_init>:
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	bf00      	nop
 80044d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044da:	bc08      	pop	{r3}
 80044dc:	469e      	mov	lr, r3
 80044de:	4770      	bx	lr

080044e0 <_fini>:
 80044e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e2:	bf00      	nop
 80044e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e6:	bc08      	pop	{r3}
 80044e8:	469e      	mov	lr, r3
 80044ea:	4770      	bx	lr
