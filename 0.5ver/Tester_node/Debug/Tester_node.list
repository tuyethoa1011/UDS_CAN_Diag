
Tester_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004aec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08004bf8  08004bf8  00014bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c5c  08004c5c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08004c5c  08004c5c  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c5c  08004c5c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c5c  08004c5c  00014c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c60  08004c60  00014c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  2000006c  08004cd0  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08004cd0  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e227  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000215d  00000000  00000000  0002e2ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  00030460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ad3  00000000  00000000  00031240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001821e  00000000  00000000  00031d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000107bc  00000000  00000000  00049f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d488  00000000  00000000  0005a6ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f80  00000000  00000000  000e7b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000ebaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004be0 	.word	0x08004be0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08004be0 	.word	0x08004be0

0800014c <button_release_callback>:
{

}

__weak void button_release_callback(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	btn1_press_flag = 1;
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <button_release_callback+0x20>)
 8000152:	2201      	movs	r2, #1
 8000154:	701a      	strb	r2, [r3, #0]
	btn2_press_flag = 1;
 8000156:	4b06      	ldr	r3, [pc, #24]	; (8000170 <button_release_callback+0x24>)
 8000158:	2201      	movs	r2, #1
 800015a:	701a      	strb	r2, [r3, #0]
	test_flag_twicepress = 0;
 800015c:	4b05      	ldr	r3, [pc, #20]	; (8000174 <button_release_callback+0x28>)
 800015e:	2200      	movs	r2, #0
 8000160:	701a      	strb	r2, [r3, #0]
	//lam gi do sau khi 2 nut nhan giu roi tha ra trong nay
	//extended feature when pressing buttons at the same time
	//ý tưởng: Khi nhấn nhiều nút cùng lúc chỉ khi thả nút ra mới thực hiện action
}
 8000162:	bf00      	nop
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr
 800016a:	bf00      	nop
 800016c:	20000089 	.word	0x20000089
 8000170:	2000008a 	.word	0x2000008a
 8000174:	2000008b 	.word	0x2000008b

08000178 <button_handle>:
}

////them cac ham con lai lien quan den xu ly nut bam vao
////>= 500 ms < 500ms
void button_handle(Button_Typedef *ButtonX)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b084      	sub	sp, #16
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
	uint8_t state =  HAL_GPIO_ReadPin(ButtonX->GPIOx, ButtonX->GPIO_Pin); //get button state
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	691a      	ldr	r2, [r3, #16]
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	8a9b      	ldrh	r3, [r3, #20]
 8000188:	4619      	mov	r1, r3
 800018a:	4610      	mov	r0, r2
 800018c:	f002 fa14 	bl	80025b8 <HAL_GPIO_ReadPin>
 8000190:	4603      	mov	r3, r0
 8000192:	73fb      	strb	r3, [r7, #15]
	//cau hoi dat ra la bay gio lam sao de xac dinh la co 2 nut bay gio
	//---- Xu ly loc nhieu ----
	if(state != ButtonX->button_filter) //trang thai
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	789b      	ldrb	r3, [r3, #2]
 8000198:	7bfa      	ldrb	r2, [r7, #15]
 800019a:	429a      	cmp	r2, r3
 800019c:	d00a      	beq.n	80001b4 <button_handle+0x3c>
	{
		ButtonX->button_filter = state;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	7bfa      	ldrb	r2, [r7, #15]
 80001a2:	709a      	strb	r2, [r3, #2]
		ButtonX->is_debouncing = 1;
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2201      	movs	r2, #1
 80001a8:	70da      	strb	r2, [r3, #3]
		ButtonX->time_debounce = HAL_GetTick();
 80001aa:	f001 f853 	bl	8001254 <HAL_GetTick>
 80001ae:	4602      	mov	r2, r0
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	605a      	str	r2, [r3, #4]
	}
	//---- Xac lap tin hieu ----
	if(ButtonX->is_debouncing && (HAL_GetTick() - ButtonX->time_debounce >= 15))
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	78db      	ldrb	r3, [r3, #3]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d00e      	beq.n	80001da <button_handle+0x62>
 80001bc:	f001 f84a 	bl	8001254 <HAL_GetTick>
 80001c0:	4602      	mov	r2, r0
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	685b      	ldr	r3, [r3, #4]
 80001c6:	1ad3      	subs	r3, r2, r3
 80001c8:	2b0e      	cmp	r3, #14
 80001ca:	d906      	bls.n	80001da <button_handle+0x62>
	{
		ButtonX->button_current = ButtonX->button_filter;
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	789a      	ldrb	r2, [r3, #2]
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	701a      	strb	r2, [r3, #0]
		ButtonX->is_debouncing = 0;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2200      	movs	r2, #0
 80001d8:	70da      	strb	r2, [r3, #3]
	}
	//---- Xu ly tin hieu nut nhan ----
	if(ButtonX->button_current != ButtonX->button_last) //phat hien tin hieu nut nhat chinh xac sau khi xu ly thay doi
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	781a      	ldrb	r2, [r3, #0]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	785b      	ldrb	r3, [r3, #1]
 80001e2:	429a      	cmp	r2, r3
 80001e4:	d02c      	beq.n	8000240 <button_handle+0xc8>
	{
		//nut bam nhan xuong
		if(ButtonX->button_current == 0)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d108      	bne.n	8000200 <button_handle+0x88>
		{
			//button_pressing_callback(ButtonX);
			ButtonX->time_btn_press = HAL_GetTick();
 80001ee:	f001 f831 	bl	8001254 <HAL_GetTick>
 80001f2:	4602      	mov	r2, r0
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	609a      	str	r2, [r3, #8]
			ButtonX->is_press_timeout = 1;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2201      	movs	r2, #1
 80001fc:	731a      	strb	r2, [r3, #12]
 80001fe:	e01b      	b.n	8000238 <button_handle+0xc0>
		}
		else
		{
			if(HAL_GetTick() - ButtonX->time_btn_press < 500) //xu ly nhan nha nhanh < 500ms
 8000200:	f001 f828 	bl	8001254 <HAL_GetTick>
 8000204:	4602      	mov	r2, r0
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	689b      	ldr	r3, [r3, #8]
 800020a:	1ad3      	subs	r3, r2, r3
 800020c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000210:	d202      	bcs.n	8000218 <button_handle+0xa0>
			{
				button_shortpressing_callback_500ms(ButtonX);
 8000212:	6878      	ldr	r0, [r7, #4]
 8000214:	f000 f84e 	bl	80002b4 <button_shortpressing_callback_500ms>
			}

			ButtonX->is_press_timeout = 0 ;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2200      	movs	r2, #0
 800021c:	731a      	strb	r2, [r3, #12]
			ButtonX->is_long_press = 0 ;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	2200      	movs	r2, #0
 8000222:	735a      	strb	r2, [r3, #13]
			long_press_detect = ButtonX->is_long_press;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	7b5a      	ldrb	r2, [r3, #13]
 8000228:	4b12      	ldr	r3, [pc, #72]	; (8000274 <button_handle+0xfc>)
 800022a:	701a      	strb	r2, [r3, #0]
			//reset cac bien nhan 2 nut
			if(test_flag_twicepress == 1)
 800022c:	4b12      	ldr	r3, [pc, #72]	; (8000278 <button_handle+0x100>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b01      	cmp	r3, #1
 8000232:	d101      	bne.n	8000238 <button_handle+0xc0>
			{
				button_release_callback();
 8000234:	f7ff ff8a 	bl	800014c <button_release_callback>
			}
		}
			ButtonX->button_last = ButtonX->button_current;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	781a      	ldrb	r2, [r3, #0]
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	705a      	strb	r2, [r3, #1]
	}

	//-------------Xu li nhan giu lau hon 500ms----------------
	if(ButtonX->is_press_timeout == 1 && (HAL_GetTick() - ButtonX->time_btn_press >= 500)){
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	7b1b      	ldrb	r3, [r3, #12]
 8000244:	2b01      	cmp	r3, #1
 8000246:	d111      	bne.n	800026c <button_handle+0xf4>
 8000248:	f001 f804 	bl	8001254 <HAL_GetTick>
 800024c:	4602      	mov	r2, r0
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	1ad3      	subs	r3, r2, r3
 8000254:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000258:	d308      	bcc.n	800026c <button_handle+0xf4>
		ButtonX->is_long_press = 1;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2201      	movs	r2, #1
 800025e:	735a      	strb	r2, [r3, #13]
		button_longpressing_callback_500ms(ButtonX);
 8000260:	6878      	ldr	r0, [r7, #4]
 8000262:	f000 f83b 	bl	80002dc <button_longpressing_callback_500ms>
		ButtonX->is_press_timeout = 0;
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	2200      	movs	r2, #0
 800026a:	731a      	strb	r2, [r3, #12]

	}
}
 800026c:	bf00      	nop
 800026e:	3710      	adds	r7, #16
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	20000088 	.word	0x20000088
 8000278:	2000008b 	.word	0x2000008b

0800027c <button_Init>:

//tong cong co bao nhieu ham callback: press_callback, release callback, longpressing, shortpressing


void button_Init(Button_Typedef *ButtonX,GPIO_TypeDef *GPIOx,uint16_t GPIO_Pin)
{
 800027c:	b480      	push	{r7}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
 8000282:	60f8      	str	r0, [r7, #12]
 8000284:	60b9      	str	r1, [r7, #8]
 8000286:	4613      	mov	r3, r2
 8000288:	80fb      	strh	r3, [r7, #6]
	ButtonX->GPIOx = GPIOx;
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	68ba      	ldr	r2, [r7, #8]
 800028e:	611a      	str	r2, [r3, #16]
	ButtonX->GPIO_Pin = GPIO_Pin;
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	88fa      	ldrh	r2, [r7, #6]
 8000294:	829a      	strh	r2, [r3, #20]

	ButtonX->button_current = 1;
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	2201      	movs	r2, #1
 800029a:	701a      	strb	r2, [r3, #0]
	ButtonX->button_last = 1;
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	2201      	movs	r2, #1
 80002a0:	705a      	strb	r2, [r3, #1]
	ButtonX->button_filter = 1;
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	2201      	movs	r2, #1
 80002a6:	709a      	strb	r2, [r3, #2]
}
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
	...

080002b4 <button_shortpressing_callback_500ms>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void button_shortpressing_callback_500ms(Button_Typedef *ButtonX)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	if(ButtonX == &BTN1)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4a05      	ldr	r2, [pc, #20]	; (80002d4 <button_shortpressing_callback_500ms+0x20>)
 80002c0:	4293      	cmp	r3, r2
 80002c2:	d102      	bne.n	80002ca <button_shortpressing_callback_500ms+0x16>
	{
		button_sig = 1;
 80002c4:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <button_shortpressing_callback_500ms+0x24>)
 80002c6:	2201      	movs	r2, #1
 80002c8:	701a      	strb	r2, [r3, #0]
	}
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	200001d8 	.word	0x200001d8
 80002d8:	200001f0 	.word	0x200001f0

080002dc <button_longpressing_callback_500ms>:

void button_longpressing_callback_500ms(Button_Typedef *ButtonX)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
	if(ButtonX == &BTN1){
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	4a05      	ldr	r2, [pc, #20]	; (80002fc <button_longpressing_callback_500ms+0x20>)
 80002e8:	4293      	cmp	r3, r2
 80002ea:	d102      	bne.n	80002f2 <button_longpressing_callback_500ms+0x16>
		button_sig = 1;
 80002ec:	4b04      	ldr	r3, [pc, #16]	; (8000300 <button_longpressing_callback_500ms+0x24>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	701a      	strb	r2, [r3, #0]
	}
}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	200001d8 	.word	0x200001d8
 8000300:	200001f0 	.word	0x200001f0

08000304 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &Tester_RxHeader, Tester_RxData) != HAL_OK)
 800030c:	4b0b      	ldr	r3, [pc, #44]	; (800033c <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 800030e:	4a0c      	ldr	r2, [pc, #48]	; (8000340 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 8000310:	2101      	movs	r1, #1
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	f001 faa3 	bl	800185e <HAL_CAN_GetRxMessage>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d003      	beq.n	8000326 <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
	{
		error_flag = 1;
 800031e:	4b09      	ldr	r3, [pc, #36]	; (8000344 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 8000320:	2201      	movs	r2, #1
 8000322:	701a      	strb	r2, [r3, #0]
	else
	{
		flag_read_response = 1;
		error_flag = 0;
	}
}
 8000324:	e005      	b.n	8000332 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e>
		flag_read_response = 1;
 8000326:	4b08      	ldr	r3, [pc, #32]	; (8000348 <HAL_CAN_RxFifo1MsgPendingCallback+0x44>)
 8000328:	2201      	movs	r2, #1
 800032a:	701a      	strb	r2, [r3, #0]
		error_flag = 0;
 800032c:	4b05      	ldr	r3, [pc, #20]	; (8000344 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 800032e:	2200      	movs	r2, #0
 8000330:	701a      	strb	r2, [r3, #0]
}
 8000332:	bf00      	nop
 8000334:	3708      	adds	r7, #8
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	2000017c 	.word	0x2000017c
 8000340:	2000015c 	.word	0x2000015c
 8000344:	200001cf 	.word	0x200001cf
 8000348:	200001cd 	.word	0x200001cd

0800034c <GetFrameType>:

uint8_t GetFrameType(uint8_t FT_byteString) //Frame type co the dung chung cho SF FF
{
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	71fb      	strb	r3, [r7, #7]
	uint8_t FT_res;
	switch(FT_byteString)
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	2b03      	cmp	r3, #3
 800035a:	d817      	bhi.n	800038c <GetFrameType+0x40>
 800035c:	a201      	add	r2, pc, #4	; (adr r2, 8000364 <GetFrameType+0x18>)
 800035e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000362:	bf00      	nop
 8000364:	08000375 	.word	0x08000375
 8000368:	0800037b 	.word	0x0800037b
 800036c:	08000381 	.word	0x08000381
 8000370:	08000387 	.word	0x08000387
	{
		case 0x00: //single frame
		{
			FT_res = 0;
 8000374:	2300      	movs	r3, #0
 8000376:	73fb      	strb	r3, [r7, #15]
			break;
 8000378:	e008      	b.n	800038c <GetFrameType+0x40>
		}
		case 0x01: //first frame
		{
			FT_res = 1;
 800037a:	2301      	movs	r3, #1
 800037c:	73fb      	strb	r3, [r7, #15]
			break;
 800037e:	e005      	b.n	800038c <GetFrameType+0x40>
		}
		case 0x02: //consecutive frame
		{
			FT_res = 2;
 8000380:	2302      	movs	r3, #2
 8000382:	73fb      	strb	r3, [r7, #15]
			break;
 8000384:	e002      	b.n	800038c <GetFrameType+0x40>
		}
		case 0x03: //flow control
		{
			FT_res = 3;
 8000386:	2303      	movs	r3, #3
 8000388:	73fb      	strb	r3, [r7, #15]
			break;
 800038a:	bf00      	nop
		}
	}
	return FT_res;
 800038c:	7bfb      	ldrb	r3, [r7, #15]
}
 800038e:	4618      	mov	r0, r3
 8000390:	3714      	adds	r7, #20
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr

08000398 <SF_N_PCI_FrameTypeHandle>:

uint8_t SF_N_PCI_FrameTypeHandle(uint8_t byteString) //SF_PCI: Single Frame Protocol Control Info: FT + DL
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	71fb      	strb	r3, [r7, #7]
	return (byteString >> 4) & 0x03;
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	091b      	lsrs	r3, r3, #4
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	f003 0303 	and.w	r3, r3, #3
 80003ac:	b2db      	uxtb	r3, r3
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr

080003b8 <ReadRequest_handle>:

void ReadRequest_handle(void) //send read request to ECU
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	//Gui theo chu ky 1s, tuc la cu 1 giay gui goi tin de doc 1 lan
	HAL_Delay(1000);
 80003bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003c0:	f000 ff52 	bl	8001268 <HAL_Delay>

	if (HAL_CAN_AddTxMessage(&hcan, &Tester_TxHeader, ReadRq_TxData, &Tester_TxMailbox) != HAL_OK)
 80003c4:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <ReadRequest_handle+0x30>)
 80003c6:	4a09      	ldr	r2, [pc, #36]	; (80003ec <ReadRequest_handle+0x34>)
 80003c8:	4909      	ldr	r1, [pc, #36]	; (80003f0 <ReadRequest_handle+0x38>)
 80003ca:	480a      	ldr	r0, [pc, #40]	; (80003f4 <ReadRequest_handle+0x3c>)
 80003cc:	f001 f978 	bl	80016c0 <HAL_CAN_AddTxMessage>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d003      	beq.n	80003de <ReadRequest_handle+0x26>
	{
		error_flag = 1;
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <ReadRequest_handle+0x40>)
 80003d8:	2201      	movs	r2, #1
 80003da:	701a      	strb	r2, [r3, #0]
	} else //Transmit oke
	{
		error_flag = 0;
	}
}
 80003dc:	e002      	b.n	80003e4 <ReadRequest_handle+0x2c>
		error_flag = 0;
 80003de:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <ReadRequest_handle+0x40>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	701a      	strb	r2, [r3, #0]
}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	20000178 	.word	0x20000178
 80003ec:	20000000 	.word	0x20000000
 80003f0:	20000144 	.word	0x20000144
 80003f4:	2000008c 	.word	0x2000008c
 80003f8:	200001cf 	.word	0x200001cf

080003fc <ReadSingleFrame_handle>:
{

}

void ReadSingleFrame_handle(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	//oled debugger - in ra du lieu vua nhan duoc thong qua single frame
	memset(Tx_Buffer,0,sizeof(Tx_Buffer)); //clear buffer before write
 8000400:	2237      	movs	r2, #55	; 0x37
 8000402:	2100      	movs	r1, #0
 8000404:	4809      	ldr	r0, [pc, #36]	; (800042c <ReadSingleFrame_handle+0x30>)
 8000406:	f003 ff59 	bl	80042bc <memset>
	sprintf((char*)Tx_Buffer,"%s",Tester_RxData);
 800040a:	4a09      	ldr	r2, [pc, #36]	; (8000430 <ReadSingleFrame_handle+0x34>)
 800040c:	4909      	ldr	r1, [pc, #36]	; (8000434 <ReadSingleFrame_handle+0x38>)
 800040e:	4807      	ldr	r0, [pc, #28]	; (800042c <ReadSingleFrame_handle+0x30>)
 8000410:	f003 ff34 	bl	800427c <siprintf>
	HAL_UART_Transmit(&huart1,Tx_Buffer,sizeof(Tx_Buffer), 10);
 8000414:	230a      	movs	r3, #10
 8000416:	2237      	movs	r2, #55	; 0x37
 8000418:	4904      	ldr	r1, [pc, #16]	; (800042c <ReadSingleFrame_handle+0x30>)
 800041a:	4807      	ldr	r0, [pc, #28]	; (8000438 <ReadSingleFrame_handle+0x3c>)
 800041c:	f003 f95a 	bl	80036d4 <HAL_UART_Transmit>

	HAL_Delay(200);
 8000420:	20c8      	movs	r0, #200	; 0xc8
 8000422:	f000 ff21 	bl	8001268 <HAL_Delay>
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	20000194 	.word	0x20000194
 8000430:	2000017c 	.word	0x2000017c
 8000434:	08004bf8 	.word	0x08004bf8
 8000438:	200000fc 	.word	0x200000fc

0800043c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b08a      	sub	sp, #40	; 0x28
 8000440:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000442:	f000 feaf 	bl	80011a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000446:	f000 fb6d 	bl	8000b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800044a:	f000 fc61 	bl	8000d10 <MX_GPIO_Init>
  MX_CAN_Init();
 800044e:	f000 fbaf 	bl	8000bb0 <MX_CAN_Init>
  MX_TIM4_Init();
 8000452:	f000 fbe5 	bl	8000c20 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000456:	f000 fc31 	bl	8000cbc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Init(&hcan);
 800045a:	4893      	ldr	r0, [pc, #588]	; (80006a8 <main+0x26c>)
 800045c:	f000 ff28 	bl	80012b0 <HAL_CAN_Init>

  //Send notify signal to recieve message from actuator node
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000460:	2110      	movs	r1, #16
 8000462:	4891      	ldr	r0, [pc, #580]	; (80006a8 <main+0x26c>)
 8000464:	f001 fb1c 	bl	8001aa0 <HAL_CAN_ActivateNotification>

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000468:	2301      	movs	r3, #1
 800046a:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 1;  // anything between 0 to SlaveStartFilterBank
 800046c:	2301      	movs	r3, #1
 800046e:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8000470:	2301      	movs	r3, #1
 8000472:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x7A2 << 5;
 8000474:	f24f 4340 	movw	r3, #62528	; 0xf440
 8000478:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 800047a:	2300      	movs	r3, #0
 800047c:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x7A2 << 5;
 800047e:	f24f 4340 	movw	r3, #62528	; 0xf440
 8000482:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000484:	2300      	movs	r3, #0
 8000486:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000488:	2300      	movs	r3, #0
 800048a:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800048c:	2301      	movs	r3, #1
 800048e:	61fb      	str	r3, [r7, #28]
   //canfilterconfig.SlaveStartFilterBank = 14;
  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000490:	463b      	mov	r3, r7
 8000492:	4619      	mov	r1, r3
 8000494:	4884      	ldr	r0, [pc, #528]	; (80006a8 <main+0x26c>)
 8000496:	f001 f806 	bl	80014a6 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan);
 800049a:	4883      	ldr	r0, [pc, #524]	; (80006a8 <main+0x26c>)
 800049c:	f001 f8cc 	bl	8001638 <HAL_CAN_Start>

  //Config CAN header
  Tester_TxHeader.DLC = 8;
 80004a0:	4b82      	ldr	r3, [pc, #520]	; (80006ac <main+0x270>)
 80004a2:	2208      	movs	r2, #8
 80004a4:	611a      	str	r2, [r3, #16]
  Tester_TxHeader.ExtId = 0;
 80004a6:	4b81      	ldr	r3, [pc, #516]	; (80006ac <main+0x270>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	605a      	str	r2, [r3, #4]
  Tester_TxHeader.IDE = CAN_ID_STD;
 80004ac:	4b7f      	ldr	r3, [pc, #508]	; (80006ac <main+0x270>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  Tester_TxHeader.RTR = CAN_RTR_DATA;
 80004b2:	4b7e      	ldr	r3, [pc, #504]	; (80006ac <main+0x270>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	60da      	str	r2, [r3, #12]
  Tester_TxHeader.StdId = 0x712;
 80004b8:	4b7c      	ldr	r3, [pc, #496]	; (80006ac <main+0x270>)
 80004ba:	f240 7212 	movw	r2, #1810	; 0x712
 80004be:	601a      	str	r2, [r3, #0]
  Tester_TxHeader.TransmitGlobalTime = DISABLE;
 80004c0:	4b7a      	ldr	r3, [pc, #488]	; (80006ac <main+0x270>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	751a      	strb	r2, [r3, #20]

  button_Init(&BTN1, GPIOB, GPIO_PIN_0); //BTN1
 80004c6:	2201      	movs	r2, #1
 80004c8:	4979      	ldr	r1, [pc, #484]	; (80006b0 <main+0x274>)
 80004ca:	487a      	ldr	r0, [pc, #488]	; (80006b4 <main+0x278>)
 80004cc:	f7ff fed6 	bl	800027c <button_Init>
  HAL_TIM_Base_Start_IT(&htim4);
 80004d0:	4879      	ldr	r0, [pc, #484]	; (80006b8 <main+0x27c>)
 80004d2:	f002 fd01 	bl	8002ed8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 80004d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004da:	f000 fec5 	bl	8001268 <HAL_Delay>
	  switch(tester_state) //change state
 80004de:	4b77      	ldr	r3, [pc, #476]	; (80006bc <main+0x280>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	2b06      	cmp	r3, #6
 80004e4:	d8f7      	bhi.n	80004d6 <main+0x9a>
 80004e6:	a201      	add	r2, pc, #4	; (adr r2, 80004ec <main+0xb0>)
 80004e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ec:	08000509 	.word	0x08000509
 80004f0:	08000537 	.word	0x08000537
 80004f4:	0800058f 	.word	0x0800058f
 80004f8:	08000639 	.word	0x08000639
 80004fc:	08000a93 	.word	0x08000a93
 8000500:	08000a9f 	.word	0x08000a9f
 8000504:	08000ad3 	.word	0x08000ad3
	  {
	 	case INIT_STATE:
		{
			//check buton_state
			button_handle(&BTN1);
 8000508:	486a      	ldr	r0, [pc, #424]	; (80006b4 <main+0x278>)
 800050a:	f7ff fe35 	bl	8000178 <button_handle>
			if(button_sig == 0)
 800050e:	4b6c      	ldr	r3, [pc, #432]	; (80006c0 <main+0x284>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d103      	bne.n	800051e <main+0xe2>
			{
				tester_state = REQUEST_READ;
 8000516:	4b69      	ldr	r3, [pc, #420]	; (80006bc <main+0x280>)
 8000518:	2201      	movs	r2, #1
 800051a:	701a      	strb	r2, [r3, #0]
			} else if(button_sig == 1)
			{
				tester_state = REQUEST_WRITE;
				button_sig = 0;
			}
			break;
 800051c:	e2dd      	b.n	8000ada <main+0x69e>
			} else if(button_sig == 1)
 800051e:	4b68      	ldr	r3, [pc, #416]	; (80006c0 <main+0x284>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b01      	cmp	r3, #1
 8000524:	f040 82d9 	bne.w	8000ada <main+0x69e>
				tester_state = REQUEST_WRITE;
 8000528:	4b64      	ldr	r3, [pc, #400]	; (80006bc <main+0x280>)
 800052a:	2202      	movs	r2, #2
 800052c:	701a      	strb	r2, [r3, #0]
				button_sig = 0;
 800052e:	4b64      	ldr	r3, [pc, #400]	; (80006c0 <main+0x284>)
 8000530:	2200      	movs	r2, #0
 8000532:	701a      	strb	r2, [r3, #0]
			break;
 8000534:	e2d1      	b.n	8000ada <main+0x69e>
		}
	 	case REQUEST_READ: //send to ECU
	 	{
	 		ReadRequest_handle();
 8000536:	f7ff ff3f 	bl	80003b8 <ReadRequest_handle>
	 		FT_String = SF_N_PCI_FrameTypeHandle(Tester_RxData[3]);
 800053a:	4b62      	ldr	r3, [pc, #392]	; (80006c4 <main+0x288>)
 800053c:	78db      	ldrb	r3, [r3, #3]
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff ff2a 	bl	8000398 <SF_N_PCI_FrameTypeHandle>
 8000544:	4603      	mov	r3, r0
 8000546:	461a      	mov	r2, r3
 8000548:	4b5f      	ldr	r3, [pc, #380]	; (80006c8 <main+0x28c>)
 800054a:	701a      	strb	r2, [r3, #0]
	 		FrameType = GetFrameType(FT_String); //check
 800054c:	4b5e      	ldr	r3, [pc, #376]	; (80006c8 <main+0x28c>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff fefb 	bl	800034c <GetFrameType>
 8000556:	4603      	mov	r3, r0
 8000558:	461a      	mov	r2, r3
 800055a:	4b5c      	ldr	r3, [pc, #368]	; (80006cc <main+0x290>)
 800055c:	701a      	strb	r2, [r3, #0]

	 		if(FrameType == FT_SINGLEFRAME && flag_read_response == 1) {
 800055e:	4b5b      	ldr	r3, [pc, #364]	; (80006cc <main+0x290>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d107      	bne.n	8000576 <main+0x13a>
 8000566:	4b5a      	ldr	r3, [pc, #360]	; (80006d0 <main+0x294>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d103      	bne.n	8000576 <main+0x13a>
	 			tester_state = READ_SINGLEFRAME;
 800056e:	4b53      	ldr	r3, [pc, #332]	; (80006bc <main+0x280>)
 8000570:	2204      	movs	r2, #4
 8000572:	701a      	strb	r2, [r3, #0]
	 		{
	 			tester_state = READ_FIRSTFRAME;
	 		} else {
	 			tester_state = INIT_STATE;
	 		}
	 		break;
 8000574:	e2b9      	b.n	8000aea <main+0x6ae>
	 		} else if(FrameType == FT_FIRSTFRAME)
 8000576:	4b55      	ldr	r3, [pc, #340]	; (80006cc <main+0x290>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b10      	cmp	r3, #16
 800057c:	d103      	bne.n	8000586 <main+0x14a>
	 			tester_state = READ_FIRSTFRAME;
 800057e:	4b4f      	ldr	r3, [pc, #316]	; (80006bc <main+0x280>)
 8000580:	2205      	movs	r2, #5
 8000582:	701a      	strb	r2, [r3, #0]
	 		break;
 8000584:	e2b1      	b.n	8000aea <main+0x6ae>
	 			tester_state = INIT_STATE;
 8000586:	4b4d      	ldr	r3, [pc, #308]	; (80006bc <main+0x280>)
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]
	 		break;
 800058c:	e2ad      	b.n	8000aea <main+0x6ae>
	 	}
	 	case REQUEST_WRITE:
	 	{
	 		switch(write_state)
 800058e:	4b51      	ldr	r3, [pc, #324]	; (80006d4 <main+0x298>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d002      	beq.n	800059c <main+0x160>
 8000596:	2b01      	cmp	r3, #1
 8000598:	d020      	beq.n	80005dc <main+0x1a0>
	 					flag_read_response = 0;
	 				}
	 			}
	 		}

	 		break;
 800059a:	e2a0      	b.n	8000ade <main+0x6a2>
	 				if(security_flag == 0)
 800059c:	4b4e      	ldr	r3, [pc, #312]	; (80006d8 <main+0x29c>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d103      	bne.n	80005ac <main+0x170>
	 					 tester_state = REQUEST_SECURITY_ACCESS;
 80005a4:	4b45      	ldr	r3, [pc, #276]	; (80006bc <main+0x280>)
 80005a6:	2203      	movs	r2, #3
 80005a8:	701a      	strb	r2, [r3, #0]
	 				break;
 80005aa:	e043      	b.n	8000634 <main+0x1f8>
	 				} else if (security_flag == 1)
 80005ac:	4b4a      	ldr	r3, [pc, #296]	; (80006d8 <main+0x29c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d13f      	bne.n	8000634 <main+0x1f8>
	 					if(HAL_CAN_AddTxMessage(&hcan,&Tester_TxHeader,ReadRq_TxData,&Tester_TxMailbox)!=HAL_OK)
 80005b4:	4b49      	ldr	r3, [pc, #292]	; (80006dc <main+0x2a0>)
 80005b6:	4a4a      	ldr	r2, [pc, #296]	; (80006e0 <main+0x2a4>)
 80005b8:	493c      	ldr	r1, [pc, #240]	; (80006ac <main+0x270>)
 80005ba:	483b      	ldr	r0, [pc, #236]	; (80006a8 <main+0x26c>)
 80005bc:	f001 f880 	bl	80016c0 <HAL_CAN_AddTxMessage>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d003      	beq.n	80005ce <main+0x192>
	 						error_flag = 1;
 80005c6:	4b47      	ldr	r3, [pc, #284]	; (80006e4 <main+0x2a8>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	701a      	strb	r2, [r3, #0]
	 				break;
 80005cc:	e032      	b.n	8000634 <main+0x1f8>
	 						error_flag = 0;
 80005ce:	4b45      	ldr	r3, [pc, #276]	; (80006e4 <main+0x2a8>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
	 					 	write_state = WRITE_RESPONSE;
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <main+0x298>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]
	 				break;
 80005da:	e02b      	b.n	8000634 <main+0x1f8>
	 				if(flag_read_response == 1)
 80005dc:	4b3c      	ldr	r3, [pc, #240]	; (80006d0 <main+0x294>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	f040 827c 	bne.w	8000ade <main+0x6a2>
	 					FT_String = SF_N_PCI_FrameTypeHandle(Tester_RxData[0]);
 80005e6:	4b37      	ldr	r3, [pc, #220]	; (80006c4 <main+0x288>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff fed4 	bl	8000398 <SF_N_PCI_FrameTypeHandle>
 80005f0:	4603      	mov	r3, r0
 80005f2:	461a      	mov	r2, r3
 80005f4:	4b34      	ldr	r3, [pc, #208]	; (80006c8 <main+0x28c>)
 80005f6:	701a      	strb	r2, [r3, #0]
	 					FrameType = GetFrameType(FT_String);
 80005f8:	4b33      	ldr	r3, [pc, #204]	; (80006c8 <main+0x28c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff fea5 	bl	800034c <GetFrameType>
 8000602:	4603      	mov	r3, r0
 8000604:	461a      	mov	r2, r3
 8000606:	4b31      	ldr	r3, [pc, #196]	; (80006cc <main+0x290>)
 8000608:	701a      	strb	r2, [r3, #0]
	 					if(FrameType==0)
 800060a:	4b30      	ldr	r3, [pc, #192]	; (80006cc <main+0x290>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d10c      	bne.n	800062c <main+0x1f0>
	 						switch(Tester_RxData[1])
 8000612:	4b2c      	ldr	r3, [pc, #176]	; (80006c4 <main+0x288>)
 8000614:	785b      	ldrb	r3, [r3, #1]
 8000616:	2b6e      	cmp	r3, #110	; 0x6e
 8000618:	d002      	beq.n	8000620 <main+0x1e4>
 800061a:	2b7f      	cmp	r3, #127	; 0x7f
 800061c:	d003      	beq.n	8000626 <main+0x1ea>
 800061e:	e005      	b.n	800062c <main+0x1f0>
	 								tester_state = INIT_STATE; //positive response -> get back to init state
 8000620:	4b26      	ldr	r3, [pc, #152]	; (80006bc <main+0x280>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
									tester_state = INIT_STATE;
 8000626:	4b25      	ldr	r3, [pc, #148]	; (80006bc <main+0x280>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
	 					flag_read_response = 0;
 800062c:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <main+0x294>)
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
	 		break;
 8000632:	e254      	b.n	8000ade <main+0x6a2>
	 				break;
 8000634:	bf00      	nop
	 		break;
 8000636:	e252      	b.n	8000ade <main+0x6a2>
	 	}
	 	case REQUEST_SECURITY_ACCESS:
	 	{
	 		switch(security_state)
 8000638:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <main+0x2ac>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b02      	cmp	r3, #2
 800063e:	f000 81f4 	beq.w	8000a2a <main+0x5ee>
 8000642:	2b02      	cmp	r3, #2
 8000644:	f300 824d 	bgt.w	8000ae2 <main+0x6a6>
 8000648:	2b00      	cmp	r3, #0
 800064a:	d002      	beq.n	8000652 <main+0x216>
 800064c:	2b01      	cmp	r3, #1
 800064e:	d051      	beq.n	80006f4 <main+0x2b8>

	 		//sau khi nhan duoc du lieu accept security access tien hanh
	 		//quay ve trang thai write
	 		//dong thoi bat den - kich hoat flag o timer
	 		//
	 		break;
 8000650:	e247      	b.n	8000ae2 <main+0x6a6>
					switch(request_seedsend_flag)
 8000652:	4b26      	ldr	r3, [pc, #152]	; (80006ec <main+0x2b0>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <main+0x224>
 800065a:	2b01      	cmp	r3, #1
 800065c:	d014      	beq.n	8000688 <main+0x24c>
	 				break;
 800065e:	e217      	b.n	8000a90 <main+0x654>
							if(HAL_CAN_AddTxMessage(&hcan,&Tester_TxHeader,SecARq_TxData, &Tester_TxMailbox) != HAL_OK)
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <main+0x2a0>)
 8000662:	4a23      	ldr	r2, [pc, #140]	; (80006f0 <main+0x2b4>)
 8000664:	4911      	ldr	r1, [pc, #68]	; (80006ac <main+0x270>)
 8000666:	4810      	ldr	r0, [pc, #64]	; (80006a8 <main+0x26c>)
 8000668:	f001 f82a 	bl	80016c0 <HAL_CAN_AddTxMessage>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d003      	beq.n	800067a <main+0x23e>
								error_flag = 1;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <main+0x2a8>)
 8000674:	2201      	movs	r2, #1
 8000676:	701a      	strb	r2, [r3, #0]
							break;
 8000678:	e014      	b.n	80006a4 <main+0x268>
								error_flag = 0;
 800067a:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <main+0x2a8>)
 800067c:	2200      	movs	r2, #0
 800067e:	701a      	strb	r2, [r3, #0]
								request_seedsend_flag = 1; // co bao hieu da gui seed request
 8000680:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <main+0x2b0>)
 8000682:	2201      	movs	r2, #1
 8000684:	701a      	strb	r2, [r3, #0]
							break;
 8000686:	e00d      	b.n	80006a4 <main+0x268>
							if(flag_read_response)
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <main+0x294>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d008      	beq.n	80006a2 <main+0x266>
								security_state = SEND_KEY;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <main+0x2ac>)
 8000692:	2201      	movs	r2, #1
 8000694:	701a      	strb	r2, [r3, #0]
								flag_read_response = 0;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <main+0x294>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
								request_seedsend_flag = 0;
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <main+0x2b0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
							break;
 80006a2:	bf00      	nop
	 				break;
 80006a4:	e1f4      	b.n	8000a90 <main+0x654>
 80006a6:	bf00      	nop
 80006a8:	2000008c 	.word	0x2000008c
 80006ac:	20000144 	.word	0x20000144
 80006b0:	40010c00 	.word	0x40010c00
 80006b4:	200001d8 	.word	0x200001d8
 80006b8:	200000b4 	.word	0x200000b4
 80006bc:	200001f1 	.word	0x200001f1
 80006c0:	200001f0 	.word	0x200001f0
 80006c4:	2000017c 	.word	0x2000017c
 80006c8:	200001cb 	.word	0x200001cb
 80006cc:	200001cc 	.word	0x200001cc
 80006d0:	200001cd 	.word	0x200001cd
 80006d4:	200001f4 	.word	0x200001f4
 80006d8:	200001ce 	.word	0x200001ce
 80006dc:	20000178 	.word	0x20000178
 80006e0:	20000000 	.word	0x20000000
 80006e4:	200001cf 	.word	0x200001cf
 80006e8:	200001f2 	.word	0x200001f2
 80006ec:	200001d0 	.word	0x200001d0
 80006f0:	20000008 	.word	0x20000008
	 				seed[0] = Tester_RxData[3];
 80006f4:	4b92      	ldr	r3, [pc, #584]	; (8000940 <main+0x504>)
 80006f6:	78da      	ldrb	r2, [r3, #3]
 80006f8:	4b92      	ldr	r3, [pc, #584]	; (8000944 <main+0x508>)
 80006fa:	701a      	strb	r2, [r3, #0]
	 				seed[1] = Tester_RxData[4];
 80006fc:	4b90      	ldr	r3, [pc, #576]	; (8000940 <main+0x504>)
 80006fe:	791a      	ldrb	r2, [r3, #4]
 8000700:	4b90      	ldr	r3, [pc, #576]	; (8000944 <main+0x508>)
 8000702:	705a      	strb	r2, [r3, #1]
	 				seed[2] = Tester_RxData[5];
 8000704:	4b8e      	ldr	r3, [pc, #568]	; (8000940 <main+0x504>)
 8000706:	795a      	ldrb	r2, [r3, #5]
 8000708:	4b8e      	ldr	r3, [pc, #568]	; (8000944 <main+0x508>)
 800070a:	709a      	strb	r2, [r3, #2]
	 				seed[3] = Tester_RxData[6];
 800070c:	4b8c      	ldr	r3, [pc, #560]	; (8000940 <main+0x504>)
 800070e:	799a      	ldrb	r2, [r3, #6]
 8000710:	4b8c      	ldr	r3, [pc, #560]	; (8000944 <main+0x508>)
 8000712:	70da      	strb	r2, [r3, #3]
	 				key[0] = seed[0] ^ seed[1]; //xor
 8000714:	4b8b      	ldr	r3, [pc, #556]	; (8000944 <main+0x508>)
 8000716:	781a      	ldrb	r2, [r3, #0]
 8000718:	4b8a      	ldr	r3, [pc, #552]	; (8000944 <main+0x508>)
 800071a:	785b      	ldrb	r3, [r3, #1]
 800071c:	4053      	eors	r3, r2
 800071e:	b2da      	uxtb	r2, r3
 8000720:	4b89      	ldr	r3, [pc, #548]	; (8000948 <main+0x50c>)
 8000722:	701a      	strb	r2, [r3, #0]
	 				key[1] = seed[1] + seed[2];
 8000724:	4b87      	ldr	r3, [pc, #540]	; (8000944 <main+0x508>)
 8000726:	785a      	ldrb	r2, [r3, #1]
 8000728:	4b86      	ldr	r3, [pc, #536]	; (8000944 <main+0x508>)
 800072a:	789b      	ldrb	r3, [r3, #2]
 800072c:	4413      	add	r3, r2
 800072e:	b2da      	uxtb	r2, r3
 8000730:	4b85      	ldr	r3, [pc, #532]	; (8000948 <main+0x50c>)
 8000732:	705a      	strb	r2, [r3, #1]
	 				key[2] = seed[2] ^ seed[3];
 8000734:	4b83      	ldr	r3, [pc, #524]	; (8000944 <main+0x508>)
 8000736:	789a      	ldrb	r2, [r3, #2]
 8000738:	4b82      	ldr	r3, [pc, #520]	; (8000944 <main+0x508>)
 800073a:	78db      	ldrb	r3, [r3, #3]
 800073c:	4053      	eors	r3, r2
 800073e:	b2da      	uxtb	r2, r3
 8000740:	4b81      	ldr	r3, [pc, #516]	; (8000948 <main+0x50c>)
 8000742:	709a      	strb	r2, [r3, #2]
	 				key[3] = seed[3] + seed[0];
 8000744:	4b7f      	ldr	r3, [pc, #508]	; (8000944 <main+0x508>)
 8000746:	78da      	ldrb	r2, [r3, #3]
 8000748:	4b7e      	ldr	r3, [pc, #504]	; (8000944 <main+0x508>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4413      	add	r3, r2
 800074e:	b2da      	uxtb	r2, r3
 8000750:	4b7d      	ldr	r3, [pc, #500]	; (8000948 <main+0x50c>)
 8000752:	70da      	strb	r2, [r3, #3]
	 				key[4] = seed[0] | seed[1];
 8000754:	4b7b      	ldr	r3, [pc, #492]	; (8000944 <main+0x508>)
 8000756:	781a      	ldrb	r2, [r3, #0]
 8000758:	4b7a      	ldr	r3, [pc, #488]	; (8000944 <main+0x508>)
 800075a:	785b      	ldrb	r3, [r3, #1]
 800075c:	4313      	orrs	r3, r2
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4b79      	ldr	r3, [pc, #484]	; (8000948 <main+0x50c>)
 8000762:	711a      	strb	r2, [r3, #4]
	 				key[5] = seed[1] + seed[2];
 8000764:	4b77      	ldr	r3, [pc, #476]	; (8000944 <main+0x508>)
 8000766:	785a      	ldrb	r2, [r3, #1]
 8000768:	4b76      	ldr	r3, [pc, #472]	; (8000944 <main+0x508>)
 800076a:	789b      	ldrb	r3, [r3, #2]
 800076c:	4413      	add	r3, r2
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b75      	ldr	r3, [pc, #468]	; (8000948 <main+0x50c>)
 8000772:	715a      	strb	r2, [r3, #5]
	 				key[6] = seed[2] | seed[3];
 8000774:	4b73      	ldr	r3, [pc, #460]	; (8000944 <main+0x508>)
 8000776:	789a      	ldrb	r2, [r3, #2]
 8000778:	4b72      	ldr	r3, [pc, #456]	; (8000944 <main+0x508>)
 800077a:	78db      	ldrb	r3, [r3, #3]
 800077c:	4313      	orrs	r3, r2
 800077e:	b2da      	uxtb	r2, r3
 8000780:	4b71      	ldr	r3, [pc, #452]	; (8000948 <main+0x50c>)
 8000782:	719a      	strb	r2, [r3, #6]
	 				key[7] = seed[3] + seed[0];
 8000784:	4b6f      	ldr	r3, [pc, #444]	; (8000944 <main+0x508>)
 8000786:	78da      	ldrb	r2, [r3, #3]
 8000788:	4b6e      	ldr	r3, [pc, #440]	; (8000944 <main+0x508>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4413      	add	r3, r2
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b6d      	ldr	r3, [pc, #436]	; (8000948 <main+0x50c>)
 8000792:	71da      	strb	r2, [r3, #7]
	 				key[8] = seed[0] & seed[1];
 8000794:	4b6b      	ldr	r3, [pc, #428]	; (8000944 <main+0x508>)
 8000796:	781a      	ldrb	r2, [r3, #0]
 8000798:	4b6a      	ldr	r3, [pc, #424]	; (8000944 <main+0x508>)
 800079a:	785b      	ldrb	r3, [r3, #1]
 800079c:	4013      	ands	r3, r2
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4b69      	ldr	r3, [pc, #420]	; (8000948 <main+0x50c>)
 80007a2:	721a      	strb	r2, [r3, #8]
	 				key[9] = seed[1] + seed[2];
 80007a4:	4b67      	ldr	r3, [pc, #412]	; (8000944 <main+0x508>)
 80007a6:	785a      	ldrb	r2, [r3, #1]
 80007a8:	4b66      	ldr	r3, [pc, #408]	; (8000944 <main+0x508>)
 80007aa:	789b      	ldrb	r3, [r3, #2]
 80007ac:	4413      	add	r3, r2
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	4b65      	ldr	r3, [pc, #404]	; (8000948 <main+0x50c>)
 80007b2:	725a      	strb	r2, [r3, #9]
	 				key[10] = seed[2] & seed[3];
 80007b4:	4b63      	ldr	r3, [pc, #396]	; (8000944 <main+0x508>)
 80007b6:	789a      	ldrb	r2, [r3, #2]
 80007b8:	4b62      	ldr	r3, [pc, #392]	; (8000944 <main+0x508>)
 80007ba:	78db      	ldrb	r3, [r3, #3]
 80007bc:	4013      	ands	r3, r2
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	4b61      	ldr	r3, [pc, #388]	; (8000948 <main+0x50c>)
 80007c2:	729a      	strb	r2, [r3, #10]
	 				key[11] = seed[3] + seed[0];
 80007c4:	4b5f      	ldr	r3, [pc, #380]	; (8000944 <main+0x508>)
 80007c6:	78da      	ldrb	r2, [r3, #3]
 80007c8:	4b5e      	ldr	r3, [pc, #376]	; (8000944 <main+0x508>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	4413      	add	r3, r2
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	4b5d      	ldr	r3, [pc, #372]	; (8000948 <main+0x50c>)
 80007d2:	72da      	strb	r2, [r3, #11]
	 				key[12] = seed[0] - seed[1];
 80007d4:	4b5b      	ldr	r3, [pc, #364]	; (8000944 <main+0x508>)
 80007d6:	781a      	ldrb	r2, [r3, #0]
 80007d8:	4b5a      	ldr	r3, [pc, #360]	; (8000944 <main+0x508>)
 80007da:	785b      	ldrb	r3, [r3, #1]
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b59      	ldr	r3, [pc, #356]	; (8000948 <main+0x50c>)
 80007e2:	731a      	strb	r2, [r3, #12]
	 				key[13] = seed[1] + seed[2];
 80007e4:	4b57      	ldr	r3, [pc, #348]	; (8000944 <main+0x508>)
 80007e6:	785a      	ldrb	r2, [r3, #1]
 80007e8:	4b56      	ldr	r3, [pc, #344]	; (8000944 <main+0x508>)
 80007ea:	789b      	ldrb	r3, [r3, #2]
 80007ec:	4413      	add	r3, r2
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b55      	ldr	r3, [pc, #340]	; (8000948 <main+0x50c>)
 80007f2:	735a      	strb	r2, [r3, #13]
	 				key[14] = seed[2] - seed[3];
 80007f4:	4b53      	ldr	r3, [pc, #332]	; (8000944 <main+0x508>)
 80007f6:	789a      	ldrb	r2, [r3, #2]
 80007f8:	4b52      	ldr	r3, [pc, #328]	; (8000944 <main+0x508>)
 80007fa:	78db      	ldrb	r3, [r3, #3]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	4b51      	ldr	r3, [pc, #324]	; (8000948 <main+0x50c>)
 8000802:	739a      	strb	r2, [r3, #14]
	 				key[15] = seed[3] + seed[0];
 8000804:	4b4f      	ldr	r3, [pc, #316]	; (8000944 <main+0x508>)
 8000806:	78da      	ldrb	r2, [r3, #3]
 8000808:	4b4e      	ldr	r3, [pc, #312]	; (8000944 <main+0x508>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	4413      	add	r3, r2
 800080e:	b2da      	uxtb	r2, r3
 8000810:	4b4d      	ldr	r3, [pc, #308]	; (8000948 <main+0x50c>)
 8000812:	73da      	strb	r2, [r3, #15]
	 				switch(multiflow_state)
 8000814:	4b4d      	ldr	r3, [pc, #308]	; (800094c <main+0x510>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b02      	cmp	r3, #2
 800081a:	f000 8083 	beq.w	8000924 <main+0x4e8>
 800081e:	2b02      	cmp	r3, #2
 8000820:	f300 8133 	bgt.w	8000a8a <main+0x64e>
 8000824:	2b00      	cmp	r3, #0
 8000826:	d002      	beq.n	800082e <main+0x3f2>
 8000828:	2b01      	cmp	r3, #1
 800082a:	d04e      	beq.n	80008ca <main+0x48e>
	 				break; //break for SEND KEY
 800082c:	e12d      	b.n	8000a8a <main+0x64e>
	 						switch(send_firstframe_flag)
 800082e:	4b48      	ldr	r3, [pc, #288]	; (8000950 <main+0x514>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d002      	beq.n	800083c <main+0x400>
 8000836:	2b01      	cmp	r3, #1
 8000838:	d038      	beq.n	80008ac <main+0x470>
	 						break;
 800083a:	e0f5      	b.n	8000a28 <main+0x5ec>
	 								UnlockRq_TxData[0] = 0x10;
 800083c:	4b45      	ldr	r3, [pc, #276]	; (8000954 <main+0x518>)
 800083e:	2210      	movs	r2, #16
 8000840:	701a      	strb	r2, [r3, #0]
	 								UnlockRq_TxData[1] = 0x16; //0-15 KEY DATA
 8000842:	4b44      	ldr	r3, [pc, #272]	; (8000954 <main+0x518>)
 8000844:	2216      	movs	r2, #22
 8000846:	705a      	strb	r2, [r3, #1]
	 								UnlockRq_TxData[2] = 0x27; //securiy SID
 8000848:	4b42      	ldr	r3, [pc, #264]	; (8000954 <main+0x518>)
 800084a:	2227      	movs	r2, #39	; 0x27
 800084c:	709a      	strb	r2, [r3, #2]
	 								UnlockRq_TxData[3] = 0x02; //security key - level 1
 800084e:	4b41      	ldr	r3, [pc, #260]	; (8000954 <main+0x518>)
 8000850:	2202      	movs	r2, #2
 8000852:	70da      	strb	r2, [r3, #3]
	 								for(index_array=0;index_array<4;index_array++)
 8000854:	4b40      	ldr	r3, [pc, #256]	; (8000958 <main+0x51c>)
 8000856:	2200      	movs	r2, #0
 8000858:	801a      	strh	r2, [r3, #0]
 800085a:	e00f      	b.n	800087c <main+0x440>
	 									UnlockRq_TxData[index_array+4] = key[index_array];
 800085c:	4b3e      	ldr	r3, [pc, #248]	; (8000958 <main+0x51c>)
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	4619      	mov	r1, r3
 8000862:	4b3d      	ldr	r3, [pc, #244]	; (8000958 <main+0x51c>)
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	3304      	adds	r3, #4
 8000868:	4a37      	ldr	r2, [pc, #220]	; (8000948 <main+0x50c>)
 800086a:	5c51      	ldrb	r1, [r2, r1]
 800086c:	4a39      	ldr	r2, [pc, #228]	; (8000954 <main+0x518>)
 800086e:	54d1      	strb	r1, [r2, r3]
	 								for(index_array=0;index_array<4;index_array++)
 8000870:	4b39      	ldr	r3, [pc, #228]	; (8000958 <main+0x51c>)
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	3301      	adds	r3, #1
 8000876:	b29a      	uxth	r2, r3
 8000878:	4b37      	ldr	r3, [pc, #220]	; (8000958 <main+0x51c>)
 800087a:	801a      	strh	r2, [r3, #0]
 800087c:	4b36      	ldr	r3, [pc, #216]	; (8000958 <main+0x51c>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	2b03      	cmp	r3, #3
 8000882:	d9eb      	bls.n	800085c <main+0x420>
	 								if(HAL_CAN_AddTxMessage(&hcan,&Tester_TxHeader,UnlockRq_TxData,&Tester_TxMailbox) != HAL_OK)
 8000884:	4b35      	ldr	r3, [pc, #212]	; (800095c <main+0x520>)
 8000886:	4a33      	ldr	r2, [pc, #204]	; (8000954 <main+0x518>)
 8000888:	4935      	ldr	r1, [pc, #212]	; (8000960 <main+0x524>)
 800088a:	4836      	ldr	r0, [pc, #216]	; (8000964 <main+0x528>)
 800088c:	f000 ff18 	bl	80016c0 <HAL_CAN_AddTxMessage>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d003      	beq.n	800089e <main+0x462>
	 									error_flag = 1;
 8000896:	4b34      	ldr	r3, [pc, #208]	; (8000968 <main+0x52c>)
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
	 								break;
 800089c:	e014      	b.n	80008c8 <main+0x48c>
	 									error_flag = 0;
 800089e:	4b32      	ldr	r3, [pc, #200]	; (8000968 <main+0x52c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]
	 									send_firstframe_flag = 1; // co bao hieu da gui first frame
 80008a4:	4b2a      	ldr	r3, [pc, #168]	; (8000950 <main+0x514>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	701a      	strb	r2, [r3, #0]
	 								break;
 80008aa:	e00d      	b.n	80008c8 <main+0x48c>
	 								if(flag_read_response) //recieve flow control
 80008ac:	4b2f      	ldr	r3, [pc, #188]	; (800096c <main+0x530>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d008      	beq.n	80008c6 <main+0x48a>
	 									multiflow_state = FlOWCONTROL_CHECK;
 80008b4:	4b25      	ldr	r3, [pc, #148]	; (800094c <main+0x510>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	701a      	strb	r2, [r3, #0]
	 									flag_read_response = 0;
 80008ba:	4b2c      	ldr	r3, [pc, #176]	; (800096c <main+0x530>)
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
	 									send_firstframe_flag = 0;
 80008c0:	4b23      	ldr	r3, [pc, #140]	; (8000950 <main+0x514>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
	 								break;
 80008c6:	bf00      	nop
	 						break;
 80008c8:	e0ae      	b.n	8000a28 <main+0x5ec>
	 						FT_String = SF_N_PCI_FrameTypeHandle(Tester_RxData[0]);
 80008ca:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <main+0x504>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fd62 	bl	8000398 <SF_N_PCI_FrameTypeHandle>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	4b25      	ldr	r3, [pc, #148]	; (8000970 <main+0x534>)
 80008da:	701a      	strb	r2, [r3, #0]
	 						FrameType = GetFrameType(FT_String);
 80008dc:	4b24      	ldr	r3, [pc, #144]	; (8000970 <main+0x534>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fd33 	bl	800034c <GetFrameType>
 80008e6:	4603      	mov	r3, r0
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b22      	ldr	r3, [pc, #136]	; (8000974 <main+0x538>)
 80008ec:	701a      	strb	r2, [r3, #0]
	 						if(FrameType == 3) //Frametype = 3 -> Frame nhan la Frame flow control tu Tester
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <main+0x538>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b03      	cmp	r3, #3
 80008f4:	f040 8097 	bne.w	8000a26 <main+0x5ea>
	 							switch(Tester_RxData[0] & 0x0f)
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <main+0x504>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	f003 030f 	and.w	r3, r3, #15
 8000900:	2b02      	cmp	r3, #2
 8000902:	d00b      	beq.n	800091c <main+0x4e0>
 8000904:	2b02      	cmp	r3, #2
 8000906:	f300 808e 	bgt.w	8000a26 <main+0x5ea>
 800090a:	2b00      	cmp	r3, #0
 800090c:	d002      	beq.n	8000914 <main+0x4d8>
 800090e:	2b01      	cmp	r3, #1
 8000910:	d006      	beq.n	8000920 <main+0x4e4>
	 						break;
 8000912:	e088      	b.n	8000a26 <main+0x5ea>
	 							 		multiflow_state = CONSECUTIVEFRAME_SEND;
 8000914:	4b0d      	ldr	r3, [pc, #52]	; (800094c <main+0x510>)
 8000916:	2202      	movs	r2, #2
 8000918:	701a      	strb	r2, [r3, #0]
	 							 	break;
 800091a:	e002      	b.n	8000922 <main+0x4e6>
	 							 	break;
 800091c:	bf00      	nop
 800091e:	e082      	b.n	8000a26 <main+0x5ea>
	 							 	break;
 8000920:	bf00      	nop
	 						break;
 8000922:	e080      	b.n	8000a26 <main+0x5ea>
	 						MaxConsecutiveFrame_count = KEY_LENGTH/7 + 1;
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <main+0x53c>)
 8000926:	2203      	movs	r2, #3
 8000928:	701a      	strb	r2, [r3, #0]
	 							if(MaxConsecutiveFrame_count < sequence_num) 	//done transmitting - wait for ecu response
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <main+0x53c>)
 800092c:	781a      	ldrb	r2, [r3, #0]
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <main+0x540>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	429a      	cmp	r2, r3
 8000934:	d226      	bcs.n	8000984 <main+0x548>
	 								tester_state = AUTHENTICATE_RESPONSE;
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <main+0x544>)
 8000938:	2202      	movs	r2, #2
 800093a:	701a      	strb	r2, [r3, #0]
	 								break;
 800093c:	bf00      	nop
	 						break;
 800093e:	e073      	b.n	8000a28 <main+0x5ec>
 8000940:	2000017c 	.word	0x2000017c
 8000944:	20000208 	.word	0x20000208
 8000948:	200001f8 	.word	0x200001f8
 800094c:	200001f3 	.word	0x200001f3
 8000950:	200001d1 	.word	0x200001d1
 8000954:	20000184 	.word	0x20000184
 8000958:	200001d4 	.word	0x200001d4
 800095c:	20000178 	.word	0x20000178
 8000960:	20000144 	.word	0x20000144
 8000964:	2000008c 	.word	0x2000008c
 8000968:	200001cf 	.word	0x200001cf
 800096c:	200001cd 	.word	0x200001cd
 8000970:	200001cb 	.word	0x200001cb
 8000974:	200001cc 	.word	0x200001cc
 8000978:	2000020c 	.word	0x2000020c
 800097c:	2000020d 	.word	0x2000020d
 8000980:	200001f1 	.word	0x200001f1
	 							KeySend_TxData[0] = FT_CONSECUTIVEFRAME + sequence_num; //0x20 FT Consecutive Frame
 8000984:	4b59      	ldr	r3, [pc, #356]	; (8000aec <main+0x6b0>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	3320      	adds	r3, #32
 800098a:	b2da      	uxtb	r2, r3
 800098c:	4b58      	ldr	r3, [pc, #352]	; (8000af0 <main+0x6b4>)
 800098e:	701a      	strb	r2, [r3, #0]
	 							for(index_array = 1;index_array<8;index_array++)
 8000990:	4b58      	ldr	r3, [pc, #352]	; (8000af4 <main+0x6b8>)
 8000992:	2201      	movs	r2, #1
 8000994:	801a      	strh	r2, [r3, #0]
 8000996:	e025      	b.n	80009e4 <main+0x5a8>
	 								if(index_array*sequence_num >= 16) {
 8000998:	4b56      	ldr	r3, [pc, #344]	; (8000af4 <main+0x6b8>)
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	461a      	mov	r2, r3
 800099e:	4b53      	ldr	r3, [pc, #332]	; (8000aec <main+0x6b0>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	fb02 f303 	mul.w	r3, r2, r3
 80009a6:	2b0f      	cmp	r3, #15
 80009a8:	dc21      	bgt.n	80009ee <main+0x5b2>
	 								} else if(index_array*sequence_num < 16)
 80009aa:	4b52      	ldr	r3, [pc, #328]	; (8000af4 <main+0x6b8>)
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	461a      	mov	r2, r3
 80009b0:	4b4e      	ldr	r3, [pc, #312]	; (8000aec <main+0x6b0>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	fb02 f303 	mul.w	r3, r2, r3
 80009b8:	2b0f      	cmp	r3, #15
 80009ba:	dc0d      	bgt.n	80009d8 <main+0x59c>
	 									KeySend_TxData[index_array] = key[index_array*sequence_num];
 80009bc:	4b4d      	ldr	r3, [pc, #308]	; (8000af4 <main+0x6b8>)
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b4a      	ldr	r3, [pc, #296]	; (8000aec <main+0x6b0>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	fb02 f303 	mul.w	r3, r2, r3
 80009ca:	4a4a      	ldr	r2, [pc, #296]	; (8000af4 <main+0x6b8>)
 80009cc:	8812      	ldrh	r2, [r2, #0]
 80009ce:	4611      	mov	r1, r2
 80009d0:	4a49      	ldr	r2, [pc, #292]	; (8000af8 <main+0x6bc>)
 80009d2:	5cd2      	ldrb	r2, [r2, r3]
 80009d4:	4b46      	ldr	r3, [pc, #280]	; (8000af0 <main+0x6b4>)
 80009d6:	545a      	strb	r2, [r3, r1]
	 							for(index_array = 1;index_array<8;index_array++)
 80009d8:	4b46      	ldr	r3, [pc, #280]	; (8000af4 <main+0x6b8>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	b29a      	uxth	r2, r3
 80009e0:	4b44      	ldr	r3, [pc, #272]	; (8000af4 <main+0x6b8>)
 80009e2:	801a      	strh	r2, [r3, #0]
 80009e4:	4b43      	ldr	r3, [pc, #268]	; (8000af4 <main+0x6b8>)
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	2b07      	cmp	r3, #7
 80009ea:	d9d5      	bls.n	8000998 <main+0x55c>
 80009ec:	e000      	b.n	80009f0 <main+0x5b4>
	 									break;
 80009ee:	bf00      	nop
	 							if(HAL_CAN_AddTxMessage(&hcan,&Tester_TxHeader,KeySend_TxData,&Tester_TxMailbox) != HAL_OK)
 80009f0:	4b42      	ldr	r3, [pc, #264]	; (8000afc <main+0x6c0>)
 80009f2:	4a3f      	ldr	r2, [pc, #252]	; (8000af0 <main+0x6b4>)
 80009f4:	4942      	ldr	r1, [pc, #264]	; (8000b00 <main+0x6c4>)
 80009f6:	4843      	ldr	r0, [pc, #268]	; (8000b04 <main+0x6c8>)
 80009f8:	f000 fe62 	bl	80016c0 <HAL_CAN_AddTxMessage>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d003      	beq.n	8000a0a <main+0x5ce>
	 								error_flag = 1;
 8000a02:	4b41      	ldr	r3, [pc, #260]	; (8000b08 <main+0x6cc>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	701a      	strb	r2, [r3, #0]
 8000a08:	e002      	b.n	8000a10 <main+0x5d4>
	 								error_flag = 0;
 8000a0a:	4b3f      	ldr	r3, [pc, #252]	; (8000b08 <main+0x6cc>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
	 							sequence_num++;
 8000a10:	4b36      	ldr	r3, [pc, #216]	; (8000aec <main+0x6b0>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	4b34      	ldr	r3, [pc, #208]	; (8000aec <main+0x6b0>)
 8000a1a:	701a      	strb	r2, [r3, #0]
	 							HAL_Delay(500); //500ms send once CF#n
 8000a1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a20:	f000 fc22 	bl	8001268 <HAL_Delay>
	 							if(MaxConsecutiveFrame_count < sequence_num) 	//done transmitting - wait for ecu response
 8000a24:	e781      	b.n	800092a <main+0x4ee>
	 						break;
 8000a26:	bf00      	nop
	 				break; //break for SEND KEY
 8000a28:	e02f      	b.n	8000a8a <main+0x64e>
	 				if(flag_read_response==1)
 8000a2a:	4b38      	ldr	r3, [pc, #224]	; (8000b0c <main+0x6d0>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d12d      	bne.n	8000a8e <main+0x652>
	 					FT_String = SF_N_PCI_FrameTypeHandle(Tester_RxData[0]);
 8000a32:	4b37      	ldr	r3, [pc, #220]	; (8000b10 <main+0x6d4>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fcae 	bl	8000398 <SF_N_PCI_FrameTypeHandle>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4b34      	ldr	r3, [pc, #208]	; (8000b14 <main+0x6d8>)
 8000a42:	701a      	strb	r2, [r3, #0]
	 					FrameType = GetFrameType(FT_String);
 8000a44:	4b33      	ldr	r3, [pc, #204]	; (8000b14 <main+0x6d8>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fc7f 	bl	800034c <GetFrameType>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b31      	ldr	r3, [pc, #196]	; (8000b18 <main+0x6dc>)
 8000a54:	701a      	strb	r2, [r3, #0]
	 					if(FrameType == 0) //normal single frame
 8000a56:	4b30      	ldr	r3, [pc, #192]	; (8000b18 <main+0x6dc>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d117      	bne.n	8000a8e <main+0x652>
	 						if(Tester_RxData[1]==(0x27+0x40)) //positive
 8000a5e:	4b2c      	ldr	r3, [pc, #176]	; (8000b10 <main+0x6d4>)
 8000a60:	785b      	ldrb	r3, [r3, #1]
 8000a62:	2b67      	cmp	r3, #103	; 0x67
 8000a64:	d106      	bne.n	8000a74 <main+0x638>
	 							security_flag = 1;
 8000a66:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <main+0x6e0>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	701a      	strb	r2, [r3, #0]
	 							tester_state = INIT_STATE;
 8000a6c:	4b2c      	ldr	r3, [pc, #176]	; (8000b20 <main+0x6e4>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
	 				break;
 8000a72:	e00c      	b.n	8000a8e <main+0x652>
	 						} else if(Tester_RxData[1]==0x7F) //negative with invalid key error
 8000a74:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <main+0x6d4>)
 8000a76:	785b      	ldrb	r3, [r3, #1]
 8000a78:	2b7f      	cmp	r3, #127	; 0x7f
 8000a7a:	d108      	bne.n	8000a8e <main+0x652>
	 							security_flag = 0;
 8000a7c:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <main+0x6e0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
	 							tester_state = INIT_STATE;
 8000a82:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <main+0x6e4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
	 				break;
 8000a88:	e001      	b.n	8000a8e <main+0x652>
	 				break; //break for SEND KEY
 8000a8a:	bf00      	nop
 8000a8c:	e029      	b.n	8000ae2 <main+0x6a6>
	 				break;
 8000a8e:	bf00      	nop
	 		break;
 8000a90:	e027      	b.n	8000ae2 <main+0x6a6>
	 	}
	 	case READ_SINGLEFRAME: //Read from ECU
	 	{
	 		ReadSingleFrame_handle();
 8000a92:	f7ff fcb3 	bl	80003fc <ReadSingleFrame_handle>
	 		tester_state = INIT_STATE;
 8000a96:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <main+0x6e4>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
	 		break;
 8000a9c:	e025      	b.n	8000aea <main+0x6ae>
	 	}
	 	case READ_FIRSTFRAME: //through flow control to ecu in this state - not implement yet
	 	{
	 		FT_String = SF_N_PCI_FrameTypeHandle(Tester_RxData[0]);
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <main+0x6d4>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fc78 	bl	8000398 <SF_N_PCI_FrameTypeHandle>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	461a      	mov	r2, r3
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <main+0x6d8>)
 8000aae:	701a      	strb	r2, [r3, #0]
	 		FrameType = GetFrameType(FT_String);
 8000ab0:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <main+0x6d8>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fc49 	bl	800034c <GetFrameType>
 8000aba:	4603      	mov	r3, r0
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <main+0x6dc>)
 8000ac0:	701a      	strb	r2, [r3, #0]

	 		if(FrameType==FT_CONSECUTIVEFRAME)
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <main+0x6dc>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b20      	cmp	r3, #32
 8000ac8:	d10d      	bne.n	8000ae6 <main+0x6aa>
	 		{
	 			tester_state = CONSECUTTIVE_FRAME_READ;
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <main+0x6e4>)
 8000acc:	2206      	movs	r2, #6
 8000ace:	701a      	strb	r2, [r3, #0]
	 		}
	 		break;
 8000ad0:	e009      	b.n	8000ae6 <main+0x6aa>
	 	}
	 	case CONSECUTTIVE_FRAME_READ: //not implement yet
	 	{
	 		tester_state = INIT_STATE;
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <main+0x6e4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]
	 		break;
 8000ad8:	e007      	b.n	8000aea <main+0x6ae>
			break;
 8000ada:	bf00      	nop
 8000adc:	e4fb      	b.n	80004d6 <main+0x9a>
	 		break;
 8000ade:	bf00      	nop
 8000ae0:	e4f9      	b.n	80004d6 <main+0x9a>
	 		break;
 8000ae2:	bf00      	nop
 8000ae4:	e4f7      	b.n	80004d6 <main+0x9a>
	 		break;
 8000ae6:	bf00      	nop
 8000ae8:	e4f5      	b.n	80004d6 <main+0x9a>
	  HAL_Delay(1000);
 8000aea:	e4f4      	b.n	80004d6 <main+0x9a>
 8000aec:	2000020d 	.word	0x2000020d
 8000af0:	2000018c 	.word	0x2000018c
 8000af4:	200001d4 	.word	0x200001d4
 8000af8:	200001f8 	.word	0x200001f8
 8000afc:	20000178 	.word	0x20000178
 8000b00:	20000144 	.word	0x20000144
 8000b04:	2000008c 	.word	0x2000008c
 8000b08:	200001cf 	.word	0x200001cf
 8000b0c:	200001cd 	.word	0x200001cd
 8000b10:	2000017c 	.word	0x2000017c
 8000b14:	200001cb 	.word	0x200001cb
 8000b18:	200001cc 	.word	0x200001cc
 8000b1c:	200001ce 	.word	0x200001ce
 8000b20:	200001f1 	.word	0x200001f1

08000b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b090      	sub	sp, #64	; 0x40
 8000b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2a:	f107 0318 	add.w	r3, r7, #24
 8000b2e:	2228      	movs	r2, #40	; 0x28
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f003 fbc2 	bl	80042bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b54:	2301      	movs	r3, #1
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b62:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b68:	f107 0318 	add.w	r3, r7, #24
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f001 fd53 	bl	8002618 <HAL_RCC_OscConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b78:	f000 f952 	bl	8000e20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b80:	2302      	movs	r3, #2
 8000b82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2102      	movs	r1, #2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f001 ffc0 	bl	8002b1c <HAL_RCC_ClockConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ba2:	f000 f93d 	bl	8000e20 <Error_Handler>
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	3740      	adds	r7, #64	; 0x40
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000bb4:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <MX_CAN_Init+0x68>)
 8000bb6:	4a19      	ldr	r2, [pc, #100]	; (8000c1c <MX_CAN_Init+0x6c>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000bba:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_CAN_Init+0x68>)
 8000bbc:	2204      	movs	r2, #4
 8000bbe:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000bc0:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <MX_CAN_Init+0x68>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_CAN_Init+0x68>)
 8000bc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000bcc:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <MX_CAN_Init+0x68>)
 8000bd0:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000bd4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <MX_CAN_Init+0x68>)
 8000bd8:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000bdc:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_CAN_Init+0x68>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_CAN_Init+0x68>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <MX_CAN_Init+0x68>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_CAN_Init+0x68>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <MX_CAN_Init+0x68>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_CAN_Init+0x68>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000c02:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_CAN_Init+0x68>)
 8000c04:	f000 fb54 	bl	80012b0 <HAL_CAN_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000c0e:	f000 f907 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	2000008c 	.word	0x2000008c
 8000c1c:	40006400 	.word	0x40006400

08000c20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c26:	f107 0308 	add.w	r3, r7, #8
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c34:	463b      	mov	r3, r7
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <MX_TIM4_Init+0x94>)
 8000c3e:	4a1e      	ldr	r2, [pc, #120]	; (8000cb8 <MX_TIM4_Init+0x98>)
 8000c40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3599;
 8000c42:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <MX_TIM4_Init+0x94>)
 8000c44:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000c48:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <MX_TIM4_Init+0x94>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 8000c50:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <MX_TIM4_Init+0x94>)
 8000c52:	2209      	movs	r2, #9
 8000c54:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c56:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <MX_TIM4_Init+0x94>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c5c:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <MX_TIM4_Init+0x94>)
 8000c5e:	2280      	movs	r2, #128	; 0x80
 8000c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c62:	4814      	ldr	r0, [pc, #80]	; (8000cb4 <MX_TIM4_Init+0x94>)
 8000c64:	f002 f8e8 	bl	8002e38 <HAL_TIM_Base_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000c6e:	f000 f8d7 	bl	8000e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <MX_TIM4_Init+0x94>)
 8000c80:	f002 fa84 	bl	800318c <HAL_TIM_ConfigClockSource>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000c8a:	f000 f8c9 	bl	8000e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c96:	463b      	mov	r3, r7
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4806      	ldr	r0, [pc, #24]	; (8000cb4 <MX_TIM4_Init+0x94>)
 8000c9c:	f002 fc5a 	bl	8003554 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000ca6:	f000 f8bb 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200000b4 	.word	0x200000b4
 8000cb8:	40000800 	.word	0x40000800

08000cbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cc2:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <MX_USART1_UART_Init+0x50>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ccc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cf4:	f002 fc9e 	bl	8003634 <HAL_UART_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cfe:	f000 f88f 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200000fc 	.word	0x200000fc
 8000d0c:	40013800 	.word	0x40013800

08000d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	f107 0310 	add.w	r3, r7, #16
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d24:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <MX_GPIO_Init+0xa4>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a22      	ldr	r2, [pc, #136]	; (8000db4 <MX_GPIO_Init+0xa4>)
 8000d2a:	f043 0320 	orr.w	r3, r3, #32
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <MX_GPIO_Init+0xa4>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0320 	and.w	r3, r3, #32
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3c:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <MX_GPIO_Init+0xa4>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a1c      	ldr	r2, [pc, #112]	; (8000db4 <MX_GPIO_Init+0xa4>)
 8000d42:	f043 0308 	orr.w	r3, r3, #8
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_GPIO_Init+0xa4>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0308 	and.w	r3, r3, #8
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <MX_GPIO_Init+0xa4>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a16      	ldr	r2, [pc, #88]	; (8000db4 <MX_GPIO_Init+0xa4>)
 8000d5a:	f043 0304 	orr.w	r3, r3, #4
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_GPIO_Init+0xa4>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0304 	and.w	r3, r3, #4
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Tester_SecA_LED_GPIO_Port, Tester_SecA_LED_Pin, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2108      	movs	r1, #8
 8000d70:	4811      	ldr	r0, [pc, #68]	; (8000db8 <MX_GPIO_Init+0xa8>)
 8000d72:	f001 fc38 	bl	80025e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8000d76:	2301      	movs	r3, #1
 8000d78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 0310 	add.w	r3, r7, #16
 8000d86:	4619      	mov	r1, r3
 8000d88:	480b      	ldr	r0, [pc, #44]	; (8000db8 <MX_GPIO_Init+0xa8>)
 8000d8a:	f001 fa91 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Tester_SecA_LED_Pin */
  GPIO_InitStruct.Pin = Tester_SecA_LED_Pin;
 8000d8e:	2308      	movs	r3, #8
 8000d90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d92:	2301      	movs	r3, #1
 8000d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Tester_SecA_LED_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	4619      	mov	r1, r3
 8000da4:	4804      	ldr	r0, [pc, #16]	; (8000db8 <MX_GPIO_Init+0xa8>)
 8000da6:	f001 fa83 	bl	80022b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000daa:	bf00      	nop
 8000dac:	3720      	adds	r7, #32
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40010c00 	.word	0x40010c00

08000dbc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //!WARNING: Don't change
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	if(htim == &htim4) //behavior led function timer
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d11d      	bne.n	8000e08 <HAL_TIM_PeriodElapsedCallback+0x4c>
	{
		if(security_flag == 1)
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d119      	bne.n	8000e08 <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			//turn on led
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2108      	movs	r1, #8
 8000dd8:	480f      	ldr	r0, [pc, #60]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000dda:	f001 fc04 	bl	80025e6 <HAL_GPIO_WritePin>
			if(timer_cnt++==5000)
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	1c5a      	adds	r2, r3, #1
 8000de4:	b291      	uxth	r1, r2
 8000de6:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000de8:	8011      	strh	r1, [r2, #0]
 8000dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d10a      	bne.n	8000e08 <HAL_TIM_PeriodElapsedCallback+0x4c>
			{
				//turn off led
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2108      	movs	r1, #8
 8000df6:	4808      	ldr	r0, [pc, #32]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000df8:	f001 fbf5 	bl	80025e6 <HAL_GPIO_WritePin>
				security_flag = 0;
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
				//reset timer
				timer_cnt = 0; //reset timer
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	801a      	strh	r2, [r3, #0]
			}
		}
	}
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	200000b4 	.word	0x200000b4
 8000e14:	200001ce 	.word	0x200001ce
 8000e18:	40010c00 	.word	0x40010c00
 8000e1c:	200001d2 	.word	0x200001d2

08000e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e24:	b672      	cpsid	i
}
 8000e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <Error_Handler+0x8>
	...

08000e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_MspInit+0x5c>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <HAL_MspInit+0x5c>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6193      	str	r3, [r2, #24]
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_MspInit+0x5c>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <HAL_MspInit+0x5c>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <HAL_MspInit+0x5c>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e54:	61d3      	str	r3, [r2, #28]
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <HAL_MspInit+0x5c>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <HAL_MspInit+0x60>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <HAL_MspInit+0x60>)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40010000 	.word	0x40010000

08000e90 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a29      	ldr	r2, [pc, #164]	; (8000f50 <HAL_CAN_MspInit+0xc0>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d14b      	bne.n	8000f48 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000eb0:	4b28      	ldr	r3, [pc, #160]	; (8000f54 <HAL_CAN_MspInit+0xc4>)
 8000eb2:	69db      	ldr	r3, [r3, #28]
 8000eb4:	4a27      	ldr	r2, [pc, #156]	; (8000f54 <HAL_CAN_MspInit+0xc4>)
 8000eb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eba:	61d3      	str	r3, [r2, #28]
 8000ebc:	4b25      	ldr	r3, [pc, #148]	; (8000f54 <HAL_CAN_MspInit+0xc4>)
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec8:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <HAL_CAN_MspInit+0xc4>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	4a21      	ldr	r2, [pc, #132]	; (8000f54 <HAL_CAN_MspInit+0xc4>)
 8000ece:	f043 0308 	orr.w	r3, r3, #8
 8000ed2:	6193      	str	r3, [r2, #24]
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <HAL_CAN_MspInit+0xc4>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	f003 0308 	and.w	r3, r3, #8
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4818      	ldr	r0, [pc, #96]	; (8000f58 <HAL_CAN_MspInit+0xc8>)
 8000ef6:	f001 f9db 	bl	80022b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4812      	ldr	r0, [pc, #72]	; (8000f58 <HAL_CAN_MspInit+0xc8>)
 8000f10:	f001 f9ce 	bl	80022b0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_CAN_MspInit+0xcc>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_CAN_MspInit+0xcc>)
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f36:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	2015      	movs	r0, #21
 8000f3e:	f001 f8ce 	bl	80020de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f42:	2015      	movs	r0, #21
 8000f44:	f001 f8e7 	bl	8002116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f48:	bf00      	nop
 8000f4a:	3728      	adds	r7, #40	; 0x28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40006400 	.word	0x40006400
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40010c00 	.word	0x40010c00
 8000f5c:	40010000 	.word	0x40010000

08000f60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <HAL_TIM_Base_MspInit+0x44>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d113      	bne.n	8000f9a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f72:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <HAL_TIM_Base_MspInit+0x48>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	4a0c      	ldr	r2, [pc, #48]	; (8000fa8 <HAL_TIM_Base_MspInit+0x48>)
 8000f78:	f043 0304 	orr.w	r3, r3, #4
 8000f7c:	61d3      	str	r3, [r2, #28]
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_TIM_Base_MspInit+0x48>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	201e      	movs	r0, #30
 8000f90:	f001 f8a5 	bl	80020de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f94:	201e      	movs	r0, #30
 8000f96:	f001 f8be 	bl	8002116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40000800 	.word	0x40000800
 8000fa8:	40021000 	.word	0x40021000

08000fac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a20      	ldr	r2, [pc, #128]	; (8001048 <HAL_UART_MspInit+0x9c>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d139      	bne.n	8001040 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	; (800104c <HAL_UART_MspInit+0xa0>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4a1e      	ldr	r2, [pc, #120]	; (800104c <HAL_UART_MspInit+0xa0>)
 8000fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	; (800104c <HAL_UART_MspInit+0xa0>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe4:	4b19      	ldr	r3, [pc, #100]	; (800104c <HAL_UART_MspInit+0xa0>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a18      	ldr	r2, [pc, #96]	; (800104c <HAL_UART_MspInit+0xa0>)
 8000fea:	f043 0304 	orr.w	r3, r3, #4
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <HAL_UART_MspInit+0xa0>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ffc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001000:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 0310 	add.w	r3, r7, #16
 800100e:	4619      	mov	r1, r3
 8001010:	480f      	ldr	r0, [pc, #60]	; (8001050 <HAL_UART_MspInit+0xa4>)
 8001012:	f001 f94d 	bl	80022b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800101a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4619      	mov	r1, r3
 800102a:	4809      	ldr	r0, [pc, #36]	; (8001050 <HAL_UART_MspInit+0xa4>)
 800102c:	f001 f940 	bl	80022b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	2100      	movs	r1, #0
 8001034:	2025      	movs	r0, #37	; 0x25
 8001036:	f001 f852 	bl	80020de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800103a:	2025      	movs	r0, #37	; 0x25
 800103c:	f001 f86b 	bl	8002116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001040:	bf00      	nop
 8001042:	3720      	adds	r7, #32
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40013800 	.word	0x40013800
 800104c:	40021000 	.word	0x40021000
 8001050:	40010800 	.word	0x40010800

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <NMI_Handler+0x4>

0800105a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <HardFault_Handler+0x4>

08001060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <MemManage_Handler+0x4>

08001066 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <UsageFault_Handler+0x4>

08001072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr

0800107e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr

0800108a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr

08001096 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109a:	f000 f8c9 	bl	8001230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <CAN1_RX1_IRQHandler+0x10>)
 80010aa:	f000 fd1e 	bl	8001aea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	2000008c 	.word	0x2000008c

080010b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <TIM4_IRQHandler+0x10>)
 80010be:	f001 ff5d 	bl	8002f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200000b4 	.word	0x200000b4

080010cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <USART1_IRQHandler+0x10>)
 80010d2:	f002 fb83 	bl	80037dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200000fc 	.word	0x200000fc

080010e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e8:	4a14      	ldr	r2, [pc, #80]	; (800113c <_sbrk+0x5c>)
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <_sbrk+0x60>)
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d102      	bne.n	8001102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <_sbrk+0x64>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	; (8001148 <_sbrk+0x68>)
 8001100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	429a      	cmp	r2, r3
 800110e:	d207      	bcs.n	8001120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001110:	f003 f8dc 	bl	80042cc <__errno>
 8001114:	4603      	mov	r3, r0
 8001116:	220c      	movs	r2, #12
 8001118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	e009      	b.n	8001134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	4a05      	ldr	r2, [pc, #20]	; (8001144 <_sbrk+0x64>)
 8001130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20005000 	.word	0x20005000
 8001140:	00000400 	.word	0x00000400
 8001144:	20000210 	.word	0x20000210
 8001148:	20000360 	.word	0x20000360

0800114c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001158:	f7ff fff8 	bl	800114c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800115c:	480b      	ldr	r0, [pc, #44]	; (800118c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800115e:	490c      	ldr	r1, [pc, #48]	; (8001190 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001160:	4a0c      	ldr	r2, [pc, #48]	; (8001194 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001164:	e002      	b.n	800116c <LoopCopyDataInit>

08001166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116a:	3304      	adds	r3, #4

0800116c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800116c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001170:	d3f9      	bcc.n	8001166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001172:	4a09      	ldr	r2, [pc, #36]	; (8001198 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001174:	4c09      	ldr	r4, [pc, #36]	; (800119c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001178:	e001      	b.n	800117e <LoopFillZerobss>

0800117a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800117c:	3204      	adds	r2, #4

0800117e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001180:	d3fb      	bcc.n	800117a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001182:	f003 f8a9 	bl	80042d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001186:	f7ff f959 	bl	800043c <main>
  bx lr
 800118a:	4770      	bx	lr
  ldr r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001190:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001194:	08004c64 	.word	0x08004c64
  ldr r2, =_sbss
 8001198:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800119c:	20000360 	.word	0x20000360

080011a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC1_2_IRQHandler>
	...

080011a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <HAL_Init+0x28>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a07      	ldr	r2, [pc, #28]	; (80011cc <HAL_Init+0x28>)
 80011ae:	f043 0310 	orr.w	r3, r3, #16
 80011b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b4:	2003      	movs	r0, #3
 80011b6:	f000 ff87 	bl	80020c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ba:	200f      	movs	r0, #15
 80011bc:	f000 f808 	bl	80011d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c0:	f7ff fe34 	bl	8000e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40022000 	.word	0x40022000

080011d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_InitTick+0x54>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_InitTick+0x58>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4619      	mov	r1, r3
 80011e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 ff9f 	bl	8002132 <HAL_SYSTICK_Config>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e00e      	b.n	800121c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d80a      	bhi.n	800121a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001204:	2200      	movs	r2, #0
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	f04f 30ff 	mov.w	r0, #4294967295
 800120c:	f000 ff67 	bl	80020de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001210:	4a06      	ldr	r2, [pc, #24]	; (800122c <HAL_InitTick+0x5c>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	e000      	b.n	800121c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000010 	.word	0x20000010
 8001228:	20000018 	.word	0x20000018
 800122c:	20000014 	.word	0x20000014

08001230 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <HAL_IncTick+0x1c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	4b05      	ldr	r3, [pc, #20]	; (8001250 <HAL_IncTick+0x20>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4413      	add	r3, r2
 8001240:	4a03      	ldr	r2, [pc, #12]	; (8001250 <HAL_IncTick+0x20>)
 8001242:	6013      	str	r3, [r2, #0]
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	20000018 	.word	0x20000018
 8001250:	20000214 	.word	0x20000214

08001254 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b02      	ldr	r3, [pc, #8]	; (8001264 <HAL_GetTick+0x10>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	20000214 	.word	0x20000214

08001268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001270:	f7ff fff0 	bl	8001254 <HAL_GetTick>
 8001274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001280:	d005      	beq.n	800128e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_Delay+0x44>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800128e:	bf00      	nop
 8001290:	f7ff ffe0 	bl	8001254 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	429a      	cmp	r2, r3
 800129e:	d8f7      	bhi.n	8001290 <HAL_Delay+0x28>
  {
  }
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000018 	.word	0x20000018

080012b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e0ed      	b.n	800149e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d102      	bne.n	80012d4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff fdde 	bl	8000e90 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0201 	orr.w	r2, r2, #1
 80012e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012e4:	f7ff ffb6 	bl	8001254 <HAL_GetTick>
 80012e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012ea:	e012      	b.n	8001312 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012ec:	f7ff ffb2 	bl	8001254 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b0a      	cmp	r3, #10
 80012f8:	d90b      	bls.n	8001312 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2205      	movs	r2, #5
 800130a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e0c5      	b.n	800149e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0e5      	beq.n	80012ec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0202 	bic.w	r2, r2, #2
 800132e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001330:	f7ff ff90 	bl	8001254 <HAL_GetTick>
 8001334:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001336:	e012      	b.n	800135e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001338:	f7ff ff8c 	bl	8001254 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b0a      	cmp	r3, #10
 8001344:	d90b      	bls.n	800135e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2205      	movs	r2, #5
 8001356:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e09f      	b.n	800149e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1e5      	bne.n	8001338 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	7e1b      	ldrb	r3, [r3, #24]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d108      	bne.n	8001386 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	e007      	b.n	8001396 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001394:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	7e5b      	ldrb	r3, [r3, #25]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d108      	bne.n	80013b0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	e007      	b.n	80013c0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7e9b      	ldrb	r3, [r3, #26]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d108      	bne.n	80013da <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f042 0220 	orr.w	r2, r2, #32
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	e007      	b.n	80013ea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 0220 	bic.w	r2, r2, #32
 80013e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	7edb      	ldrb	r3, [r3, #27]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d108      	bne.n	8001404 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0210 	bic.w	r2, r2, #16
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	e007      	b.n	8001414 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 0210 	orr.w	r2, r2, #16
 8001412:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	7f1b      	ldrb	r3, [r3, #28]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d108      	bne.n	800142e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 0208 	orr.w	r2, r2, #8
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	e007      	b.n	800143e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0208 	bic.w	r2, r2, #8
 800143c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	7f5b      	ldrb	r3, [r3, #29]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d108      	bne.n	8001458 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f042 0204 	orr.w	r2, r2, #4
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	e007      	b.n	8001468 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0204 	bic.w	r2, r2, #4
 8001466:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	431a      	orrs	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	ea42 0103 	orr.w	r1, r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	1e5a      	subs	r2, r3, #1
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b087      	sub	sp, #28
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014bc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80014be:	7cfb      	ldrb	r3, [r7, #19]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d003      	beq.n	80014cc <HAL_CAN_ConfigFilter+0x26>
 80014c4:	7cfb      	ldrb	r3, [r7, #19]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	f040 80aa 	bne.w	8001620 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014d2:	f043 0201 	orr.w	r2, r3, #1
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	f003 031f 	and.w	r3, r3, #31
 80014e4:	2201      	movs	r2, #1
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	401a      	ands	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d123      	bne.n	800154e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	43db      	mvns	r3, r3
 8001510:	401a      	ands	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001528:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	3248      	adds	r2, #72	; 0x48
 800152e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001542:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001544:	6979      	ldr	r1, [r7, #20]
 8001546:	3348      	adds	r3, #72	; 0x48
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	440b      	add	r3, r1
 800154c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d122      	bne.n	800159c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	431a      	orrs	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001576:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3248      	adds	r2, #72	; 0x48
 800157c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001590:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001592:	6979      	ldr	r1, [r7, #20]
 8001594:	3348      	adds	r3, #72	; 0x48
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	440b      	add	r3, r1
 800159a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d109      	bne.n	80015b8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80015b6:	e007      	b.n	80015c8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	431a      	orrs	r2, r3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d109      	bne.n	80015e4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	43db      	mvns	r3, r3
 80015da:	401a      	ands	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80015e2:	e007      	b.n	80015f4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	431a      	orrs	r2, r3
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d107      	bne.n	800160c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	431a      	orrs	r2, r3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001612:	f023 0201 	bic.w	r2, r3, #1
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	e006      	b.n	800162e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
  }
}
 800162e:	4618      	mov	r0, r3
 8001630:	371c      	adds	r7, #28
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b01      	cmp	r3, #1
 800164a:	d12e      	bne.n	80016aa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2202      	movs	r2, #2
 8001650:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0201 	bic.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001664:	f7ff fdf6 	bl	8001254 <HAL_GetTick>
 8001668:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800166a:	e012      	b.n	8001692 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800166c:	f7ff fdf2 	bl	8001254 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b0a      	cmp	r3, #10
 8001678:	d90b      	bls.n	8001692 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2205      	movs	r2, #5
 800168a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e012      	b.n	80016b8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1e5      	bne.n	800166c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e006      	b.n	80016b8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
  }
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	; 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80016de:	7ffb      	ldrb	r3, [r7, #31]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d003      	beq.n	80016ec <HAL_CAN_AddTxMessage+0x2c>
 80016e4:	7ffb      	ldrb	r3, [r7, #31]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	f040 80ad 	bne.w	8001846 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10a      	bne.n	800170c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d105      	bne.n	800170c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8095 	beq.w	8001836 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	0e1b      	lsrs	r3, r3, #24
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001716:	2201      	movs	r2, #1
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10d      	bne.n	8001744 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001732:	68f9      	ldr	r1, [r7, #12]
 8001734:	6809      	ldr	r1, [r1, #0]
 8001736:	431a      	orrs	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	3318      	adds	r3, #24
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	440b      	add	r3, r1
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	e00f      	b.n	8001764 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800174e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001754:	68f9      	ldr	r1, [r7, #12]
 8001756:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001758:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3318      	adds	r3, #24
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	440b      	add	r3, r1
 8001762:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6819      	ldr	r1, [r3, #0]
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	691a      	ldr	r2, [r3, #16]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	3318      	adds	r3, #24
 8001770:	011b      	lsls	r3, r3, #4
 8001772:	440b      	add	r3, r1
 8001774:	3304      	adds	r3, #4
 8001776:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	7d1b      	ldrb	r3, [r3, #20]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d111      	bne.n	80017a4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	3318      	adds	r3, #24
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	4413      	add	r3, r2
 800178c:	3304      	adds	r3, #4
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	6811      	ldr	r1, [r2, #0]
 8001794:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	3318      	adds	r3, #24
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	440b      	add	r3, r1
 80017a0:	3304      	adds	r3, #4
 80017a2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3307      	adds	r3, #7
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	061a      	lsls	r2, r3, #24
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3306      	adds	r3, #6
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	041b      	lsls	r3, r3, #16
 80017b4:	431a      	orrs	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3305      	adds	r3, #5
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	021b      	lsls	r3, r3, #8
 80017be:	4313      	orrs	r3, r2
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	3204      	adds	r2, #4
 80017c4:	7812      	ldrb	r2, [r2, #0]
 80017c6:	4610      	mov	r0, r2
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	6811      	ldr	r1, [r2, #0]
 80017cc:	ea43 0200 	orr.w	r2, r3, r0
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	011b      	lsls	r3, r3, #4
 80017d4:	440b      	add	r3, r1
 80017d6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80017da:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3303      	adds	r3, #3
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	061a      	lsls	r2, r3, #24
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3302      	adds	r3, #2
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	041b      	lsls	r3, r3, #16
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3301      	adds	r3, #1
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	021b      	lsls	r3, r3, #8
 80017f6:	4313      	orrs	r3, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	7812      	ldrb	r2, [r2, #0]
 80017fc:	4610      	mov	r0, r2
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	6811      	ldr	r1, [r2, #0]
 8001802:	ea43 0200 	orr.w	r2, r3, r0
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	011b      	lsls	r3, r3, #4
 800180a:	440b      	add	r3, r1
 800180c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001810:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3318      	adds	r3, #24
 800181a:	011b      	lsls	r3, r3, #4
 800181c:	4413      	add	r3, r2
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	6811      	ldr	r1, [r2, #0]
 8001824:	f043 0201 	orr.w	r2, r3, #1
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	3318      	adds	r3, #24
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	440b      	add	r3, r1
 8001830:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	e00e      	b.n	8001854 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e006      	b.n	8001854 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
  }
}
 8001854:	4618      	mov	r0, r3
 8001856:	3724      	adds	r7, #36	; 0x24
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800185e:	b480      	push	{r7}
 8001860:	b087      	sub	sp, #28
 8001862:	af00      	add	r7, sp, #0
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001872:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001874:	7dfb      	ldrb	r3, [r7, #23]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d003      	beq.n	8001882 <HAL_CAN_GetRxMessage+0x24>
 800187a:	7dfb      	ldrb	r3, [r7, #23]
 800187c:	2b02      	cmp	r3, #2
 800187e:	f040 8103 	bne.w	8001a88 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d10e      	bne.n	80018a6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d116      	bne.n	80018c4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e0f7      	b.n	8001a96 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d107      	bne.n	80018c4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0e8      	b.n	8001a96 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	331b      	adds	r3, #27
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	4413      	add	r3, r2
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0204 	and.w	r2, r3, #4
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10c      	bne.n	80018fc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	331b      	adds	r3, #27
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	4413      	add	r3, r2
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	0d5b      	lsrs	r3, r3, #21
 80018f2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	e00b      	b.n	8001914 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	331b      	adds	r3, #27
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	4413      	add	r3, r2
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	08db      	lsrs	r3, r3, #3
 800190c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	331b      	adds	r3, #27
 800191c:	011b      	lsls	r3, r3, #4
 800191e:	4413      	add	r3, r2
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0202 	and.w	r2, r3, #2
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	331b      	adds	r3, #27
 8001932:	011b      	lsls	r3, r3, #4
 8001934:	4413      	add	r3, r2
 8001936:	3304      	adds	r3, #4
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2208      	movs	r2, #8
 8001946:	611a      	str	r2, [r3, #16]
 8001948:	e00b      	b.n	8001962 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	331b      	adds	r3, #27
 8001952:	011b      	lsls	r3, r3, #4
 8001954:	4413      	add	r3, r2
 8001956:	3304      	adds	r3, #4
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 020f 	and.w	r2, r3, #15
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	331b      	adds	r3, #27
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	4413      	add	r3, r2
 800196e:	3304      	adds	r3, #4
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	0a1b      	lsrs	r3, r3, #8
 8001974:	b2da      	uxtb	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	331b      	adds	r3, #27
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	4413      	add	r3, r2
 8001986:	3304      	adds	r3, #4
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	0c1b      	lsrs	r3, r3, #16
 800198c:	b29a      	uxth	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	4413      	add	r3, r2
 800199c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	0a1a      	lsrs	r2, r3, #8
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	3301      	adds	r3, #1
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	4413      	add	r3, r2
 80019cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	0c1a      	lsrs	r2, r3, #16
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	3302      	adds	r3, #2
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	011b      	lsls	r3, r3, #4
 80019e4:	4413      	add	r3, r2
 80019e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	0e1a      	lsrs	r2, r3, #24
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	3303      	adds	r3, #3
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	4413      	add	r3, r2
 8001a00:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	4413      	add	r3, r2
 8001a18:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	0a1a      	lsrs	r2, r3, #8
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	3305      	adds	r3, #5
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	4413      	add	r3, r2
 8001a32:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	0c1a      	lsrs	r2, r3, #16
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	3306      	adds	r3, #6
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	0e1a      	lsrs	r2, r3, #24
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	3307      	adds	r3, #7
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d108      	bne.n	8001a74 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f042 0220 	orr.w	r2, r2, #32
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	e007      	b.n	8001a84 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0220 	orr.w	r2, r2, #32
 8001a82:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	e006      	b.n	8001a96 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
  }
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	371c      	adds	r7, #28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d002      	beq.n	8001abe <HAL_CAN_ActivateNotification+0x1e>
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d109      	bne.n	8001ad2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6959      	ldr	r1, [r3, #20]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e006      	b.n	8001ae0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
  }
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr

08001aea <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b08a      	sub	sp, #40	; 0x28
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d07c      	beq.n	8001c2a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d023      	beq.n	8001b82 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f983 	bl	8001e58 <HAL_CAN_TxMailbox0CompleteCallback>
 8001b52:	e016      	b.n	8001b82 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d004      	beq.n	8001b68 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
 8001b66:	e00c      	b.n	8001b82 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d004      	beq.n	8001b7c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7a:	e002      	b.n	8001b82 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f986 	bl	8001e8e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d024      	beq.n	8001bd6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f962 	bl	8001e6a <HAL_CAN_TxMailbox1CompleteCallback>
 8001ba6:	e016      	b.n	8001bd6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d004      	beq.n	8001bbc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bba:	e00c      	b.n	8001bd6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d004      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bce:	e002      	b.n	8001bd6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f965 	bl	8001ea0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d024      	beq.n	8001c2a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001be8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f941 	bl	8001e7c <HAL_CAN_TxMailbox2CompleteCallback>
 8001bfa:	e016      	b.n	8001c2a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d004      	beq.n	8001c10 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0e:	e00c      	b.n	8001c2a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d004      	beq.n	8001c24 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
 8001c22:	e002      	b.n	8001c2a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f944 	bl	8001eb2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00c      	beq.n	8001c4e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f003 0310 	and.w	r3, r3, #16
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d007      	beq.n	8001c4e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2210      	movs	r2, #16
 8001c4c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c4e:	6a3b      	ldr	r3, [r7, #32]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00b      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d006      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2208      	movs	r2, #8
 8001c68:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f933 	bl	8001ed6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d009      	beq.n	8001c8e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d002      	beq.n	8001c8e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f91b 	bl	8001ec4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c8e:	6a3b      	ldr	r3, [r7, #32]
 8001c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00c      	beq.n	8001cb2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d007      	beq.n	8001cb2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2210      	movs	r2, #16
 8001cb0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	f003 0320 	and.w	r3, r3, #32
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00b      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d006      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2208      	movs	r2, #8
 8001ccc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f90a 	bl	8001ee8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d009      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d002      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7fe fb09 	bl	8000304 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00b      	beq.n	8001d14 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f003 0310 	and.w	r3, r3, #16
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d006      	beq.n	8001d14 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2210      	movs	r2, #16
 8001d0c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f8f3 	bl	8001efa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00b      	beq.n	8001d36 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d006      	beq.n	8001d36 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2208      	movs	r2, #8
 8001d2e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f8eb 	bl	8001f0c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d07b      	beq.n	8001e38 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d072      	beq.n	8001e30 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d008      	beq.n	8001d82 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d008      	beq.n	8001d9e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d043      	beq.n	8001e30 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d03e      	beq.n	8001e30 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001db8:	2b60      	cmp	r3, #96	; 0x60
 8001dba:	d02b      	beq.n	8001e14 <HAL_CAN_IRQHandler+0x32a>
 8001dbc:	2b60      	cmp	r3, #96	; 0x60
 8001dbe:	d82e      	bhi.n	8001e1e <HAL_CAN_IRQHandler+0x334>
 8001dc0:	2b50      	cmp	r3, #80	; 0x50
 8001dc2:	d022      	beq.n	8001e0a <HAL_CAN_IRQHandler+0x320>
 8001dc4:	2b50      	cmp	r3, #80	; 0x50
 8001dc6:	d82a      	bhi.n	8001e1e <HAL_CAN_IRQHandler+0x334>
 8001dc8:	2b40      	cmp	r3, #64	; 0x40
 8001dca:	d019      	beq.n	8001e00 <HAL_CAN_IRQHandler+0x316>
 8001dcc:	2b40      	cmp	r3, #64	; 0x40
 8001dce:	d826      	bhi.n	8001e1e <HAL_CAN_IRQHandler+0x334>
 8001dd0:	2b30      	cmp	r3, #48	; 0x30
 8001dd2:	d010      	beq.n	8001df6 <HAL_CAN_IRQHandler+0x30c>
 8001dd4:	2b30      	cmp	r3, #48	; 0x30
 8001dd6:	d822      	bhi.n	8001e1e <HAL_CAN_IRQHandler+0x334>
 8001dd8:	2b10      	cmp	r3, #16
 8001dda:	d002      	beq.n	8001de2 <HAL_CAN_IRQHandler+0x2f8>
 8001ddc:	2b20      	cmp	r3, #32
 8001dde:	d005      	beq.n	8001dec <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001de0:	e01d      	b.n	8001e1e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	f043 0308 	orr.w	r3, r3, #8
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dea:	e019      	b.n	8001e20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	f043 0310 	orr.w	r3, r3, #16
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001df4:	e014      	b.n	8001e20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	f043 0320 	orr.w	r3, r3, #32
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dfe:	e00f      	b.n	8001e20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e08:	e00a      	b.n	8001e20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e12:	e005      	b.n	8001e20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e1c:	e000      	b.n	8001e20 <HAL_CAN_IRQHandler+0x336>
            break;
 8001e1e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699a      	ldr	r2, [r3, #24]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e2e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2204      	movs	r2, #4
 8001e36:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d008      	beq.n	8001e50 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f867 	bl	8001f1e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e50:	bf00      	nop
 8001e52:	3728      	adds	r7, #40	; 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr

08001e6a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr

08001e8e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr

08001eb2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr

08001ed6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr

08001efa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr

08001f1e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f62:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	60d3      	str	r3, [r2, #12]
}
 8001f68:	bf00      	nop
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <__NVIC_GetPriorityGrouping+0x18>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	f003 0307 	and.w	r3, r3, #7
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	db0b      	blt.n	8001fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	f003 021f 	and.w	r2, r3, #31
 8001fac:	4906      	ldr	r1, [pc, #24]	; (8001fc8 <__NVIC_EnableIRQ+0x34>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr
 8001fc8:	e000e100 	.word	0xe000e100

08001fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	6039      	str	r1, [r7, #0]
 8001fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	db0a      	blt.n	8001ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	490c      	ldr	r1, [pc, #48]	; (8002018 <__NVIC_SetPriority+0x4c>)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	0112      	lsls	r2, r2, #4
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	440b      	add	r3, r1
 8001ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff4:	e00a      	b.n	800200c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4908      	ldr	r1, [pc, #32]	; (800201c <__NVIC_SetPriority+0x50>)
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	3b04      	subs	r3, #4
 8002004:	0112      	lsls	r2, r2, #4
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	440b      	add	r3, r1
 800200a:	761a      	strb	r2, [r3, #24]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000e100 	.word	0xe000e100
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002020:	b480      	push	{r7}
 8002022:	b089      	sub	sp, #36	; 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f1c3 0307 	rsb	r3, r3, #7
 800203a:	2b04      	cmp	r3, #4
 800203c:	bf28      	it	cs
 800203e:	2304      	movcs	r3, #4
 8002040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3304      	adds	r3, #4
 8002046:	2b06      	cmp	r3, #6
 8002048:	d902      	bls.n	8002050 <NVIC_EncodePriority+0x30>
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3b03      	subs	r3, #3
 800204e:	e000      	b.n	8002052 <NVIC_EncodePriority+0x32>
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	f04f 32ff 	mov.w	r2, #4294967295
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43da      	mvns	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	401a      	ands	r2, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002068:	f04f 31ff 	mov.w	r1, #4294967295
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	43d9      	mvns	r1, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	4313      	orrs	r3, r2
         );
}
 800207a:	4618      	mov	r0, r3
 800207c:	3724      	adds	r7, #36	; 0x24
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr

08002084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3b01      	subs	r3, #1
 8002090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002094:	d301      	bcc.n	800209a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002096:	2301      	movs	r3, #1
 8002098:	e00f      	b.n	80020ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800209a:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <SysTick_Config+0x40>)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3b01      	subs	r3, #1
 80020a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020a2:	210f      	movs	r1, #15
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295
 80020a8:	f7ff ff90 	bl	8001fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <SysTick_Config+0x40>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020b2:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <SysTick_Config+0x40>)
 80020b4:	2207      	movs	r2, #7
 80020b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	e000e010 	.word	0xe000e010

080020c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff ff2d 	bl	8001f30 <__NVIC_SetPriorityGrouping>
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020de:	b580      	push	{r7, lr}
 80020e0:	b086      	sub	sp, #24
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	4603      	mov	r3, r0
 80020e6:	60b9      	str	r1, [r7, #8]
 80020e8:	607a      	str	r2, [r7, #4]
 80020ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f0:	f7ff ff42 	bl	8001f78 <__NVIC_GetPriorityGrouping>
 80020f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	68b9      	ldr	r1, [r7, #8]
 80020fa:	6978      	ldr	r0, [r7, #20]
 80020fc:	f7ff ff90 	bl	8002020 <NVIC_EncodePriority>
 8002100:	4602      	mov	r2, r0
 8002102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002106:	4611      	mov	r1, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff5f 	bl	8001fcc <__NVIC_SetPriority>
}
 800210e:	bf00      	nop
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	4603      	mov	r3, r0
 800211e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff35 	bl	8001f94 <__NVIC_EnableIRQ>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff ffa2 	bl	8002084 <SysTick_Config>
 8002140:	4603      	mov	r3, r0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800214a:	b480      	push	{r7}
 800214c:	b085      	sub	sp, #20
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d008      	beq.n	8002174 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2204      	movs	r2, #4
 8002166:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e020      	b.n	80021b6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 020e 	bic.w	r2, r2, #14
 8002182:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0201 	bic.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219c:	2101      	movs	r1, #1
 800219e:	fa01 f202 	lsl.w	r2, r1, r2
 80021a2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr

080021c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d005      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2204      	movs	r2, #4
 80021dc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	73fb      	strb	r3, [r7, #15]
 80021e2:	e051      	b.n	8002288 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 020e 	bic.w	r2, r2, #14
 80021f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0201 	bic.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a22      	ldr	r2, [pc, #136]	; (8002294 <HAL_DMA_Abort_IT+0xd4>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d029      	beq.n	8002262 <HAL_DMA_Abort_IT+0xa2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a21      	ldr	r2, [pc, #132]	; (8002298 <HAL_DMA_Abort_IT+0xd8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d022      	beq.n	800225e <HAL_DMA_Abort_IT+0x9e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a1f      	ldr	r2, [pc, #124]	; (800229c <HAL_DMA_Abort_IT+0xdc>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d01a      	beq.n	8002258 <HAL_DMA_Abort_IT+0x98>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a1e      	ldr	r2, [pc, #120]	; (80022a0 <HAL_DMA_Abort_IT+0xe0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d012      	beq.n	8002252 <HAL_DMA_Abort_IT+0x92>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a1c      	ldr	r2, [pc, #112]	; (80022a4 <HAL_DMA_Abort_IT+0xe4>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00a      	beq.n	800224c <HAL_DMA_Abort_IT+0x8c>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a1b      	ldr	r2, [pc, #108]	; (80022a8 <HAL_DMA_Abort_IT+0xe8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d102      	bne.n	8002246 <HAL_DMA_Abort_IT+0x86>
 8002240:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002244:	e00e      	b.n	8002264 <HAL_DMA_Abort_IT+0xa4>
 8002246:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800224a:	e00b      	b.n	8002264 <HAL_DMA_Abort_IT+0xa4>
 800224c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002250:	e008      	b.n	8002264 <HAL_DMA_Abort_IT+0xa4>
 8002252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002256:	e005      	b.n	8002264 <HAL_DMA_Abort_IT+0xa4>
 8002258:	f44f 7380 	mov.w	r3, #256	; 0x100
 800225c:	e002      	b.n	8002264 <HAL_DMA_Abort_IT+0xa4>
 800225e:	2310      	movs	r3, #16
 8002260:	e000      	b.n	8002264 <HAL_DMA_Abort_IT+0xa4>
 8002262:	2301      	movs	r3, #1
 8002264:	4a11      	ldr	r2, [pc, #68]	; (80022ac <HAL_DMA_Abort_IT+0xec>)
 8002266:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	4798      	blx	r3
    } 
  }
  return status;
 8002288:	7bfb      	ldrb	r3, [r7, #15]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40020008 	.word	0x40020008
 8002298:	4002001c 	.word	0x4002001c
 800229c:	40020030 	.word	0x40020030
 80022a0:	40020044 	.word	0x40020044
 80022a4:	40020058 	.word	0x40020058
 80022a8:	4002006c 	.word	0x4002006c
 80022ac:	40020000 	.word	0x40020000

080022b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b08b      	sub	sp, #44	; 0x2c
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ba:	2300      	movs	r3, #0
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022be:	2300      	movs	r3, #0
 80022c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c2:	e169      	b.n	8002598 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022c4:	2201      	movs	r2, #1
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	69fa      	ldr	r2, [r7, #28]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	429a      	cmp	r2, r3
 80022de:	f040 8158 	bne.w	8002592 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	4a9a      	ldr	r2, [pc, #616]	; (8002550 <HAL_GPIO_Init+0x2a0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d05e      	beq.n	80023aa <HAL_GPIO_Init+0xfa>
 80022ec:	4a98      	ldr	r2, [pc, #608]	; (8002550 <HAL_GPIO_Init+0x2a0>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d875      	bhi.n	80023de <HAL_GPIO_Init+0x12e>
 80022f2:	4a98      	ldr	r2, [pc, #608]	; (8002554 <HAL_GPIO_Init+0x2a4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d058      	beq.n	80023aa <HAL_GPIO_Init+0xfa>
 80022f8:	4a96      	ldr	r2, [pc, #600]	; (8002554 <HAL_GPIO_Init+0x2a4>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d86f      	bhi.n	80023de <HAL_GPIO_Init+0x12e>
 80022fe:	4a96      	ldr	r2, [pc, #600]	; (8002558 <HAL_GPIO_Init+0x2a8>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d052      	beq.n	80023aa <HAL_GPIO_Init+0xfa>
 8002304:	4a94      	ldr	r2, [pc, #592]	; (8002558 <HAL_GPIO_Init+0x2a8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d869      	bhi.n	80023de <HAL_GPIO_Init+0x12e>
 800230a:	4a94      	ldr	r2, [pc, #592]	; (800255c <HAL_GPIO_Init+0x2ac>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d04c      	beq.n	80023aa <HAL_GPIO_Init+0xfa>
 8002310:	4a92      	ldr	r2, [pc, #584]	; (800255c <HAL_GPIO_Init+0x2ac>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d863      	bhi.n	80023de <HAL_GPIO_Init+0x12e>
 8002316:	4a92      	ldr	r2, [pc, #584]	; (8002560 <HAL_GPIO_Init+0x2b0>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d046      	beq.n	80023aa <HAL_GPIO_Init+0xfa>
 800231c:	4a90      	ldr	r2, [pc, #576]	; (8002560 <HAL_GPIO_Init+0x2b0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d85d      	bhi.n	80023de <HAL_GPIO_Init+0x12e>
 8002322:	2b12      	cmp	r3, #18
 8002324:	d82a      	bhi.n	800237c <HAL_GPIO_Init+0xcc>
 8002326:	2b12      	cmp	r3, #18
 8002328:	d859      	bhi.n	80023de <HAL_GPIO_Init+0x12e>
 800232a:	a201      	add	r2, pc, #4	; (adr r2, 8002330 <HAL_GPIO_Init+0x80>)
 800232c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002330:	080023ab 	.word	0x080023ab
 8002334:	08002385 	.word	0x08002385
 8002338:	08002397 	.word	0x08002397
 800233c:	080023d9 	.word	0x080023d9
 8002340:	080023df 	.word	0x080023df
 8002344:	080023df 	.word	0x080023df
 8002348:	080023df 	.word	0x080023df
 800234c:	080023df 	.word	0x080023df
 8002350:	080023df 	.word	0x080023df
 8002354:	080023df 	.word	0x080023df
 8002358:	080023df 	.word	0x080023df
 800235c:	080023df 	.word	0x080023df
 8002360:	080023df 	.word	0x080023df
 8002364:	080023df 	.word	0x080023df
 8002368:	080023df 	.word	0x080023df
 800236c:	080023df 	.word	0x080023df
 8002370:	080023df 	.word	0x080023df
 8002374:	0800238d 	.word	0x0800238d
 8002378:	080023a1 	.word	0x080023a1
 800237c:	4a79      	ldr	r2, [pc, #484]	; (8002564 <HAL_GPIO_Init+0x2b4>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d013      	beq.n	80023aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002382:	e02c      	b.n	80023de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	623b      	str	r3, [r7, #32]
          break;
 800238a:	e029      	b.n	80023e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	3304      	adds	r3, #4
 8002392:	623b      	str	r3, [r7, #32]
          break;
 8002394:	e024      	b.n	80023e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	3308      	adds	r3, #8
 800239c:	623b      	str	r3, [r7, #32]
          break;
 800239e:	e01f      	b.n	80023e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	330c      	adds	r3, #12
 80023a6:	623b      	str	r3, [r7, #32]
          break;
 80023a8:	e01a      	b.n	80023e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d102      	bne.n	80023b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023b2:	2304      	movs	r3, #4
 80023b4:	623b      	str	r3, [r7, #32]
          break;
 80023b6:	e013      	b.n	80023e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d105      	bne.n	80023cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023c0:	2308      	movs	r3, #8
 80023c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69fa      	ldr	r2, [r7, #28]
 80023c8:	611a      	str	r2, [r3, #16]
          break;
 80023ca:	e009      	b.n	80023e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023cc:	2308      	movs	r3, #8
 80023ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	615a      	str	r2, [r3, #20]
          break;
 80023d6:	e003      	b.n	80023e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023d8:	2300      	movs	r3, #0
 80023da:	623b      	str	r3, [r7, #32]
          break;
 80023dc:	e000      	b.n	80023e0 <HAL_GPIO_Init+0x130>
          break;
 80023de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	2bff      	cmp	r3, #255	; 0xff
 80023e4:	d801      	bhi.n	80023ea <HAL_GPIO_Init+0x13a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	e001      	b.n	80023ee <HAL_GPIO_Init+0x13e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3304      	adds	r3, #4
 80023ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	2bff      	cmp	r3, #255	; 0xff
 80023f4:	d802      	bhi.n	80023fc <HAL_GPIO_Init+0x14c>
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	e002      	b.n	8002402 <HAL_GPIO_Init+0x152>
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	3b08      	subs	r3, #8
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	210f      	movs	r1, #15
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	401a      	ands	r2, r3
 8002414:	6a39      	ldr	r1, [r7, #32]
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	431a      	orrs	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 80b1 	beq.w	8002592 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002430:	4b4d      	ldr	r3, [pc, #308]	; (8002568 <HAL_GPIO_Init+0x2b8>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	4a4c      	ldr	r2, [pc, #304]	; (8002568 <HAL_GPIO_Init+0x2b8>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6193      	str	r3, [r2, #24]
 800243c:	4b4a      	ldr	r3, [pc, #296]	; (8002568 <HAL_GPIO_Init+0x2b8>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002448:	4a48      	ldr	r2, [pc, #288]	; (800256c <HAL_GPIO_Init+0x2bc>)
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	089b      	lsrs	r3, r3, #2
 800244e:	3302      	adds	r3, #2
 8002450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002454:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	220f      	movs	r2, #15
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4013      	ands	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a40      	ldr	r2, [pc, #256]	; (8002570 <HAL_GPIO_Init+0x2c0>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d013      	beq.n	800249c <HAL_GPIO_Init+0x1ec>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a3f      	ldr	r2, [pc, #252]	; (8002574 <HAL_GPIO_Init+0x2c4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d00d      	beq.n	8002498 <HAL_GPIO_Init+0x1e8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a3e      	ldr	r2, [pc, #248]	; (8002578 <HAL_GPIO_Init+0x2c8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d007      	beq.n	8002494 <HAL_GPIO_Init+0x1e4>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a3d      	ldr	r2, [pc, #244]	; (800257c <HAL_GPIO_Init+0x2cc>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d101      	bne.n	8002490 <HAL_GPIO_Init+0x1e0>
 800248c:	2303      	movs	r3, #3
 800248e:	e006      	b.n	800249e <HAL_GPIO_Init+0x1ee>
 8002490:	2304      	movs	r3, #4
 8002492:	e004      	b.n	800249e <HAL_GPIO_Init+0x1ee>
 8002494:	2302      	movs	r3, #2
 8002496:	e002      	b.n	800249e <HAL_GPIO_Init+0x1ee>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <HAL_GPIO_Init+0x1ee>
 800249c:	2300      	movs	r3, #0
 800249e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a0:	f002 0203 	and.w	r2, r2, #3
 80024a4:	0092      	lsls	r2, r2, #2
 80024a6:	4093      	lsls	r3, r2
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024ae:	492f      	ldr	r1, [pc, #188]	; (800256c <HAL_GPIO_Init+0x2bc>)
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	089b      	lsrs	r3, r3, #2
 80024b4:	3302      	adds	r3, #2
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d006      	beq.n	80024d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024c8:	4b2d      	ldr	r3, [pc, #180]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	492c      	ldr	r1, [pc, #176]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	608b      	str	r3, [r1, #8]
 80024d4:	e006      	b.n	80024e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024d6:	4b2a      	ldr	r3, [pc, #168]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	43db      	mvns	r3, r3
 80024de:	4928      	ldr	r1, [pc, #160]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d006      	beq.n	80024fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024f0:	4b23      	ldr	r3, [pc, #140]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	4922      	ldr	r1, [pc, #136]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	60cb      	str	r3, [r1, #12]
 80024fc:	e006      	b.n	800250c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024fe:	4b20      	ldr	r3, [pc, #128]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	43db      	mvns	r3, r3
 8002506:	491e      	ldr	r1, [pc, #120]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 8002508:	4013      	ands	r3, r2
 800250a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d006      	beq.n	8002526 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002518:	4b19      	ldr	r3, [pc, #100]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	4918      	ldr	r1, [pc, #96]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	604b      	str	r3, [r1, #4]
 8002524:	e006      	b.n	8002534 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002526:	4b16      	ldr	r3, [pc, #88]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	43db      	mvns	r3, r3
 800252e:	4914      	ldr	r1, [pc, #80]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 8002530:	4013      	ands	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d021      	beq.n	8002584 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002540:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	490e      	ldr	r1, [pc, #56]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	600b      	str	r3, [r1, #0]
 800254c:	e021      	b.n	8002592 <HAL_GPIO_Init+0x2e2>
 800254e:	bf00      	nop
 8002550:	10320000 	.word	0x10320000
 8002554:	10310000 	.word	0x10310000
 8002558:	10220000 	.word	0x10220000
 800255c:	10210000 	.word	0x10210000
 8002560:	10120000 	.word	0x10120000
 8002564:	10110000 	.word	0x10110000
 8002568:	40021000 	.word	0x40021000
 800256c:	40010000 	.word	0x40010000
 8002570:	40010800 	.word	0x40010800
 8002574:	40010c00 	.word	0x40010c00
 8002578:	40011000 	.word	0x40011000
 800257c:	40011400 	.word	0x40011400
 8002580:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_GPIO_Init+0x304>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	43db      	mvns	r3, r3
 800258c:	4909      	ldr	r1, [pc, #36]	; (80025b4 <HAL_GPIO_Init+0x304>)
 800258e:	4013      	ands	r3, r2
 8002590:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	3301      	adds	r3, #1
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	fa22 f303 	lsr.w	r3, r2, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f47f ae8e 	bne.w	80022c4 <HAL_GPIO_Init+0x14>
  }
}
 80025a8:	bf00      	nop
 80025aa:	bf00      	nop
 80025ac:	372c      	adds	r7, #44	; 0x2c
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	40010400 	.word	0x40010400

080025b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	887b      	ldrh	r3, [r7, #2]
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d002      	beq.n	80025d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
 80025d4:	e001      	b.n	80025da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025d6:	2300      	movs	r3, #0
 80025d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025da:	7bfb      	ldrb	r3, [r7, #15]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr

080025e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	460b      	mov	r3, r1
 80025f0:	807b      	strh	r3, [r7, #2]
 80025f2:	4613      	mov	r3, r2
 80025f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025f6:	787b      	ldrb	r3, [r7, #1]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025fc:	887a      	ldrh	r2, [r7, #2]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002602:	e003      	b.n	800260c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002604:	887b      	ldrh	r3, [r7, #2]
 8002606:	041a      	lsls	r2, r3, #16
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	611a      	str	r2, [r3, #16]
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr
	...

08002618 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e272      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 8087 	beq.w	8002746 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002638:	4b92      	ldr	r3, [pc, #584]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b04      	cmp	r3, #4
 8002642:	d00c      	beq.n	800265e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002644:	4b8f      	ldr	r3, [pc, #572]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	2b08      	cmp	r3, #8
 800264e:	d112      	bne.n	8002676 <HAL_RCC_OscConfig+0x5e>
 8002650:	4b8c      	ldr	r3, [pc, #560]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265c:	d10b      	bne.n	8002676 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265e:	4b89      	ldr	r3, [pc, #548]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d06c      	beq.n	8002744 <HAL_RCC_OscConfig+0x12c>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d168      	bne.n	8002744 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e24c      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267e:	d106      	bne.n	800268e <HAL_RCC_OscConfig+0x76>
 8002680:	4b80      	ldr	r3, [pc, #512]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a7f      	ldr	r2, [pc, #508]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	e02e      	b.n	80026ec <HAL_RCC_OscConfig+0xd4>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x98>
 8002696:	4b7b      	ldr	r3, [pc, #492]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a7a      	ldr	r2, [pc, #488]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 800269c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	4b78      	ldr	r3, [pc, #480]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a77      	ldr	r2, [pc, #476]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e01d      	b.n	80026ec <HAL_RCC_OscConfig+0xd4>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026b8:	d10c      	bne.n	80026d4 <HAL_RCC_OscConfig+0xbc>
 80026ba:	4b72      	ldr	r3, [pc, #456]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a71      	ldr	r2, [pc, #452]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	4b6f      	ldr	r3, [pc, #444]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a6e      	ldr	r2, [pc, #440]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e00b      	b.n	80026ec <HAL_RCC_OscConfig+0xd4>
 80026d4:	4b6b      	ldr	r3, [pc, #428]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a6a      	ldr	r2, [pc, #424]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	4b68      	ldr	r3, [pc, #416]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a67      	ldr	r2, [pc, #412]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d013      	beq.n	800271c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fdae 	bl	8001254 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026fc:	f7fe fdaa 	bl	8001254 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b64      	cmp	r3, #100	; 0x64
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e200      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	4b5d      	ldr	r3, [pc, #372]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0xe4>
 800271a:	e014      	b.n	8002746 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7fe fd9a 	bl	8001254 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002724:	f7fe fd96 	bl	8001254 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	; 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e1ec      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002736:	4b53      	ldr	r3, [pc, #332]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x10c>
 8002742:	e000      	b.n	8002746 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d063      	beq.n	800281a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002752:	4b4c      	ldr	r3, [pc, #304]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00b      	beq.n	8002776 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800275e:	4b49      	ldr	r3, [pc, #292]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b08      	cmp	r3, #8
 8002768:	d11c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x18c>
 800276a:	4b46      	ldr	r3, [pc, #280]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d116      	bne.n	80027a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002776:	4b43      	ldr	r3, [pc, #268]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <HAL_RCC_OscConfig+0x176>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d001      	beq.n	800278e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e1c0      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278e:	4b3d      	ldr	r3, [pc, #244]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4939      	ldr	r1, [pc, #228]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a2:	e03a      	b.n	800281a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d020      	beq.n	80027ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ac:	4b36      	ldr	r3, [pc, #216]	; (8002888 <HAL_RCC_OscConfig+0x270>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b2:	f7fe fd4f 	bl	8001254 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ba:	f7fe fd4b 	bl	8001254 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e1a1      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027cc:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d8:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4927      	ldr	r1, [pc, #156]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	600b      	str	r3, [r1, #0]
 80027ec:	e015      	b.n	800281a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ee:	4b26      	ldr	r3, [pc, #152]	; (8002888 <HAL_RCC_OscConfig+0x270>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7fe fd2e 	bl	8001254 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027fc:	f7fe fd2a 	bl	8001254 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e180      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280e:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d03a      	beq.n	800289c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d019      	beq.n	8002862 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800282e:	4b17      	ldr	r3, [pc, #92]	; (800288c <HAL_RCC_OscConfig+0x274>)
 8002830:	2201      	movs	r2, #1
 8002832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002834:	f7fe fd0e 	bl	8001254 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800283c:	f7fe fd0a 	bl	8001254 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e160      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284e:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800285a:	2001      	movs	r0, #1
 800285c:	f000 face 	bl	8002dfc <RCC_Delay>
 8002860:	e01c      	b.n	800289c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002862:	4b0a      	ldr	r3, [pc, #40]	; (800288c <HAL_RCC_OscConfig+0x274>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002868:	f7fe fcf4 	bl	8001254 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286e:	e00f      	b.n	8002890 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002870:	f7fe fcf0 	bl	8001254 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d908      	bls.n	8002890 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e146      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
 8002888:	42420000 	.word	0x42420000
 800288c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002890:	4b92      	ldr	r3, [pc, #584]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1e9      	bne.n	8002870 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80a6 	beq.w	80029f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028aa:	2300      	movs	r3, #0
 80028ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ae:	4b8b      	ldr	r3, [pc, #556]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10d      	bne.n	80028d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ba:	4b88      	ldr	r3, [pc, #544]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	4a87      	ldr	r2, [pc, #540]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c4:	61d3      	str	r3, [r2, #28]
 80028c6:	4b85      	ldr	r3, [pc, #532]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d2:	2301      	movs	r3, #1
 80028d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d6:	4b82      	ldr	r3, [pc, #520]	; (8002ae0 <HAL_RCC_OscConfig+0x4c8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d118      	bne.n	8002914 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e2:	4b7f      	ldr	r3, [pc, #508]	; (8002ae0 <HAL_RCC_OscConfig+0x4c8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a7e      	ldr	r2, [pc, #504]	; (8002ae0 <HAL_RCC_OscConfig+0x4c8>)
 80028e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ee:	f7fe fcb1 	bl	8001254 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f6:	f7fe fcad 	bl	8001254 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b64      	cmp	r3, #100	; 0x64
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e103      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002908:	4b75      	ldr	r3, [pc, #468]	; (8002ae0 <HAL_RCC_OscConfig+0x4c8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d106      	bne.n	800292a <HAL_RCC_OscConfig+0x312>
 800291c:	4b6f      	ldr	r3, [pc, #444]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	4a6e      	ldr	r2, [pc, #440]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	6213      	str	r3, [r2, #32]
 8002928:	e02d      	b.n	8002986 <HAL_RCC_OscConfig+0x36e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10c      	bne.n	800294c <HAL_RCC_OscConfig+0x334>
 8002932:	4b6a      	ldr	r3, [pc, #424]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	4a69      	ldr	r2, [pc, #420]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	6213      	str	r3, [r2, #32]
 800293e:	4b67      	ldr	r3, [pc, #412]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	4a66      	ldr	r2, [pc, #408]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002944:	f023 0304 	bic.w	r3, r3, #4
 8002948:	6213      	str	r3, [r2, #32]
 800294a:	e01c      	b.n	8002986 <HAL_RCC_OscConfig+0x36e>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	2b05      	cmp	r3, #5
 8002952:	d10c      	bne.n	800296e <HAL_RCC_OscConfig+0x356>
 8002954:	4b61      	ldr	r3, [pc, #388]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	4a60      	ldr	r2, [pc, #384]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 800295a:	f043 0304 	orr.w	r3, r3, #4
 800295e:	6213      	str	r3, [r2, #32]
 8002960:	4b5e      	ldr	r3, [pc, #376]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	4a5d      	ldr	r2, [pc, #372]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6213      	str	r3, [r2, #32]
 800296c:	e00b      	b.n	8002986 <HAL_RCC_OscConfig+0x36e>
 800296e:	4b5b      	ldr	r3, [pc, #364]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	4a5a      	ldr	r2, [pc, #360]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002974:	f023 0301 	bic.w	r3, r3, #1
 8002978:	6213      	str	r3, [r2, #32]
 800297a:	4b58      	ldr	r3, [pc, #352]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4a57      	ldr	r2, [pc, #348]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002980:	f023 0304 	bic.w	r3, r3, #4
 8002984:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d015      	beq.n	80029ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298e:	f7fe fc61 	bl	8001254 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002994:	e00a      	b.n	80029ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002996:	f7fe fc5d 	bl	8001254 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e0b1      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ac:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0ee      	beq.n	8002996 <HAL_RCC_OscConfig+0x37e>
 80029b8:	e014      	b.n	80029e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ba:	f7fe fc4b 	bl	8001254 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c0:	e00a      	b.n	80029d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c2:	f7fe fc47 	bl	8001254 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e09b      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d8:	4b40      	ldr	r3, [pc, #256]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1ee      	bne.n	80029c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029e4:	7dfb      	ldrb	r3, [r7, #23]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d105      	bne.n	80029f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ea:	4b3c      	ldr	r3, [pc, #240]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	4a3b      	ldr	r2, [pc, #236]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80029f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 8087 	beq.w	8002b0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a00:	4b36      	ldr	r3, [pc, #216]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 030c 	and.w	r3, r3, #12
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d061      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d146      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a14:	4b33      	ldr	r3, [pc, #204]	; (8002ae4 <HAL_RCC_OscConfig+0x4cc>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7fe fc1b 	bl	8001254 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a22:	f7fe fc17 	bl	8001254 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e06d      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a34:	4b29      	ldr	r3, [pc, #164]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f0      	bne.n	8002a22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a48:	d108      	bne.n	8002a5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a4a:	4b24      	ldr	r3, [pc, #144]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	4921      	ldr	r1, [pc, #132]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a5c:	4b1f      	ldr	r3, [pc, #124]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a19      	ldr	r1, [r3, #32]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	491b      	ldr	r1, [pc, #108]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a74:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <HAL_RCC_OscConfig+0x4cc>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7a:	f7fe fbeb 	bl	8001254 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a82:	f7fe fbe7 	bl	8001254 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e03d      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a94:	4b11      	ldr	r3, [pc, #68]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_OscConfig+0x46a>
 8002aa0:	e035      	b.n	8002b0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa2:	4b10      	ldr	r3, [pc, #64]	; (8002ae4 <HAL_RCC_OscConfig+0x4cc>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7fe fbd4 	bl	8001254 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7fe fbd0 	bl	8001254 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e026      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x498>
 8002ace:	e01e      	b.n	8002b0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d107      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e019      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40007000 	.word	0x40007000
 8002ae4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_RCC_OscConfig+0x500>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d106      	bne.n	8002b0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d001      	beq.n	8002b0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40021000 	.word	0x40021000

08002b1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0d0      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b30:	4b6a      	ldr	r3, [pc, #424]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d910      	bls.n	8002b60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b67      	ldr	r3, [pc, #412]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 0207 	bic.w	r2, r3, #7
 8002b46:	4965      	ldr	r1, [pc, #404]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b63      	ldr	r3, [pc, #396]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0b8      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d020      	beq.n	8002bae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b78:	4b59      	ldr	r3, [pc, #356]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4a58      	ldr	r2, [pc, #352]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b90:	4b53      	ldr	r3, [pc, #332]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4a52      	ldr	r2, [pc, #328]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b9c:	4b50      	ldr	r3, [pc, #320]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	494d      	ldr	r1, [pc, #308]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d040      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d107      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc2:	4b47      	ldr	r3, [pc, #284]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d115      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e07f      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d107      	bne.n	8002bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bda:	4b41      	ldr	r3, [pc, #260]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d109      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e073      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bea:	4b3d      	ldr	r3, [pc, #244]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e06b      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bfa:	4b39      	ldr	r3, [pc, #228]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f023 0203 	bic.w	r2, r3, #3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4936      	ldr	r1, [pc, #216]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c0c:	f7fe fb22 	bl	8001254 <HAL_GetTick>
 8002c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c12:	e00a      	b.n	8002c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c14:	f7fe fb1e 	bl	8001254 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e053      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 020c 	and.w	r2, r3, #12
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d1eb      	bne.n	8002c14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c3c:	4b27      	ldr	r3, [pc, #156]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d210      	bcs.n	8002c6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4a:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 0207 	bic.w	r2, r3, #7
 8002c52:	4922      	ldr	r1, [pc, #136]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5a:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e032      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c78:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4916      	ldr	r1, [pc, #88]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c96:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	490e      	ldr	r1, [pc, #56]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002caa:	f000 f821 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	091b      	lsrs	r3, r3, #4
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	490a      	ldr	r1, [pc, #40]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cbc:	5ccb      	ldrb	r3, [r1, r3]
 8002cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc2:	4a09      	ldr	r2, [pc, #36]	; (8002ce8 <HAL_RCC_ClockConfig+0x1cc>)
 8002cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cc6:	4b09      	ldr	r3, [pc, #36]	; (8002cec <HAL_RCC_ClockConfig+0x1d0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe fa80 	bl	80011d0 <HAL_InitTick>

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40022000 	.word	0x40022000
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	08004bfc 	.word	0x08004bfc
 8002ce8:	20000010 	.word	0x20000010
 8002cec:	20000014 	.word	0x20000014

08002cf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	2300      	movs	r3, #0
 8002d04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d0a:	4b1e      	ldr	r3, [pc, #120]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d002      	beq.n	8002d20 <HAL_RCC_GetSysClockFreq+0x30>
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d003      	beq.n	8002d26 <HAL_RCC_GetSysClockFreq+0x36>
 8002d1e:	e027      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d20:	4b19      	ldr	r3, [pc, #100]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d22:	613b      	str	r3, [r7, #16]
      break;
 8002d24:	e027      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	0c9b      	lsrs	r3, r3, #18
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	4a17      	ldr	r2, [pc, #92]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d30:	5cd3      	ldrb	r3, [r2, r3]
 8002d32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d010      	beq.n	8002d60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d3e:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	0c5b      	lsrs	r3, r3, #17
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	4a11      	ldr	r2, [pc, #68]	; (8002d90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d4a:	5cd3      	ldrb	r3, [r2, r3]
 8002d4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a0d      	ldr	r2, [pc, #52]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d52:	fb03 f202 	mul.w	r2, r3, r2
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	e004      	b.n	8002d6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a0c      	ldr	r2, [pc, #48]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d64:	fb02 f303 	mul.w	r3, r2, r3
 8002d68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	613b      	str	r3, [r7, #16]
      break;
 8002d6e:	e002      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d72:	613b      	str	r3, [r7, #16]
      break;
 8002d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d76:	693b      	ldr	r3, [r7, #16]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	371c      	adds	r7, #28
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000
 8002d88:	007a1200 	.word	0x007a1200
 8002d8c:	08004c14 	.word	0x08004c14
 8002d90:	08004c24 	.word	0x08004c24
 8002d94:	003d0900 	.word	0x003d0900

08002d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d9c:	4b02      	ldr	r3, [pc, #8]	; (8002da8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr
 8002da8:	20000010 	.word	0x20000010

08002dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002db0:	f7ff fff2 	bl	8002d98 <HAL_RCC_GetHCLKFreq>
 8002db4:	4602      	mov	r2, r0
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	0a1b      	lsrs	r3, r3, #8
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	4903      	ldr	r1, [pc, #12]	; (8002dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dc2:	5ccb      	ldrb	r3, [r1, r3]
 8002dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	08004c0c 	.word	0x08004c0c

08002dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dd8:	f7ff ffde 	bl	8002d98 <HAL_RCC_GetHCLKFreq>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	0adb      	lsrs	r3, r3, #11
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	4903      	ldr	r1, [pc, #12]	; (8002df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dea:	5ccb      	ldrb	r3, [r1, r3]
 8002dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40021000 	.word	0x40021000
 8002df8:	08004c0c 	.word	0x08004c0c

08002dfc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e04:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <RCC_Delay+0x34>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a0a      	ldr	r2, [pc, #40]	; (8002e34 <RCC_Delay+0x38>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	0a5b      	lsrs	r3, r3, #9
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	fb02 f303 	mul.w	r3, r2, r3
 8002e16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e18:	bf00      	nop
  }
  while (Delay --);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	1e5a      	subs	r2, r3, #1
 8002e1e:	60fa      	str	r2, [r7, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1f9      	bne.n	8002e18 <RCC_Delay+0x1c>
}
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr
 8002e30:	20000010 	.word	0x20000010
 8002e34:	10624dd3 	.word	0x10624dd3

08002e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e041      	b.n	8002ece <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7fe f87e 	bl	8000f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3304      	adds	r3, #4
 8002e74:	4619      	mov	r1, r3
 8002e76:	4610      	mov	r0, r2
 8002e78:	f000 fa74 	bl	8003364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d001      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e03a      	b.n	8002f66 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a18      	ldr	r2, [pc, #96]	; (8002f70 <HAL_TIM_Base_Start_IT+0x98>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00e      	beq.n	8002f30 <HAL_TIM_Base_Start_IT+0x58>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1a:	d009      	beq.n	8002f30 <HAL_TIM_Base_Start_IT+0x58>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a14      	ldr	r2, [pc, #80]	; (8002f74 <HAL_TIM_Base_Start_IT+0x9c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d004      	beq.n	8002f30 <HAL_TIM_Base_Start_IT+0x58>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a13      	ldr	r2, [pc, #76]	; (8002f78 <HAL_TIM_Base_Start_IT+0xa0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d111      	bne.n	8002f54 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b06      	cmp	r3, #6
 8002f40:	d010      	beq.n	8002f64 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0201 	orr.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f52:	e007      	b.n	8002f64 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr
 8002f70:	40012c00 	.word	0x40012c00
 8002f74:	40000400 	.word	0x40000400
 8002f78:	40000800 	.word	0x40000800

08002f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d122      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d11b      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0202 	mvn.w	r2, #2
 8002fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f9b4 	bl	800332c <HAL_TIM_IC_CaptureCallback>
 8002fc4:	e005      	b.n	8002fd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f9a7 	bl	800331a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f9b6 	bl	800333e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d122      	bne.n	800302c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d11b      	bne.n	800302c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0204 	mvn.w	r2, #4
 8002ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2202      	movs	r2, #2
 8003002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f98a 	bl	800332c <HAL_TIM_IC_CaptureCallback>
 8003018:	e005      	b.n	8003026 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f97d 	bl	800331a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f98c 	bl	800333e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b08      	cmp	r3, #8
 8003038:	d122      	bne.n	8003080 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b08      	cmp	r3, #8
 8003046:	d11b      	bne.n	8003080 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f06f 0208 	mvn.w	r2, #8
 8003050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2204      	movs	r2, #4
 8003056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f960 	bl	800332c <HAL_TIM_IC_CaptureCallback>
 800306c:	e005      	b.n	800307a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f953 	bl	800331a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f962 	bl	800333e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	2b10      	cmp	r3, #16
 800308c:	d122      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b10      	cmp	r3, #16
 800309a:	d11b      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f06f 0210 	mvn.w	r2, #16
 80030a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2208      	movs	r2, #8
 80030aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f936 	bl	800332c <HAL_TIM_IC_CaptureCallback>
 80030c0:	e005      	b.n	80030ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f929 	bl	800331a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f938 	bl	800333e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d10e      	bne.n	8003100 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d107      	bne.n	8003100 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0201 	mvn.w	r2, #1
 80030f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fd fe5e 	bl	8000dbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310a:	2b80      	cmp	r3, #128	; 0x80
 800310c:	d10e      	bne.n	800312c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003118:	2b80      	cmp	r3, #128	; 0x80
 800311a:	d107      	bne.n	800312c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fa7b 	bl	8003622 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003136:	2b40      	cmp	r3, #64	; 0x40
 8003138:	d10e      	bne.n	8003158 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003144:	2b40      	cmp	r3, #64	; 0x40
 8003146:	d107      	bne.n	8003158 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f8fc 	bl	8003350 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b20      	cmp	r3, #32
 8003164:	d10e      	bne.n	8003184 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 0320 	and.w	r3, r3, #32
 8003170:	2b20      	cmp	r3, #32
 8003172:	d107      	bne.n	8003184 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0220 	mvn.w	r2, #32
 800317c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fa46 	bl	8003610 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003184:	bf00      	nop
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_TIM_ConfigClockSource+0x1c>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e0b4      	b.n	8003312 <HAL_TIM_ConfigClockSource+0x186>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031e0:	d03e      	beq.n	8003260 <HAL_TIM_ConfigClockSource+0xd4>
 80031e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031e6:	f200 8087 	bhi.w	80032f8 <HAL_TIM_ConfigClockSource+0x16c>
 80031ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ee:	f000 8086 	beq.w	80032fe <HAL_TIM_ConfigClockSource+0x172>
 80031f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f6:	d87f      	bhi.n	80032f8 <HAL_TIM_ConfigClockSource+0x16c>
 80031f8:	2b70      	cmp	r3, #112	; 0x70
 80031fa:	d01a      	beq.n	8003232 <HAL_TIM_ConfigClockSource+0xa6>
 80031fc:	2b70      	cmp	r3, #112	; 0x70
 80031fe:	d87b      	bhi.n	80032f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003200:	2b60      	cmp	r3, #96	; 0x60
 8003202:	d050      	beq.n	80032a6 <HAL_TIM_ConfigClockSource+0x11a>
 8003204:	2b60      	cmp	r3, #96	; 0x60
 8003206:	d877      	bhi.n	80032f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003208:	2b50      	cmp	r3, #80	; 0x50
 800320a:	d03c      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0xfa>
 800320c:	2b50      	cmp	r3, #80	; 0x50
 800320e:	d873      	bhi.n	80032f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003210:	2b40      	cmp	r3, #64	; 0x40
 8003212:	d058      	beq.n	80032c6 <HAL_TIM_ConfigClockSource+0x13a>
 8003214:	2b40      	cmp	r3, #64	; 0x40
 8003216:	d86f      	bhi.n	80032f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003218:	2b30      	cmp	r3, #48	; 0x30
 800321a:	d064      	beq.n	80032e6 <HAL_TIM_ConfigClockSource+0x15a>
 800321c:	2b30      	cmp	r3, #48	; 0x30
 800321e:	d86b      	bhi.n	80032f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003220:	2b20      	cmp	r3, #32
 8003222:	d060      	beq.n	80032e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003224:	2b20      	cmp	r3, #32
 8003226:	d867      	bhi.n	80032f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003228:	2b00      	cmp	r3, #0
 800322a:	d05c      	beq.n	80032e6 <HAL_TIM_ConfigClockSource+0x15a>
 800322c:	2b10      	cmp	r3, #16
 800322e:	d05a      	beq.n	80032e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003230:	e062      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003242:	f000 f968 	bl	8003516 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003254:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	609a      	str	r2, [r3, #8]
      break;
 800325e:	e04f      	b.n	8003300 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003270:	f000 f951 	bl	8003516 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003282:	609a      	str	r2, [r3, #8]
      break;
 8003284:	e03c      	b.n	8003300 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003292:	461a      	mov	r2, r3
 8003294:	f000 f8c8 	bl	8003428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2150      	movs	r1, #80	; 0x50
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 f91f 	bl	80034e2 <TIM_ITRx_SetConfig>
      break;
 80032a4:	e02c      	b.n	8003300 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032b2:	461a      	mov	r2, r3
 80032b4:	f000 f8e6 	bl	8003484 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2160      	movs	r1, #96	; 0x60
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 f90f 	bl	80034e2 <TIM_ITRx_SetConfig>
      break;
 80032c4:	e01c      	b.n	8003300 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032d2:	461a      	mov	r2, r3
 80032d4:	f000 f8a8 	bl	8003428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2140      	movs	r1, #64	; 0x40
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 f8ff 	bl	80034e2 <TIM_ITRx_SetConfig>
      break;
 80032e4:	e00c      	b.n	8003300 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4619      	mov	r1, r3
 80032f0:	4610      	mov	r0, r2
 80032f2:	f000 f8f6 	bl	80034e2 <TIM_ITRx_SetConfig>
      break;
 80032f6:	e003      	b.n	8003300 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	73fb      	strb	r3, [r7, #15]
      break;
 80032fc:	e000      	b.n	8003300 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003310:	7bfb      	ldrb	r3, [r7, #15]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr

0800333e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr
	...

08003364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a29      	ldr	r2, [pc, #164]	; (800341c <TIM_Base_SetConfig+0xb8>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d00b      	beq.n	8003394 <TIM_Base_SetConfig+0x30>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003382:	d007      	beq.n	8003394 <TIM_Base_SetConfig+0x30>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a26      	ldr	r2, [pc, #152]	; (8003420 <TIM_Base_SetConfig+0xbc>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d003      	beq.n	8003394 <TIM_Base_SetConfig+0x30>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a25      	ldr	r2, [pc, #148]	; (8003424 <TIM_Base_SetConfig+0xc0>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d108      	bne.n	80033a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a1c      	ldr	r2, [pc, #112]	; (800341c <TIM_Base_SetConfig+0xb8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d00b      	beq.n	80033c6 <TIM_Base_SetConfig+0x62>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b4:	d007      	beq.n	80033c6 <TIM_Base_SetConfig+0x62>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a19      	ldr	r2, [pc, #100]	; (8003420 <TIM_Base_SetConfig+0xbc>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d003      	beq.n	80033c6 <TIM_Base_SetConfig+0x62>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a18      	ldr	r2, [pc, #96]	; (8003424 <TIM_Base_SetConfig+0xc0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d108      	bne.n	80033d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a07      	ldr	r2, [pc, #28]	; (800341c <TIM_Base_SetConfig+0xb8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d103      	bne.n	800340c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	691a      	ldr	r2, [r3, #16]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	615a      	str	r2, [r3, #20]
}
 8003412:	bf00      	nop
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr
 800341c:	40012c00 	.word	0x40012c00
 8003420:	40000400 	.word	0x40000400
 8003424:	40000800 	.word	0x40000800

08003428 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	f023 0201 	bic.w	r2, r3, #1
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f023 030a 	bic.w	r3, r3, #10
 8003464:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4313      	orrs	r3, r2
 800346c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	621a      	str	r2, [r3, #32]
}
 800347a:	bf00      	nop
 800347c:	371c      	adds	r7, #28
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr

08003484 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	f023 0210 	bic.w	r2, r3, #16
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	031b      	lsls	r3, r3, #12
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	621a      	str	r2, [r3, #32]
}
 80034d8:	bf00      	nop
 80034da:	371c      	adds	r7, #28
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr

080034e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b085      	sub	sp, #20
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4313      	orrs	r3, r2
 8003500:	f043 0307 	orr.w	r3, r3, #7
 8003504:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	609a      	str	r2, [r3, #8]
}
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr

08003516 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003516:	b480      	push	{r7}
 8003518:	b087      	sub	sp, #28
 800351a:	af00      	add	r7, sp, #0
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	607a      	str	r2, [r7, #4]
 8003522:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003530:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	021a      	lsls	r2, r3, #8
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	431a      	orrs	r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	4313      	orrs	r3, r2
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	4313      	orrs	r3, r2
 8003542:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	609a      	str	r2, [r3, #8]
}
 800354a:	bf00      	nop
 800354c:	371c      	adds	r7, #28
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr

08003554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003568:	2302      	movs	r3, #2
 800356a:	e046      	b.n	80035fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003592:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a16      	ldr	r2, [pc, #88]	; (8003604 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00e      	beq.n	80035ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b8:	d009      	beq.n	80035ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a12      	ldr	r2, [pc, #72]	; (8003608 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d004      	beq.n	80035ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a10      	ldr	r2, [pc, #64]	; (800360c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d10c      	bne.n	80035e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	4313      	orrs	r3, r2
 80035de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr
 8003604:	40012c00 	.word	0x40012c00
 8003608:	40000400 	.word	0x40000400
 800360c:	40000800 	.word	0x40000800

08003610 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr

08003622 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr

08003634 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e042      	b.n	80036cc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fd fca6 	bl	8000fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2224      	movs	r2, #36	; 0x24
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003676:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 fd71 	bl	8004160 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800368c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695a      	ldr	r2, [r3, #20]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800369c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08a      	sub	sp, #40	; 0x28
 80036d8:	af02      	add	r7, sp, #8
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	4613      	mov	r3, r2
 80036e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	d16d      	bne.n	80037d0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_UART_Transmit+0x2c>
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e066      	b.n	80037d2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2221      	movs	r2, #33	; 0x21
 800370e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003712:	f7fd fd9f 	bl	8001254 <HAL_GetTick>
 8003716:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	88fa      	ldrh	r2, [r7, #6]
 800371c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	88fa      	ldrh	r2, [r7, #6]
 8003722:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800372c:	d108      	bne.n	8003740 <HAL_UART_Transmit+0x6c>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d104      	bne.n	8003740 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003736:	2300      	movs	r3, #0
 8003738:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	61bb      	str	r3, [r7, #24]
 800373e:	e003      	b.n	8003748 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003744:	2300      	movs	r3, #0
 8003746:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003748:	e02a      	b.n	80037a0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2200      	movs	r2, #0
 8003752:	2180      	movs	r1, #128	; 0x80
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 faf9 	bl	8003d4c <UART_WaitOnFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e036      	b.n	80037d2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10b      	bne.n	8003782 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003778:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	3302      	adds	r3, #2
 800377e:	61bb      	str	r3, [r7, #24]
 8003780:	e007      	b.n	8003792 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	781a      	ldrb	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	3301      	adds	r3, #1
 8003790:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003796:	b29b      	uxth	r3, r3
 8003798:	3b01      	subs	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1cf      	bne.n	800374a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2200      	movs	r2, #0
 80037b2:	2140      	movs	r1, #64	; 0x40
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 fac9 	bl	8003d4c <UART_WaitOnFlagUntilTimeout>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e006      	b.n	80037d2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	e000      	b.n	80037d2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80037d0:	2302      	movs	r3, #2
  }
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3720      	adds	r7, #32
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b0ba      	sub	sp, #232	; 0xe8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003802:	2300      	movs	r3, #0
 8003804:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003808:	2300      	movs	r3, #0
 800380a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800380e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800381a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10f      	bne.n	8003842 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b00      	cmp	r3, #0
 800382c:	d009      	beq.n	8003842 <HAL_UART_IRQHandler+0x66>
 800382e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003832:	f003 0320 	and.w	r3, r3, #32
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fbd1 	bl	8003fe2 <UART_Receive_IT>
      return;
 8003840:	e25b      	b.n	8003cfa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003842:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 80de 	beq.w	8003a08 <HAL_UART_IRQHandler+0x22c>
 800384c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	d106      	bne.n	8003866 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800385c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80d1 	beq.w	8003a08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00b      	beq.n	800388a <HAL_UART_IRQHandler+0xae>
 8003872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387a:	2b00      	cmp	r3, #0
 800387c:	d005      	beq.n	800388a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003882:	f043 0201 	orr.w	r2, r3, #1
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800388a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00b      	beq.n	80038ae <HAL_UART_IRQHandler+0xd2>
 8003896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d005      	beq.n	80038ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a6:	f043 0202 	orr.w	r2, r3, #2
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00b      	beq.n	80038d2 <HAL_UART_IRQHandler+0xf6>
 80038ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	f043 0204 	orr.w	r2, r3, #4
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d011      	beq.n	8003902 <HAL_UART_IRQHandler+0x126>
 80038de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d105      	bne.n	80038f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d005      	beq.n	8003902 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fa:	f043 0208 	orr.w	r2, r3, #8
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 81f2 	beq.w	8003cf0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800390c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <HAL_UART_IRQHandler+0x14e>
 8003918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fb5c 	bl	8003fe2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003934:	2b00      	cmp	r3, #0
 8003936:	bf14      	ite	ne
 8003938:	2301      	movne	r3, #1
 800393a:	2300      	moveq	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d103      	bne.n	8003956 <HAL_UART_IRQHandler+0x17a>
 800394e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003952:	2b00      	cmp	r3, #0
 8003954:	d04f      	beq.n	80039f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fa66 	bl	8003e28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003966:	2b00      	cmp	r3, #0
 8003968:	d041      	beq.n	80039ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	3314      	adds	r3, #20
 8003970:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003974:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003978:	e853 3f00 	ldrex	r3, [r3]
 800397c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003980:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003988:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3314      	adds	r3, #20
 8003992:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003996:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800399a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80039a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80039a6:	e841 2300 	strex	r3, r2, [r1]
 80039aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1d9      	bne.n	800396a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d013      	beq.n	80039e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c2:	4a7e      	ldr	r2, [pc, #504]	; (8003bbc <HAL_UART_IRQHandler+0x3e0>)
 80039c4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fe fbf8 	bl	80021c0 <HAL_DMA_Abort_IT>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d016      	beq.n	8003a04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039e0:	4610      	mov	r0, r2
 80039e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e4:	e00e      	b.n	8003a04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f99c 	bl	8003d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ec:	e00a      	b.n	8003a04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f998 	bl	8003d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f4:	e006      	b.n	8003a04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f994 	bl	8003d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003a02:	e175      	b.n	8003cf0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a04:	bf00      	nop
    return;
 8003a06:	e173      	b.n	8003cf0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	f040 814f 	bne.w	8003cb0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a16:	f003 0310 	and.w	r3, r3, #16
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 8148 	beq.w	8003cb0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a24:	f003 0310 	and.w	r3, r3, #16
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8141 	beq.w	8003cb0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 80b6 	beq.w	8003bc0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8145 	beq.w	8003cf4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a72:	429a      	cmp	r2, r3
 8003a74:	f080 813e 	bcs.w	8003cf4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a7e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	2b20      	cmp	r3, #32
 8003a88:	f000 8088 	beq.w	8003b9c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	330c      	adds	r3, #12
 8003a92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a9a:	e853 3f00 	ldrex	r3, [r3]
 8003a9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003aa2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003aa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aaa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	330c      	adds	r3, #12
 8003ab4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003ab8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003abc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ac4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ac8:	e841 2300 	strex	r3, r2, [r1]
 8003acc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ad0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1d9      	bne.n	8003a8c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3314      	adds	r3, #20
 8003ade:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ae2:	e853 3f00 	ldrex	r3, [r3]
 8003ae6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ae8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003aea:	f023 0301 	bic.w	r3, r3, #1
 8003aee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3314      	adds	r3, #20
 8003af8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003afc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b00:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b04:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b08:	e841 2300 	strex	r3, r2, [r1]
 8003b0c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e1      	bne.n	8003ad8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3314      	adds	r3, #20
 8003b1a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3314      	adds	r3, #20
 8003b34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b38:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b40:	e841 2300 	strex	r3, r2, [r1]
 8003b44:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1e3      	bne.n	8003b14 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	330c      	adds	r3, #12
 8003b60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b64:	e853 3f00 	ldrex	r3, [r3]
 8003b68:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b6c:	f023 0310 	bic.w	r3, r3, #16
 8003b70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	330c      	adds	r3, #12
 8003b7a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b80:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b86:	e841 2300 	strex	r3, r2, [r1]
 8003b8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1e3      	bne.n	8003b5a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fe fad7 	bl	800214a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f8bf 	bl	8003d36 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bb8:	e09c      	b.n	8003cf4 <HAL_UART_IRQHandler+0x518>
 8003bba:	bf00      	nop
 8003bbc:	08003eed 	.word	0x08003eed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 808e 	beq.w	8003cf8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003bdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 8089 	beq.w	8003cf8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	330c      	adds	r3, #12
 8003bec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf0:	e853 3f00 	ldrex	r3, [r3]
 8003bf4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	330c      	adds	r3, #12
 8003c06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c0a:	647a      	str	r2, [r7, #68]	; 0x44
 8003c0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c12:	e841 2300 	strex	r3, r2, [r1]
 8003c16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1e3      	bne.n	8003be6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3314      	adds	r3, #20
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	e853 3f00 	ldrex	r3, [r3]
 8003c2c:	623b      	str	r3, [r7, #32]
   return(result);
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	f023 0301 	bic.w	r3, r3, #1
 8003c34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3314      	adds	r3, #20
 8003c3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c42:	633a      	str	r2, [r7, #48]	; 0x30
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e3      	bne.n	8003c1e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	330c      	adds	r3, #12
 8003c6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	e853 3f00 	ldrex	r3, [r3]
 8003c72:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 0310 	bic.w	r3, r3, #16
 8003c7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	330c      	adds	r3, #12
 8003c84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c88:	61fa      	str	r2, [r7, #28]
 8003c8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8c:	69b9      	ldr	r1, [r7, #24]
 8003c8e:	69fa      	ldr	r2, [r7, #28]
 8003c90:	e841 2300 	strex	r3, r2, [r1]
 8003c94:	617b      	str	r3, [r7, #20]
   return(result);
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e3      	bne.n	8003c64 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ca2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f844 	bl	8003d36 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cae:	e023      	b.n	8003cf8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d009      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x4f4>
 8003cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f923 	bl	8003f14 <UART_Transmit_IT>
    return;
 8003cce:	e014      	b.n	8003cfa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00e      	beq.n	8003cfa <HAL_UART_IRQHandler+0x51e>
 8003cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d008      	beq.n	8003cfa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f962 	bl	8003fb2 <UART_EndTransmit_IT>
    return;
 8003cee:	e004      	b.n	8003cfa <HAL_UART_IRQHandler+0x51e>
    return;
 8003cf0:	bf00      	nop
 8003cf2:	e002      	b.n	8003cfa <HAL_UART_IRQHandler+0x51e>
      return;
 8003cf4:	bf00      	nop
 8003cf6:	e000      	b.n	8003cfa <HAL_UART_IRQHandler+0x51e>
      return;
 8003cf8:	bf00      	nop
  }
}
 8003cfa:	37e8      	adds	r7, #232	; 0xe8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc80      	pop	{r7}
 8003d10:	4770      	bx	lr

08003d12 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr

08003d24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc80      	pop	{r7}
 8003d34:	4770      	bx	lr

08003d36 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
 8003d3e:	460b      	mov	r3, r1
 8003d40:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr

08003d4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b090      	sub	sp, #64	; 0x40
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d5c:	e050      	b.n	8003e00 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d64:	d04c      	beq.n	8003e00 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d007      	beq.n	8003d7c <UART_WaitOnFlagUntilTimeout+0x30>
 8003d6c:	f7fd fa72 	bl	8001254 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d241      	bcs.n	8003e00 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	330c      	adds	r3, #12
 8003d82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d86:	e853 3f00 	ldrex	r3, [r3]
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	330c      	adds	r3, #12
 8003d9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d9c:	637a      	str	r2, [r7, #52]	; 0x34
 8003d9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003da4:	e841 2300 	strex	r3, r2, [r1]
 8003da8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1e5      	bne.n	8003d7c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3314      	adds	r3, #20
 8003db6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	e853 3f00 	ldrex	r3, [r3]
 8003dbe:	613b      	str	r3, [r7, #16]
   return(result);
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f023 0301 	bic.w	r3, r3, #1
 8003dc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3314      	adds	r3, #20
 8003dce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dd0:	623a      	str	r2, [r7, #32]
 8003dd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd4:	69f9      	ldr	r1, [r7, #28]
 8003dd6:	6a3a      	ldr	r2, [r7, #32]
 8003dd8:	e841 2300 	strex	r3, r2, [r1]
 8003ddc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1e5      	bne.n	8003db0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e00f      	b.n	8003e20 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	bf0c      	ite	eq
 8003e10:	2301      	moveq	r3, #1
 8003e12:	2300      	movne	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	461a      	mov	r2, r3
 8003e18:	79fb      	ldrb	r3, [r7, #7]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d09f      	beq.n	8003d5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3740      	adds	r7, #64	; 0x40
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b095      	sub	sp, #84	; 0x54
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	330c      	adds	r3, #12
 8003e36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e3a:	e853 3f00 	ldrex	r3, [r3]
 8003e3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	330c      	adds	r3, #12
 8003e4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e50:	643a      	str	r2, [r7, #64]	; 0x40
 8003e52:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e58:	e841 2300 	strex	r3, r2, [r1]
 8003e5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1e5      	bne.n	8003e30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3314      	adds	r3, #20
 8003e6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	e853 3f00 	ldrex	r3, [r3]
 8003e72:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f023 0301 	bic.w	r3, r3, #1
 8003e7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3314      	adds	r3, #20
 8003e82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e8c:	e841 2300 	strex	r3, r2, [r1]
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1e5      	bne.n	8003e64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d119      	bne.n	8003ed4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	330c      	adds	r3, #12
 8003ea6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	e853 3f00 	ldrex	r3, [r3]
 8003eae:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f023 0310 	bic.w	r3, r3, #16
 8003eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	330c      	adds	r3, #12
 8003ebe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ec0:	61ba      	str	r2, [r7, #24]
 8003ec2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec4:	6979      	ldr	r1, [r7, #20]
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	e841 2300 	strex	r3, r2, [r1]
 8003ecc:	613b      	str	r3, [r7, #16]
   return(result);
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1e5      	bne.n	8003ea0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ee2:	bf00      	nop
 8003ee4:	3754      	adds	r7, #84	; 0x54
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr

08003eec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f7ff ff0c 	bl	8003d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f0c:	bf00      	nop
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b21      	cmp	r3, #33	; 0x21
 8003f26:	d13e      	bne.n	8003fa6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f30:	d114      	bne.n	8003f5c <UART_Transmit_IT+0x48>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d110      	bne.n	8003f5c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f4e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	1c9a      	adds	r2, r3, #2
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	621a      	str	r2, [r3, #32]
 8003f5a:	e008      	b.n	8003f6e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	1c59      	adds	r1, r3, #1
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6211      	str	r1, [r2, #32]
 8003f66:	781a      	ldrb	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10f      	bne.n	8003fa2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fa0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e000      	b.n	8003fa8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003fa6:	2302      	movs	r3, #2
  }
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr

08003fb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7ff fe94 	bl	8003d00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b08c      	sub	sp, #48	; 0x30
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b22      	cmp	r3, #34	; 0x22
 8003ff4:	f040 80ae 	bne.w	8004154 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004000:	d117      	bne.n	8004032 <UART_Receive_IT+0x50>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d113      	bne.n	8004032 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800400a:	2300      	movs	r3, #0
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004012:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	b29b      	uxth	r3, r3
 800401c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004020:	b29a      	uxth	r2, r3
 8004022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004024:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402a:	1c9a      	adds	r2, r3, #2
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	629a      	str	r2, [r3, #40]	; 0x28
 8004030:	e026      	b.n	8004080 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004036:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004038:	2300      	movs	r3, #0
 800403a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004044:	d007      	beq.n	8004056 <UART_Receive_IT+0x74>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <UART_Receive_IT+0x82>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d106      	bne.n	8004064 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	b2da      	uxtb	r2, r3
 800405e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004060:	701a      	strb	r2, [r3, #0]
 8004062:	e008      	b.n	8004076 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	b2db      	uxtb	r3, r3
 800406c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004070:	b2da      	uxtb	r2, r3
 8004072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004074:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29b      	uxth	r3, r3
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	4619      	mov	r1, r3
 800408e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004090:	2b00      	cmp	r3, #0
 8004092:	d15d      	bne.n	8004150 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0220 	bic.w	r2, r2, #32
 80040a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695a      	ldr	r2, [r3, #20]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0201 	bic.w	r2, r2, #1
 80040c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d135      	bne.n	8004146 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	330c      	adds	r3, #12
 80040e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	e853 3f00 	ldrex	r3, [r3]
 80040ee:	613b      	str	r3, [r7, #16]
   return(result);
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f023 0310 	bic.w	r3, r3, #16
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	330c      	adds	r3, #12
 80040fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004100:	623a      	str	r2, [r7, #32]
 8004102:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004104:	69f9      	ldr	r1, [r7, #28]
 8004106:	6a3a      	ldr	r2, [r7, #32]
 8004108:	e841 2300 	strex	r3, r2, [r1]
 800410c:	61bb      	str	r3, [r7, #24]
   return(result);
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1e5      	bne.n	80040e0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0310 	and.w	r3, r3, #16
 800411e:	2b10      	cmp	r3, #16
 8004120:	d10a      	bne.n	8004138 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004122:	2300      	movs	r3, #0
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800413c:	4619      	mov	r1, r3
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7ff fdf9 	bl	8003d36 <HAL_UARTEx_RxEventCallback>
 8004144:	e002      	b.n	800414c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7ff fde3 	bl	8003d12 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	e002      	b.n	8004156 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	e000      	b.n	8004156 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004154:	2302      	movs	r3, #2
  }
}
 8004156:	4618      	mov	r0, r3
 8004158:	3730      	adds	r7, #48	; 0x30
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
	...

08004160 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800419a:	f023 030c 	bic.w	r3, r3, #12
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	68b9      	ldr	r1, [r7, #8]
 80041a4:	430b      	orrs	r3, r1
 80041a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a2c      	ldr	r2, [pc, #176]	; (8004274 <UART_SetConfig+0x114>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d103      	bne.n	80041d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80041c8:	f7fe fe04 	bl	8002dd4 <HAL_RCC_GetPCLK2Freq>
 80041cc:	60f8      	str	r0, [r7, #12]
 80041ce:	e002      	b.n	80041d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80041d0:	f7fe fdec 	bl	8002dac <HAL_RCC_GetPCLK1Freq>
 80041d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	4613      	mov	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	009a      	lsls	r2, r3, #2
 80041e0:	441a      	add	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ec:	4a22      	ldr	r2, [pc, #136]	; (8004278 <UART_SetConfig+0x118>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	0119      	lsls	r1, r3, #4
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4613      	mov	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	009a      	lsls	r2, r3, #2
 8004200:	441a      	add	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	fbb2 f2f3 	udiv	r2, r2, r3
 800420c:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <UART_SetConfig+0x118>)
 800420e:	fba3 0302 	umull	r0, r3, r3, r2
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	2064      	movs	r0, #100	; 0x64
 8004216:	fb00 f303 	mul.w	r3, r0, r3
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	3332      	adds	r3, #50	; 0x32
 8004220:	4a15      	ldr	r2, [pc, #84]	; (8004278 <UART_SetConfig+0x118>)
 8004222:	fba2 2303 	umull	r2, r3, r2, r3
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800422c:	4419      	add	r1, r3
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	009a      	lsls	r2, r3, #2
 8004238:	441a      	add	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	fbb2 f2f3 	udiv	r2, r2, r3
 8004244:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <UART_SetConfig+0x118>)
 8004246:	fba3 0302 	umull	r0, r3, r3, r2
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	2064      	movs	r0, #100	; 0x64
 800424e:	fb00 f303 	mul.w	r3, r0, r3
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	3332      	adds	r3, #50	; 0x32
 8004258:	4a07      	ldr	r2, [pc, #28]	; (8004278 <UART_SetConfig+0x118>)
 800425a:	fba2 2303 	umull	r2, r3, r2, r3
 800425e:	095b      	lsrs	r3, r3, #5
 8004260:	f003 020f 	and.w	r2, r3, #15
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	440a      	add	r2, r1
 800426a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800426c:	bf00      	nop
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40013800 	.word	0x40013800
 8004278:	51eb851f 	.word	0x51eb851f

0800427c <siprintf>:
 800427c:	b40e      	push	{r1, r2, r3}
 800427e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004282:	b500      	push	{lr}
 8004284:	b09c      	sub	sp, #112	; 0x70
 8004286:	ab1d      	add	r3, sp, #116	; 0x74
 8004288:	9002      	str	r0, [sp, #8]
 800428a:	9006      	str	r0, [sp, #24]
 800428c:	9107      	str	r1, [sp, #28]
 800428e:	9104      	str	r1, [sp, #16]
 8004290:	4808      	ldr	r0, [pc, #32]	; (80042b4 <siprintf+0x38>)
 8004292:	4909      	ldr	r1, [pc, #36]	; (80042b8 <siprintf+0x3c>)
 8004294:	f853 2b04 	ldr.w	r2, [r3], #4
 8004298:	9105      	str	r1, [sp, #20]
 800429a:	6800      	ldr	r0, [r0, #0]
 800429c:	a902      	add	r1, sp, #8
 800429e:	9301      	str	r3, [sp, #4]
 80042a0:	f000 f98e 	bl	80045c0 <_svfiprintf_r>
 80042a4:	2200      	movs	r2, #0
 80042a6:	9b02      	ldr	r3, [sp, #8]
 80042a8:	701a      	strb	r2, [r3, #0]
 80042aa:	b01c      	add	sp, #112	; 0x70
 80042ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80042b0:	b003      	add	sp, #12
 80042b2:	4770      	bx	lr
 80042b4:	20000068 	.word	0x20000068
 80042b8:	ffff0208 	.word	0xffff0208

080042bc <memset>:
 80042bc:	4603      	mov	r3, r0
 80042be:	4402      	add	r2, r0
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d100      	bne.n	80042c6 <memset+0xa>
 80042c4:	4770      	bx	lr
 80042c6:	f803 1b01 	strb.w	r1, [r3], #1
 80042ca:	e7f9      	b.n	80042c0 <memset+0x4>

080042cc <__errno>:
 80042cc:	4b01      	ldr	r3, [pc, #4]	; (80042d4 <__errno+0x8>)
 80042ce:	6818      	ldr	r0, [r3, #0]
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	20000068 	.word	0x20000068

080042d8 <__libc_init_array>:
 80042d8:	b570      	push	{r4, r5, r6, lr}
 80042da:	2600      	movs	r6, #0
 80042dc:	4d0c      	ldr	r5, [pc, #48]	; (8004310 <__libc_init_array+0x38>)
 80042de:	4c0d      	ldr	r4, [pc, #52]	; (8004314 <__libc_init_array+0x3c>)
 80042e0:	1b64      	subs	r4, r4, r5
 80042e2:	10a4      	asrs	r4, r4, #2
 80042e4:	42a6      	cmp	r6, r4
 80042e6:	d109      	bne.n	80042fc <__libc_init_array+0x24>
 80042e8:	f000 fc7a 	bl	8004be0 <_init>
 80042ec:	2600      	movs	r6, #0
 80042ee:	4d0a      	ldr	r5, [pc, #40]	; (8004318 <__libc_init_array+0x40>)
 80042f0:	4c0a      	ldr	r4, [pc, #40]	; (800431c <__libc_init_array+0x44>)
 80042f2:	1b64      	subs	r4, r4, r5
 80042f4:	10a4      	asrs	r4, r4, #2
 80042f6:	42a6      	cmp	r6, r4
 80042f8:	d105      	bne.n	8004306 <__libc_init_array+0x2e>
 80042fa:	bd70      	pop	{r4, r5, r6, pc}
 80042fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004300:	4798      	blx	r3
 8004302:	3601      	adds	r6, #1
 8004304:	e7ee      	b.n	80042e4 <__libc_init_array+0xc>
 8004306:	f855 3b04 	ldr.w	r3, [r5], #4
 800430a:	4798      	blx	r3
 800430c:	3601      	adds	r6, #1
 800430e:	e7f2      	b.n	80042f6 <__libc_init_array+0x1e>
 8004310:	08004c5c 	.word	0x08004c5c
 8004314:	08004c5c 	.word	0x08004c5c
 8004318:	08004c5c 	.word	0x08004c5c
 800431c:	08004c60 	.word	0x08004c60

08004320 <__retarget_lock_acquire_recursive>:
 8004320:	4770      	bx	lr

08004322 <__retarget_lock_release_recursive>:
 8004322:	4770      	bx	lr

08004324 <_free_r>:
 8004324:	b538      	push	{r3, r4, r5, lr}
 8004326:	4605      	mov	r5, r0
 8004328:	2900      	cmp	r1, #0
 800432a:	d040      	beq.n	80043ae <_free_r+0x8a>
 800432c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004330:	1f0c      	subs	r4, r1, #4
 8004332:	2b00      	cmp	r3, #0
 8004334:	bfb8      	it	lt
 8004336:	18e4      	addlt	r4, r4, r3
 8004338:	f000 f8dc 	bl	80044f4 <__malloc_lock>
 800433c:	4a1c      	ldr	r2, [pc, #112]	; (80043b0 <_free_r+0x8c>)
 800433e:	6813      	ldr	r3, [r2, #0]
 8004340:	b933      	cbnz	r3, 8004350 <_free_r+0x2c>
 8004342:	6063      	str	r3, [r4, #4]
 8004344:	6014      	str	r4, [r2, #0]
 8004346:	4628      	mov	r0, r5
 8004348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800434c:	f000 b8d8 	b.w	8004500 <__malloc_unlock>
 8004350:	42a3      	cmp	r3, r4
 8004352:	d908      	bls.n	8004366 <_free_r+0x42>
 8004354:	6820      	ldr	r0, [r4, #0]
 8004356:	1821      	adds	r1, r4, r0
 8004358:	428b      	cmp	r3, r1
 800435a:	bf01      	itttt	eq
 800435c:	6819      	ldreq	r1, [r3, #0]
 800435e:	685b      	ldreq	r3, [r3, #4]
 8004360:	1809      	addeq	r1, r1, r0
 8004362:	6021      	streq	r1, [r4, #0]
 8004364:	e7ed      	b.n	8004342 <_free_r+0x1e>
 8004366:	461a      	mov	r2, r3
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	b10b      	cbz	r3, 8004370 <_free_r+0x4c>
 800436c:	42a3      	cmp	r3, r4
 800436e:	d9fa      	bls.n	8004366 <_free_r+0x42>
 8004370:	6811      	ldr	r1, [r2, #0]
 8004372:	1850      	adds	r0, r2, r1
 8004374:	42a0      	cmp	r0, r4
 8004376:	d10b      	bne.n	8004390 <_free_r+0x6c>
 8004378:	6820      	ldr	r0, [r4, #0]
 800437a:	4401      	add	r1, r0
 800437c:	1850      	adds	r0, r2, r1
 800437e:	4283      	cmp	r3, r0
 8004380:	6011      	str	r1, [r2, #0]
 8004382:	d1e0      	bne.n	8004346 <_free_r+0x22>
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	4408      	add	r0, r1
 800438a:	6010      	str	r0, [r2, #0]
 800438c:	6053      	str	r3, [r2, #4]
 800438e:	e7da      	b.n	8004346 <_free_r+0x22>
 8004390:	d902      	bls.n	8004398 <_free_r+0x74>
 8004392:	230c      	movs	r3, #12
 8004394:	602b      	str	r3, [r5, #0]
 8004396:	e7d6      	b.n	8004346 <_free_r+0x22>
 8004398:	6820      	ldr	r0, [r4, #0]
 800439a:	1821      	adds	r1, r4, r0
 800439c:	428b      	cmp	r3, r1
 800439e:	bf01      	itttt	eq
 80043a0:	6819      	ldreq	r1, [r3, #0]
 80043a2:	685b      	ldreq	r3, [r3, #4]
 80043a4:	1809      	addeq	r1, r1, r0
 80043a6:	6021      	streq	r1, [r4, #0]
 80043a8:	6063      	str	r3, [r4, #4]
 80043aa:	6054      	str	r4, [r2, #4]
 80043ac:	e7cb      	b.n	8004346 <_free_r+0x22>
 80043ae:	bd38      	pop	{r3, r4, r5, pc}
 80043b0:	20000358 	.word	0x20000358

080043b4 <sbrk_aligned>:
 80043b4:	b570      	push	{r4, r5, r6, lr}
 80043b6:	4e0e      	ldr	r6, [pc, #56]	; (80043f0 <sbrk_aligned+0x3c>)
 80043b8:	460c      	mov	r4, r1
 80043ba:	6831      	ldr	r1, [r6, #0]
 80043bc:	4605      	mov	r5, r0
 80043be:	b911      	cbnz	r1, 80043c6 <sbrk_aligned+0x12>
 80043c0:	f000 fbaa 	bl	8004b18 <_sbrk_r>
 80043c4:	6030      	str	r0, [r6, #0]
 80043c6:	4621      	mov	r1, r4
 80043c8:	4628      	mov	r0, r5
 80043ca:	f000 fba5 	bl	8004b18 <_sbrk_r>
 80043ce:	1c43      	adds	r3, r0, #1
 80043d0:	d00a      	beq.n	80043e8 <sbrk_aligned+0x34>
 80043d2:	1cc4      	adds	r4, r0, #3
 80043d4:	f024 0403 	bic.w	r4, r4, #3
 80043d8:	42a0      	cmp	r0, r4
 80043da:	d007      	beq.n	80043ec <sbrk_aligned+0x38>
 80043dc:	1a21      	subs	r1, r4, r0
 80043de:	4628      	mov	r0, r5
 80043e0:	f000 fb9a 	bl	8004b18 <_sbrk_r>
 80043e4:	3001      	adds	r0, #1
 80043e6:	d101      	bne.n	80043ec <sbrk_aligned+0x38>
 80043e8:	f04f 34ff 	mov.w	r4, #4294967295
 80043ec:	4620      	mov	r0, r4
 80043ee:	bd70      	pop	{r4, r5, r6, pc}
 80043f0:	2000035c 	.word	0x2000035c

080043f4 <_malloc_r>:
 80043f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043f8:	1ccd      	adds	r5, r1, #3
 80043fa:	f025 0503 	bic.w	r5, r5, #3
 80043fe:	3508      	adds	r5, #8
 8004400:	2d0c      	cmp	r5, #12
 8004402:	bf38      	it	cc
 8004404:	250c      	movcc	r5, #12
 8004406:	2d00      	cmp	r5, #0
 8004408:	4607      	mov	r7, r0
 800440a:	db01      	blt.n	8004410 <_malloc_r+0x1c>
 800440c:	42a9      	cmp	r1, r5
 800440e:	d905      	bls.n	800441c <_malloc_r+0x28>
 8004410:	230c      	movs	r3, #12
 8004412:	2600      	movs	r6, #0
 8004414:	603b      	str	r3, [r7, #0]
 8004416:	4630      	mov	r0, r6
 8004418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800441c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80044f0 <_malloc_r+0xfc>
 8004420:	f000 f868 	bl	80044f4 <__malloc_lock>
 8004424:	f8d8 3000 	ldr.w	r3, [r8]
 8004428:	461c      	mov	r4, r3
 800442a:	bb5c      	cbnz	r4, 8004484 <_malloc_r+0x90>
 800442c:	4629      	mov	r1, r5
 800442e:	4638      	mov	r0, r7
 8004430:	f7ff ffc0 	bl	80043b4 <sbrk_aligned>
 8004434:	1c43      	adds	r3, r0, #1
 8004436:	4604      	mov	r4, r0
 8004438:	d155      	bne.n	80044e6 <_malloc_r+0xf2>
 800443a:	f8d8 4000 	ldr.w	r4, [r8]
 800443e:	4626      	mov	r6, r4
 8004440:	2e00      	cmp	r6, #0
 8004442:	d145      	bne.n	80044d0 <_malloc_r+0xdc>
 8004444:	2c00      	cmp	r4, #0
 8004446:	d048      	beq.n	80044da <_malloc_r+0xe6>
 8004448:	6823      	ldr	r3, [r4, #0]
 800444a:	4631      	mov	r1, r6
 800444c:	4638      	mov	r0, r7
 800444e:	eb04 0903 	add.w	r9, r4, r3
 8004452:	f000 fb61 	bl	8004b18 <_sbrk_r>
 8004456:	4581      	cmp	r9, r0
 8004458:	d13f      	bne.n	80044da <_malloc_r+0xe6>
 800445a:	6821      	ldr	r1, [r4, #0]
 800445c:	4638      	mov	r0, r7
 800445e:	1a6d      	subs	r5, r5, r1
 8004460:	4629      	mov	r1, r5
 8004462:	f7ff ffa7 	bl	80043b4 <sbrk_aligned>
 8004466:	3001      	adds	r0, #1
 8004468:	d037      	beq.n	80044da <_malloc_r+0xe6>
 800446a:	6823      	ldr	r3, [r4, #0]
 800446c:	442b      	add	r3, r5
 800446e:	6023      	str	r3, [r4, #0]
 8004470:	f8d8 3000 	ldr.w	r3, [r8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d038      	beq.n	80044ea <_malloc_r+0xf6>
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	42a2      	cmp	r2, r4
 800447c:	d12b      	bne.n	80044d6 <_malloc_r+0xe2>
 800447e:	2200      	movs	r2, #0
 8004480:	605a      	str	r2, [r3, #4]
 8004482:	e00f      	b.n	80044a4 <_malloc_r+0xb0>
 8004484:	6822      	ldr	r2, [r4, #0]
 8004486:	1b52      	subs	r2, r2, r5
 8004488:	d41f      	bmi.n	80044ca <_malloc_r+0xd6>
 800448a:	2a0b      	cmp	r2, #11
 800448c:	d917      	bls.n	80044be <_malloc_r+0xca>
 800448e:	1961      	adds	r1, r4, r5
 8004490:	42a3      	cmp	r3, r4
 8004492:	6025      	str	r5, [r4, #0]
 8004494:	bf18      	it	ne
 8004496:	6059      	strne	r1, [r3, #4]
 8004498:	6863      	ldr	r3, [r4, #4]
 800449a:	bf08      	it	eq
 800449c:	f8c8 1000 	streq.w	r1, [r8]
 80044a0:	5162      	str	r2, [r4, r5]
 80044a2:	604b      	str	r3, [r1, #4]
 80044a4:	4638      	mov	r0, r7
 80044a6:	f104 060b 	add.w	r6, r4, #11
 80044aa:	f000 f829 	bl	8004500 <__malloc_unlock>
 80044ae:	f026 0607 	bic.w	r6, r6, #7
 80044b2:	1d23      	adds	r3, r4, #4
 80044b4:	1af2      	subs	r2, r6, r3
 80044b6:	d0ae      	beq.n	8004416 <_malloc_r+0x22>
 80044b8:	1b9b      	subs	r3, r3, r6
 80044ba:	50a3      	str	r3, [r4, r2]
 80044bc:	e7ab      	b.n	8004416 <_malloc_r+0x22>
 80044be:	42a3      	cmp	r3, r4
 80044c0:	6862      	ldr	r2, [r4, #4]
 80044c2:	d1dd      	bne.n	8004480 <_malloc_r+0x8c>
 80044c4:	f8c8 2000 	str.w	r2, [r8]
 80044c8:	e7ec      	b.n	80044a4 <_malloc_r+0xb0>
 80044ca:	4623      	mov	r3, r4
 80044cc:	6864      	ldr	r4, [r4, #4]
 80044ce:	e7ac      	b.n	800442a <_malloc_r+0x36>
 80044d0:	4634      	mov	r4, r6
 80044d2:	6876      	ldr	r6, [r6, #4]
 80044d4:	e7b4      	b.n	8004440 <_malloc_r+0x4c>
 80044d6:	4613      	mov	r3, r2
 80044d8:	e7cc      	b.n	8004474 <_malloc_r+0x80>
 80044da:	230c      	movs	r3, #12
 80044dc:	4638      	mov	r0, r7
 80044de:	603b      	str	r3, [r7, #0]
 80044e0:	f000 f80e 	bl	8004500 <__malloc_unlock>
 80044e4:	e797      	b.n	8004416 <_malloc_r+0x22>
 80044e6:	6025      	str	r5, [r4, #0]
 80044e8:	e7dc      	b.n	80044a4 <_malloc_r+0xb0>
 80044ea:	605b      	str	r3, [r3, #4]
 80044ec:	deff      	udf	#255	; 0xff
 80044ee:	bf00      	nop
 80044f0:	20000358 	.word	0x20000358

080044f4 <__malloc_lock>:
 80044f4:	4801      	ldr	r0, [pc, #4]	; (80044fc <__malloc_lock+0x8>)
 80044f6:	f7ff bf13 	b.w	8004320 <__retarget_lock_acquire_recursive>
 80044fa:	bf00      	nop
 80044fc:	20000354 	.word	0x20000354

08004500 <__malloc_unlock>:
 8004500:	4801      	ldr	r0, [pc, #4]	; (8004508 <__malloc_unlock+0x8>)
 8004502:	f7ff bf0e 	b.w	8004322 <__retarget_lock_release_recursive>
 8004506:	bf00      	nop
 8004508:	20000354 	.word	0x20000354

0800450c <__ssputs_r>:
 800450c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004510:	461f      	mov	r7, r3
 8004512:	688e      	ldr	r6, [r1, #8]
 8004514:	4682      	mov	sl, r0
 8004516:	42be      	cmp	r6, r7
 8004518:	460c      	mov	r4, r1
 800451a:	4690      	mov	r8, r2
 800451c:	680b      	ldr	r3, [r1, #0]
 800451e:	d82c      	bhi.n	800457a <__ssputs_r+0x6e>
 8004520:	898a      	ldrh	r2, [r1, #12]
 8004522:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004526:	d026      	beq.n	8004576 <__ssputs_r+0x6a>
 8004528:	6965      	ldr	r5, [r4, #20]
 800452a:	6909      	ldr	r1, [r1, #16]
 800452c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004530:	eba3 0901 	sub.w	r9, r3, r1
 8004534:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004538:	1c7b      	adds	r3, r7, #1
 800453a:	444b      	add	r3, r9
 800453c:	106d      	asrs	r5, r5, #1
 800453e:	429d      	cmp	r5, r3
 8004540:	bf38      	it	cc
 8004542:	461d      	movcc	r5, r3
 8004544:	0553      	lsls	r3, r2, #21
 8004546:	d527      	bpl.n	8004598 <__ssputs_r+0x8c>
 8004548:	4629      	mov	r1, r5
 800454a:	f7ff ff53 	bl	80043f4 <_malloc_r>
 800454e:	4606      	mov	r6, r0
 8004550:	b360      	cbz	r0, 80045ac <__ssputs_r+0xa0>
 8004552:	464a      	mov	r2, r9
 8004554:	6921      	ldr	r1, [r4, #16]
 8004556:	f000 fafd 	bl	8004b54 <memcpy>
 800455a:	89a3      	ldrh	r3, [r4, #12]
 800455c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004564:	81a3      	strh	r3, [r4, #12]
 8004566:	6126      	str	r6, [r4, #16]
 8004568:	444e      	add	r6, r9
 800456a:	6026      	str	r6, [r4, #0]
 800456c:	463e      	mov	r6, r7
 800456e:	6165      	str	r5, [r4, #20]
 8004570:	eba5 0509 	sub.w	r5, r5, r9
 8004574:	60a5      	str	r5, [r4, #8]
 8004576:	42be      	cmp	r6, r7
 8004578:	d900      	bls.n	800457c <__ssputs_r+0x70>
 800457a:	463e      	mov	r6, r7
 800457c:	4632      	mov	r2, r6
 800457e:	4641      	mov	r1, r8
 8004580:	6820      	ldr	r0, [r4, #0]
 8004582:	f000 faaf 	bl	8004ae4 <memmove>
 8004586:	2000      	movs	r0, #0
 8004588:	68a3      	ldr	r3, [r4, #8]
 800458a:	1b9b      	subs	r3, r3, r6
 800458c:	60a3      	str	r3, [r4, #8]
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	4433      	add	r3, r6
 8004592:	6023      	str	r3, [r4, #0]
 8004594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004598:	462a      	mov	r2, r5
 800459a:	f000 fae9 	bl	8004b70 <_realloc_r>
 800459e:	4606      	mov	r6, r0
 80045a0:	2800      	cmp	r0, #0
 80045a2:	d1e0      	bne.n	8004566 <__ssputs_r+0x5a>
 80045a4:	4650      	mov	r0, sl
 80045a6:	6921      	ldr	r1, [r4, #16]
 80045a8:	f7ff febc 	bl	8004324 <_free_r>
 80045ac:	230c      	movs	r3, #12
 80045ae:	f8ca 3000 	str.w	r3, [sl]
 80045b2:	89a3      	ldrh	r3, [r4, #12]
 80045b4:	f04f 30ff 	mov.w	r0, #4294967295
 80045b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045bc:	81a3      	strh	r3, [r4, #12]
 80045be:	e7e9      	b.n	8004594 <__ssputs_r+0x88>

080045c0 <_svfiprintf_r>:
 80045c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c4:	4698      	mov	r8, r3
 80045c6:	898b      	ldrh	r3, [r1, #12]
 80045c8:	4607      	mov	r7, r0
 80045ca:	061b      	lsls	r3, r3, #24
 80045cc:	460d      	mov	r5, r1
 80045ce:	4614      	mov	r4, r2
 80045d0:	b09d      	sub	sp, #116	; 0x74
 80045d2:	d50e      	bpl.n	80045f2 <_svfiprintf_r+0x32>
 80045d4:	690b      	ldr	r3, [r1, #16]
 80045d6:	b963      	cbnz	r3, 80045f2 <_svfiprintf_r+0x32>
 80045d8:	2140      	movs	r1, #64	; 0x40
 80045da:	f7ff ff0b 	bl	80043f4 <_malloc_r>
 80045de:	6028      	str	r0, [r5, #0]
 80045e0:	6128      	str	r0, [r5, #16]
 80045e2:	b920      	cbnz	r0, 80045ee <_svfiprintf_r+0x2e>
 80045e4:	230c      	movs	r3, #12
 80045e6:	603b      	str	r3, [r7, #0]
 80045e8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ec:	e0d0      	b.n	8004790 <_svfiprintf_r+0x1d0>
 80045ee:	2340      	movs	r3, #64	; 0x40
 80045f0:	616b      	str	r3, [r5, #20]
 80045f2:	2300      	movs	r3, #0
 80045f4:	9309      	str	r3, [sp, #36]	; 0x24
 80045f6:	2320      	movs	r3, #32
 80045f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045fc:	2330      	movs	r3, #48	; 0x30
 80045fe:	f04f 0901 	mov.w	r9, #1
 8004602:	f8cd 800c 	str.w	r8, [sp, #12]
 8004606:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80047a8 <_svfiprintf_r+0x1e8>
 800460a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800460e:	4623      	mov	r3, r4
 8004610:	469a      	mov	sl, r3
 8004612:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004616:	b10a      	cbz	r2, 800461c <_svfiprintf_r+0x5c>
 8004618:	2a25      	cmp	r2, #37	; 0x25
 800461a:	d1f9      	bne.n	8004610 <_svfiprintf_r+0x50>
 800461c:	ebba 0b04 	subs.w	fp, sl, r4
 8004620:	d00b      	beq.n	800463a <_svfiprintf_r+0x7a>
 8004622:	465b      	mov	r3, fp
 8004624:	4622      	mov	r2, r4
 8004626:	4629      	mov	r1, r5
 8004628:	4638      	mov	r0, r7
 800462a:	f7ff ff6f 	bl	800450c <__ssputs_r>
 800462e:	3001      	adds	r0, #1
 8004630:	f000 80a9 	beq.w	8004786 <_svfiprintf_r+0x1c6>
 8004634:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004636:	445a      	add	r2, fp
 8004638:	9209      	str	r2, [sp, #36]	; 0x24
 800463a:	f89a 3000 	ldrb.w	r3, [sl]
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 80a1 	beq.w	8004786 <_svfiprintf_r+0x1c6>
 8004644:	2300      	movs	r3, #0
 8004646:	f04f 32ff 	mov.w	r2, #4294967295
 800464a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800464e:	f10a 0a01 	add.w	sl, sl, #1
 8004652:	9304      	str	r3, [sp, #16]
 8004654:	9307      	str	r3, [sp, #28]
 8004656:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800465a:	931a      	str	r3, [sp, #104]	; 0x68
 800465c:	4654      	mov	r4, sl
 800465e:	2205      	movs	r2, #5
 8004660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004664:	4850      	ldr	r0, [pc, #320]	; (80047a8 <_svfiprintf_r+0x1e8>)
 8004666:	f000 fa67 	bl	8004b38 <memchr>
 800466a:	9a04      	ldr	r2, [sp, #16]
 800466c:	b9d8      	cbnz	r0, 80046a6 <_svfiprintf_r+0xe6>
 800466e:	06d0      	lsls	r0, r2, #27
 8004670:	bf44      	itt	mi
 8004672:	2320      	movmi	r3, #32
 8004674:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004678:	0711      	lsls	r1, r2, #28
 800467a:	bf44      	itt	mi
 800467c:	232b      	movmi	r3, #43	; 0x2b
 800467e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004682:	f89a 3000 	ldrb.w	r3, [sl]
 8004686:	2b2a      	cmp	r3, #42	; 0x2a
 8004688:	d015      	beq.n	80046b6 <_svfiprintf_r+0xf6>
 800468a:	4654      	mov	r4, sl
 800468c:	2000      	movs	r0, #0
 800468e:	f04f 0c0a 	mov.w	ip, #10
 8004692:	9a07      	ldr	r2, [sp, #28]
 8004694:	4621      	mov	r1, r4
 8004696:	f811 3b01 	ldrb.w	r3, [r1], #1
 800469a:	3b30      	subs	r3, #48	; 0x30
 800469c:	2b09      	cmp	r3, #9
 800469e:	d94d      	bls.n	800473c <_svfiprintf_r+0x17c>
 80046a0:	b1b0      	cbz	r0, 80046d0 <_svfiprintf_r+0x110>
 80046a2:	9207      	str	r2, [sp, #28]
 80046a4:	e014      	b.n	80046d0 <_svfiprintf_r+0x110>
 80046a6:	eba0 0308 	sub.w	r3, r0, r8
 80046aa:	fa09 f303 	lsl.w	r3, r9, r3
 80046ae:	4313      	orrs	r3, r2
 80046b0:	46a2      	mov	sl, r4
 80046b2:	9304      	str	r3, [sp, #16]
 80046b4:	e7d2      	b.n	800465c <_svfiprintf_r+0x9c>
 80046b6:	9b03      	ldr	r3, [sp, #12]
 80046b8:	1d19      	adds	r1, r3, #4
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	9103      	str	r1, [sp, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	bfbb      	ittet	lt
 80046c2:	425b      	neglt	r3, r3
 80046c4:	f042 0202 	orrlt.w	r2, r2, #2
 80046c8:	9307      	strge	r3, [sp, #28]
 80046ca:	9307      	strlt	r3, [sp, #28]
 80046cc:	bfb8      	it	lt
 80046ce:	9204      	strlt	r2, [sp, #16]
 80046d0:	7823      	ldrb	r3, [r4, #0]
 80046d2:	2b2e      	cmp	r3, #46	; 0x2e
 80046d4:	d10c      	bne.n	80046f0 <_svfiprintf_r+0x130>
 80046d6:	7863      	ldrb	r3, [r4, #1]
 80046d8:	2b2a      	cmp	r3, #42	; 0x2a
 80046da:	d134      	bne.n	8004746 <_svfiprintf_r+0x186>
 80046dc:	9b03      	ldr	r3, [sp, #12]
 80046de:	3402      	adds	r4, #2
 80046e0:	1d1a      	adds	r2, r3, #4
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	9203      	str	r2, [sp, #12]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	bfb8      	it	lt
 80046ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80046ee:	9305      	str	r3, [sp, #20]
 80046f0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80047ac <_svfiprintf_r+0x1ec>
 80046f4:	2203      	movs	r2, #3
 80046f6:	4650      	mov	r0, sl
 80046f8:	7821      	ldrb	r1, [r4, #0]
 80046fa:	f000 fa1d 	bl	8004b38 <memchr>
 80046fe:	b138      	cbz	r0, 8004710 <_svfiprintf_r+0x150>
 8004700:	2240      	movs	r2, #64	; 0x40
 8004702:	9b04      	ldr	r3, [sp, #16]
 8004704:	eba0 000a 	sub.w	r0, r0, sl
 8004708:	4082      	lsls	r2, r0
 800470a:	4313      	orrs	r3, r2
 800470c:	3401      	adds	r4, #1
 800470e:	9304      	str	r3, [sp, #16]
 8004710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004714:	2206      	movs	r2, #6
 8004716:	4826      	ldr	r0, [pc, #152]	; (80047b0 <_svfiprintf_r+0x1f0>)
 8004718:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800471c:	f000 fa0c 	bl	8004b38 <memchr>
 8004720:	2800      	cmp	r0, #0
 8004722:	d038      	beq.n	8004796 <_svfiprintf_r+0x1d6>
 8004724:	4b23      	ldr	r3, [pc, #140]	; (80047b4 <_svfiprintf_r+0x1f4>)
 8004726:	bb1b      	cbnz	r3, 8004770 <_svfiprintf_r+0x1b0>
 8004728:	9b03      	ldr	r3, [sp, #12]
 800472a:	3307      	adds	r3, #7
 800472c:	f023 0307 	bic.w	r3, r3, #7
 8004730:	3308      	adds	r3, #8
 8004732:	9303      	str	r3, [sp, #12]
 8004734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004736:	4433      	add	r3, r6
 8004738:	9309      	str	r3, [sp, #36]	; 0x24
 800473a:	e768      	b.n	800460e <_svfiprintf_r+0x4e>
 800473c:	460c      	mov	r4, r1
 800473e:	2001      	movs	r0, #1
 8004740:	fb0c 3202 	mla	r2, ip, r2, r3
 8004744:	e7a6      	b.n	8004694 <_svfiprintf_r+0xd4>
 8004746:	2300      	movs	r3, #0
 8004748:	f04f 0c0a 	mov.w	ip, #10
 800474c:	4619      	mov	r1, r3
 800474e:	3401      	adds	r4, #1
 8004750:	9305      	str	r3, [sp, #20]
 8004752:	4620      	mov	r0, r4
 8004754:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004758:	3a30      	subs	r2, #48	; 0x30
 800475a:	2a09      	cmp	r2, #9
 800475c:	d903      	bls.n	8004766 <_svfiprintf_r+0x1a6>
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0c6      	beq.n	80046f0 <_svfiprintf_r+0x130>
 8004762:	9105      	str	r1, [sp, #20]
 8004764:	e7c4      	b.n	80046f0 <_svfiprintf_r+0x130>
 8004766:	4604      	mov	r4, r0
 8004768:	2301      	movs	r3, #1
 800476a:	fb0c 2101 	mla	r1, ip, r1, r2
 800476e:	e7f0      	b.n	8004752 <_svfiprintf_r+0x192>
 8004770:	ab03      	add	r3, sp, #12
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	462a      	mov	r2, r5
 8004776:	4638      	mov	r0, r7
 8004778:	4b0f      	ldr	r3, [pc, #60]	; (80047b8 <_svfiprintf_r+0x1f8>)
 800477a:	a904      	add	r1, sp, #16
 800477c:	f3af 8000 	nop.w
 8004780:	1c42      	adds	r2, r0, #1
 8004782:	4606      	mov	r6, r0
 8004784:	d1d6      	bne.n	8004734 <_svfiprintf_r+0x174>
 8004786:	89ab      	ldrh	r3, [r5, #12]
 8004788:	065b      	lsls	r3, r3, #25
 800478a:	f53f af2d 	bmi.w	80045e8 <_svfiprintf_r+0x28>
 800478e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004790:	b01d      	add	sp, #116	; 0x74
 8004792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004796:	ab03      	add	r3, sp, #12
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	462a      	mov	r2, r5
 800479c:	4638      	mov	r0, r7
 800479e:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <_svfiprintf_r+0x1f8>)
 80047a0:	a904      	add	r1, sp, #16
 80047a2:	f000 f87d 	bl	80048a0 <_printf_i>
 80047a6:	e7eb      	b.n	8004780 <_svfiprintf_r+0x1c0>
 80047a8:	08004c26 	.word	0x08004c26
 80047ac:	08004c2c 	.word	0x08004c2c
 80047b0:	08004c30 	.word	0x08004c30
 80047b4:	00000000 	.word	0x00000000
 80047b8:	0800450d 	.word	0x0800450d

080047bc <_printf_common>:
 80047bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047c0:	4616      	mov	r6, r2
 80047c2:	4699      	mov	r9, r3
 80047c4:	688a      	ldr	r2, [r1, #8]
 80047c6:	690b      	ldr	r3, [r1, #16]
 80047c8:	4607      	mov	r7, r0
 80047ca:	4293      	cmp	r3, r2
 80047cc:	bfb8      	it	lt
 80047ce:	4613      	movlt	r3, r2
 80047d0:	6033      	str	r3, [r6, #0]
 80047d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047d6:	460c      	mov	r4, r1
 80047d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047dc:	b10a      	cbz	r2, 80047e2 <_printf_common+0x26>
 80047de:	3301      	adds	r3, #1
 80047e0:	6033      	str	r3, [r6, #0]
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	0699      	lsls	r1, r3, #26
 80047e6:	bf42      	ittt	mi
 80047e8:	6833      	ldrmi	r3, [r6, #0]
 80047ea:	3302      	addmi	r3, #2
 80047ec:	6033      	strmi	r3, [r6, #0]
 80047ee:	6825      	ldr	r5, [r4, #0]
 80047f0:	f015 0506 	ands.w	r5, r5, #6
 80047f4:	d106      	bne.n	8004804 <_printf_common+0x48>
 80047f6:	f104 0a19 	add.w	sl, r4, #25
 80047fa:	68e3      	ldr	r3, [r4, #12]
 80047fc:	6832      	ldr	r2, [r6, #0]
 80047fe:	1a9b      	subs	r3, r3, r2
 8004800:	42ab      	cmp	r3, r5
 8004802:	dc2b      	bgt.n	800485c <_printf_common+0xa0>
 8004804:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004808:	1e13      	subs	r3, r2, #0
 800480a:	6822      	ldr	r2, [r4, #0]
 800480c:	bf18      	it	ne
 800480e:	2301      	movne	r3, #1
 8004810:	0692      	lsls	r2, r2, #26
 8004812:	d430      	bmi.n	8004876 <_printf_common+0xba>
 8004814:	4649      	mov	r1, r9
 8004816:	4638      	mov	r0, r7
 8004818:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800481c:	47c0      	blx	r8
 800481e:	3001      	adds	r0, #1
 8004820:	d023      	beq.n	800486a <_printf_common+0xae>
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	6922      	ldr	r2, [r4, #16]
 8004826:	f003 0306 	and.w	r3, r3, #6
 800482a:	2b04      	cmp	r3, #4
 800482c:	bf14      	ite	ne
 800482e:	2500      	movne	r5, #0
 8004830:	6833      	ldreq	r3, [r6, #0]
 8004832:	f04f 0600 	mov.w	r6, #0
 8004836:	bf08      	it	eq
 8004838:	68e5      	ldreq	r5, [r4, #12]
 800483a:	f104 041a 	add.w	r4, r4, #26
 800483e:	bf08      	it	eq
 8004840:	1aed      	subeq	r5, r5, r3
 8004842:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004846:	bf08      	it	eq
 8004848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800484c:	4293      	cmp	r3, r2
 800484e:	bfc4      	itt	gt
 8004850:	1a9b      	subgt	r3, r3, r2
 8004852:	18ed      	addgt	r5, r5, r3
 8004854:	42b5      	cmp	r5, r6
 8004856:	d11a      	bne.n	800488e <_printf_common+0xd2>
 8004858:	2000      	movs	r0, #0
 800485a:	e008      	b.n	800486e <_printf_common+0xb2>
 800485c:	2301      	movs	r3, #1
 800485e:	4652      	mov	r2, sl
 8004860:	4649      	mov	r1, r9
 8004862:	4638      	mov	r0, r7
 8004864:	47c0      	blx	r8
 8004866:	3001      	adds	r0, #1
 8004868:	d103      	bne.n	8004872 <_printf_common+0xb6>
 800486a:	f04f 30ff 	mov.w	r0, #4294967295
 800486e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004872:	3501      	adds	r5, #1
 8004874:	e7c1      	b.n	80047fa <_printf_common+0x3e>
 8004876:	2030      	movs	r0, #48	; 0x30
 8004878:	18e1      	adds	r1, r4, r3
 800487a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004884:	4422      	add	r2, r4
 8004886:	3302      	adds	r3, #2
 8004888:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800488c:	e7c2      	b.n	8004814 <_printf_common+0x58>
 800488e:	2301      	movs	r3, #1
 8004890:	4622      	mov	r2, r4
 8004892:	4649      	mov	r1, r9
 8004894:	4638      	mov	r0, r7
 8004896:	47c0      	blx	r8
 8004898:	3001      	adds	r0, #1
 800489a:	d0e6      	beq.n	800486a <_printf_common+0xae>
 800489c:	3601      	adds	r6, #1
 800489e:	e7d9      	b.n	8004854 <_printf_common+0x98>

080048a0 <_printf_i>:
 80048a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048a4:	7e0f      	ldrb	r7, [r1, #24]
 80048a6:	4691      	mov	r9, r2
 80048a8:	2f78      	cmp	r7, #120	; 0x78
 80048aa:	4680      	mov	r8, r0
 80048ac:	460c      	mov	r4, r1
 80048ae:	469a      	mov	sl, r3
 80048b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048b6:	d807      	bhi.n	80048c8 <_printf_i+0x28>
 80048b8:	2f62      	cmp	r7, #98	; 0x62
 80048ba:	d80a      	bhi.n	80048d2 <_printf_i+0x32>
 80048bc:	2f00      	cmp	r7, #0
 80048be:	f000 80d5 	beq.w	8004a6c <_printf_i+0x1cc>
 80048c2:	2f58      	cmp	r7, #88	; 0x58
 80048c4:	f000 80c1 	beq.w	8004a4a <_printf_i+0x1aa>
 80048c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048d0:	e03a      	b.n	8004948 <_printf_i+0xa8>
 80048d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048d6:	2b15      	cmp	r3, #21
 80048d8:	d8f6      	bhi.n	80048c8 <_printf_i+0x28>
 80048da:	a101      	add	r1, pc, #4	; (adr r1, 80048e0 <_printf_i+0x40>)
 80048dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048e0:	08004939 	.word	0x08004939
 80048e4:	0800494d 	.word	0x0800494d
 80048e8:	080048c9 	.word	0x080048c9
 80048ec:	080048c9 	.word	0x080048c9
 80048f0:	080048c9 	.word	0x080048c9
 80048f4:	080048c9 	.word	0x080048c9
 80048f8:	0800494d 	.word	0x0800494d
 80048fc:	080048c9 	.word	0x080048c9
 8004900:	080048c9 	.word	0x080048c9
 8004904:	080048c9 	.word	0x080048c9
 8004908:	080048c9 	.word	0x080048c9
 800490c:	08004a53 	.word	0x08004a53
 8004910:	08004979 	.word	0x08004979
 8004914:	08004a0d 	.word	0x08004a0d
 8004918:	080048c9 	.word	0x080048c9
 800491c:	080048c9 	.word	0x080048c9
 8004920:	08004a75 	.word	0x08004a75
 8004924:	080048c9 	.word	0x080048c9
 8004928:	08004979 	.word	0x08004979
 800492c:	080048c9 	.word	0x080048c9
 8004930:	080048c9 	.word	0x080048c9
 8004934:	08004a15 	.word	0x08004a15
 8004938:	682b      	ldr	r3, [r5, #0]
 800493a:	1d1a      	adds	r2, r3, #4
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	602a      	str	r2, [r5, #0]
 8004940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004948:	2301      	movs	r3, #1
 800494a:	e0a0      	b.n	8004a8e <_printf_i+0x1ee>
 800494c:	6820      	ldr	r0, [r4, #0]
 800494e:	682b      	ldr	r3, [r5, #0]
 8004950:	0607      	lsls	r7, r0, #24
 8004952:	f103 0104 	add.w	r1, r3, #4
 8004956:	6029      	str	r1, [r5, #0]
 8004958:	d501      	bpl.n	800495e <_printf_i+0xbe>
 800495a:	681e      	ldr	r6, [r3, #0]
 800495c:	e003      	b.n	8004966 <_printf_i+0xc6>
 800495e:	0646      	lsls	r6, r0, #25
 8004960:	d5fb      	bpl.n	800495a <_printf_i+0xba>
 8004962:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004966:	2e00      	cmp	r6, #0
 8004968:	da03      	bge.n	8004972 <_printf_i+0xd2>
 800496a:	232d      	movs	r3, #45	; 0x2d
 800496c:	4276      	negs	r6, r6
 800496e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004972:	230a      	movs	r3, #10
 8004974:	4859      	ldr	r0, [pc, #356]	; (8004adc <_printf_i+0x23c>)
 8004976:	e012      	b.n	800499e <_printf_i+0xfe>
 8004978:	682b      	ldr	r3, [r5, #0]
 800497a:	6820      	ldr	r0, [r4, #0]
 800497c:	1d19      	adds	r1, r3, #4
 800497e:	6029      	str	r1, [r5, #0]
 8004980:	0605      	lsls	r5, r0, #24
 8004982:	d501      	bpl.n	8004988 <_printf_i+0xe8>
 8004984:	681e      	ldr	r6, [r3, #0]
 8004986:	e002      	b.n	800498e <_printf_i+0xee>
 8004988:	0641      	lsls	r1, r0, #25
 800498a:	d5fb      	bpl.n	8004984 <_printf_i+0xe4>
 800498c:	881e      	ldrh	r6, [r3, #0]
 800498e:	2f6f      	cmp	r7, #111	; 0x6f
 8004990:	bf0c      	ite	eq
 8004992:	2308      	moveq	r3, #8
 8004994:	230a      	movne	r3, #10
 8004996:	4851      	ldr	r0, [pc, #324]	; (8004adc <_printf_i+0x23c>)
 8004998:	2100      	movs	r1, #0
 800499a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800499e:	6865      	ldr	r5, [r4, #4]
 80049a0:	2d00      	cmp	r5, #0
 80049a2:	bfa8      	it	ge
 80049a4:	6821      	ldrge	r1, [r4, #0]
 80049a6:	60a5      	str	r5, [r4, #8]
 80049a8:	bfa4      	itt	ge
 80049aa:	f021 0104 	bicge.w	r1, r1, #4
 80049ae:	6021      	strge	r1, [r4, #0]
 80049b0:	b90e      	cbnz	r6, 80049b6 <_printf_i+0x116>
 80049b2:	2d00      	cmp	r5, #0
 80049b4:	d04b      	beq.n	8004a4e <_printf_i+0x1ae>
 80049b6:	4615      	mov	r5, r2
 80049b8:	fbb6 f1f3 	udiv	r1, r6, r3
 80049bc:	fb03 6711 	mls	r7, r3, r1, r6
 80049c0:	5dc7      	ldrb	r7, [r0, r7]
 80049c2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049c6:	4637      	mov	r7, r6
 80049c8:	42bb      	cmp	r3, r7
 80049ca:	460e      	mov	r6, r1
 80049cc:	d9f4      	bls.n	80049b8 <_printf_i+0x118>
 80049ce:	2b08      	cmp	r3, #8
 80049d0:	d10b      	bne.n	80049ea <_printf_i+0x14a>
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	07de      	lsls	r6, r3, #31
 80049d6:	d508      	bpl.n	80049ea <_printf_i+0x14a>
 80049d8:	6923      	ldr	r3, [r4, #16]
 80049da:	6861      	ldr	r1, [r4, #4]
 80049dc:	4299      	cmp	r1, r3
 80049de:	bfde      	ittt	le
 80049e0:	2330      	movle	r3, #48	; 0x30
 80049e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049ea:	1b52      	subs	r2, r2, r5
 80049ec:	6122      	str	r2, [r4, #16]
 80049ee:	464b      	mov	r3, r9
 80049f0:	4621      	mov	r1, r4
 80049f2:	4640      	mov	r0, r8
 80049f4:	f8cd a000 	str.w	sl, [sp]
 80049f8:	aa03      	add	r2, sp, #12
 80049fa:	f7ff fedf 	bl	80047bc <_printf_common>
 80049fe:	3001      	adds	r0, #1
 8004a00:	d14a      	bne.n	8004a98 <_printf_i+0x1f8>
 8004a02:	f04f 30ff 	mov.w	r0, #4294967295
 8004a06:	b004      	add	sp, #16
 8004a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	f043 0320 	orr.w	r3, r3, #32
 8004a12:	6023      	str	r3, [r4, #0]
 8004a14:	2778      	movs	r7, #120	; 0x78
 8004a16:	4832      	ldr	r0, [pc, #200]	; (8004ae0 <_printf_i+0x240>)
 8004a18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	6829      	ldr	r1, [r5, #0]
 8004a20:	061f      	lsls	r7, r3, #24
 8004a22:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a26:	d402      	bmi.n	8004a2e <_printf_i+0x18e>
 8004a28:	065f      	lsls	r7, r3, #25
 8004a2a:	bf48      	it	mi
 8004a2c:	b2b6      	uxthmi	r6, r6
 8004a2e:	07df      	lsls	r7, r3, #31
 8004a30:	bf48      	it	mi
 8004a32:	f043 0320 	orrmi.w	r3, r3, #32
 8004a36:	6029      	str	r1, [r5, #0]
 8004a38:	bf48      	it	mi
 8004a3a:	6023      	strmi	r3, [r4, #0]
 8004a3c:	b91e      	cbnz	r6, 8004a46 <_printf_i+0x1a6>
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	f023 0320 	bic.w	r3, r3, #32
 8004a44:	6023      	str	r3, [r4, #0]
 8004a46:	2310      	movs	r3, #16
 8004a48:	e7a6      	b.n	8004998 <_printf_i+0xf8>
 8004a4a:	4824      	ldr	r0, [pc, #144]	; (8004adc <_printf_i+0x23c>)
 8004a4c:	e7e4      	b.n	8004a18 <_printf_i+0x178>
 8004a4e:	4615      	mov	r5, r2
 8004a50:	e7bd      	b.n	80049ce <_printf_i+0x12e>
 8004a52:	682b      	ldr	r3, [r5, #0]
 8004a54:	6826      	ldr	r6, [r4, #0]
 8004a56:	1d18      	adds	r0, r3, #4
 8004a58:	6961      	ldr	r1, [r4, #20]
 8004a5a:	6028      	str	r0, [r5, #0]
 8004a5c:	0635      	lsls	r5, r6, #24
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	d501      	bpl.n	8004a66 <_printf_i+0x1c6>
 8004a62:	6019      	str	r1, [r3, #0]
 8004a64:	e002      	b.n	8004a6c <_printf_i+0x1cc>
 8004a66:	0670      	lsls	r0, r6, #25
 8004a68:	d5fb      	bpl.n	8004a62 <_printf_i+0x1c2>
 8004a6a:	8019      	strh	r1, [r3, #0]
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	4615      	mov	r5, r2
 8004a70:	6123      	str	r3, [r4, #16]
 8004a72:	e7bc      	b.n	80049ee <_printf_i+0x14e>
 8004a74:	682b      	ldr	r3, [r5, #0]
 8004a76:	2100      	movs	r1, #0
 8004a78:	1d1a      	adds	r2, r3, #4
 8004a7a:	602a      	str	r2, [r5, #0]
 8004a7c:	681d      	ldr	r5, [r3, #0]
 8004a7e:	6862      	ldr	r2, [r4, #4]
 8004a80:	4628      	mov	r0, r5
 8004a82:	f000 f859 	bl	8004b38 <memchr>
 8004a86:	b108      	cbz	r0, 8004a8c <_printf_i+0x1ec>
 8004a88:	1b40      	subs	r0, r0, r5
 8004a8a:	6060      	str	r0, [r4, #4]
 8004a8c:	6863      	ldr	r3, [r4, #4]
 8004a8e:	6123      	str	r3, [r4, #16]
 8004a90:	2300      	movs	r3, #0
 8004a92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a96:	e7aa      	b.n	80049ee <_printf_i+0x14e>
 8004a98:	462a      	mov	r2, r5
 8004a9a:	4649      	mov	r1, r9
 8004a9c:	4640      	mov	r0, r8
 8004a9e:	6923      	ldr	r3, [r4, #16]
 8004aa0:	47d0      	blx	sl
 8004aa2:	3001      	adds	r0, #1
 8004aa4:	d0ad      	beq.n	8004a02 <_printf_i+0x162>
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	079b      	lsls	r3, r3, #30
 8004aaa:	d413      	bmi.n	8004ad4 <_printf_i+0x234>
 8004aac:	68e0      	ldr	r0, [r4, #12]
 8004aae:	9b03      	ldr	r3, [sp, #12]
 8004ab0:	4298      	cmp	r0, r3
 8004ab2:	bfb8      	it	lt
 8004ab4:	4618      	movlt	r0, r3
 8004ab6:	e7a6      	b.n	8004a06 <_printf_i+0x166>
 8004ab8:	2301      	movs	r3, #1
 8004aba:	4632      	mov	r2, r6
 8004abc:	4649      	mov	r1, r9
 8004abe:	4640      	mov	r0, r8
 8004ac0:	47d0      	blx	sl
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	d09d      	beq.n	8004a02 <_printf_i+0x162>
 8004ac6:	3501      	adds	r5, #1
 8004ac8:	68e3      	ldr	r3, [r4, #12]
 8004aca:	9903      	ldr	r1, [sp, #12]
 8004acc:	1a5b      	subs	r3, r3, r1
 8004ace:	42ab      	cmp	r3, r5
 8004ad0:	dcf2      	bgt.n	8004ab8 <_printf_i+0x218>
 8004ad2:	e7eb      	b.n	8004aac <_printf_i+0x20c>
 8004ad4:	2500      	movs	r5, #0
 8004ad6:	f104 0619 	add.w	r6, r4, #25
 8004ada:	e7f5      	b.n	8004ac8 <_printf_i+0x228>
 8004adc:	08004c37 	.word	0x08004c37
 8004ae0:	08004c48 	.word	0x08004c48

08004ae4 <memmove>:
 8004ae4:	4288      	cmp	r0, r1
 8004ae6:	b510      	push	{r4, lr}
 8004ae8:	eb01 0402 	add.w	r4, r1, r2
 8004aec:	d902      	bls.n	8004af4 <memmove+0x10>
 8004aee:	4284      	cmp	r4, r0
 8004af0:	4623      	mov	r3, r4
 8004af2:	d807      	bhi.n	8004b04 <memmove+0x20>
 8004af4:	1e43      	subs	r3, r0, #1
 8004af6:	42a1      	cmp	r1, r4
 8004af8:	d008      	beq.n	8004b0c <memmove+0x28>
 8004afa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004afe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b02:	e7f8      	b.n	8004af6 <memmove+0x12>
 8004b04:	4601      	mov	r1, r0
 8004b06:	4402      	add	r2, r0
 8004b08:	428a      	cmp	r2, r1
 8004b0a:	d100      	bne.n	8004b0e <memmove+0x2a>
 8004b0c:	bd10      	pop	{r4, pc}
 8004b0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b16:	e7f7      	b.n	8004b08 <memmove+0x24>

08004b18 <_sbrk_r>:
 8004b18:	b538      	push	{r3, r4, r5, lr}
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	4d05      	ldr	r5, [pc, #20]	; (8004b34 <_sbrk_r+0x1c>)
 8004b1e:	4604      	mov	r4, r0
 8004b20:	4608      	mov	r0, r1
 8004b22:	602b      	str	r3, [r5, #0]
 8004b24:	f7fc fadc 	bl	80010e0 <_sbrk>
 8004b28:	1c43      	adds	r3, r0, #1
 8004b2a:	d102      	bne.n	8004b32 <_sbrk_r+0x1a>
 8004b2c:	682b      	ldr	r3, [r5, #0]
 8004b2e:	b103      	cbz	r3, 8004b32 <_sbrk_r+0x1a>
 8004b30:	6023      	str	r3, [r4, #0]
 8004b32:	bd38      	pop	{r3, r4, r5, pc}
 8004b34:	20000350 	.word	0x20000350

08004b38 <memchr>:
 8004b38:	4603      	mov	r3, r0
 8004b3a:	b510      	push	{r4, lr}
 8004b3c:	b2c9      	uxtb	r1, r1
 8004b3e:	4402      	add	r2, r0
 8004b40:	4293      	cmp	r3, r2
 8004b42:	4618      	mov	r0, r3
 8004b44:	d101      	bne.n	8004b4a <memchr+0x12>
 8004b46:	2000      	movs	r0, #0
 8004b48:	e003      	b.n	8004b52 <memchr+0x1a>
 8004b4a:	7804      	ldrb	r4, [r0, #0]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	428c      	cmp	r4, r1
 8004b50:	d1f6      	bne.n	8004b40 <memchr+0x8>
 8004b52:	bd10      	pop	{r4, pc}

08004b54 <memcpy>:
 8004b54:	440a      	add	r2, r1
 8004b56:	4291      	cmp	r1, r2
 8004b58:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b5c:	d100      	bne.n	8004b60 <memcpy+0xc>
 8004b5e:	4770      	bx	lr
 8004b60:	b510      	push	{r4, lr}
 8004b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b66:	4291      	cmp	r1, r2
 8004b68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b6c:	d1f9      	bne.n	8004b62 <memcpy+0xe>
 8004b6e:	bd10      	pop	{r4, pc}

08004b70 <_realloc_r>:
 8004b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b74:	4680      	mov	r8, r0
 8004b76:	4614      	mov	r4, r2
 8004b78:	460e      	mov	r6, r1
 8004b7a:	b921      	cbnz	r1, 8004b86 <_realloc_r+0x16>
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b82:	f7ff bc37 	b.w	80043f4 <_malloc_r>
 8004b86:	b92a      	cbnz	r2, 8004b94 <_realloc_r+0x24>
 8004b88:	f7ff fbcc 	bl	8004324 <_free_r>
 8004b8c:	4625      	mov	r5, r4
 8004b8e:	4628      	mov	r0, r5
 8004b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b94:	f000 f81b 	bl	8004bce <_malloc_usable_size_r>
 8004b98:	4284      	cmp	r4, r0
 8004b9a:	4607      	mov	r7, r0
 8004b9c:	d802      	bhi.n	8004ba4 <_realloc_r+0x34>
 8004b9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ba2:	d812      	bhi.n	8004bca <_realloc_r+0x5a>
 8004ba4:	4621      	mov	r1, r4
 8004ba6:	4640      	mov	r0, r8
 8004ba8:	f7ff fc24 	bl	80043f4 <_malloc_r>
 8004bac:	4605      	mov	r5, r0
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	d0ed      	beq.n	8004b8e <_realloc_r+0x1e>
 8004bb2:	42bc      	cmp	r4, r7
 8004bb4:	4622      	mov	r2, r4
 8004bb6:	4631      	mov	r1, r6
 8004bb8:	bf28      	it	cs
 8004bba:	463a      	movcs	r2, r7
 8004bbc:	f7ff ffca 	bl	8004b54 <memcpy>
 8004bc0:	4631      	mov	r1, r6
 8004bc2:	4640      	mov	r0, r8
 8004bc4:	f7ff fbae 	bl	8004324 <_free_r>
 8004bc8:	e7e1      	b.n	8004b8e <_realloc_r+0x1e>
 8004bca:	4635      	mov	r5, r6
 8004bcc:	e7df      	b.n	8004b8e <_realloc_r+0x1e>

08004bce <_malloc_usable_size_r>:
 8004bce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bd2:	1f18      	subs	r0, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	bfbc      	itt	lt
 8004bd8:	580b      	ldrlt	r3, [r1, r0]
 8004bda:	18c0      	addlt	r0, r0, r3
 8004bdc:	4770      	bx	lr
	...

08004be0 <_init>:
 8004be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be2:	bf00      	nop
 8004be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004be6:	bc08      	pop	{r3}
 8004be8:	469e      	mov	lr, r3
 8004bea:	4770      	bx	lr

08004bec <_fini>:
 8004bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bee:	bf00      	nop
 8004bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bf2:	bc08      	pop	{r3}
 8004bf4:	469e      	mov	lr, r3
 8004bf6:	4770      	bx	lr
