
Tester_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08004058  08004058  00014058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040bc  080040bc  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080040bc  080040bc  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040bc  080040bc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040bc  080040bc  000140bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040c0  080040c0  000140c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080040c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000064  08004128  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08004128  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d7a5  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f31  00000000  00000000  0002d875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d78  00000000  00000000  0002f7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a89  00000000  00000000  00030520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018038  00000000  00000000  00030fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f9eb  00000000  00000000  00048fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d0a3  00000000  00000000  000589cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e04  00000000  00000000  000e5a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000e9874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08004040 	.word	0x08004040

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08004040 	.word	0x08004040

0800014c <HAL_CAN_RxFifo1MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &ReadRsp_RxHeader, ReadRsp_RxData) != HAL_OK)
 8000154:	4b12      	ldr	r3, [pc, #72]	; (80001a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>)
 8000156:	4a13      	ldr	r2, [pc, #76]	; (80001a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 8000158:	2101      	movs	r1, #1
 800015a:	6878      	ldr	r0, [r7, #4]
 800015c:	f000 ff71 	bl	8001042 <HAL_CAN_GetRxMessage>
 8000160:	4603      	mov	r3, r0
 8000162:	2b00      	cmp	r3, #0
 8000164:	d003      	beq.n	800016e <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
	{
		error_flag = 1;
 8000166:	4b10      	ldr	r3, [pc, #64]	; (80001a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 8000168:	2201      	movs	r2, #1
 800016a:	701a      	strb	r2, [r3, #0]
	{
		FT_String = SF_N_PCI_FrameTypeHandle(ReadRsp_RxData[3]);
		FrameType = GetFrameType(FT_String);
		flag_read_response = 1;
	}
}
 800016c:	e014      	b.n	8000198 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>
		FT_String = SF_N_PCI_FrameTypeHandle(ReadRsp_RxData[3]);
 800016e:	4b0c      	ldr	r3, [pc, #48]	; (80001a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>)
 8000170:	78db      	ldrb	r3, [r3, #3]
 8000172:	4618      	mov	r0, r3
 8000174:	f000 f846 	bl	8000204 <SF_N_PCI_FrameTypeHandle>
 8000178:	4603      	mov	r3, r0
 800017a:	461a      	mov	r2, r3
 800017c:	4b0b      	ldr	r3, [pc, #44]	; (80001ac <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 800017e:	701a      	strb	r2, [r3, #0]
		FrameType = GetFrameType(FT_String);
 8000180:	4b0a      	ldr	r3, [pc, #40]	; (80001ac <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	4618      	mov	r0, r3
 8000186:	f000 f817 	bl	80001b8 <GetFrameType>
 800018a:	4603      	mov	r3, r0
 800018c:	461a      	mov	r2, r3
 800018e:	4b08      	ldr	r3, [pc, #32]	; (80001b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x64>)
 8000190:	701a      	strb	r2, [r3, #0]
		flag_read_response = 1;
 8000192:	4b08      	ldr	r3, [pc, #32]	; (80001b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 8000194:	2201      	movs	r2, #1
 8000196:	701a      	strb	r2, [r3, #0]
}
 8000198:	bf00      	nop
 800019a:	3708      	adds	r7, #8
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	20000174 	.word	0x20000174
 80001a4:	20000150 	.word	0x20000150
 80001a8:	20000170 	.word	0x20000170
 80001ac:	200001b4 	.word	0x200001b4
 80001b0:	200001b5 	.word	0x200001b5
 80001b4:	200001b6 	.word	0x200001b6

080001b8 <GetFrameType>:

uint8_t GetFrameType(uint8_t FT_byteString) //Frame type co the dung chung cho SF FF
{
 80001b8:	b480      	push	{r7}
 80001ba:	b085      	sub	sp, #20
 80001bc:	af00      	add	r7, sp, #0
 80001be:	4603      	mov	r3, r0
 80001c0:	71fb      	strb	r3, [r7, #7]
	uint8_t FT_res;
	switch(FT_byteString)
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	2b03      	cmp	r3, #3
 80001c6:	d817      	bhi.n	80001f8 <GetFrameType+0x40>
 80001c8:	a201      	add	r2, pc, #4	; (adr r2, 80001d0 <GetFrameType+0x18>)
 80001ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ce:	bf00      	nop
 80001d0:	080001e1 	.word	0x080001e1
 80001d4:	080001e7 	.word	0x080001e7
 80001d8:	080001ed 	.word	0x080001ed
 80001dc:	080001f3 	.word	0x080001f3
	{
		case FT_SINGLEFRAME:
		{
			FT_res = 0;
 80001e0:	2300      	movs	r3, #0
 80001e2:	73fb      	strb	r3, [r7, #15]
			break;
 80001e4:	e008      	b.n	80001f8 <GetFrameType+0x40>
		}
		case FT_FIRSTFRAME:
		{
			FT_res = 1;
 80001e6:	2301      	movs	r3, #1
 80001e8:	73fb      	strb	r3, [r7, #15]
			break;
 80001ea:	e005      	b.n	80001f8 <GetFrameType+0x40>
		}
		case FT_CONSECUTIVEFRAME:
		{
			FT_res = 2;
 80001ec:	2302      	movs	r3, #2
 80001ee:	73fb      	strb	r3, [r7, #15]
			break;
 80001f0:	e002      	b.n	80001f8 <GetFrameType+0x40>
		}
		case FT_FLOWCONTROL:
		{
			FT_res = 3;
 80001f2:	2303      	movs	r3, #3
 80001f4:	73fb      	strb	r3, [r7, #15]
			break;
 80001f6:	bf00      	nop
		}
	}
	return FT_res;
 80001f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80001fa:	4618      	mov	r0, r3
 80001fc:	3714      	adds	r7, #20
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr

08000204 <SF_N_PCI_FrameTypeHandle>:

uint8_t SF_N_PCI_FrameTypeHandle(uint8_t byteString) //SF_PCI: Single Frame Protocol Control Info: FT + DL
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
	return (byteString >> 4) & 0x03;
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	091b      	lsrs	r3, r3, #4
 8000212:	b2db      	uxtb	r3, r3
 8000214:	f003 0303 	and.w	r3, r3, #3
 8000218:	b2db      	uxtb	r3, r3
}
 800021a:	4618      	mov	r0, r3
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr

08000224 <ReadRequest_handle>:

void ReadRequest_handle(void) //send read request to ECU
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	//Gui theo chu ky 1s, tuc la cu 1 giay gui goi tin de doc 1 lan
	HAL_Delay(1000);
 8000228:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800022c:	f000 fc0e 	bl	8000a4c <HAL_Delay>

	if (HAL_CAN_AddTxMessage(&hcan, &ReadRq_TxHeader, ReadRq_TxData, &ReadRq_TxMailbox) != HAL_OK)
 8000230:	4b08      	ldr	r3, [pc, #32]	; (8000254 <ReadRequest_handle+0x30>)
 8000232:	4a09      	ldr	r2, [pc, #36]	; (8000258 <ReadRequest_handle+0x34>)
 8000234:	4909      	ldr	r1, [pc, #36]	; (800025c <ReadRequest_handle+0x38>)
 8000236:	480a      	ldr	r0, [pc, #40]	; (8000260 <ReadRequest_handle+0x3c>)
 8000238:	f000 fe34 	bl	8000ea4 <HAL_CAN_AddTxMessage>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d003      	beq.n	800024a <ReadRequest_handle+0x26>
	{
		error_flag = 1;
 8000242:	4b08      	ldr	r3, [pc, #32]	; (8000264 <ReadRequest_handle+0x40>)
 8000244:	2201      	movs	r2, #1
 8000246:	701a      	strb	r2, [r3, #0]
	} else //Transmit oke
	{
		error_flag = 0;
	}
}
 8000248:	e002      	b.n	8000250 <ReadRequest_handle+0x2c>
		error_flag = 0;
 800024a:	4b06      	ldr	r3, [pc, #24]	; (8000264 <ReadRequest_handle+0x40>)
 800024c:	2200      	movs	r2, #0
 800024e:	701a      	strb	r2, [r3, #0]
}
 8000250:	bf00      	nop
 8000252:	bd80      	pop	{r7, pc}
 8000254:	2000016c 	.word	0x2000016c
 8000258:	20000000 	.word	0x20000000
 800025c:	20000138 	.word	0x20000138
 8000260:	20000080 	.word	0x20000080
 8000264:	20000170 	.word	0x20000170

08000268 <ReadSingleFrame_handle>:
{

}

void ReadSingleFrame_handle(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	//oled debugger - in ra du lieu vua nhan duoc thong qua single frame
	memset(Tx_Buffer,0,sizeof(Tx_Buffer)); //clear buffer before write
 800026c:	2237      	movs	r2, #55	; 0x37
 800026e:	2100      	movs	r1, #0
 8000270:	4809      	ldr	r0, [pc, #36]	; (8000298 <ReadSingleFrame_handle+0x30>)
 8000272:	f003 fa53 	bl	800371c <memset>
	sprintf((char*)Tx_Buffer,"%s",ReadRsp_RxData);
 8000276:	4a09      	ldr	r2, [pc, #36]	; (800029c <ReadSingleFrame_handle+0x34>)
 8000278:	4909      	ldr	r1, [pc, #36]	; (80002a0 <ReadSingleFrame_handle+0x38>)
 800027a:	4807      	ldr	r0, [pc, #28]	; (8000298 <ReadSingleFrame_handle+0x30>)
 800027c:	f003 fa2e 	bl	80036dc <siprintf>
	HAL_UART_Transmit(&huart1,Tx_Buffer,sizeof(Tx_Buffer), 10);
 8000280:	230a      	movs	r3, #10
 8000282:	2237      	movs	r2, #55	; 0x37
 8000284:	4904      	ldr	r1, [pc, #16]	; (8000298 <ReadSingleFrame_handle+0x30>)
 8000286:	4807      	ldr	r0, [pc, #28]	; (80002a4 <ReadSingleFrame_handle+0x3c>)
 8000288:	f002 fc54 	bl	8002b34 <HAL_UART_Transmit>

	HAL_Delay(200);
 800028c:	20c8      	movs	r0, #200	; 0xc8
 800028e:	f000 fbdd 	bl	8000a4c <HAL_Delay>
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	2000017c 	.word	0x2000017c
 800029c:	20000174 	.word	0x20000174
 80002a0:	08004058 	.word	0x08004058
 80002a4:	200000f0 	.word	0x200000f0

080002a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b08a      	sub	sp, #40	; 0x28
 80002ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ae:	f000 fb6b 	bl	8000988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b2:	f000 f881 	bl	80003b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b6:	f000 f975 	bl	80005a4 <MX_GPIO_Init>
  MX_CAN_Init();
 80002ba:	f000 f8c3 	bl	8000444 <MX_CAN_Init>
  MX_TIM4_Init();
 80002be:	f000 f8f9 	bl	80004b4 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80002c2:	f000 f945 	bl	8000550 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Init(&hcan);
 80002c6:	4837      	ldr	r0, [pc, #220]	; (80003a4 <main+0xfc>)
 80002c8:	f000 fbe4 	bl	8000a94 <HAL_CAN_Init>

  //Send notify signal to recieve message from actuator node
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 80002cc:	2110      	movs	r1, #16
 80002ce:	4835      	ldr	r0, [pc, #212]	; (80003a4 <main+0xfc>)
 80002d0:	f000 ffd8 	bl	8001284 <HAL_CAN_ActivateNotification>

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80002d4:	2301      	movs	r3, #1
 80002d6:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 1;  // anything between 0 to SlaveStartFilterBank
 80002d8:	2301      	movs	r3, #1
 80002da:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 80002dc:	2301      	movs	r3, #1
 80002de:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x7A2 << 5;
 80002e0:	f24f 4340 	movw	r3, #62528	; 0xf440
 80002e4:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 80002e6:	2300      	movs	r3, #0
 80002e8:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x7A2 << 5;
 80002ea:	f24f 4340 	movw	r3, #62528	; 0xf440
 80002ee:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80002f0:	2300      	movs	r3, #0
 80002f2:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80002f4:	2300      	movs	r3, #0
 80002f6:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80002f8:	2301      	movs	r3, #1
 80002fa:	61fb      	str	r3, [r7, #28]
   //canfilterconfig.SlaveStartFilterBank = 14;
  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80002fc:	463b      	mov	r3, r7
 80002fe:	4619      	mov	r1, r3
 8000300:	4828      	ldr	r0, [pc, #160]	; (80003a4 <main+0xfc>)
 8000302:	f000 fcc2 	bl	8000c8a <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan);
 8000306:	4827      	ldr	r0, [pc, #156]	; (80003a4 <main+0xfc>)
 8000308:	f000 fd88 	bl	8000e1c <HAL_CAN_Start>

  //Config CAN header
  ReadRq_TxHeader.DLC = 8;
 800030c:	4b26      	ldr	r3, [pc, #152]	; (80003a8 <main+0x100>)
 800030e:	2208      	movs	r2, #8
 8000310:	611a      	str	r2, [r3, #16]
  ReadRq_TxHeader.ExtId = 0;
 8000312:	4b25      	ldr	r3, [pc, #148]	; (80003a8 <main+0x100>)
 8000314:	2200      	movs	r2, #0
 8000316:	605a      	str	r2, [r3, #4]
  ReadRq_TxHeader.IDE = CAN_ID_STD;
 8000318:	4b23      	ldr	r3, [pc, #140]	; (80003a8 <main+0x100>)
 800031a:	2200      	movs	r2, #0
 800031c:	609a      	str	r2, [r3, #8]
  ReadRq_TxHeader.RTR = CAN_RTR_DATA;
 800031e:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <main+0x100>)
 8000320:	2200      	movs	r2, #0
 8000322:	60da      	str	r2, [r3, #12]
  ReadRq_TxHeader.StdId = 0x712;
 8000324:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <main+0x100>)
 8000326:	f240 7212 	movw	r2, #1810	; 0x712
 800032a:	601a      	str	r2, [r3, #0]
  ReadRq_TxHeader.TransmitGlobalTime = DISABLE;
 800032c:	4b1e      	ldr	r3, [pc, #120]	; (80003a8 <main+0x100>)
 800032e:	2200      	movs	r2, #0
 8000330:	751a      	strb	r2, [r3, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 switch(tester_state) //change state
 8000332:	4b1e      	ldr	r3, [pc, #120]	; (80003ac <main+0x104>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b03      	cmp	r3, #3
 8000338:	d8fb      	bhi.n	8000332 <main+0x8a>
 800033a:	a201      	add	r2, pc, #4	; (adr r2, 8000340 <main+0x98>)
 800033c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000340:	08000351 	.word	0x08000351
 8000344:	08000385 	.word	0x08000385
 8000348:	08000391 	.word	0x08000391
 800034c:	08000333 	.word	0x08000333
	 {
	 	case REQUEST_READ: //send to ECU
	 	{
	 		ReadRequest_handle();
 8000350:	f7ff ff68 	bl	8000224 <ReadRequest_handle>
	 		if(FrameType == FT_SINGLEFRAME && flag_read_response == 1) {
 8000354:	4b16      	ldr	r3, [pc, #88]	; (80003b0 <main+0x108>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d107      	bne.n	800036c <main+0xc4>
 800035c:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <main+0x10c>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2b01      	cmp	r3, #1
 8000362:	d103      	bne.n	800036c <main+0xc4>
	 			tester_state = READ_SINGLEFRAME;
 8000364:	4b11      	ldr	r3, [pc, #68]	; (80003ac <main+0x104>)
 8000366:	2201      	movs	r2, #1
 8000368:	701a      	strb	r2, [r3, #0]
	 		{
	 			tester_state = READ_FIRSTFRAME;
	 		} else {
	 			tester_state = REQUEST_READ;
	 		}
	 		break;
 800036a:	e01a      	b.n	80003a2 <main+0xfa>
	 		} else if(FrameType == FT_FIRSTFRAME)
 800036c:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <main+0x108>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d103      	bne.n	800037c <main+0xd4>
	 			tester_state = READ_FIRSTFRAME;
 8000374:	4b0d      	ldr	r3, [pc, #52]	; (80003ac <main+0x104>)
 8000376:	2202      	movs	r2, #2
 8000378:	701a      	strb	r2, [r3, #0]
	 		break;
 800037a:	e012      	b.n	80003a2 <main+0xfa>
	 			tester_state = REQUEST_READ;
 800037c:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <main+0x104>)
 800037e:	2200      	movs	r2, #0
 8000380:	701a      	strb	r2, [r3, #0]
	 		break;
 8000382:	e00e      	b.n	80003a2 <main+0xfa>
	 	}
	 	case READ_SINGLEFRAME: //Read from ECU
	 	{
	 		tester_state = REQUEST_READ;
 8000384:	4b09      	ldr	r3, [pc, #36]	; (80003ac <main+0x104>)
 8000386:	2200      	movs	r2, #0
 8000388:	701a      	strb	r2, [r3, #0]
	 		ReadSingleFrame_handle();
 800038a:	f7ff ff6d 	bl	8000268 <ReadSingleFrame_handle>
	 		break;
 800038e:	e008      	b.n	80003a2 <main+0xfa>
	 	{
	 		//neu nhan duoc first frame thi moi nhay vo day
	 		//o trong day can lam 2 viec
	 		//1. lay data nhan duoc
	 		//2. sau khi lay data quang control flow cho ecu
	 		if(FrameType==FT_CONSECUTIVEFRAME)
 8000390:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <main+0x108>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2b02      	cmp	r3, #2
 8000396:	d102      	bne.n	800039e <main+0xf6>
	 		{
	 			tester_state = CONSECUTTIVE_FRAME_READ;
 8000398:	4b04      	ldr	r3, [pc, #16]	; (80003ac <main+0x104>)
 800039a:	2203      	movs	r2, #3
 800039c:	701a      	strb	r2, [r3, #0]
	 		}
	 		//3. sau khi xong viec chuyen sang trang thai nhan consecutive flow
	 		break;
 800039e:	bf00      	nop
 80003a0:	e7c7      	b.n	8000332 <main+0x8a>
	 switch(tester_state) //change state
 80003a2:	e7c6      	b.n	8000332 <main+0x8a>
 80003a4:	20000080 	.word	0x20000080
 80003a8:	20000138 	.word	0x20000138
 80003ac:	200001b3 	.word	0x200001b3
 80003b0:	200001b5 	.word	0x200001b5
 80003b4:	200001b6 	.word	0x200001b6

080003b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b090      	sub	sp, #64	; 0x40
 80003bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003be:	f107 0318 	add.w	r3, r7, #24
 80003c2:	2228      	movs	r2, #40	; 0x28
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f003 f9a8 	bl	800371c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
 80003d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003da:	2301      	movs	r3, #1
 80003dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e8:	2301      	movs	r3, #1
 80003ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ec:	2302      	movs	r3, #2
 80003ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fc:	f107 0318 	add.w	r3, r7, #24
 8000400:	4618      	mov	r0, r3
 8000402:	f001 fccb 	bl	8001d9c <HAL_RCC_OscConfig>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800040c:	f000 f90c 	bl	8000628 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000410:	230f      	movs	r3, #15
 8000412:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000414:	2302      	movs	r3, #2
 8000416:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800041c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000420:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000422:	2300      	movs	r3, #0
 8000424:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	2102      	movs	r1, #2
 800042a:	4618      	mov	r0, r3
 800042c:	f001 ff38 	bl	80022a0 <HAL_RCC_ClockConfig>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000436:	f000 f8f7 	bl	8000628 <Error_Handler>
  }
}
 800043a:	bf00      	nop
 800043c:	3740      	adds	r7, #64	; 0x40
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000448:	4b18      	ldr	r3, [pc, #96]	; (80004ac <MX_CAN_Init+0x68>)
 800044a:	4a19      	ldr	r2, [pc, #100]	; (80004b0 <MX_CAN_Init+0x6c>)
 800044c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800044e:	4b17      	ldr	r3, [pc, #92]	; (80004ac <MX_CAN_Init+0x68>)
 8000450:	2204      	movs	r2, #4
 8000452:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000454:	4b15      	ldr	r3, [pc, #84]	; (80004ac <MX_CAN_Init+0x68>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800045a:	4b14      	ldr	r3, [pc, #80]	; (80004ac <MX_CAN_Init+0x68>)
 800045c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000460:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000462:	4b12      	ldr	r3, [pc, #72]	; (80004ac <MX_CAN_Init+0x68>)
 8000464:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000468:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 800046a:	4b10      	ldr	r3, [pc, #64]	; (80004ac <MX_CAN_Init+0x68>)
 800046c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000470:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <MX_CAN_Init+0x68>)
 8000474:	2200      	movs	r2, #0
 8000476:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <MX_CAN_Init+0x68>)
 800047a:	2200      	movs	r2, #0
 800047c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800047e:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <MX_CAN_Init+0x68>)
 8000480:	2200      	movs	r2, #0
 8000482:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000484:	4b09      	ldr	r3, [pc, #36]	; (80004ac <MX_CAN_Init+0x68>)
 8000486:	2201      	movs	r2, #1
 8000488:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <MX_CAN_Init+0x68>)
 800048c:	2200      	movs	r2, #0
 800048e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <MX_CAN_Init+0x68>)
 8000492:	2200      	movs	r2, #0
 8000494:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000496:	4805      	ldr	r0, [pc, #20]	; (80004ac <MX_CAN_Init+0x68>)
 8000498:	f000 fafc 	bl	8000a94 <HAL_CAN_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80004a2:	f000 f8c1 	bl	8000628 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	20000080 	.word	0x20000080
 80004b0:	40006400 	.word	0x40006400

080004b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ba:	f107 0308 	add.w	r3, r7, #8
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c8:	463b      	mov	r3, r7
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80004d0:	4b1d      	ldr	r3, [pc, #116]	; (8000548 <MX_TIM4_Init+0x94>)
 80004d2:	4a1e      	ldr	r2, [pc, #120]	; (800054c <MX_TIM4_Init+0x98>)
 80004d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80004d6:	4b1c      	ldr	r3, [pc, #112]	; (8000548 <MX_TIM4_Init+0x94>)
 80004d8:	2200      	movs	r2, #0
 80004da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004dc:	4b1a      	ldr	r3, [pc, #104]	; (8000548 <MX_TIM4_Init+0x94>)
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80004e2:	4b19      	ldr	r3, [pc, #100]	; (8000548 <MX_TIM4_Init+0x94>)
 80004e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ea:	4b17      	ldr	r3, [pc, #92]	; (8000548 <MX_TIM4_Init+0x94>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004f0:	4b15      	ldr	r3, [pc, #84]	; (8000548 <MX_TIM4_Init+0x94>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80004f6:	4814      	ldr	r0, [pc, #80]	; (8000548 <MX_TIM4_Init+0x94>)
 80004f8:	f002 f860 	bl	80025bc <HAL_TIM_Base_Init>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000502:	f000 f891 	bl	8000628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800050a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800050c:	f107 0308 	add.w	r3, r7, #8
 8000510:	4619      	mov	r1, r3
 8000512:	480d      	ldr	r0, [pc, #52]	; (8000548 <MX_TIM4_Init+0x94>)
 8000514:	f002 f8a1 	bl	800265a <HAL_TIM_ConfigClockSource>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800051e:	f000 f883 	bl	8000628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000522:	2300      	movs	r3, #0
 8000524:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000526:	2300      	movs	r3, #0
 8000528:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800052a:	463b      	mov	r3, r7
 800052c:	4619      	mov	r1, r3
 800052e:	4806      	ldr	r0, [pc, #24]	; (8000548 <MX_TIM4_Init+0x94>)
 8000530:	f002 fa52 	bl	80029d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800053a:	f000 f875 	bl	8000628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800053e:	bf00      	nop
 8000540:	3718      	adds	r7, #24
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	200000a8 	.word	0x200000a8
 800054c:	40000800 	.word	0x40000800

08000550 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000554:	4b11      	ldr	r3, [pc, #68]	; (800059c <MX_USART1_UART_Init+0x4c>)
 8000556:	4a12      	ldr	r2, [pc, #72]	; (80005a0 <MX_USART1_UART_Init+0x50>)
 8000558:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800055a:	4b10      	ldr	r3, [pc, #64]	; (800059c <MX_USART1_UART_Init+0x4c>)
 800055c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000560:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000562:	4b0e      	ldr	r3, [pc, #56]	; (800059c <MX_USART1_UART_Init+0x4c>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_USART1_UART_Init+0x4c>)
 800056a:	2200      	movs	r2, #0
 800056c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <MX_USART1_UART_Init+0x4c>)
 8000570:	2200      	movs	r2, #0
 8000572:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_USART1_UART_Init+0x4c>)
 8000576:	220c      	movs	r2, #12
 8000578:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800057a:	4b08      	ldr	r3, [pc, #32]	; (800059c <MX_USART1_UART_Init+0x4c>)
 800057c:	2200      	movs	r2, #0
 800057e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <MX_USART1_UART_Init+0x4c>)
 8000582:	2200      	movs	r2, #0
 8000584:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000586:	4805      	ldr	r0, [pc, #20]	; (800059c <MX_USART1_UART_Init+0x4c>)
 8000588:	f002 fa84 	bl	8002a94 <HAL_UART_Init>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000592:	f000 f849 	bl	8000628 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	200000f0 	.word	0x200000f0
 80005a0:	40013800 	.word	0x40013800

080005a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	f107 0310 	add.w	r3, r7, #16
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b8:	4b19      	ldr	r3, [pc, #100]	; (8000620 <MX_GPIO_Init+0x7c>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a18      	ldr	r2, [pc, #96]	; (8000620 <MX_GPIO_Init+0x7c>)
 80005be:	f043 0320 	orr.w	r3, r3, #32
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b16      	ldr	r3, [pc, #88]	; (8000620 <MX_GPIO_Init+0x7c>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0320 	and.w	r3, r3, #32
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <MX_GPIO_Init+0x7c>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a12      	ldr	r2, [pc, #72]	; (8000620 <MX_GPIO_Init+0x7c>)
 80005d6:	f043 0308 	orr.w	r3, r3, #8
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b10      	ldr	r3, [pc, #64]	; (8000620 <MX_GPIO_Init+0x7c>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f003 0308 	and.w	r3, r3, #8
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <MX_GPIO_Init+0x7c>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <MX_GPIO_Init+0x7c>)
 80005ee:	f043 0304 	orr.w	r3, r3, #4
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <MX_GPIO_Init+0x7c>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0304 	and.w	r3, r3, #4
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 8000600:	2302      	movs	r3, #2
 8000602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000608:	2302      	movs	r3, #2
 800060a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 800060c:	f107 0310 	add.w	r3, r7, #16
 8000610:	4619      	mov	r1, r3
 8000612:	4804      	ldr	r0, [pc, #16]	; (8000624 <MX_GPIO_Init+0x80>)
 8000614:	f001 fa3e 	bl	8001a94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000618:	bf00      	nop
 800061a:	3720      	adds	r7, #32
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40021000 	.word	0x40021000
 8000624:	40010c00 	.word	0x40010c00

08000628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800062c:	b672      	cpsid	i
}
 800062e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000630:	e7fe      	b.n	8000630 <Error_Handler+0x8>
	...

08000634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <HAL_MspInit+0x5c>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	4a14      	ldr	r2, [pc, #80]	; (8000690 <HAL_MspInit+0x5c>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6193      	str	r3, [r2, #24]
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_MspInit+0x5c>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <HAL_MspInit+0x5c>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <HAL_MspInit+0x5c>)
 8000658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065c:	61d3      	str	r3, [r2, #28]
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <HAL_MspInit+0x5c>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <HAL_MspInit+0x60>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	4a04      	ldr	r2, [pc, #16]	; (8000694 <HAL_MspInit+0x60>)
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr
 8000690:	40021000 	.word	0x40021000
 8000694:	40010000 	.word	0x40010000

08000698 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a29      	ldr	r2, [pc, #164]	; (8000758 <HAL_CAN_MspInit+0xc0>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d14b      	bne.n	8000750 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006b8:	4b28      	ldr	r3, [pc, #160]	; (800075c <HAL_CAN_MspInit+0xc4>)
 80006ba:	69db      	ldr	r3, [r3, #28]
 80006bc:	4a27      	ldr	r2, [pc, #156]	; (800075c <HAL_CAN_MspInit+0xc4>)
 80006be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006c2:	61d3      	str	r3, [r2, #28]
 80006c4:	4b25      	ldr	r3, [pc, #148]	; (800075c <HAL_CAN_MspInit+0xc4>)
 80006c6:	69db      	ldr	r3, [r3, #28]
 80006c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d0:	4b22      	ldr	r3, [pc, #136]	; (800075c <HAL_CAN_MspInit+0xc4>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <HAL_CAN_MspInit+0xc4>)
 80006d6:	f043 0308 	orr.w	r3, r3, #8
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <HAL_CAN_MspInit+0xc4>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0308 	and.w	r3, r3, #8
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	4818      	ldr	r0, [pc, #96]	; (8000760 <HAL_CAN_MspInit+0xc8>)
 80006fe:	f001 f9c9 	bl	8001a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000702:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	2302      	movs	r3, #2
 800070a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070c:	2303      	movs	r3, #3
 800070e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	4619      	mov	r1, r3
 8000716:	4812      	ldr	r0, [pc, #72]	; (8000760 <HAL_CAN_MspInit+0xc8>)
 8000718:	f001 f9bc 	bl	8001a94 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <HAL_CAN_MspInit+0xcc>)
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
 8000722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000724:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
 800072a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
 8000732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
 800073a:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <HAL_CAN_MspInit+0xcc>)
 800073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	2100      	movs	r1, #0
 8000744:	2015      	movs	r0, #21
 8000746:	f001 f8bc 	bl	80018c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800074a:	2015      	movs	r0, #21
 800074c:	f001 f8d5 	bl	80018fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000750:	bf00      	nop
 8000752:	3728      	adds	r7, #40	; 0x28
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40006400 	.word	0x40006400
 800075c:	40021000 	.word	0x40021000
 8000760:	40010c00 	.word	0x40010c00
 8000764:	40010000 	.word	0x40010000

08000768 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a09      	ldr	r2, [pc, #36]	; (800079c <HAL_TIM_Base_MspInit+0x34>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d10b      	bne.n	8000792 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <HAL_TIM_Base_MspInit+0x38>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <HAL_TIM_Base_MspInit+0x38>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	61d3      	str	r3, [r2, #28]
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_TIM_Base_MspInit+0x38>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000792:	bf00      	nop
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	40000800 	.word	0x40000800
 80007a0:	40021000 	.word	0x40021000

080007a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a20      	ldr	r2, [pc, #128]	; (8000840 <HAL_UART_MspInit+0x9c>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d139      	bne.n	8000838 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007c4:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <HAL_UART_MspInit+0xa0>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a1e      	ldr	r2, [pc, #120]	; (8000844 <HAL_UART_MspInit+0xa0>)
 80007ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <HAL_UART_MspInit+0xa0>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <HAL_UART_MspInit+0xa0>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a18      	ldr	r2, [pc, #96]	; (8000844 <HAL_UART_MspInit+0xa0>)
 80007e2:	f043 0304 	orr.w	r3, r3, #4
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <HAL_UART_MspInit+0xa0>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f003 0304 	and.w	r3, r3, #4
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	2302      	movs	r3, #2
 80007fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000802:	f107 0310 	add.w	r3, r7, #16
 8000806:	4619      	mov	r1, r3
 8000808:	480f      	ldr	r0, [pc, #60]	; (8000848 <HAL_UART_MspInit+0xa4>)
 800080a:	f001 f943 	bl	8001a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800080e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000812:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	4619      	mov	r1, r3
 8000822:	4809      	ldr	r0, [pc, #36]	; (8000848 <HAL_UART_MspInit+0xa4>)
 8000824:	f001 f936 	bl	8001a94 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2100      	movs	r1, #0
 800082c:	2025      	movs	r0, #37	; 0x25
 800082e:	f001 f848 	bl	80018c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000832:	2025      	movs	r0, #37	; 0x25
 8000834:	f001 f861 	bl	80018fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000838:	bf00      	nop
 800083a:	3720      	adds	r7, #32
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40013800 	.word	0x40013800
 8000844:	40021000 	.word	0x40021000
 8000848:	40010800 	.word	0x40010800

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <NMI_Handler+0x4>

08000852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <HardFault_Handler+0x4>

08000858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800085c:	e7fe      	b.n	800085c <MemManage_Handler+0x4>

0800085e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <BusFault_Handler+0x4>

08000864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <UsageFault_Handler+0x4>

0800086a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr

08000876 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr

08000882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr

0800088e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000892:	f000 f8bf 	bl	8000a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80008a0:	4802      	ldr	r0, [pc, #8]	; (80008ac <CAN1_RX1_IRQHandler+0x10>)
 80008a2:	f000 fd14 	bl	80012ce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000080 	.word	0x20000080

080008b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008b4:	4802      	ldr	r0, [pc, #8]	; (80008c0 <USART1_IRQHandler+0x10>)
 80008b6:	f002 f9c1 	bl	8002c3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200000f0 	.word	0x200000f0

080008c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008cc:	4a14      	ldr	r2, [pc, #80]	; (8000920 <_sbrk+0x5c>)
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <_sbrk+0x60>)
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d8:	4b13      	ldr	r3, [pc, #76]	; (8000928 <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d102      	bne.n	80008e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <_sbrk+0x64>)
 80008e2:	4a12      	ldr	r2, [pc, #72]	; (800092c <_sbrk+0x68>)
 80008e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <_sbrk+0x64>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d207      	bcs.n	8000904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f4:	f002 ff1a 	bl	800372c <__errno>
 80008f8:	4603      	mov	r3, r0
 80008fa:	220c      	movs	r2, #12
 80008fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000902:	e009      	b.n	8000918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <_sbrk+0x64>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090a:	4b07      	ldr	r3, [pc, #28]	; (8000928 <_sbrk+0x64>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	4a05      	ldr	r2, [pc, #20]	; (8000928 <_sbrk+0x64>)
 8000914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000916:	68fb      	ldr	r3, [r7, #12]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20005000 	.word	0x20005000
 8000924:	00000400 	.word	0x00000400
 8000928:	200001b8 	.word	0x200001b8
 800092c:	20000308 	.word	0x20000308

08000930 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr

0800093c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800093c:	f7ff fff8 	bl	8000930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000940:	480b      	ldr	r0, [pc, #44]	; (8000970 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000942:	490c      	ldr	r1, [pc, #48]	; (8000974 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000944:	4a0c      	ldr	r2, [pc, #48]	; (8000978 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000948:	e002      	b.n	8000950 <LoopCopyDataInit>

0800094a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800094c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094e:	3304      	adds	r3, #4

08000950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000954:	d3f9      	bcc.n	800094a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000956:	4a09      	ldr	r2, [pc, #36]	; (800097c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000958:	4c09      	ldr	r4, [pc, #36]	; (8000980 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800095c:	e001      	b.n	8000962 <LoopFillZerobss>

0800095e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000960:	3204      	adds	r2, #4

08000962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000964:	d3fb      	bcc.n	800095e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000966:	f002 fee7 	bl	8003738 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800096a:	f7ff fc9d 	bl	80002a8 <main>
  bx lr
 800096e:	4770      	bx	lr
  ldr r0, =_sdata
 8000970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000974:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000978:	080040c4 	.word	0x080040c4
  ldr r2, =_sbss
 800097c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000980:	20000308 	.word	0x20000308

08000984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC1_2_IRQHandler>
	...

08000988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_Init+0x28>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <HAL_Init+0x28>)
 8000992:	f043 0310 	orr.w	r3, r3, #16
 8000996:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000998:	2003      	movs	r0, #3
 800099a:	f000 ff87 	bl	80018ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099e:	200f      	movs	r0, #15
 80009a0:	f000 f808 	bl	80009b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a4:	f7ff fe46 	bl	8000634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40022000 	.word	0x40022000

080009b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_InitTick+0x54>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_InitTick+0x58>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4619      	mov	r1, r3
 80009c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 ff9f 	bl	8001916 <HAL_SYSTICK_Config>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	e00e      	b.n	8000a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	d80a      	bhi.n	80009fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e8:	2200      	movs	r2, #0
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295
 80009f0:	f000 ff67 	bl	80018c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f4:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <HAL_InitTick+0x5c>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	e000      	b.n	8000a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	20000010 	.word	0x20000010
 8000a10:	2000000c 	.word	0x2000000c

08000a14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <HAL_IncTick+0x1c>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <HAL_IncTick+0x20>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	4a03      	ldr	r2, [pc, #12]	; (8000a34 <HAL_IncTick+0x20>)
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	20000010 	.word	0x20000010
 8000a34:	200001bc 	.word	0x200001bc

08000a38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a3c:	4b02      	ldr	r3, [pc, #8]	; (8000a48 <HAL_GetTick+0x10>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	200001bc 	.word	0x200001bc

08000a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a54:	f7ff fff0 	bl	8000a38 <HAL_GetTick>
 8000a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a64:	d005      	beq.n	8000a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_Delay+0x44>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	4413      	add	r3, r2
 8000a70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a72:	bf00      	nop
 8000a74:	f7ff ffe0 	bl	8000a38 <HAL_GetTick>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d8f7      	bhi.n	8000a74 <HAL_Delay+0x28>
  {
  }
}
 8000a84:	bf00      	nop
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000010 	.word	0x20000010

08000a94 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d101      	bne.n	8000aa6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e0ed      	b.n	8000c82 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d102      	bne.n	8000ab8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff fdf0 	bl	8000698 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f042 0201 	orr.w	r2, r2, #1
 8000ac6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ac8:	f7ff ffb6 	bl	8000a38 <HAL_GetTick>
 8000acc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ace:	e012      	b.n	8000af6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ad0:	f7ff ffb2 	bl	8000a38 <HAL_GetTick>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	2b0a      	cmp	r3, #10
 8000adc:	d90b      	bls.n	8000af6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2205      	movs	r2, #5
 8000aee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e0c5      	b.n	8000c82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d0e5      	beq.n	8000ad0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f022 0202 	bic.w	r2, r2, #2
 8000b12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b14:	f7ff ff90 	bl	8000a38 <HAL_GetTick>
 8000b18:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b1a:	e012      	b.n	8000b42 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b1c:	f7ff ff8c 	bl	8000a38 <HAL_GetTick>
 8000b20:	4602      	mov	r2, r0
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	2b0a      	cmp	r3, #10
 8000b28:	d90b      	bls.n	8000b42 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2205      	movs	r2, #5
 8000b3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e09f      	b.n	8000c82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d1e5      	bne.n	8000b1c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	7e1b      	ldrb	r3, [r3, #24]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d108      	bne.n	8000b6a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	e007      	b.n	8000b7a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	7e5b      	ldrb	r3, [r3, #25]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d108      	bne.n	8000b94 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	e007      	b.n	8000ba4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ba2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	7e9b      	ldrb	r3, [r3, #26]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d108      	bne.n	8000bbe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f042 0220 	orr.w	r2, r2, #32
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	e007      	b.n	8000bce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f022 0220 	bic.w	r2, r2, #32
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	7edb      	ldrb	r3, [r3, #27]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d108      	bne.n	8000be8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f022 0210 	bic.w	r2, r2, #16
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	e007      	b.n	8000bf8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f042 0210 	orr.w	r2, r2, #16
 8000bf6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	7f1b      	ldrb	r3, [r3, #28]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d108      	bne.n	8000c12 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f042 0208 	orr.w	r2, r2, #8
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	e007      	b.n	8000c22 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f022 0208 	bic.w	r2, r2, #8
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	7f5b      	ldrb	r3, [r3, #29]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d108      	bne.n	8000c3c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f042 0204 	orr.w	r2, r2, #4
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	e007      	b.n	8000c4c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f022 0204 	bic.w	r2, r2, #4
 8000c4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	689a      	ldr	r2, [r3, #8]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	431a      	orrs	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	695b      	ldr	r3, [r3, #20]
 8000c60:	ea42 0103 	orr.w	r1, r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	1e5a      	subs	r2, r3, #1
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b087      	sub	sp, #28
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ca0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ca2:	7cfb      	ldrb	r3, [r7, #19]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d003      	beq.n	8000cb0 <HAL_CAN_ConfigFilter+0x26>
 8000ca8:	7cfb      	ldrb	r3, [r7, #19]
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	f040 80aa 	bne.w	8000e04 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000cb6:	f043 0201 	orr.w	r2, r3, #1
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	695b      	ldr	r3, [r3, #20]
 8000cc4:	f003 031f 	and.w	r3, r3, #31
 8000cc8:	2201      	movs	r2, #1
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d123      	bne.n	8000d32 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	401a      	ands	r2, r3
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d08:	683a      	ldr	r2, [r7, #0]
 8000d0a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d0c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3248      	adds	r2, #72	; 0x48
 8000d12:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d26:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d28:	6979      	ldr	r1, [r7, #20]
 8000d2a:	3348      	adds	r3, #72	; 0x48
 8000d2c:	00db      	lsls	r3, r3, #3
 8000d2e:	440b      	add	r3, r1
 8000d30:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d122      	bne.n	8000d80 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	431a      	orrs	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d5a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	3248      	adds	r2, #72	; 0x48
 8000d60:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d74:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d76:	6979      	ldr	r1, [r7, #20]
 8000d78:	3348      	adds	r3, #72	; 0x48
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	440b      	add	r3, r1
 8000d7e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d109      	bne.n	8000d9c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000d9a:	e007      	b.n	8000dac <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	431a      	orrs	r2, r3
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	691b      	ldr	r3, [r3, #16]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d109      	bne.n	8000dc8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000dc6:	e007      	b.n	8000dd8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	431a      	orrs	r2, r3
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	6a1b      	ldr	r3, [r3, #32]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d107      	bne.n	8000df0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	431a      	orrs	r2, r3
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000df6:	f023 0201 	bic.w	r2, r3, #1
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000e00:	2300      	movs	r3, #0
 8000e02:	e006      	b.n	8000e12 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e08:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
  }
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	371c      	adds	r7, #28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d12e      	bne.n	8000e8e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2202      	movs	r2, #2
 8000e34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f022 0201 	bic.w	r2, r2, #1
 8000e46:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e48:	f7ff fdf6 	bl	8000a38 <HAL_GetTick>
 8000e4c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e4e:	e012      	b.n	8000e76 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e50:	f7ff fdf2 	bl	8000a38 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b0a      	cmp	r3, #10
 8000e5c:	d90b      	bls.n	8000e76 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2205      	movs	r2, #5
 8000e6e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e012      	b.n	8000e9c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1e5      	bne.n	8000e50 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e006      	b.n	8000e9c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e92:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
  }
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	; 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
 8000eb0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eb8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ec2:	7ffb      	ldrb	r3, [r7, #31]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d003      	beq.n	8000ed0 <HAL_CAN_AddTxMessage+0x2c>
 8000ec8:	7ffb      	ldrb	r3, [r7, #31]
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	f040 80ad 	bne.w	800102a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d10a      	bne.n	8000ef0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d105      	bne.n	8000ef0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f000 8095 	beq.w	800101a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	0e1b      	lsrs	r3, r3, #24
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000efa:	2201      	movs	r2, #1
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10d      	bne.n	8000f28 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f16:	68f9      	ldr	r1, [r7, #12]
 8000f18:	6809      	ldr	r1, [r1, #0]
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	3318      	adds	r3, #24
 8000f20:	011b      	lsls	r3, r3, #4
 8000f22:	440b      	add	r3, r1
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	e00f      	b.n	8000f48 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f32:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f38:	68f9      	ldr	r1, [r7, #12]
 8000f3a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000f3c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3318      	adds	r3, #24
 8000f42:	011b      	lsls	r3, r3, #4
 8000f44:	440b      	add	r3, r1
 8000f46:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6819      	ldr	r1, [r3, #0]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	691a      	ldr	r2, [r3, #16]
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3318      	adds	r3, #24
 8000f54:	011b      	lsls	r3, r3, #4
 8000f56:	440b      	add	r3, r1
 8000f58:	3304      	adds	r3, #4
 8000f5a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	7d1b      	ldrb	r3, [r3, #20]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d111      	bne.n	8000f88 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	3318      	adds	r3, #24
 8000f6c:	011b      	lsls	r3, r3, #4
 8000f6e:	4413      	add	r3, r2
 8000f70:	3304      	adds	r3, #4
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	68fa      	ldr	r2, [r7, #12]
 8000f76:	6811      	ldr	r1, [r2, #0]
 8000f78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	3318      	adds	r3, #24
 8000f80:	011b      	lsls	r3, r3, #4
 8000f82:	440b      	add	r3, r1
 8000f84:	3304      	adds	r3, #4
 8000f86:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3307      	adds	r3, #7
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	061a      	lsls	r2, r3, #24
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3306      	adds	r3, #6
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	041b      	lsls	r3, r3, #16
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3305      	adds	r3, #5
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	3204      	adds	r2, #4
 8000fa8:	7812      	ldrb	r2, [r2, #0]
 8000faa:	4610      	mov	r0, r2
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	6811      	ldr	r1, [r2, #0]
 8000fb0:	ea43 0200 	orr.w	r2, r3, r0
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	440b      	add	r3, r1
 8000fba:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000fbe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3303      	adds	r3, #3
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	061a      	lsls	r2, r3, #24
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3302      	adds	r3, #2
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	041b      	lsls	r3, r3, #16
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	021b      	lsls	r3, r3, #8
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	7812      	ldrb	r2, [r2, #0]
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	6811      	ldr	r1, [r2, #0]
 8000fe6:	ea43 0200 	orr.w	r2, r3, r0
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	011b      	lsls	r3, r3, #4
 8000fee:	440b      	add	r3, r1
 8000ff0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000ff4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3318      	adds	r3, #24
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	4413      	add	r3, r2
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	6811      	ldr	r1, [r2, #0]
 8001008:	f043 0201 	orr.w	r2, r3, #1
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	3318      	adds	r3, #24
 8001010:	011b      	lsls	r3, r3, #4
 8001012:	440b      	add	r3, r1
 8001014:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	e00e      	b.n	8001038 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e006      	b.n	8001038 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
  }
}
 8001038:	4618      	mov	r0, r3
 800103a:	3724      	adds	r7, #36	; 0x24
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr

08001042 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001042:	b480      	push	{r7}
 8001044:	b087      	sub	sp, #28
 8001046:	af00      	add	r7, sp, #0
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
 800104e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001056:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001058:	7dfb      	ldrb	r3, [r7, #23]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d003      	beq.n	8001066 <HAL_CAN_GetRxMessage+0x24>
 800105e:	7dfb      	ldrb	r3, [r7, #23]
 8001060:	2b02      	cmp	r3, #2
 8001062:	f040 8103 	bne.w	800126c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10e      	bne.n	800108a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d116      	bne.n	80010a8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e0f7      	b.n	800127a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d107      	bne.n	80010a8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e0e8      	b.n	800127a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	331b      	adds	r3, #27
 80010b0:	011b      	lsls	r3, r3, #4
 80010b2:	4413      	add	r3, r2
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0204 	and.w	r2, r3, #4
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10c      	bne.n	80010e0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	331b      	adds	r3, #27
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	4413      	add	r3, r2
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	0d5b      	lsrs	r3, r3, #21
 80010d6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	e00b      	b.n	80010f8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	331b      	adds	r3, #27
 80010e8:	011b      	lsls	r3, r3, #4
 80010ea:	4413      	add	r3, r2
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	08db      	lsrs	r3, r3, #3
 80010f0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	331b      	adds	r3, #27
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	4413      	add	r3, r2
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0202 	and.w	r2, r3, #2
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	331b      	adds	r3, #27
 8001116:	011b      	lsls	r3, r3, #4
 8001118:	4413      	add	r3, r2
 800111a:	3304      	adds	r3, #4
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2208      	movs	r2, #8
 800112a:	611a      	str	r2, [r3, #16]
 800112c:	e00b      	b.n	8001146 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	331b      	adds	r3, #27
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	4413      	add	r3, r2
 800113a:	3304      	adds	r3, #4
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 020f 	and.w	r2, r3, #15
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	331b      	adds	r3, #27
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	4413      	add	r3, r2
 8001152:	3304      	adds	r3, #4
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	0a1b      	lsrs	r3, r3, #8
 8001158:	b2da      	uxtb	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	331b      	adds	r3, #27
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	4413      	add	r3, r2
 800116a:	3304      	adds	r3, #4
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	0c1b      	lsrs	r3, r3, #16
 8001170:	b29a      	uxth	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	4413      	add	r3, r2
 8001180:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	011b      	lsls	r3, r3, #4
 8001194:	4413      	add	r3, r2
 8001196:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	0a1a      	lsrs	r2, r3, #8
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	4413      	add	r3, r2
 80011b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	0c1a      	lsrs	r2, r3, #16
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	3302      	adds	r3, #2
 80011bc:	b2d2      	uxtb	r2, r2
 80011be:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	4413      	add	r3, r2
 80011ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	0e1a      	lsrs	r2, r3, #24
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	3303      	adds	r3, #3
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	011b      	lsls	r3, r3, #4
 80011e2:	4413      	add	r3, r2
 80011e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	3304      	adds	r3, #4
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	011b      	lsls	r3, r3, #4
 80011fa:	4413      	add	r3, r2
 80011fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	0a1a      	lsrs	r2, r3, #8
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	3305      	adds	r3, #5
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	011b      	lsls	r3, r3, #4
 8001214:	4413      	add	r3, r2
 8001216:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	0c1a      	lsrs	r2, r3, #16
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	3306      	adds	r3, #6
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	011b      	lsls	r3, r3, #4
 800122e:	4413      	add	r3, r2
 8001230:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	0e1a      	lsrs	r2, r3, #24
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	3307      	adds	r3, #7
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d108      	bne.n	8001258 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f042 0220 	orr.w	r2, r2, #32
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	e007      	b.n	8001268 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	691a      	ldr	r2, [r3, #16]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0220 	orr.w	r2, r2, #32
 8001266:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	e006      	b.n	800127a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001270:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
  }
}
 800127a:	4618      	mov	r0, r3
 800127c:	371c      	adds	r7, #28
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001294:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d002      	beq.n	80012a2 <HAL_CAN_ActivateNotification+0x1e>
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d109      	bne.n	80012b6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6959      	ldr	r1, [r3, #20]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	430a      	orrs	r2, r1
 80012b0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e006      	b.n	80012c4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
  }
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr

080012ce <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b08a      	sub	sp, #40	; 0x28
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	695b      	ldr	r3, [r3, #20]
 80012e0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800130a:	6a3b      	ldr	r3, [r7, #32]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b00      	cmp	r3, #0
 8001312:	d07c      	beq.n	800140e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b00      	cmp	r3, #0
 800131c:	d023      	beq.n	8001366 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2201      	movs	r2, #1
 8001324:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f983 	bl	800163c <HAL_CAN_TxMailbox0CompleteCallback>
 8001336:	e016      	b.n	8001366 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	2b00      	cmp	r3, #0
 8001340:	d004      	beq.n	800134c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
 800134a:	e00c      	b.n	8001366 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	2b00      	cmp	r3, #0
 8001354:	d004      	beq.n	8001360 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
 800135e:	e002      	b.n	8001366 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 f986 	bl	8001672 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136c:	2b00      	cmp	r3, #0
 800136e:	d024      	beq.n	80013ba <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001378:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f962 	bl	800164e <HAL_CAN_TxMailbox1CompleteCallback>
 800138a:	e016      	b.n	80013ba <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001392:	2b00      	cmp	r3, #0
 8001394:	d004      	beq.n	80013a0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
 800139e:	e00c      	b.n	80013ba <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d004      	beq.n	80013b4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
 80013b2:	e002      	b.n	80013ba <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 f965 	bl	8001684 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d024      	beq.n	800140e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 f941 	bl	8001660 <HAL_CAN_TxMailbox2CompleteCallback>
 80013de:	e016      	b.n	800140e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d004      	beq.n	80013f4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
 80013f2:	e00c      	b.n	800140e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d004      	beq.n	8001408 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
 8001406:	e002      	b.n	800140e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f944 	bl	8001696 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	f003 0308 	and.w	r3, r3, #8
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00c      	beq.n	8001432 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f003 0310 	and.w	r3, r3, #16
 800141e:	2b00      	cmp	r3, #0
 8001420:	d007      	beq.n	8001432 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001428:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2210      	movs	r2, #16
 8001430:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001432:	6a3b      	ldr	r3, [r7, #32]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00b      	beq.n	8001454 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	2b00      	cmp	r3, #0
 8001444:	d006      	beq.n	8001454 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2208      	movs	r2, #8
 800144c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 f933 	bl	80016ba <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d009      	beq.n	8001472 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 f91b 	bl	80016a8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001472:	6a3b      	ldr	r3, [r7, #32]
 8001474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00c      	beq.n	8001496 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	f003 0310 	and.w	r3, r3, #16
 8001482:	2b00      	cmp	r3, #0
 8001484:	d007      	beq.n	8001496 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800148c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2210      	movs	r2, #16
 8001494:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	f003 0320 	and.w	r3, r3, #32
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00b      	beq.n	80014b8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d006      	beq.n	80014b8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2208      	movs	r2, #8
 80014b0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 f90a 	bl	80016cc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80014b8:	6a3b      	ldr	r3, [r7, #32]
 80014ba:	f003 0310 	and.w	r3, r3, #16
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d009      	beq.n	80014d6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7fe fe3b 	bl	800014c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80014d6:	6a3b      	ldr	r3, [r7, #32]
 80014d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00b      	beq.n	80014f8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f003 0310 	and.w	r3, r3, #16
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d006      	beq.n	80014f8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2210      	movs	r2, #16
 80014f0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f8f3 	bl	80016de <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00b      	beq.n	800151a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	2b00      	cmp	r3, #0
 800150a:	d006      	beq.n	800151a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2208      	movs	r2, #8
 8001512:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f8eb 	bl	80016f0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800151a:	6a3b      	ldr	r3, [r7, #32]
 800151c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d07b      	beq.n	800161c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	2b00      	cmp	r3, #0
 800152c:	d072      	beq.n	8001614 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800152e:	6a3b      	ldr	r3, [r7, #32]
 8001530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001534:	2b00      	cmp	r3, #0
 8001536:	d008      	beq.n	800154a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001550:	2b00      	cmp	r3, #0
 8001552:	d008      	beq.n	8001566 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001566:	6a3b      	ldr	r3, [r7, #32]
 8001568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800156c:	2b00      	cmp	r3, #0
 800156e:	d008      	beq.n	8001582 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001582:	6a3b      	ldr	r3, [r7, #32]
 8001584:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001588:	2b00      	cmp	r3, #0
 800158a:	d043      	beq.n	8001614 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001592:	2b00      	cmp	r3, #0
 8001594:	d03e      	beq.n	8001614 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800159c:	2b60      	cmp	r3, #96	; 0x60
 800159e:	d02b      	beq.n	80015f8 <HAL_CAN_IRQHandler+0x32a>
 80015a0:	2b60      	cmp	r3, #96	; 0x60
 80015a2:	d82e      	bhi.n	8001602 <HAL_CAN_IRQHandler+0x334>
 80015a4:	2b50      	cmp	r3, #80	; 0x50
 80015a6:	d022      	beq.n	80015ee <HAL_CAN_IRQHandler+0x320>
 80015a8:	2b50      	cmp	r3, #80	; 0x50
 80015aa:	d82a      	bhi.n	8001602 <HAL_CAN_IRQHandler+0x334>
 80015ac:	2b40      	cmp	r3, #64	; 0x40
 80015ae:	d019      	beq.n	80015e4 <HAL_CAN_IRQHandler+0x316>
 80015b0:	2b40      	cmp	r3, #64	; 0x40
 80015b2:	d826      	bhi.n	8001602 <HAL_CAN_IRQHandler+0x334>
 80015b4:	2b30      	cmp	r3, #48	; 0x30
 80015b6:	d010      	beq.n	80015da <HAL_CAN_IRQHandler+0x30c>
 80015b8:	2b30      	cmp	r3, #48	; 0x30
 80015ba:	d822      	bhi.n	8001602 <HAL_CAN_IRQHandler+0x334>
 80015bc:	2b10      	cmp	r3, #16
 80015be:	d002      	beq.n	80015c6 <HAL_CAN_IRQHandler+0x2f8>
 80015c0:	2b20      	cmp	r3, #32
 80015c2:	d005      	beq.n	80015d0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80015c4:	e01d      	b.n	8001602 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	f043 0308 	orr.w	r3, r3, #8
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015ce:	e019      	b.n	8001604 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	f043 0310 	orr.w	r3, r3, #16
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015d8:	e014      	b.n	8001604 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	f043 0320 	orr.w	r3, r3, #32
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015e2:	e00f      	b.n	8001604 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015ec:	e00a      	b.n	8001604 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015f6:	e005      	b.n	8001604 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001600:	e000      	b.n	8001604 <HAL_CAN_IRQHandler+0x336>
            break;
 8001602:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	699a      	ldr	r2, [r3, #24]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001612:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2204      	movs	r2, #4
 800161a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	2b00      	cmp	r3, #0
 8001620:	d008      	beq.n	8001634 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	431a      	orrs	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f867 	bl	8001702 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001634:	bf00      	nop
 8001636:	3728      	adds	r7, #40	; 0x28
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr

0800164e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr

08001672 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr

08001696 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr

080016ba <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr

080016de <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001730:	4013      	ands	r3, r2
 8001732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800173c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001746:	4a04      	ldr	r2, [pc, #16]	; (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	60d3      	str	r3, [r2, #12]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <__NVIC_GetPriorityGrouping+0x18>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	0a1b      	lsrs	r3, r3, #8
 8001766:	f003 0307 	and.w	r3, r3, #7
}
 800176a:	4618      	mov	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	2b00      	cmp	r3, #0
 8001788:	db0b      	blt.n	80017a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	f003 021f 	and.w	r2, r3, #31
 8001790:	4906      	ldr	r1, [pc, #24]	; (80017ac <__NVIC_EnableIRQ+0x34>)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	2001      	movs	r0, #1
 800179a:	fa00 f202 	lsl.w	r2, r0, r2
 800179e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	e000e100 	.word	0xe000e100

080017b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	6039      	str	r1, [r7, #0]
 80017ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	db0a      	blt.n	80017da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	490c      	ldr	r1, [pc, #48]	; (80017fc <__NVIC_SetPriority+0x4c>)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	0112      	lsls	r2, r2, #4
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	440b      	add	r3, r1
 80017d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d8:	e00a      	b.n	80017f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	4908      	ldr	r1, [pc, #32]	; (8001800 <__NVIC_SetPriority+0x50>)
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	3b04      	subs	r3, #4
 80017e8:	0112      	lsls	r2, r2, #4
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	440b      	add	r3, r1
 80017ee:	761a      	strb	r2, [r3, #24]
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000e100 	.word	0xe000e100
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001804:	b480      	push	{r7}
 8001806:	b089      	sub	sp, #36	; 0x24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f1c3 0307 	rsb	r3, r3, #7
 800181e:	2b04      	cmp	r3, #4
 8001820:	bf28      	it	cs
 8001822:	2304      	movcs	r3, #4
 8001824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3304      	adds	r3, #4
 800182a:	2b06      	cmp	r3, #6
 800182c:	d902      	bls.n	8001834 <NVIC_EncodePriority+0x30>
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3b03      	subs	r3, #3
 8001832:	e000      	b.n	8001836 <NVIC_EncodePriority+0x32>
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	f04f 32ff 	mov.w	r2, #4294967295
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43da      	mvns	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	401a      	ands	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800184c:	f04f 31ff 	mov.w	r1, #4294967295
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	fa01 f303 	lsl.w	r3, r1, r3
 8001856:	43d9      	mvns	r1, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	4313      	orrs	r3, r2
         );
}
 800185e:	4618      	mov	r0, r3
 8001860:	3724      	adds	r7, #36	; 0x24
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001878:	d301      	bcc.n	800187e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800187a:	2301      	movs	r3, #1
 800187c:	e00f      	b.n	800189e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <SysTick_Config+0x40>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001886:	210f      	movs	r1, #15
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f7ff ff90 	bl	80017b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <SysTick_Config+0x40>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <SysTick_Config+0x40>)
 8001898:	2207      	movs	r2, #7
 800189a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	e000e010 	.word	0xe000e010

080018ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ff2d 	bl	8001714 <__NVIC_SetPriorityGrouping>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4603      	mov	r3, r0
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d4:	f7ff ff42 	bl	800175c <__NVIC_GetPriorityGrouping>
 80018d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	6978      	ldr	r0, [r7, #20]
 80018e0:	f7ff ff90 	bl	8001804 <NVIC_EncodePriority>
 80018e4:	4602      	mov	r2, r0
 80018e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ea:	4611      	mov	r1, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff5f 	bl	80017b0 <__NVIC_SetPriority>
}
 80018f2:	bf00      	nop
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff35 	bl	8001778 <__NVIC_EnableIRQ>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ffa2 	bl	8001868 <SysTick_Config>
 8001924:	4603      	mov	r3, r0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800192e:	b480      	push	{r7}
 8001930:	b085      	sub	sp, #20
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d008      	beq.n	8001958 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2204      	movs	r2, #4
 800194a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e020      	b.n	800199a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 020e 	bic.w	r2, r2, #14
 8001966:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0201 	bic.w	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001980:	2101      	movs	r1, #1
 8001982:	fa01 f202 	lsl.w	r2, r1, r2
 8001986:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001998:	7bfb      	ldrb	r3, [r7, #15]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019ac:	2300      	movs	r3, #0
 80019ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d005      	beq.n	80019c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2204      	movs	r2, #4
 80019c0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	73fb      	strb	r3, [r7, #15]
 80019c6:	e051      	b.n	8001a6c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 020e 	bic.w	r2, r2, #14
 80019d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0201 	bic.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a22      	ldr	r2, [pc, #136]	; (8001a78 <HAL_DMA_Abort_IT+0xd4>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d029      	beq.n	8001a46 <HAL_DMA_Abort_IT+0xa2>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a21      	ldr	r2, [pc, #132]	; (8001a7c <HAL_DMA_Abort_IT+0xd8>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d022      	beq.n	8001a42 <HAL_DMA_Abort_IT+0x9e>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a1f      	ldr	r2, [pc, #124]	; (8001a80 <HAL_DMA_Abort_IT+0xdc>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d01a      	beq.n	8001a3c <HAL_DMA_Abort_IT+0x98>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a1e      	ldr	r2, [pc, #120]	; (8001a84 <HAL_DMA_Abort_IT+0xe0>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d012      	beq.n	8001a36 <HAL_DMA_Abort_IT+0x92>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a1c      	ldr	r2, [pc, #112]	; (8001a88 <HAL_DMA_Abort_IT+0xe4>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d00a      	beq.n	8001a30 <HAL_DMA_Abort_IT+0x8c>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a1b      	ldr	r2, [pc, #108]	; (8001a8c <HAL_DMA_Abort_IT+0xe8>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d102      	bne.n	8001a2a <HAL_DMA_Abort_IT+0x86>
 8001a24:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a28:	e00e      	b.n	8001a48 <HAL_DMA_Abort_IT+0xa4>
 8001a2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a2e:	e00b      	b.n	8001a48 <HAL_DMA_Abort_IT+0xa4>
 8001a30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a34:	e008      	b.n	8001a48 <HAL_DMA_Abort_IT+0xa4>
 8001a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3a:	e005      	b.n	8001a48 <HAL_DMA_Abort_IT+0xa4>
 8001a3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a40:	e002      	b.n	8001a48 <HAL_DMA_Abort_IT+0xa4>
 8001a42:	2310      	movs	r3, #16
 8001a44:	e000      	b.n	8001a48 <HAL_DMA_Abort_IT+0xa4>
 8001a46:	2301      	movs	r3, #1
 8001a48:	4a11      	ldr	r2, [pc, #68]	; (8001a90 <HAL_DMA_Abort_IT+0xec>)
 8001a4a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	4798      	blx	r3
    } 
  }
  return status;
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40020008 	.word	0x40020008
 8001a7c:	4002001c 	.word	0x4002001c
 8001a80:	40020030 	.word	0x40020030
 8001a84:	40020044 	.word	0x40020044
 8001a88:	40020058 	.word	0x40020058
 8001a8c:	4002006c 	.word	0x4002006c
 8001a90:	40020000 	.word	0x40020000

08001a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b08b      	sub	sp, #44	; 0x2c
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa6:	e169      	b.n	8001d7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	69fa      	ldr	r2, [r7, #28]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	f040 8158 	bne.w	8001d76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	4a9a      	ldr	r2, [pc, #616]	; (8001d34 <HAL_GPIO_Init+0x2a0>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d05e      	beq.n	8001b8e <HAL_GPIO_Init+0xfa>
 8001ad0:	4a98      	ldr	r2, [pc, #608]	; (8001d34 <HAL_GPIO_Init+0x2a0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d875      	bhi.n	8001bc2 <HAL_GPIO_Init+0x12e>
 8001ad6:	4a98      	ldr	r2, [pc, #608]	; (8001d38 <HAL_GPIO_Init+0x2a4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d058      	beq.n	8001b8e <HAL_GPIO_Init+0xfa>
 8001adc:	4a96      	ldr	r2, [pc, #600]	; (8001d38 <HAL_GPIO_Init+0x2a4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d86f      	bhi.n	8001bc2 <HAL_GPIO_Init+0x12e>
 8001ae2:	4a96      	ldr	r2, [pc, #600]	; (8001d3c <HAL_GPIO_Init+0x2a8>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d052      	beq.n	8001b8e <HAL_GPIO_Init+0xfa>
 8001ae8:	4a94      	ldr	r2, [pc, #592]	; (8001d3c <HAL_GPIO_Init+0x2a8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d869      	bhi.n	8001bc2 <HAL_GPIO_Init+0x12e>
 8001aee:	4a94      	ldr	r2, [pc, #592]	; (8001d40 <HAL_GPIO_Init+0x2ac>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d04c      	beq.n	8001b8e <HAL_GPIO_Init+0xfa>
 8001af4:	4a92      	ldr	r2, [pc, #584]	; (8001d40 <HAL_GPIO_Init+0x2ac>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d863      	bhi.n	8001bc2 <HAL_GPIO_Init+0x12e>
 8001afa:	4a92      	ldr	r2, [pc, #584]	; (8001d44 <HAL_GPIO_Init+0x2b0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d046      	beq.n	8001b8e <HAL_GPIO_Init+0xfa>
 8001b00:	4a90      	ldr	r2, [pc, #576]	; (8001d44 <HAL_GPIO_Init+0x2b0>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d85d      	bhi.n	8001bc2 <HAL_GPIO_Init+0x12e>
 8001b06:	2b12      	cmp	r3, #18
 8001b08:	d82a      	bhi.n	8001b60 <HAL_GPIO_Init+0xcc>
 8001b0a:	2b12      	cmp	r3, #18
 8001b0c:	d859      	bhi.n	8001bc2 <HAL_GPIO_Init+0x12e>
 8001b0e:	a201      	add	r2, pc, #4	; (adr r2, 8001b14 <HAL_GPIO_Init+0x80>)
 8001b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b14:	08001b8f 	.word	0x08001b8f
 8001b18:	08001b69 	.word	0x08001b69
 8001b1c:	08001b7b 	.word	0x08001b7b
 8001b20:	08001bbd 	.word	0x08001bbd
 8001b24:	08001bc3 	.word	0x08001bc3
 8001b28:	08001bc3 	.word	0x08001bc3
 8001b2c:	08001bc3 	.word	0x08001bc3
 8001b30:	08001bc3 	.word	0x08001bc3
 8001b34:	08001bc3 	.word	0x08001bc3
 8001b38:	08001bc3 	.word	0x08001bc3
 8001b3c:	08001bc3 	.word	0x08001bc3
 8001b40:	08001bc3 	.word	0x08001bc3
 8001b44:	08001bc3 	.word	0x08001bc3
 8001b48:	08001bc3 	.word	0x08001bc3
 8001b4c:	08001bc3 	.word	0x08001bc3
 8001b50:	08001bc3 	.word	0x08001bc3
 8001b54:	08001bc3 	.word	0x08001bc3
 8001b58:	08001b71 	.word	0x08001b71
 8001b5c:	08001b85 	.word	0x08001b85
 8001b60:	4a79      	ldr	r2, [pc, #484]	; (8001d48 <HAL_GPIO_Init+0x2b4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d013      	beq.n	8001b8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b66:	e02c      	b.n	8001bc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	623b      	str	r3, [r7, #32]
          break;
 8001b6e:	e029      	b.n	8001bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	3304      	adds	r3, #4
 8001b76:	623b      	str	r3, [r7, #32]
          break;
 8001b78:	e024      	b.n	8001bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	3308      	adds	r3, #8
 8001b80:	623b      	str	r3, [r7, #32]
          break;
 8001b82:	e01f      	b.n	8001bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	330c      	adds	r3, #12
 8001b8a:	623b      	str	r3, [r7, #32]
          break;
 8001b8c:	e01a      	b.n	8001bc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d102      	bne.n	8001b9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b96:	2304      	movs	r3, #4
 8001b98:	623b      	str	r3, [r7, #32]
          break;
 8001b9a:	e013      	b.n	8001bc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d105      	bne.n	8001bb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ba4:	2308      	movs	r3, #8
 8001ba6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69fa      	ldr	r2, [r7, #28]
 8001bac:	611a      	str	r2, [r3, #16]
          break;
 8001bae:	e009      	b.n	8001bc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bb0:	2308      	movs	r3, #8
 8001bb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69fa      	ldr	r2, [r7, #28]
 8001bb8:	615a      	str	r2, [r3, #20]
          break;
 8001bba:	e003      	b.n	8001bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	623b      	str	r3, [r7, #32]
          break;
 8001bc0:	e000      	b.n	8001bc4 <HAL_GPIO_Init+0x130>
          break;
 8001bc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	2bff      	cmp	r3, #255	; 0xff
 8001bc8:	d801      	bhi.n	8001bce <HAL_GPIO_Init+0x13a>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	e001      	b.n	8001bd2 <HAL_GPIO_Init+0x13e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	2bff      	cmp	r3, #255	; 0xff
 8001bd8:	d802      	bhi.n	8001be0 <HAL_GPIO_Init+0x14c>
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	e002      	b.n	8001be6 <HAL_GPIO_Init+0x152>
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	3b08      	subs	r3, #8
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	210f      	movs	r1, #15
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	6a39      	ldr	r1, [r7, #32]
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001c00:	431a      	orrs	r2, r3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 80b1 	beq.w	8001d76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c14:	4b4d      	ldr	r3, [pc, #308]	; (8001d4c <HAL_GPIO_Init+0x2b8>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	4a4c      	ldr	r2, [pc, #304]	; (8001d4c <HAL_GPIO_Init+0x2b8>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6193      	str	r3, [r2, #24]
 8001c20:	4b4a      	ldr	r3, [pc, #296]	; (8001d4c <HAL_GPIO_Init+0x2b8>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c2c:	4a48      	ldr	r2, [pc, #288]	; (8001d50 <HAL_GPIO_Init+0x2bc>)
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	089b      	lsrs	r3, r3, #2
 8001c32:	3302      	adds	r3, #2
 8001c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	220f      	movs	r2, #15
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a40      	ldr	r2, [pc, #256]	; (8001d54 <HAL_GPIO_Init+0x2c0>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d013      	beq.n	8001c80 <HAL_GPIO_Init+0x1ec>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a3f      	ldr	r2, [pc, #252]	; (8001d58 <HAL_GPIO_Init+0x2c4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d00d      	beq.n	8001c7c <HAL_GPIO_Init+0x1e8>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a3e      	ldr	r2, [pc, #248]	; (8001d5c <HAL_GPIO_Init+0x2c8>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d007      	beq.n	8001c78 <HAL_GPIO_Init+0x1e4>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a3d      	ldr	r2, [pc, #244]	; (8001d60 <HAL_GPIO_Init+0x2cc>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d101      	bne.n	8001c74 <HAL_GPIO_Init+0x1e0>
 8001c70:	2303      	movs	r3, #3
 8001c72:	e006      	b.n	8001c82 <HAL_GPIO_Init+0x1ee>
 8001c74:	2304      	movs	r3, #4
 8001c76:	e004      	b.n	8001c82 <HAL_GPIO_Init+0x1ee>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e002      	b.n	8001c82 <HAL_GPIO_Init+0x1ee>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <HAL_GPIO_Init+0x1ee>
 8001c80:	2300      	movs	r3, #0
 8001c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c84:	f002 0203 	and.w	r2, r2, #3
 8001c88:	0092      	lsls	r2, r2, #2
 8001c8a:	4093      	lsls	r3, r2
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c92:	492f      	ldr	r1, [pc, #188]	; (8001d50 <HAL_GPIO_Init+0x2bc>)
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	089b      	lsrs	r3, r3, #2
 8001c98:	3302      	adds	r3, #2
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d006      	beq.n	8001cba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cac:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	492c      	ldr	r1, [pc, #176]	; (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	608b      	str	r3, [r1, #8]
 8001cb8:	e006      	b.n	8001cc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cba:	4b2a      	ldr	r3, [pc, #168]	; (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	4928      	ldr	r1, [pc, #160]	; (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d006      	beq.n	8001ce2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cd4:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	4922      	ldr	r1, [pc, #136]	; (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	60cb      	str	r3, [r1, #12]
 8001ce0:	e006      	b.n	8001cf0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ce2:	4b20      	ldr	r3, [pc, #128]	; (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	491e      	ldr	r1, [pc, #120]	; (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d006      	beq.n	8001d0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cfc:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	4918      	ldr	r1, [pc, #96]	; (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	604b      	str	r3, [r1, #4]
 8001d08:	e006      	b.n	8001d18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d0a:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	4914      	ldr	r1, [pc, #80]	; (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d021      	beq.n	8001d68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	490e      	ldr	r1, [pc, #56]	; (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	600b      	str	r3, [r1, #0]
 8001d30:	e021      	b.n	8001d76 <HAL_GPIO_Init+0x2e2>
 8001d32:	bf00      	nop
 8001d34:	10320000 	.word	0x10320000
 8001d38:	10310000 	.word	0x10310000
 8001d3c:	10220000 	.word	0x10220000
 8001d40:	10210000 	.word	0x10210000
 8001d44:	10120000 	.word	0x10120000
 8001d48:	10110000 	.word	0x10110000
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40010000 	.word	0x40010000
 8001d54:	40010800 	.word	0x40010800
 8001d58:	40010c00 	.word	0x40010c00
 8001d5c:	40011000 	.word	0x40011000
 8001d60:	40011400 	.word	0x40011400
 8001d64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <HAL_GPIO_Init+0x304>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	4909      	ldr	r1, [pc, #36]	; (8001d98 <HAL_GPIO_Init+0x304>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	3301      	adds	r3, #1
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	fa22 f303 	lsr.w	r3, r2, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f47f ae8e 	bne.w	8001aa8 <HAL_GPIO_Init+0x14>
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	bf00      	nop
 8001d90:	372c      	adds	r7, #44	; 0x2c
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	40010400 	.word	0x40010400

08001d9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e272      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 8087 	beq.w	8001eca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dbc:	4b92      	ldr	r3, [pc, #584]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 030c 	and.w	r3, r3, #12
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d00c      	beq.n	8001de2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dc8:	4b8f      	ldr	r3, [pc, #572]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d112      	bne.n	8001dfa <HAL_RCC_OscConfig+0x5e>
 8001dd4:	4b8c      	ldr	r3, [pc, #560]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de0:	d10b      	bne.n	8001dfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de2:	4b89      	ldr	r3, [pc, #548]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d06c      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x12c>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d168      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e24c      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e02:	d106      	bne.n	8001e12 <HAL_RCC_OscConfig+0x76>
 8001e04:	4b80      	ldr	r3, [pc, #512]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a7f      	ldr	r2, [pc, #508]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	e02e      	b.n	8001e70 <HAL_RCC_OscConfig+0xd4>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x98>
 8001e1a:	4b7b      	ldr	r3, [pc, #492]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a7a      	ldr	r2, [pc, #488]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	4b78      	ldr	r3, [pc, #480]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a77      	ldr	r2, [pc, #476]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e01d      	b.n	8001e70 <HAL_RCC_OscConfig+0xd4>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e3c:	d10c      	bne.n	8001e58 <HAL_RCC_OscConfig+0xbc>
 8001e3e:	4b72      	ldr	r3, [pc, #456]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a71      	ldr	r2, [pc, #452]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	4b6f      	ldr	r3, [pc, #444]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a6e      	ldr	r2, [pc, #440]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e00b      	b.n	8001e70 <HAL_RCC_OscConfig+0xd4>
 8001e58:	4b6b      	ldr	r3, [pc, #428]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a6a      	ldr	r2, [pc, #424]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	4b68      	ldr	r3, [pc, #416]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a67      	ldr	r2, [pc, #412]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d013      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7fe fdde 	bl	8000a38 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e80:	f7fe fdda 	bl	8000a38 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b64      	cmp	r3, #100	; 0x64
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e200      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e92:	4b5d      	ldr	r3, [pc, #372]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0xe4>
 8001e9e:	e014      	b.n	8001eca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7fe fdca 	bl	8000a38 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea8:	f7fe fdc6 	bl	8000a38 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b64      	cmp	r3, #100	; 0x64
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e1ec      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eba:	4b53      	ldr	r3, [pc, #332]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x10c>
 8001ec6:	e000      	b.n	8001eca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d063      	beq.n	8001f9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ed6:	4b4c      	ldr	r3, [pc, #304]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00b      	beq.n	8001efa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ee2:	4b49      	ldr	r3, [pc, #292]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d11c      	bne.n	8001f28 <HAL_RCC_OscConfig+0x18c>
 8001eee:	4b46      	ldr	r3, [pc, #280]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d116      	bne.n	8001f28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efa:	4b43      	ldr	r3, [pc, #268]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d005      	beq.n	8001f12 <HAL_RCC_OscConfig+0x176>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d001      	beq.n	8001f12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e1c0      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f12:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4939      	ldr	r1, [pc, #228]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f26:	e03a      	b.n	8001f9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d020      	beq.n	8001f72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f30:	4b36      	ldr	r3, [pc, #216]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f36:	f7fe fd7f 	bl	8000a38 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3e:	f7fe fd7b 	bl	8000a38 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e1a1      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f50:	4b2d      	ldr	r3, [pc, #180]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f0      	beq.n	8001f3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5c:	4b2a      	ldr	r3, [pc, #168]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4927      	ldr	r1, [pc, #156]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	600b      	str	r3, [r1, #0]
 8001f70:	e015      	b.n	8001f9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f72:	4b26      	ldr	r3, [pc, #152]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7fe fd5e 	bl	8000a38 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f80:	f7fe fd5a 	bl	8000a38 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e180      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f92:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d03a      	beq.n	8002020 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d019      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb2:	4b17      	ldr	r3, [pc, #92]	; (8002010 <HAL_RCC_OscConfig+0x274>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb8:	f7fe fd3e 	bl	8000a38 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc0:	f7fe fd3a 	bl	8000a38 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e160      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f000 face 	bl	8002580 <RCC_Delay>
 8001fe4:	e01c      	b.n	8002020 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <HAL_RCC_OscConfig+0x274>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fec:	f7fe fd24 	bl	8000a38 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff2:	e00f      	b.n	8002014 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff4:	f7fe fd20 	bl	8000a38 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d908      	bls.n	8002014 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e146      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	42420000 	.word	0x42420000
 8002010:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002014:	4b92      	ldr	r3, [pc, #584]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1e9      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80a6 	beq.w	800217a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800202e:	2300      	movs	r3, #0
 8002030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002032:	4b8b      	ldr	r3, [pc, #556]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10d      	bne.n	800205a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	4b88      	ldr	r3, [pc, #544]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	4a87      	ldr	r2, [pc, #540]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002048:	61d3      	str	r3, [r2, #28]
 800204a:	4b85      	ldr	r3, [pc, #532]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002056:	2301      	movs	r3, #1
 8002058:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205a:	4b82      	ldr	r3, [pc, #520]	; (8002264 <HAL_RCC_OscConfig+0x4c8>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002062:	2b00      	cmp	r3, #0
 8002064:	d118      	bne.n	8002098 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002066:	4b7f      	ldr	r3, [pc, #508]	; (8002264 <HAL_RCC_OscConfig+0x4c8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a7e      	ldr	r2, [pc, #504]	; (8002264 <HAL_RCC_OscConfig+0x4c8>)
 800206c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002072:	f7fe fce1 	bl	8000a38 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207a:	f7fe fcdd 	bl	8000a38 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b64      	cmp	r3, #100	; 0x64
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e103      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208c:	4b75      	ldr	r3, [pc, #468]	; (8002264 <HAL_RCC_OscConfig+0x4c8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d106      	bne.n	80020ae <HAL_RCC_OscConfig+0x312>
 80020a0:	4b6f      	ldr	r3, [pc, #444]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	4a6e      	ldr	r2, [pc, #440]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	6213      	str	r3, [r2, #32]
 80020ac:	e02d      	b.n	800210a <HAL_RCC_OscConfig+0x36e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x334>
 80020b6:	4b6a      	ldr	r3, [pc, #424]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	4a69      	ldr	r2, [pc, #420]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	f023 0301 	bic.w	r3, r3, #1
 80020c0:	6213      	str	r3, [r2, #32]
 80020c2:	4b67      	ldr	r3, [pc, #412]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	4a66      	ldr	r2, [pc, #408]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020c8:	f023 0304 	bic.w	r3, r3, #4
 80020cc:	6213      	str	r3, [r2, #32]
 80020ce:	e01c      	b.n	800210a <HAL_RCC_OscConfig+0x36e>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	2b05      	cmp	r3, #5
 80020d6:	d10c      	bne.n	80020f2 <HAL_RCC_OscConfig+0x356>
 80020d8:	4b61      	ldr	r3, [pc, #388]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	4a60      	ldr	r2, [pc, #384]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020de:	f043 0304 	orr.w	r3, r3, #4
 80020e2:	6213      	str	r3, [r2, #32]
 80020e4:	4b5e      	ldr	r3, [pc, #376]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	4a5d      	ldr	r2, [pc, #372]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6213      	str	r3, [r2, #32]
 80020f0:	e00b      	b.n	800210a <HAL_RCC_OscConfig+0x36e>
 80020f2:	4b5b      	ldr	r3, [pc, #364]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	4a5a      	ldr	r2, [pc, #360]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	f023 0301 	bic.w	r3, r3, #1
 80020fc:	6213      	str	r3, [r2, #32]
 80020fe:	4b58      	ldr	r3, [pc, #352]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	4a57      	ldr	r2, [pc, #348]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002104:	f023 0304 	bic.w	r3, r3, #4
 8002108:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d015      	beq.n	800213e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002112:	f7fe fc91 	bl	8000a38 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002118:	e00a      	b.n	8002130 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211a:	f7fe fc8d 	bl	8000a38 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	f241 3288 	movw	r2, #5000	; 0x1388
 8002128:	4293      	cmp	r3, r2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e0b1      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002130:	4b4b      	ldr	r3, [pc, #300]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0ee      	beq.n	800211a <HAL_RCC_OscConfig+0x37e>
 800213c:	e014      	b.n	8002168 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213e:	f7fe fc7b 	bl	8000a38 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002144:	e00a      	b.n	800215c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002146:	f7fe fc77 	bl	8000a38 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	f241 3288 	movw	r2, #5000	; 0x1388
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e09b      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215c:	4b40      	ldr	r3, [pc, #256]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1ee      	bne.n	8002146 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002168:	7dfb      	ldrb	r3, [r7, #23]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d105      	bne.n	800217a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800216e:	4b3c      	ldr	r3, [pc, #240]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	4a3b      	ldr	r2, [pc, #236]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002178:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 8087 	beq.w	8002292 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002184:	4b36      	ldr	r3, [pc, #216]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 030c 	and.w	r3, r3, #12
 800218c:	2b08      	cmp	r3, #8
 800218e:	d061      	beq.n	8002254 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d146      	bne.n	8002226 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002198:	4b33      	ldr	r3, [pc, #204]	; (8002268 <HAL_RCC_OscConfig+0x4cc>)
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219e:	f7fe fc4b 	bl	8000a38 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a6:	f7fe fc47 	bl	8000a38 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e06d      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b8:	4b29      	ldr	r3, [pc, #164]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f0      	bne.n	80021a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021cc:	d108      	bne.n	80021e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021ce:	4b24      	ldr	r3, [pc, #144]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	4921      	ldr	r1, [pc, #132]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021e0:	4b1f      	ldr	r3, [pc, #124]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a19      	ldr	r1, [r3, #32]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	430b      	orrs	r3, r1
 80021f2:	491b      	ldr	r1, [pc, #108]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f8:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <HAL_RCC_OscConfig+0x4cc>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7fe fc1b 	bl	8000a38 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002206:	f7fe fc17 	bl	8000a38 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e03d      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002218:	4b11      	ldr	r3, [pc, #68]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x46a>
 8002224:	e035      	b.n	8002292 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002226:	4b10      	ldr	r3, [pc, #64]	; (8002268 <HAL_RCC_OscConfig+0x4cc>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7fe fc04 	bl	8000a38 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002234:	f7fe fc00 	bl	8000a38 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e026      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002246:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x498>
 8002252:	e01e      	b.n	8002292 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d107      	bne.n	800226c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e019      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
 8002260:	40021000 	.word	0x40021000
 8002264:	40007000 	.word	0x40007000
 8002268:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_RCC_OscConfig+0x500>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	429a      	cmp	r2, r3
 800227e:	d106      	bne.n	800228e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d001      	beq.n	8002292 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40021000 	.word	0x40021000

080022a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0d0      	b.n	8002456 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022b4:	4b6a      	ldr	r3, [pc, #424]	; (8002460 <HAL_RCC_ClockConfig+0x1c0>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d910      	bls.n	80022e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c2:	4b67      	ldr	r3, [pc, #412]	; (8002460 <HAL_RCC_ClockConfig+0x1c0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f023 0207 	bic.w	r2, r3, #7
 80022ca:	4965      	ldr	r1, [pc, #404]	; (8002460 <HAL_RCC_ClockConfig+0x1c0>)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d2:	4b63      	ldr	r3, [pc, #396]	; (8002460 <HAL_RCC_ClockConfig+0x1c0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d001      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0b8      	b.n	8002456 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d020      	beq.n	8002332 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022fc:	4b59      	ldr	r3, [pc, #356]	; (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	4a58      	ldr	r2, [pc, #352]	; (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002306:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002314:	4b53      	ldr	r3, [pc, #332]	; (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	4a52      	ldr	r2, [pc, #328]	; (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800231e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002320:	4b50      	ldr	r3, [pc, #320]	; (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	494d      	ldr	r1, [pc, #308]	; (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	4313      	orrs	r3, r2
 8002330:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d040      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d107      	bne.n	8002356 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002346:	4b47      	ldr	r3, [pc, #284]	; (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d115      	bne.n	800237e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e07f      	b.n	8002456 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b02      	cmp	r3, #2
 800235c:	d107      	bne.n	800236e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800235e:	4b41      	ldr	r3, [pc, #260]	; (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d109      	bne.n	800237e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e073      	b.n	8002456 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236e:	4b3d      	ldr	r3, [pc, #244]	; (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e06b      	b.n	8002456 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800237e:	4b39      	ldr	r3, [pc, #228]	; (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f023 0203 	bic.w	r2, r3, #3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	4936      	ldr	r1, [pc, #216]	; (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	4313      	orrs	r3, r2
 800238e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002390:	f7fe fb52 	bl	8000a38 <HAL_GetTick>
 8002394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002396:	e00a      	b.n	80023ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002398:	f7fe fb4e 	bl	8000a38 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e053      	b.n	8002456 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ae:	4b2d      	ldr	r3, [pc, #180]	; (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 020c 	and.w	r2, r3, #12
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	429a      	cmp	r2, r3
 80023be:	d1eb      	bne.n	8002398 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023c0:	4b27      	ldr	r3, [pc, #156]	; (8002460 <HAL_RCC_ClockConfig+0x1c0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d210      	bcs.n	80023f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ce:	4b24      	ldr	r3, [pc, #144]	; (8002460 <HAL_RCC_ClockConfig+0x1c0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 0207 	bic.w	r2, r3, #7
 80023d6:	4922      	ldr	r1, [pc, #136]	; (8002460 <HAL_RCC_ClockConfig+0x1c0>)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023de:	4b20      	ldr	r3, [pc, #128]	; (8002460 <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e032      	b.n	8002456 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023fc:	4b19      	ldr	r3, [pc, #100]	; (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4916      	ldr	r1, [pc, #88]	; (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	4313      	orrs	r3, r2
 800240c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d009      	beq.n	800242e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800241a:	4b12      	ldr	r3, [pc, #72]	; (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	490e      	ldr	r1, [pc, #56]	; (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	4313      	orrs	r3, r2
 800242c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800242e:	f000 f821 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 8002432:	4602      	mov	r2, r0
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	490a      	ldr	r1, [pc, #40]	; (8002468 <HAL_RCC_ClockConfig+0x1c8>)
 8002440:	5ccb      	ldrb	r3, [r1, r3]
 8002442:	fa22 f303 	lsr.w	r3, r2, r3
 8002446:	4a09      	ldr	r2, [pc, #36]	; (800246c <HAL_RCC_ClockConfig+0x1cc>)
 8002448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <HAL_RCC_ClockConfig+0x1d0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe fab0 	bl	80009b4 <HAL_InitTick>

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40022000 	.word	0x40022000
 8002464:	40021000 	.word	0x40021000
 8002468:	0800405c 	.word	0x0800405c
 800246c:	20000008 	.word	0x20000008
 8002470:	2000000c 	.word	0x2000000c

08002474 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002474:	b480      	push	{r7}
 8002476:	b087      	sub	sp, #28
 8002478:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	2300      	movs	r3, #0
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	2300      	movs	r3, #0
 8002488:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800248e:	4b1e      	ldr	r3, [pc, #120]	; (8002508 <HAL_RCC_GetSysClockFreq+0x94>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	2b04      	cmp	r3, #4
 800249c:	d002      	beq.n	80024a4 <HAL_RCC_GetSysClockFreq+0x30>
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d003      	beq.n	80024aa <HAL_RCC_GetSysClockFreq+0x36>
 80024a2:	e027      	b.n	80024f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024a4:	4b19      	ldr	r3, [pc, #100]	; (800250c <HAL_RCC_GetSysClockFreq+0x98>)
 80024a6:	613b      	str	r3, [r7, #16]
      break;
 80024a8:	e027      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	0c9b      	lsrs	r3, r3, #18
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	4a17      	ldr	r2, [pc, #92]	; (8002510 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024b4:	5cd3      	ldrb	r3, [r2, r3]
 80024b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d010      	beq.n	80024e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <HAL_RCC_GetSysClockFreq+0x94>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	0c5b      	lsrs	r3, r3, #17
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	4a11      	ldr	r2, [pc, #68]	; (8002514 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024ce:	5cd3      	ldrb	r3, [r2, r3]
 80024d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a0d      	ldr	r2, [pc, #52]	; (800250c <HAL_RCC_GetSysClockFreq+0x98>)
 80024d6:	fb03 f202 	mul.w	r2, r3, r2
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	e004      	b.n	80024ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a0c      	ldr	r2, [pc, #48]	; (8002518 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024e8:	fb02 f303 	mul.w	r3, r2, r3
 80024ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	613b      	str	r3, [r7, #16]
      break;
 80024f2:	e002      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_RCC_GetSysClockFreq+0x98>)
 80024f6:	613b      	str	r3, [r7, #16]
      break;
 80024f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024fa:	693b      	ldr	r3, [r7, #16]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	371c      	adds	r7, #28
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40021000 	.word	0x40021000
 800250c:	007a1200 	.word	0x007a1200
 8002510:	08004074 	.word	0x08004074
 8002514:	08004084 	.word	0x08004084
 8002518:	003d0900 	.word	0x003d0900

0800251c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002520:	4b02      	ldr	r3, [pc, #8]	; (800252c <HAL_RCC_GetHCLKFreq+0x10>)
 8002522:	681b      	ldr	r3, [r3, #0]
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr
 800252c:	20000008 	.word	0x20000008

08002530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002534:	f7ff fff2 	bl	800251c <HAL_RCC_GetHCLKFreq>
 8002538:	4602      	mov	r2, r0
 800253a:	4b05      	ldr	r3, [pc, #20]	; (8002550 <HAL_RCC_GetPCLK1Freq+0x20>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	0a1b      	lsrs	r3, r3, #8
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	4903      	ldr	r1, [pc, #12]	; (8002554 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002546:	5ccb      	ldrb	r3, [r1, r3]
 8002548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800254c:	4618      	mov	r0, r3
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40021000 	.word	0x40021000
 8002554:	0800406c 	.word	0x0800406c

08002558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800255c:	f7ff ffde 	bl	800251c <HAL_RCC_GetHCLKFreq>
 8002560:	4602      	mov	r2, r0
 8002562:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	0adb      	lsrs	r3, r3, #11
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	4903      	ldr	r1, [pc, #12]	; (800257c <HAL_RCC_GetPCLK2Freq+0x24>)
 800256e:	5ccb      	ldrb	r3, [r1, r3]
 8002570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002574:	4618      	mov	r0, r3
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40021000 	.word	0x40021000
 800257c:	0800406c 	.word	0x0800406c

08002580 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002588:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <RCC_Delay+0x34>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <RCC_Delay+0x38>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	0a5b      	lsrs	r3, r3, #9
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	fb02 f303 	mul.w	r3, r2, r3
 800259a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800259c:	bf00      	nop
  }
  while (Delay --);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	1e5a      	subs	r2, r3, #1
 80025a2:	60fa      	str	r2, [r7, #12]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1f9      	bne.n	800259c <RCC_Delay+0x1c>
}
 80025a8:	bf00      	nop
 80025aa:	bf00      	nop
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	20000008 	.word	0x20000008
 80025b8:	10624dd3 	.word	0x10624dd3

080025bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e041      	b.n	8002652 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d106      	bne.n	80025e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7fe f8c0 	bl	8000768 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2202      	movs	r2, #2
 80025ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3304      	adds	r3, #4
 80025f8:	4619      	mov	r1, r3
 80025fa:	4610      	mov	r0, r2
 80025fc:	f000 f8f4 	bl	80027e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <HAL_TIM_ConfigClockSource+0x1c>
 8002672:	2302      	movs	r3, #2
 8002674:	e0b4      	b.n	80027e0 <HAL_TIM_ConfigClockSource+0x186>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2202      	movs	r2, #2
 8002682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002694:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800269c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ae:	d03e      	beq.n	800272e <HAL_TIM_ConfigClockSource+0xd4>
 80026b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026b4:	f200 8087 	bhi.w	80027c6 <HAL_TIM_ConfigClockSource+0x16c>
 80026b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026bc:	f000 8086 	beq.w	80027cc <HAL_TIM_ConfigClockSource+0x172>
 80026c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c4:	d87f      	bhi.n	80027c6 <HAL_TIM_ConfigClockSource+0x16c>
 80026c6:	2b70      	cmp	r3, #112	; 0x70
 80026c8:	d01a      	beq.n	8002700 <HAL_TIM_ConfigClockSource+0xa6>
 80026ca:	2b70      	cmp	r3, #112	; 0x70
 80026cc:	d87b      	bhi.n	80027c6 <HAL_TIM_ConfigClockSource+0x16c>
 80026ce:	2b60      	cmp	r3, #96	; 0x60
 80026d0:	d050      	beq.n	8002774 <HAL_TIM_ConfigClockSource+0x11a>
 80026d2:	2b60      	cmp	r3, #96	; 0x60
 80026d4:	d877      	bhi.n	80027c6 <HAL_TIM_ConfigClockSource+0x16c>
 80026d6:	2b50      	cmp	r3, #80	; 0x50
 80026d8:	d03c      	beq.n	8002754 <HAL_TIM_ConfigClockSource+0xfa>
 80026da:	2b50      	cmp	r3, #80	; 0x50
 80026dc:	d873      	bhi.n	80027c6 <HAL_TIM_ConfigClockSource+0x16c>
 80026de:	2b40      	cmp	r3, #64	; 0x40
 80026e0:	d058      	beq.n	8002794 <HAL_TIM_ConfigClockSource+0x13a>
 80026e2:	2b40      	cmp	r3, #64	; 0x40
 80026e4:	d86f      	bhi.n	80027c6 <HAL_TIM_ConfigClockSource+0x16c>
 80026e6:	2b30      	cmp	r3, #48	; 0x30
 80026e8:	d064      	beq.n	80027b4 <HAL_TIM_ConfigClockSource+0x15a>
 80026ea:	2b30      	cmp	r3, #48	; 0x30
 80026ec:	d86b      	bhi.n	80027c6 <HAL_TIM_ConfigClockSource+0x16c>
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	d060      	beq.n	80027b4 <HAL_TIM_ConfigClockSource+0x15a>
 80026f2:	2b20      	cmp	r3, #32
 80026f4:	d867      	bhi.n	80027c6 <HAL_TIM_ConfigClockSource+0x16c>
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d05c      	beq.n	80027b4 <HAL_TIM_ConfigClockSource+0x15a>
 80026fa:	2b10      	cmp	r3, #16
 80026fc:	d05a      	beq.n	80027b4 <HAL_TIM_ConfigClockSource+0x15a>
 80026fe:	e062      	b.n	80027c6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002710:	f000 f943 	bl	800299a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002722:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	609a      	str	r2, [r3, #8]
      break;
 800272c:	e04f      	b.n	80027ce <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800273e:	f000 f92c 	bl	800299a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002750:	609a      	str	r2, [r3, #8]
      break;
 8002752:	e03c      	b.n	80027ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002760:	461a      	mov	r2, r3
 8002762:	f000 f8a3 	bl	80028ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2150      	movs	r1, #80	; 0x50
 800276c:	4618      	mov	r0, r3
 800276e:	f000 f8fa 	bl	8002966 <TIM_ITRx_SetConfig>
      break;
 8002772:	e02c      	b.n	80027ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002780:	461a      	mov	r2, r3
 8002782:	f000 f8c1 	bl	8002908 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2160      	movs	r1, #96	; 0x60
 800278c:	4618      	mov	r0, r3
 800278e:	f000 f8ea 	bl	8002966 <TIM_ITRx_SetConfig>
      break;
 8002792:	e01c      	b.n	80027ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027a0:	461a      	mov	r2, r3
 80027a2:	f000 f883 	bl	80028ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2140      	movs	r1, #64	; 0x40
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 f8da 	bl	8002966 <TIM_ITRx_SetConfig>
      break;
 80027b2:	e00c      	b.n	80027ce <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4619      	mov	r1, r3
 80027be:	4610      	mov	r0, r2
 80027c0:	f000 f8d1 	bl	8002966 <TIM_ITRx_SetConfig>
      break;
 80027c4:	e003      	b.n	80027ce <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
      break;
 80027ca:	e000      	b.n	80027ce <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027de:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a29      	ldr	r2, [pc, #164]	; (80028a0 <TIM_Base_SetConfig+0xb8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d00b      	beq.n	8002818 <TIM_Base_SetConfig+0x30>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002806:	d007      	beq.n	8002818 <TIM_Base_SetConfig+0x30>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a26      	ldr	r2, [pc, #152]	; (80028a4 <TIM_Base_SetConfig+0xbc>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d003      	beq.n	8002818 <TIM_Base_SetConfig+0x30>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a25      	ldr	r2, [pc, #148]	; (80028a8 <TIM_Base_SetConfig+0xc0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d108      	bne.n	800282a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a1c      	ldr	r2, [pc, #112]	; (80028a0 <TIM_Base_SetConfig+0xb8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d00b      	beq.n	800284a <TIM_Base_SetConfig+0x62>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002838:	d007      	beq.n	800284a <TIM_Base_SetConfig+0x62>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a19      	ldr	r2, [pc, #100]	; (80028a4 <TIM_Base_SetConfig+0xbc>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d003      	beq.n	800284a <TIM_Base_SetConfig+0x62>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a18      	ldr	r2, [pc, #96]	; (80028a8 <TIM_Base_SetConfig+0xc0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d108      	bne.n	800285c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4313      	orrs	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a07      	ldr	r2, [pc, #28]	; (80028a0 <TIM_Base_SetConfig+0xb8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d103      	bne.n	8002890 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	615a      	str	r2, [r3, #20]
}
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	40012c00 	.word	0x40012c00
 80028a4:	40000400 	.word	0x40000400
 80028a8:	40000800 	.word	0x40000800

080028ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	f023 0201 	bic.w	r2, r3, #1
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4313      	orrs	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f023 030a 	bic.w	r3, r3, #10
 80028e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	621a      	str	r2, [r3, #32]
}
 80028fe:	bf00      	nop
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	f023 0210 	bic.w	r2, r3, #16
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	031b      	lsls	r3, r3, #12
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002944:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4313      	orrs	r3, r2
 800294e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	621a      	str	r2, [r3, #32]
}
 800295c:	bf00      	nop
 800295e:	371c      	adds	r7, #28
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr

08002966 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002966:	b480      	push	{r7}
 8002968:	b085      	sub	sp, #20
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	f043 0307 	orr.w	r3, r3, #7
 8002988:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	609a      	str	r2, [r3, #8]
}
 8002990:	bf00      	nop
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800299a:	b480      	push	{r7}
 800299c:	b087      	sub	sp, #28
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	021a      	lsls	r2, r3, #8
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	431a      	orrs	r2, r3
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	609a      	str	r2, [r3, #8]
}
 80029ce:	bf00      	nop
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e046      	b.n	8002a7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a16      	ldr	r2, [pc, #88]	; (8002a88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d00e      	beq.n	8002a52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3c:	d009      	beq.n	8002a52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a12      	ldr	r2, [pc, #72]	; (8002a8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d004      	beq.n	8002a52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a10      	ldr	r2, [pc, #64]	; (8002a90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d10c      	bne.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	40012c00 	.word	0x40012c00
 8002a8c:	40000400 	.word	0x40000400
 8002a90:	40000800 	.word	0x40000800

08002a94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e042      	b.n	8002b2c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fd fe72 	bl	80007a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2224      	movs	r2, #36	; 0x24
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ad6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fd71 	bl	80035c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002afc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08a      	sub	sp, #40	; 0x28
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	4613      	mov	r3, r2
 8002b42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d16d      	bne.n	8002c30 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d002      	beq.n	8002b60 <HAL_UART_Transmit+0x2c>
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e066      	b.n	8002c32 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2221      	movs	r2, #33	; 0x21
 8002b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b72:	f7fd ff61 	bl	8000a38 <HAL_GetTick>
 8002b76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	88fa      	ldrh	r2, [r7, #6]
 8002b7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	88fa      	ldrh	r2, [r7, #6]
 8002b82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b8c:	d108      	bne.n	8002ba0 <HAL_UART_Transmit+0x6c>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d104      	bne.n	8002ba0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	e003      	b.n	8002ba8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ba8:	e02a      	b.n	8002c00 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2180      	movs	r1, #128	; 0x80
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 faf9 	bl	80031ac <UART_WaitOnFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e036      	b.n	8002c32 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10b      	bne.n	8002be2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	3302      	adds	r3, #2
 8002bde:	61bb      	str	r3, [r7, #24]
 8002be0:	e007      	b.n	8002bf2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	781a      	ldrb	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1cf      	bne.n	8002baa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2200      	movs	r2, #0
 8002c12:	2140      	movs	r1, #64	; 0x40
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 fac9 	bl	80031ac <UART_WaitOnFlagUntilTimeout>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e006      	b.n	8002c32 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e000      	b.n	8002c32 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
  }
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3720      	adds	r7, #32
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b0ba      	sub	sp, #232	; 0xe8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002c7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10f      	bne.n	8002ca2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d009      	beq.n	8002ca2 <HAL_UART_IRQHandler+0x66>
 8002c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fbd1 	bl	8003442 <UART_Receive_IT>
      return;
 8002ca0:	e25b      	b.n	800315a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ca2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 80de 	beq.w	8002e68 <HAL_UART_IRQHandler+0x22c>
 8002cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d106      	bne.n	8002cc6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cbc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80d1 	beq.w	8002e68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00b      	beq.n	8002cea <HAL_UART_IRQHandler+0xae>
 8002cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d005      	beq.n	8002cea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce2:	f043 0201 	orr.w	r2, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00b      	beq.n	8002d0e <HAL_UART_IRQHandler+0xd2>
 8002cf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d005      	beq.n	8002d0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	f043 0202 	orr.w	r2, r3, #2
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00b      	beq.n	8002d32 <HAL_UART_IRQHandler+0xf6>
 8002d1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f043 0204 	orr.w	r2, r3, #4
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d011      	beq.n	8002d62 <HAL_UART_IRQHandler+0x126>
 8002d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d42:	f003 0320 	and.w	r3, r3, #32
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d105      	bne.n	8002d56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	f043 0208 	orr.w	r2, r3, #8
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 81f2 	beq.w	8003150 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_UART_IRQHandler+0x14e>
 8002d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 fb5c 	bl	8003442 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf14      	ite	ne
 8002d98:	2301      	movne	r3, #1
 8002d9a:	2300      	moveq	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d103      	bne.n	8002db6 <HAL_UART_IRQHandler+0x17a>
 8002dae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d04f      	beq.n	8002e56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fa66 	bl	8003288 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d041      	beq.n	8002e4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	3314      	adds	r3, #20
 8002dd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dd8:	e853 3f00 	ldrex	r3, [r3]
 8002ddc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002de0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002de4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002de8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	3314      	adds	r3, #20
 8002df2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002df6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e06:	e841 2300 	strex	r3, r2, [r1]
 8002e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1d9      	bne.n	8002dca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d013      	beq.n	8002e46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e22:	4a7e      	ldr	r2, [pc, #504]	; (800301c <HAL_UART_IRQHandler+0x3e0>)
 8002e24:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fe fdba 	bl	80019a4 <HAL_DMA_Abort_IT>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d016      	beq.n	8002e64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e40:	4610      	mov	r0, r2
 8002e42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e44:	e00e      	b.n	8002e64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f99c 	bl	8003184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e4c:	e00a      	b.n	8002e64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f998 	bl	8003184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e54:	e006      	b.n	8002e64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f994 	bl	8003184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002e62:	e175      	b.n	8003150 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e64:	bf00      	nop
    return;
 8002e66:	e173      	b.n	8003150 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	f040 814f 	bne.w	8003110 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e76:	f003 0310 	and.w	r3, r3, #16
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 8148 	beq.w	8003110 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e84:	f003 0310 	and.w	r3, r3, #16
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 8141 	beq.w	8003110 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 80b6 	beq.w	8003020 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ec0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 8145 	beq.w	8003154 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ece:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	f080 813e 	bcs.w	8003154 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ede:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	f000 8088 	beq.w	8002ffc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	330c      	adds	r3, #12
 8002ef2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002efa:	e853 3f00 	ldrex	r3, [r3]
 8002efe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	330c      	adds	r3, #12
 8002f14:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002f18:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f20:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f24:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f28:	e841 2300 	strex	r3, r2, [r1]
 8002f2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1d9      	bne.n	8002eec <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3314      	adds	r3, #20
 8002f3e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f42:	e853 3f00 	ldrex	r3, [r3]
 8002f46:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f4a:	f023 0301 	bic.w	r3, r3, #1
 8002f4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	3314      	adds	r3, #20
 8002f58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f5c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f60:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f62:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f64:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f68:	e841 2300 	strex	r3, r2, [r1]
 8002f6c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1e1      	bne.n	8002f38 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	3314      	adds	r3, #20
 8002f7a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f7e:	e853 3f00 	ldrex	r3, [r3]
 8002f82:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3314      	adds	r3, #20
 8002f94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f98:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fa0:	e841 2300 	strex	r3, r2, [r1]
 8002fa4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002fa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1e3      	bne.n	8002f74 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	330c      	adds	r3, #12
 8002fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc4:	e853 3f00 	ldrex	r3, [r3]
 8002fc8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fcc:	f023 0310 	bic.w	r3, r3, #16
 8002fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	330c      	adds	r3, #12
 8002fda:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002fde:	65ba      	str	r2, [r7, #88]	; 0x58
 8002fe0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002fe4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fe6:	e841 2300 	strex	r3, r2, [r1]
 8002fea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1e3      	bne.n	8002fba <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe fc99 	bl	800192e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800300a:	b29b      	uxth	r3, r3
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	b29b      	uxth	r3, r3
 8003010:	4619      	mov	r1, r3
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f8bf 	bl	8003196 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003018:	e09c      	b.n	8003154 <HAL_UART_IRQHandler+0x518>
 800301a:	bf00      	nop
 800301c:	0800334d 	.word	0x0800334d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003028:	b29b      	uxth	r3, r3
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003034:	b29b      	uxth	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 808e 	beq.w	8003158 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800303c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 8089 	beq.w	8003158 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	330c      	adds	r3, #12
 800304c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003050:	e853 3f00 	ldrex	r3, [r3]
 8003054:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003058:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800305c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	330c      	adds	r3, #12
 8003066:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800306a:	647a      	str	r2, [r7, #68]	; 0x44
 800306c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003070:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003072:	e841 2300 	strex	r3, r2, [r1]
 8003076:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1e3      	bne.n	8003046 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	3314      	adds	r3, #20
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	e853 3f00 	ldrex	r3, [r3]
 800308c:	623b      	str	r3, [r7, #32]
   return(result);
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	f023 0301 	bic.w	r3, r3, #1
 8003094:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3314      	adds	r3, #20
 800309e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80030a2:	633a      	str	r2, [r7, #48]	; 0x30
 80030a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030aa:	e841 2300 	strex	r3, r2, [r1]
 80030ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1e3      	bne.n	800307e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	330c      	adds	r3, #12
 80030ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	e853 3f00 	ldrex	r3, [r3]
 80030d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 0310 	bic.w	r3, r3, #16
 80030da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	330c      	adds	r3, #12
 80030e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80030e8:	61fa      	str	r2, [r7, #28]
 80030ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ec:	69b9      	ldr	r1, [r7, #24]
 80030ee:	69fa      	ldr	r2, [r7, #28]
 80030f0:	e841 2300 	strex	r3, r2, [r1]
 80030f4:	617b      	str	r3, [r7, #20]
   return(result);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1e3      	bne.n	80030c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003102:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003106:	4619      	mov	r1, r3
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f844 	bl	8003196 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800310e:	e023      	b.n	8003158 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003118:	2b00      	cmp	r3, #0
 800311a:	d009      	beq.n	8003130 <HAL_UART_IRQHandler+0x4f4>
 800311c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f923 	bl	8003374 <UART_Transmit_IT>
    return;
 800312e:	e014      	b.n	800315a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00e      	beq.n	800315a <HAL_UART_IRQHandler+0x51e>
 800313c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f962 	bl	8003412 <UART_EndTransmit_IT>
    return;
 800314e:	e004      	b.n	800315a <HAL_UART_IRQHandler+0x51e>
    return;
 8003150:	bf00      	nop
 8003152:	e002      	b.n	800315a <HAL_UART_IRQHandler+0x51e>
      return;
 8003154:	bf00      	nop
 8003156:	e000      	b.n	800315a <HAL_UART_IRQHandler+0x51e>
      return;
 8003158:	bf00      	nop
  }
}
 800315a:	37e8      	adds	r7, #232	; 0xe8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr

08003172 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr

08003196 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	460b      	mov	r3, r1
 80031a0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr

080031ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b090      	sub	sp, #64	; 0x40
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	4613      	mov	r3, r2
 80031ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031bc:	e050      	b.n	8003260 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c4:	d04c      	beq.n	8003260 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d007      	beq.n	80031dc <UART_WaitOnFlagUntilTimeout+0x30>
 80031cc:	f7fd fc34 	bl	8000a38 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031d8:	429a      	cmp	r2, r3
 80031da:	d241      	bcs.n	8003260 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	330c      	adds	r3, #12
 80031e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e6:	e853 3f00 	ldrex	r3, [r3]
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	330c      	adds	r3, #12
 80031fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031fc:	637a      	str	r2, [r7, #52]	; 0x34
 80031fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003200:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003204:	e841 2300 	strex	r3, r2, [r1]
 8003208:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1e5      	bne.n	80031dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	3314      	adds	r3, #20
 8003216:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	e853 3f00 	ldrex	r3, [r3]
 800321e:	613b      	str	r3, [r7, #16]
   return(result);
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	f023 0301 	bic.w	r3, r3, #1
 8003226:	63bb      	str	r3, [r7, #56]	; 0x38
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3314      	adds	r3, #20
 800322e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003230:	623a      	str	r2, [r7, #32]
 8003232:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003234:	69f9      	ldr	r1, [r7, #28]
 8003236:	6a3a      	ldr	r2, [r7, #32]
 8003238:	e841 2300 	strex	r3, r2, [r1]
 800323c:	61bb      	str	r3, [r7, #24]
   return(result);
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1e5      	bne.n	8003210 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e00f      	b.n	8003280 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4013      	ands	r3, r2
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	429a      	cmp	r2, r3
 800326e:	bf0c      	ite	eq
 8003270:	2301      	moveq	r3, #1
 8003272:	2300      	movne	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	461a      	mov	r2, r3
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	429a      	cmp	r2, r3
 800327c:	d09f      	beq.n	80031be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3740      	adds	r7, #64	; 0x40
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003288:	b480      	push	{r7}
 800328a:	b095      	sub	sp, #84	; 0x54
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	330c      	adds	r3, #12
 8003296:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329a:	e853 3f00 	ldrex	r3, [r3]
 800329e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80032a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	330c      	adds	r3, #12
 80032ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032b0:	643a      	str	r2, [r7, #64]	; 0x40
 80032b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80032b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032b8:	e841 2300 	strex	r3, r2, [r1]
 80032bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1e5      	bne.n	8003290 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3314      	adds	r3, #20
 80032ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	e853 3f00 	ldrex	r3, [r3]
 80032d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f023 0301 	bic.w	r3, r3, #1
 80032da:	64bb      	str	r3, [r7, #72]	; 0x48
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3314      	adds	r3, #20
 80032e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032ec:	e841 2300 	strex	r3, r2, [r1]
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1e5      	bne.n	80032c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d119      	bne.n	8003334 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	330c      	adds	r3, #12
 8003306:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	e853 3f00 	ldrex	r3, [r3]
 800330e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f023 0310 	bic.w	r3, r3, #16
 8003316:	647b      	str	r3, [r7, #68]	; 0x44
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	330c      	adds	r3, #12
 800331e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003320:	61ba      	str	r2, [r7, #24]
 8003322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003324:	6979      	ldr	r1, [r7, #20]
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	e841 2300 	strex	r3, r2, [r1]
 800332c:	613b      	str	r3, [r7, #16]
   return(result);
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1e5      	bne.n	8003300 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2220      	movs	r2, #32
 8003338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003342:	bf00      	nop
 8003344:	3754      	adds	r7, #84	; 0x54
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f7ff ff0c 	bl	8003184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800336c:	bf00      	nop
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b21      	cmp	r3, #33	; 0x21
 8003386:	d13e      	bne.n	8003406 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003390:	d114      	bne.n	80033bc <UART_Transmit_IT+0x48>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d110      	bne.n	80033bc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	461a      	mov	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	1c9a      	adds	r2, r3, #2
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	621a      	str	r2, [r3, #32]
 80033ba:	e008      	b.n	80033ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	1c59      	adds	r1, r3, #1
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6211      	str	r1, [r2, #32]
 80033c6:	781a      	ldrb	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	4619      	mov	r1, r3
 80033dc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10f      	bne.n	8003402 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003400:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003402:	2300      	movs	r3, #0
 8003404:	e000      	b.n	8003408 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003406:	2302      	movs	r3, #2
  }
}
 8003408:	4618      	mov	r0, r3
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr

08003412 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003428:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7ff fe94 	bl	8003160 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b08c      	sub	sp, #48	; 0x30
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b22      	cmp	r3, #34	; 0x22
 8003454:	f040 80ae 	bne.w	80035b4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003460:	d117      	bne.n	8003492 <UART_Receive_IT+0x50>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d113      	bne.n	8003492 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800346a:	2300      	movs	r3, #0
 800346c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003472:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	b29b      	uxth	r3, r3
 800347c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003480:	b29a      	uxth	r2, r3
 8003482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003484:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348a:	1c9a      	adds	r2, r3, #2
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	629a      	str	r2, [r3, #40]	; 0x28
 8003490:	e026      	b.n	80034e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003496:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003498:	2300      	movs	r3, #0
 800349a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a4:	d007      	beq.n	80034b6 <UART_Receive_IT+0x74>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10a      	bne.n	80034c4 <UART_Receive_IT+0x82>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d106      	bne.n	80034c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	e008      	b.n	80034d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	4619      	mov	r1, r3
 80034ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d15d      	bne.n	80035b0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0220 	bic.w	r2, r2, #32
 8003502:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003512:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695a      	ldr	r2, [r3, #20]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0201 	bic.w	r2, r2, #1
 8003522:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	2b01      	cmp	r3, #1
 8003538:	d135      	bne.n	80035a6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	330c      	adds	r3, #12
 8003546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	e853 3f00 	ldrex	r3, [r3]
 800354e:	613b      	str	r3, [r7, #16]
   return(result);
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f023 0310 	bic.w	r3, r3, #16
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	330c      	adds	r3, #12
 800355e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003560:	623a      	str	r2, [r7, #32]
 8003562:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003564:	69f9      	ldr	r1, [r7, #28]
 8003566:	6a3a      	ldr	r2, [r7, #32]
 8003568:	e841 2300 	strex	r3, r2, [r1]
 800356c:	61bb      	str	r3, [r7, #24]
   return(result);
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1e5      	bne.n	8003540 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0310 	and.w	r3, r3, #16
 800357e:	2b10      	cmp	r3, #16
 8003580:	d10a      	bne.n	8003598 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800359c:	4619      	mov	r1, r3
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff fdf9 	bl	8003196 <HAL_UARTEx_RxEventCallback>
 80035a4:	e002      	b.n	80035ac <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff fde3 	bl	8003172 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	e002      	b.n	80035b6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	e000      	b.n	80035b6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80035b4:	2302      	movs	r3, #2
  }
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3730      	adds	r7, #48	; 0x30
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689a      	ldr	r2, [r3, #8]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80035fa:	f023 030c 	bic.w	r3, r3, #12
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	68b9      	ldr	r1, [r7, #8]
 8003604:	430b      	orrs	r3, r1
 8003606:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a2c      	ldr	r2, [pc, #176]	; (80036d4 <UART_SetConfig+0x114>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d103      	bne.n	8003630 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003628:	f7fe ff96 	bl	8002558 <HAL_RCC_GetPCLK2Freq>
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	e002      	b.n	8003636 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003630:	f7fe ff7e 	bl	8002530 <HAL_RCC_GetPCLK1Freq>
 8003634:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	009a      	lsls	r2, r3, #2
 8003640:	441a      	add	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	fbb2 f3f3 	udiv	r3, r2, r3
 800364c:	4a22      	ldr	r2, [pc, #136]	; (80036d8 <UART_SetConfig+0x118>)
 800364e:	fba2 2303 	umull	r2, r3, r2, r3
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	0119      	lsls	r1, r3, #4
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	009a      	lsls	r2, r3, #2
 8003660:	441a      	add	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	fbb2 f2f3 	udiv	r2, r2, r3
 800366c:	4b1a      	ldr	r3, [pc, #104]	; (80036d8 <UART_SetConfig+0x118>)
 800366e:	fba3 0302 	umull	r0, r3, r3, r2
 8003672:	095b      	lsrs	r3, r3, #5
 8003674:	2064      	movs	r0, #100	; 0x64
 8003676:	fb00 f303 	mul.w	r3, r0, r3
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	3332      	adds	r3, #50	; 0x32
 8003680:	4a15      	ldr	r2, [pc, #84]	; (80036d8 <UART_SetConfig+0x118>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	095b      	lsrs	r3, r3, #5
 8003688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800368c:	4419      	add	r1, r3
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	009a      	lsls	r2, r3, #2
 8003698:	441a      	add	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <UART_SetConfig+0x118>)
 80036a6:	fba3 0302 	umull	r0, r3, r3, r2
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	2064      	movs	r0, #100	; 0x64
 80036ae:	fb00 f303 	mul.w	r3, r0, r3
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	3332      	adds	r3, #50	; 0x32
 80036b8:	4a07      	ldr	r2, [pc, #28]	; (80036d8 <UART_SetConfig+0x118>)
 80036ba:	fba2 2303 	umull	r2, r3, r2, r3
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	f003 020f 	and.w	r2, r3, #15
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	440a      	add	r2, r1
 80036ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80036cc:	bf00      	nop
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40013800 	.word	0x40013800
 80036d8:	51eb851f 	.word	0x51eb851f

080036dc <siprintf>:
 80036dc:	b40e      	push	{r1, r2, r3}
 80036de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036e2:	b500      	push	{lr}
 80036e4:	b09c      	sub	sp, #112	; 0x70
 80036e6:	ab1d      	add	r3, sp, #116	; 0x74
 80036e8:	9002      	str	r0, [sp, #8]
 80036ea:	9006      	str	r0, [sp, #24]
 80036ec:	9107      	str	r1, [sp, #28]
 80036ee:	9104      	str	r1, [sp, #16]
 80036f0:	4808      	ldr	r0, [pc, #32]	; (8003714 <siprintf+0x38>)
 80036f2:	4909      	ldr	r1, [pc, #36]	; (8003718 <siprintf+0x3c>)
 80036f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80036f8:	9105      	str	r1, [sp, #20]
 80036fa:	6800      	ldr	r0, [r0, #0]
 80036fc:	a902      	add	r1, sp, #8
 80036fe:	9301      	str	r3, [sp, #4]
 8003700:	f000 f98e 	bl	8003a20 <_svfiprintf_r>
 8003704:	2200      	movs	r2, #0
 8003706:	9b02      	ldr	r3, [sp, #8]
 8003708:	701a      	strb	r2, [r3, #0]
 800370a:	b01c      	add	sp, #112	; 0x70
 800370c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003710:	b003      	add	sp, #12
 8003712:	4770      	bx	lr
 8003714:	20000060 	.word	0x20000060
 8003718:	ffff0208 	.word	0xffff0208

0800371c <memset>:
 800371c:	4603      	mov	r3, r0
 800371e:	4402      	add	r2, r0
 8003720:	4293      	cmp	r3, r2
 8003722:	d100      	bne.n	8003726 <memset+0xa>
 8003724:	4770      	bx	lr
 8003726:	f803 1b01 	strb.w	r1, [r3], #1
 800372a:	e7f9      	b.n	8003720 <memset+0x4>

0800372c <__errno>:
 800372c:	4b01      	ldr	r3, [pc, #4]	; (8003734 <__errno+0x8>)
 800372e:	6818      	ldr	r0, [r3, #0]
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	20000060 	.word	0x20000060

08003738 <__libc_init_array>:
 8003738:	b570      	push	{r4, r5, r6, lr}
 800373a:	2600      	movs	r6, #0
 800373c:	4d0c      	ldr	r5, [pc, #48]	; (8003770 <__libc_init_array+0x38>)
 800373e:	4c0d      	ldr	r4, [pc, #52]	; (8003774 <__libc_init_array+0x3c>)
 8003740:	1b64      	subs	r4, r4, r5
 8003742:	10a4      	asrs	r4, r4, #2
 8003744:	42a6      	cmp	r6, r4
 8003746:	d109      	bne.n	800375c <__libc_init_array+0x24>
 8003748:	f000 fc7a 	bl	8004040 <_init>
 800374c:	2600      	movs	r6, #0
 800374e:	4d0a      	ldr	r5, [pc, #40]	; (8003778 <__libc_init_array+0x40>)
 8003750:	4c0a      	ldr	r4, [pc, #40]	; (800377c <__libc_init_array+0x44>)
 8003752:	1b64      	subs	r4, r4, r5
 8003754:	10a4      	asrs	r4, r4, #2
 8003756:	42a6      	cmp	r6, r4
 8003758:	d105      	bne.n	8003766 <__libc_init_array+0x2e>
 800375a:	bd70      	pop	{r4, r5, r6, pc}
 800375c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003760:	4798      	blx	r3
 8003762:	3601      	adds	r6, #1
 8003764:	e7ee      	b.n	8003744 <__libc_init_array+0xc>
 8003766:	f855 3b04 	ldr.w	r3, [r5], #4
 800376a:	4798      	blx	r3
 800376c:	3601      	adds	r6, #1
 800376e:	e7f2      	b.n	8003756 <__libc_init_array+0x1e>
 8003770:	080040bc 	.word	0x080040bc
 8003774:	080040bc 	.word	0x080040bc
 8003778:	080040bc 	.word	0x080040bc
 800377c:	080040c0 	.word	0x080040c0

08003780 <__retarget_lock_acquire_recursive>:
 8003780:	4770      	bx	lr

08003782 <__retarget_lock_release_recursive>:
 8003782:	4770      	bx	lr

08003784 <_free_r>:
 8003784:	b538      	push	{r3, r4, r5, lr}
 8003786:	4605      	mov	r5, r0
 8003788:	2900      	cmp	r1, #0
 800378a:	d040      	beq.n	800380e <_free_r+0x8a>
 800378c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003790:	1f0c      	subs	r4, r1, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	bfb8      	it	lt
 8003796:	18e4      	addlt	r4, r4, r3
 8003798:	f000 f8dc 	bl	8003954 <__malloc_lock>
 800379c:	4a1c      	ldr	r2, [pc, #112]	; (8003810 <_free_r+0x8c>)
 800379e:	6813      	ldr	r3, [r2, #0]
 80037a0:	b933      	cbnz	r3, 80037b0 <_free_r+0x2c>
 80037a2:	6063      	str	r3, [r4, #4]
 80037a4:	6014      	str	r4, [r2, #0]
 80037a6:	4628      	mov	r0, r5
 80037a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037ac:	f000 b8d8 	b.w	8003960 <__malloc_unlock>
 80037b0:	42a3      	cmp	r3, r4
 80037b2:	d908      	bls.n	80037c6 <_free_r+0x42>
 80037b4:	6820      	ldr	r0, [r4, #0]
 80037b6:	1821      	adds	r1, r4, r0
 80037b8:	428b      	cmp	r3, r1
 80037ba:	bf01      	itttt	eq
 80037bc:	6819      	ldreq	r1, [r3, #0]
 80037be:	685b      	ldreq	r3, [r3, #4]
 80037c0:	1809      	addeq	r1, r1, r0
 80037c2:	6021      	streq	r1, [r4, #0]
 80037c4:	e7ed      	b.n	80037a2 <_free_r+0x1e>
 80037c6:	461a      	mov	r2, r3
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	b10b      	cbz	r3, 80037d0 <_free_r+0x4c>
 80037cc:	42a3      	cmp	r3, r4
 80037ce:	d9fa      	bls.n	80037c6 <_free_r+0x42>
 80037d0:	6811      	ldr	r1, [r2, #0]
 80037d2:	1850      	adds	r0, r2, r1
 80037d4:	42a0      	cmp	r0, r4
 80037d6:	d10b      	bne.n	80037f0 <_free_r+0x6c>
 80037d8:	6820      	ldr	r0, [r4, #0]
 80037da:	4401      	add	r1, r0
 80037dc:	1850      	adds	r0, r2, r1
 80037de:	4283      	cmp	r3, r0
 80037e0:	6011      	str	r1, [r2, #0]
 80037e2:	d1e0      	bne.n	80037a6 <_free_r+0x22>
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	4408      	add	r0, r1
 80037ea:	6010      	str	r0, [r2, #0]
 80037ec:	6053      	str	r3, [r2, #4]
 80037ee:	e7da      	b.n	80037a6 <_free_r+0x22>
 80037f0:	d902      	bls.n	80037f8 <_free_r+0x74>
 80037f2:	230c      	movs	r3, #12
 80037f4:	602b      	str	r3, [r5, #0]
 80037f6:	e7d6      	b.n	80037a6 <_free_r+0x22>
 80037f8:	6820      	ldr	r0, [r4, #0]
 80037fa:	1821      	adds	r1, r4, r0
 80037fc:	428b      	cmp	r3, r1
 80037fe:	bf01      	itttt	eq
 8003800:	6819      	ldreq	r1, [r3, #0]
 8003802:	685b      	ldreq	r3, [r3, #4]
 8003804:	1809      	addeq	r1, r1, r0
 8003806:	6021      	streq	r1, [r4, #0]
 8003808:	6063      	str	r3, [r4, #4]
 800380a:	6054      	str	r4, [r2, #4]
 800380c:	e7cb      	b.n	80037a6 <_free_r+0x22>
 800380e:	bd38      	pop	{r3, r4, r5, pc}
 8003810:	20000300 	.word	0x20000300

08003814 <sbrk_aligned>:
 8003814:	b570      	push	{r4, r5, r6, lr}
 8003816:	4e0e      	ldr	r6, [pc, #56]	; (8003850 <sbrk_aligned+0x3c>)
 8003818:	460c      	mov	r4, r1
 800381a:	6831      	ldr	r1, [r6, #0]
 800381c:	4605      	mov	r5, r0
 800381e:	b911      	cbnz	r1, 8003826 <sbrk_aligned+0x12>
 8003820:	f000 fbaa 	bl	8003f78 <_sbrk_r>
 8003824:	6030      	str	r0, [r6, #0]
 8003826:	4621      	mov	r1, r4
 8003828:	4628      	mov	r0, r5
 800382a:	f000 fba5 	bl	8003f78 <_sbrk_r>
 800382e:	1c43      	adds	r3, r0, #1
 8003830:	d00a      	beq.n	8003848 <sbrk_aligned+0x34>
 8003832:	1cc4      	adds	r4, r0, #3
 8003834:	f024 0403 	bic.w	r4, r4, #3
 8003838:	42a0      	cmp	r0, r4
 800383a:	d007      	beq.n	800384c <sbrk_aligned+0x38>
 800383c:	1a21      	subs	r1, r4, r0
 800383e:	4628      	mov	r0, r5
 8003840:	f000 fb9a 	bl	8003f78 <_sbrk_r>
 8003844:	3001      	adds	r0, #1
 8003846:	d101      	bne.n	800384c <sbrk_aligned+0x38>
 8003848:	f04f 34ff 	mov.w	r4, #4294967295
 800384c:	4620      	mov	r0, r4
 800384e:	bd70      	pop	{r4, r5, r6, pc}
 8003850:	20000304 	.word	0x20000304

08003854 <_malloc_r>:
 8003854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003858:	1ccd      	adds	r5, r1, #3
 800385a:	f025 0503 	bic.w	r5, r5, #3
 800385e:	3508      	adds	r5, #8
 8003860:	2d0c      	cmp	r5, #12
 8003862:	bf38      	it	cc
 8003864:	250c      	movcc	r5, #12
 8003866:	2d00      	cmp	r5, #0
 8003868:	4607      	mov	r7, r0
 800386a:	db01      	blt.n	8003870 <_malloc_r+0x1c>
 800386c:	42a9      	cmp	r1, r5
 800386e:	d905      	bls.n	800387c <_malloc_r+0x28>
 8003870:	230c      	movs	r3, #12
 8003872:	2600      	movs	r6, #0
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	4630      	mov	r0, r6
 8003878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800387c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003950 <_malloc_r+0xfc>
 8003880:	f000 f868 	bl	8003954 <__malloc_lock>
 8003884:	f8d8 3000 	ldr.w	r3, [r8]
 8003888:	461c      	mov	r4, r3
 800388a:	bb5c      	cbnz	r4, 80038e4 <_malloc_r+0x90>
 800388c:	4629      	mov	r1, r5
 800388e:	4638      	mov	r0, r7
 8003890:	f7ff ffc0 	bl	8003814 <sbrk_aligned>
 8003894:	1c43      	adds	r3, r0, #1
 8003896:	4604      	mov	r4, r0
 8003898:	d155      	bne.n	8003946 <_malloc_r+0xf2>
 800389a:	f8d8 4000 	ldr.w	r4, [r8]
 800389e:	4626      	mov	r6, r4
 80038a0:	2e00      	cmp	r6, #0
 80038a2:	d145      	bne.n	8003930 <_malloc_r+0xdc>
 80038a4:	2c00      	cmp	r4, #0
 80038a6:	d048      	beq.n	800393a <_malloc_r+0xe6>
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	4631      	mov	r1, r6
 80038ac:	4638      	mov	r0, r7
 80038ae:	eb04 0903 	add.w	r9, r4, r3
 80038b2:	f000 fb61 	bl	8003f78 <_sbrk_r>
 80038b6:	4581      	cmp	r9, r0
 80038b8:	d13f      	bne.n	800393a <_malloc_r+0xe6>
 80038ba:	6821      	ldr	r1, [r4, #0]
 80038bc:	4638      	mov	r0, r7
 80038be:	1a6d      	subs	r5, r5, r1
 80038c0:	4629      	mov	r1, r5
 80038c2:	f7ff ffa7 	bl	8003814 <sbrk_aligned>
 80038c6:	3001      	adds	r0, #1
 80038c8:	d037      	beq.n	800393a <_malloc_r+0xe6>
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	442b      	add	r3, r5
 80038ce:	6023      	str	r3, [r4, #0]
 80038d0:	f8d8 3000 	ldr.w	r3, [r8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d038      	beq.n	800394a <_malloc_r+0xf6>
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	42a2      	cmp	r2, r4
 80038dc:	d12b      	bne.n	8003936 <_malloc_r+0xe2>
 80038de:	2200      	movs	r2, #0
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	e00f      	b.n	8003904 <_malloc_r+0xb0>
 80038e4:	6822      	ldr	r2, [r4, #0]
 80038e6:	1b52      	subs	r2, r2, r5
 80038e8:	d41f      	bmi.n	800392a <_malloc_r+0xd6>
 80038ea:	2a0b      	cmp	r2, #11
 80038ec:	d917      	bls.n	800391e <_malloc_r+0xca>
 80038ee:	1961      	adds	r1, r4, r5
 80038f0:	42a3      	cmp	r3, r4
 80038f2:	6025      	str	r5, [r4, #0]
 80038f4:	bf18      	it	ne
 80038f6:	6059      	strne	r1, [r3, #4]
 80038f8:	6863      	ldr	r3, [r4, #4]
 80038fa:	bf08      	it	eq
 80038fc:	f8c8 1000 	streq.w	r1, [r8]
 8003900:	5162      	str	r2, [r4, r5]
 8003902:	604b      	str	r3, [r1, #4]
 8003904:	4638      	mov	r0, r7
 8003906:	f104 060b 	add.w	r6, r4, #11
 800390a:	f000 f829 	bl	8003960 <__malloc_unlock>
 800390e:	f026 0607 	bic.w	r6, r6, #7
 8003912:	1d23      	adds	r3, r4, #4
 8003914:	1af2      	subs	r2, r6, r3
 8003916:	d0ae      	beq.n	8003876 <_malloc_r+0x22>
 8003918:	1b9b      	subs	r3, r3, r6
 800391a:	50a3      	str	r3, [r4, r2]
 800391c:	e7ab      	b.n	8003876 <_malloc_r+0x22>
 800391e:	42a3      	cmp	r3, r4
 8003920:	6862      	ldr	r2, [r4, #4]
 8003922:	d1dd      	bne.n	80038e0 <_malloc_r+0x8c>
 8003924:	f8c8 2000 	str.w	r2, [r8]
 8003928:	e7ec      	b.n	8003904 <_malloc_r+0xb0>
 800392a:	4623      	mov	r3, r4
 800392c:	6864      	ldr	r4, [r4, #4]
 800392e:	e7ac      	b.n	800388a <_malloc_r+0x36>
 8003930:	4634      	mov	r4, r6
 8003932:	6876      	ldr	r6, [r6, #4]
 8003934:	e7b4      	b.n	80038a0 <_malloc_r+0x4c>
 8003936:	4613      	mov	r3, r2
 8003938:	e7cc      	b.n	80038d4 <_malloc_r+0x80>
 800393a:	230c      	movs	r3, #12
 800393c:	4638      	mov	r0, r7
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	f000 f80e 	bl	8003960 <__malloc_unlock>
 8003944:	e797      	b.n	8003876 <_malloc_r+0x22>
 8003946:	6025      	str	r5, [r4, #0]
 8003948:	e7dc      	b.n	8003904 <_malloc_r+0xb0>
 800394a:	605b      	str	r3, [r3, #4]
 800394c:	deff      	udf	#255	; 0xff
 800394e:	bf00      	nop
 8003950:	20000300 	.word	0x20000300

08003954 <__malloc_lock>:
 8003954:	4801      	ldr	r0, [pc, #4]	; (800395c <__malloc_lock+0x8>)
 8003956:	f7ff bf13 	b.w	8003780 <__retarget_lock_acquire_recursive>
 800395a:	bf00      	nop
 800395c:	200002fc 	.word	0x200002fc

08003960 <__malloc_unlock>:
 8003960:	4801      	ldr	r0, [pc, #4]	; (8003968 <__malloc_unlock+0x8>)
 8003962:	f7ff bf0e 	b.w	8003782 <__retarget_lock_release_recursive>
 8003966:	bf00      	nop
 8003968:	200002fc 	.word	0x200002fc

0800396c <__ssputs_r>:
 800396c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003970:	461f      	mov	r7, r3
 8003972:	688e      	ldr	r6, [r1, #8]
 8003974:	4682      	mov	sl, r0
 8003976:	42be      	cmp	r6, r7
 8003978:	460c      	mov	r4, r1
 800397a:	4690      	mov	r8, r2
 800397c:	680b      	ldr	r3, [r1, #0]
 800397e:	d82c      	bhi.n	80039da <__ssputs_r+0x6e>
 8003980:	898a      	ldrh	r2, [r1, #12]
 8003982:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003986:	d026      	beq.n	80039d6 <__ssputs_r+0x6a>
 8003988:	6965      	ldr	r5, [r4, #20]
 800398a:	6909      	ldr	r1, [r1, #16]
 800398c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003990:	eba3 0901 	sub.w	r9, r3, r1
 8003994:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003998:	1c7b      	adds	r3, r7, #1
 800399a:	444b      	add	r3, r9
 800399c:	106d      	asrs	r5, r5, #1
 800399e:	429d      	cmp	r5, r3
 80039a0:	bf38      	it	cc
 80039a2:	461d      	movcc	r5, r3
 80039a4:	0553      	lsls	r3, r2, #21
 80039a6:	d527      	bpl.n	80039f8 <__ssputs_r+0x8c>
 80039a8:	4629      	mov	r1, r5
 80039aa:	f7ff ff53 	bl	8003854 <_malloc_r>
 80039ae:	4606      	mov	r6, r0
 80039b0:	b360      	cbz	r0, 8003a0c <__ssputs_r+0xa0>
 80039b2:	464a      	mov	r2, r9
 80039b4:	6921      	ldr	r1, [r4, #16]
 80039b6:	f000 fafd 	bl	8003fb4 <memcpy>
 80039ba:	89a3      	ldrh	r3, [r4, #12]
 80039bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c4:	81a3      	strh	r3, [r4, #12]
 80039c6:	6126      	str	r6, [r4, #16]
 80039c8:	444e      	add	r6, r9
 80039ca:	6026      	str	r6, [r4, #0]
 80039cc:	463e      	mov	r6, r7
 80039ce:	6165      	str	r5, [r4, #20]
 80039d0:	eba5 0509 	sub.w	r5, r5, r9
 80039d4:	60a5      	str	r5, [r4, #8]
 80039d6:	42be      	cmp	r6, r7
 80039d8:	d900      	bls.n	80039dc <__ssputs_r+0x70>
 80039da:	463e      	mov	r6, r7
 80039dc:	4632      	mov	r2, r6
 80039de:	4641      	mov	r1, r8
 80039e0:	6820      	ldr	r0, [r4, #0]
 80039e2:	f000 faaf 	bl	8003f44 <memmove>
 80039e6:	2000      	movs	r0, #0
 80039e8:	68a3      	ldr	r3, [r4, #8]
 80039ea:	1b9b      	subs	r3, r3, r6
 80039ec:	60a3      	str	r3, [r4, #8]
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	4433      	add	r3, r6
 80039f2:	6023      	str	r3, [r4, #0]
 80039f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039f8:	462a      	mov	r2, r5
 80039fa:	f000 fae9 	bl	8003fd0 <_realloc_r>
 80039fe:	4606      	mov	r6, r0
 8003a00:	2800      	cmp	r0, #0
 8003a02:	d1e0      	bne.n	80039c6 <__ssputs_r+0x5a>
 8003a04:	4650      	mov	r0, sl
 8003a06:	6921      	ldr	r1, [r4, #16]
 8003a08:	f7ff febc 	bl	8003784 <_free_r>
 8003a0c:	230c      	movs	r3, #12
 8003a0e:	f8ca 3000 	str.w	r3, [sl]
 8003a12:	89a3      	ldrh	r3, [r4, #12]
 8003a14:	f04f 30ff 	mov.w	r0, #4294967295
 8003a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a1c:	81a3      	strh	r3, [r4, #12]
 8003a1e:	e7e9      	b.n	80039f4 <__ssputs_r+0x88>

08003a20 <_svfiprintf_r>:
 8003a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a24:	4698      	mov	r8, r3
 8003a26:	898b      	ldrh	r3, [r1, #12]
 8003a28:	4607      	mov	r7, r0
 8003a2a:	061b      	lsls	r3, r3, #24
 8003a2c:	460d      	mov	r5, r1
 8003a2e:	4614      	mov	r4, r2
 8003a30:	b09d      	sub	sp, #116	; 0x74
 8003a32:	d50e      	bpl.n	8003a52 <_svfiprintf_r+0x32>
 8003a34:	690b      	ldr	r3, [r1, #16]
 8003a36:	b963      	cbnz	r3, 8003a52 <_svfiprintf_r+0x32>
 8003a38:	2140      	movs	r1, #64	; 0x40
 8003a3a:	f7ff ff0b 	bl	8003854 <_malloc_r>
 8003a3e:	6028      	str	r0, [r5, #0]
 8003a40:	6128      	str	r0, [r5, #16]
 8003a42:	b920      	cbnz	r0, 8003a4e <_svfiprintf_r+0x2e>
 8003a44:	230c      	movs	r3, #12
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	f04f 30ff 	mov.w	r0, #4294967295
 8003a4c:	e0d0      	b.n	8003bf0 <_svfiprintf_r+0x1d0>
 8003a4e:	2340      	movs	r3, #64	; 0x40
 8003a50:	616b      	str	r3, [r5, #20]
 8003a52:	2300      	movs	r3, #0
 8003a54:	9309      	str	r3, [sp, #36]	; 0x24
 8003a56:	2320      	movs	r3, #32
 8003a58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a5c:	2330      	movs	r3, #48	; 0x30
 8003a5e:	f04f 0901 	mov.w	r9, #1
 8003a62:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a66:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003c08 <_svfiprintf_r+0x1e8>
 8003a6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a6e:	4623      	mov	r3, r4
 8003a70:	469a      	mov	sl, r3
 8003a72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a76:	b10a      	cbz	r2, 8003a7c <_svfiprintf_r+0x5c>
 8003a78:	2a25      	cmp	r2, #37	; 0x25
 8003a7a:	d1f9      	bne.n	8003a70 <_svfiprintf_r+0x50>
 8003a7c:	ebba 0b04 	subs.w	fp, sl, r4
 8003a80:	d00b      	beq.n	8003a9a <_svfiprintf_r+0x7a>
 8003a82:	465b      	mov	r3, fp
 8003a84:	4622      	mov	r2, r4
 8003a86:	4629      	mov	r1, r5
 8003a88:	4638      	mov	r0, r7
 8003a8a:	f7ff ff6f 	bl	800396c <__ssputs_r>
 8003a8e:	3001      	adds	r0, #1
 8003a90:	f000 80a9 	beq.w	8003be6 <_svfiprintf_r+0x1c6>
 8003a94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a96:	445a      	add	r2, fp
 8003a98:	9209      	str	r2, [sp, #36]	; 0x24
 8003a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 80a1 	beq.w	8003be6 <_svfiprintf_r+0x1c6>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003aae:	f10a 0a01 	add.w	sl, sl, #1
 8003ab2:	9304      	str	r3, [sp, #16]
 8003ab4:	9307      	str	r3, [sp, #28]
 8003ab6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003aba:	931a      	str	r3, [sp, #104]	; 0x68
 8003abc:	4654      	mov	r4, sl
 8003abe:	2205      	movs	r2, #5
 8003ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ac4:	4850      	ldr	r0, [pc, #320]	; (8003c08 <_svfiprintf_r+0x1e8>)
 8003ac6:	f000 fa67 	bl	8003f98 <memchr>
 8003aca:	9a04      	ldr	r2, [sp, #16]
 8003acc:	b9d8      	cbnz	r0, 8003b06 <_svfiprintf_r+0xe6>
 8003ace:	06d0      	lsls	r0, r2, #27
 8003ad0:	bf44      	itt	mi
 8003ad2:	2320      	movmi	r3, #32
 8003ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ad8:	0711      	lsls	r1, r2, #28
 8003ada:	bf44      	itt	mi
 8003adc:	232b      	movmi	r3, #43	; 0x2b
 8003ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ae6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ae8:	d015      	beq.n	8003b16 <_svfiprintf_r+0xf6>
 8003aea:	4654      	mov	r4, sl
 8003aec:	2000      	movs	r0, #0
 8003aee:	f04f 0c0a 	mov.w	ip, #10
 8003af2:	9a07      	ldr	r2, [sp, #28]
 8003af4:	4621      	mov	r1, r4
 8003af6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003afa:	3b30      	subs	r3, #48	; 0x30
 8003afc:	2b09      	cmp	r3, #9
 8003afe:	d94d      	bls.n	8003b9c <_svfiprintf_r+0x17c>
 8003b00:	b1b0      	cbz	r0, 8003b30 <_svfiprintf_r+0x110>
 8003b02:	9207      	str	r2, [sp, #28]
 8003b04:	e014      	b.n	8003b30 <_svfiprintf_r+0x110>
 8003b06:	eba0 0308 	sub.w	r3, r0, r8
 8003b0a:	fa09 f303 	lsl.w	r3, r9, r3
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	46a2      	mov	sl, r4
 8003b12:	9304      	str	r3, [sp, #16]
 8003b14:	e7d2      	b.n	8003abc <_svfiprintf_r+0x9c>
 8003b16:	9b03      	ldr	r3, [sp, #12]
 8003b18:	1d19      	adds	r1, r3, #4
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	9103      	str	r1, [sp, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	bfbb      	ittet	lt
 8003b22:	425b      	neglt	r3, r3
 8003b24:	f042 0202 	orrlt.w	r2, r2, #2
 8003b28:	9307      	strge	r3, [sp, #28]
 8003b2a:	9307      	strlt	r3, [sp, #28]
 8003b2c:	bfb8      	it	lt
 8003b2e:	9204      	strlt	r2, [sp, #16]
 8003b30:	7823      	ldrb	r3, [r4, #0]
 8003b32:	2b2e      	cmp	r3, #46	; 0x2e
 8003b34:	d10c      	bne.n	8003b50 <_svfiprintf_r+0x130>
 8003b36:	7863      	ldrb	r3, [r4, #1]
 8003b38:	2b2a      	cmp	r3, #42	; 0x2a
 8003b3a:	d134      	bne.n	8003ba6 <_svfiprintf_r+0x186>
 8003b3c:	9b03      	ldr	r3, [sp, #12]
 8003b3e:	3402      	adds	r4, #2
 8003b40:	1d1a      	adds	r2, r3, #4
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	9203      	str	r2, [sp, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	bfb8      	it	lt
 8003b4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b4e:	9305      	str	r3, [sp, #20]
 8003b50:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003c0c <_svfiprintf_r+0x1ec>
 8003b54:	2203      	movs	r2, #3
 8003b56:	4650      	mov	r0, sl
 8003b58:	7821      	ldrb	r1, [r4, #0]
 8003b5a:	f000 fa1d 	bl	8003f98 <memchr>
 8003b5e:	b138      	cbz	r0, 8003b70 <_svfiprintf_r+0x150>
 8003b60:	2240      	movs	r2, #64	; 0x40
 8003b62:	9b04      	ldr	r3, [sp, #16]
 8003b64:	eba0 000a 	sub.w	r0, r0, sl
 8003b68:	4082      	lsls	r2, r0
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	3401      	adds	r4, #1
 8003b6e:	9304      	str	r3, [sp, #16]
 8003b70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b74:	2206      	movs	r2, #6
 8003b76:	4826      	ldr	r0, [pc, #152]	; (8003c10 <_svfiprintf_r+0x1f0>)
 8003b78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b7c:	f000 fa0c 	bl	8003f98 <memchr>
 8003b80:	2800      	cmp	r0, #0
 8003b82:	d038      	beq.n	8003bf6 <_svfiprintf_r+0x1d6>
 8003b84:	4b23      	ldr	r3, [pc, #140]	; (8003c14 <_svfiprintf_r+0x1f4>)
 8003b86:	bb1b      	cbnz	r3, 8003bd0 <_svfiprintf_r+0x1b0>
 8003b88:	9b03      	ldr	r3, [sp, #12]
 8003b8a:	3307      	adds	r3, #7
 8003b8c:	f023 0307 	bic.w	r3, r3, #7
 8003b90:	3308      	adds	r3, #8
 8003b92:	9303      	str	r3, [sp, #12]
 8003b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b96:	4433      	add	r3, r6
 8003b98:	9309      	str	r3, [sp, #36]	; 0x24
 8003b9a:	e768      	b.n	8003a6e <_svfiprintf_r+0x4e>
 8003b9c:	460c      	mov	r4, r1
 8003b9e:	2001      	movs	r0, #1
 8003ba0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ba4:	e7a6      	b.n	8003af4 <_svfiprintf_r+0xd4>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f04f 0c0a 	mov.w	ip, #10
 8003bac:	4619      	mov	r1, r3
 8003bae:	3401      	adds	r4, #1
 8003bb0:	9305      	str	r3, [sp, #20]
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bb8:	3a30      	subs	r2, #48	; 0x30
 8003bba:	2a09      	cmp	r2, #9
 8003bbc:	d903      	bls.n	8003bc6 <_svfiprintf_r+0x1a6>
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0c6      	beq.n	8003b50 <_svfiprintf_r+0x130>
 8003bc2:	9105      	str	r1, [sp, #20]
 8003bc4:	e7c4      	b.n	8003b50 <_svfiprintf_r+0x130>
 8003bc6:	4604      	mov	r4, r0
 8003bc8:	2301      	movs	r3, #1
 8003bca:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bce:	e7f0      	b.n	8003bb2 <_svfiprintf_r+0x192>
 8003bd0:	ab03      	add	r3, sp, #12
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	462a      	mov	r2, r5
 8003bd6:	4638      	mov	r0, r7
 8003bd8:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <_svfiprintf_r+0x1f8>)
 8003bda:	a904      	add	r1, sp, #16
 8003bdc:	f3af 8000 	nop.w
 8003be0:	1c42      	adds	r2, r0, #1
 8003be2:	4606      	mov	r6, r0
 8003be4:	d1d6      	bne.n	8003b94 <_svfiprintf_r+0x174>
 8003be6:	89ab      	ldrh	r3, [r5, #12]
 8003be8:	065b      	lsls	r3, r3, #25
 8003bea:	f53f af2d 	bmi.w	8003a48 <_svfiprintf_r+0x28>
 8003bee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bf0:	b01d      	add	sp, #116	; 0x74
 8003bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bf6:	ab03      	add	r3, sp, #12
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	462a      	mov	r2, r5
 8003bfc:	4638      	mov	r0, r7
 8003bfe:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <_svfiprintf_r+0x1f8>)
 8003c00:	a904      	add	r1, sp, #16
 8003c02:	f000 f87d 	bl	8003d00 <_printf_i>
 8003c06:	e7eb      	b.n	8003be0 <_svfiprintf_r+0x1c0>
 8003c08:	08004086 	.word	0x08004086
 8003c0c:	0800408c 	.word	0x0800408c
 8003c10:	08004090 	.word	0x08004090
 8003c14:	00000000 	.word	0x00000000
 8003c18:	0800396d 	.word	0x0800396d

08003c1c <_printf_common>:
 8003c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c20:	4616      	mov	r6, r2
 8003c22:	4699      	mov	r9, r3
 8003c24:	688a      	ldr	r2, [r1, #8]
 8003c26:	690b      	ldr	r3, [r1, #16]
 8003c28:	4607      	mov	r7, r0
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	bfb8      	it	lt
 8003c2e:	4613      	movlt	r3, r2
 8003c30:	6033      	str	r3, [r6, #0]
 8003c32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c36:	460c      	mov	r4, r1
 8003c38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c3c:	b10a      	cbz	r2, 8003c42 <_printf_common+0x26>
 8003c3e:	3301      	adds	r3, #1
 8003c40:	6033      	str	r3, [r6, #0]
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	0699      	lsls	r1, r3, #26
 8003c46:	bf42      	ittt	mi
 8003c48:	6833      	ldrmi	r3, [r6, #0]
 8003c4a:	3302      	addmi	r3, #2
 8003c4c:	6033      	strmi	r3, [r6, #0]
 8003c4e:	6825      	ldr	r5, [r4, #0]
 8003c50:	f015 0506 	ands.w	r5, r5, #6
 8003c54:	d106      	bne.n	8003c64 <_printf_common+0x48>
 8003c56:	f104 0a19 	add.w	sl, r4, #25
 8003c5a:	68e3      	ldr	r3, [r4, #12]
 8003c5c:	6832      	ldr	r2, [r6, #0]
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	42ab      	cmp	r3, r5
 8003c62:	dc2b      	bgt.n	8003cbc <_printf_common+0xa0>
 8003c64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c68:	1e13      	subs	r3, r2, #0
 8003c6a:	6822      	ldr	r2, [r4, #0]
 8003c6c:	bf18      	it	ne
 8003c6e:	2301      	movne	r3, #1
 8003c70:	0692      	lsls	r2, r2, #26
 8003c72:	d430      	bmi.n	8003cd6 <_printf_common+0xba>
 8003c74:	4649      	mov	r1, r9
 8003c76:	4638      	mov	r0, r7
 8003c78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c7c:	47c0      	blx	r8
 8003c7e:	3001      	adds	r0, #1
 8003c80:	d023      	beq.n	8003cca <_printf_common+0xae>
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	6922      	ldr	r2, [r4, #16]
 8003c86:	f003 0306 	and.w	r3, r3, #6
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	bf14      	ite	ne
 8003c8e:	2500      	movne	r5, #0
 8003c90:	6833      	ldreq	r3, [r6, #0]
 8003c92:	f04f 0600 	mov.w	r6, #0
 8003c96:	bf08      	it	eq
 8003c98:	68e5      	ldreq	r5, [r4, #12]
 8003c9a:	f104 041a 	add.w	r4, r4, #26
 8003c9e:	bf08      	it	eq
 8003ca0:	1aed      	subeq	r5, r5, r3
 8003ca2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003ca6:	bf08      	it	eq
 8003ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cac:	4293      	cmp	r3, r2
 8003cae:	bfc4      	itt	gt
 8003cb0:	1a9b      	subgt	r3, r3, r2
 8003cb2:	18ed      	addgt	r5, r5, r3
 8003cb4:	42b5      	cmp	r5, r6
 8003cb6:	d11a      	bne.n	8003cee <_printf_common+0xd2>
 8003cb8:	2000      	movs	r0, #0
 8003cba:	e008      	b.n	8003cce <_printf_common+0xb2>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	4652      	mov	r2, sl
 8003cc0:	4649      	mov	r1, r9
 8003cc2:	4638      	mov	r0, r7
 8003cc4:	47c0      	blx	r8
 8003cc6:	3001      	adds	r0, #1
 8003cc8:	d103      	bne.n	8003cd2 <_printf_common+0xb6>
 8003cca:	f04f 30ff 	mov.w	r0, #4294967295
 8003cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cd2:	3501      	adds	r5, #1
 8003cd4:	e7c1      	b.n	8003c5a <_printf_common+0x3e>
 8003cd6:	2030      	movs	r0, #48	; 0x30
 8003cd8:	18e1      	adds	r1, r4, r3
 8003cda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ce4:	4422      	add	r2, r4
 8003ce6:	3302      	adds	r3, #2
 8003ce8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cec:	e7c2      	b.n	8003c74 <_printf_common+0x58>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	4622      	mov	r2, r4
 8003cf2:	4649      	mov	r1, r9
 8003cf4:	4638      	mov	r0, r7
 8003cf6:	47c0      	blx	r8
 8003cf8:	3001      	adds	r0, #1
 8003cfa:	d0e6      	beq.n	8003cca <_printf_common+0xae>
 8003cfc:	3601      	adds	r6, #1
 8003cfe:	e7d9      	b.n	8003cb4 <_printf_common+0x98>

08003d00 <_printf_i>:
 8003d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d04:	7e0f      	ldrb	r7, [r1, #24]
 8003d06:	4691      	mov	r9, r2
 8003d08:	2f78      	cmp	r7, #120	; 0x78
 8003d0a:	4680      	mov	r8, r0
 8003d0c:	460c      	mov	r4, r1
 8003d0e:	469a      	mov	sl, r3
 8003d10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d16:	d807      	bhi.n	8003d28 <_printf_i+0x28>
 8003d18:	2f62      	cmp	r7, #98	; 0x62
 8003d1a:	d80a      	bhi.n	8003d32 <_printf_i+0x32>
 8003d1c:	2f00      	cmp	r7, #0
 8003d1e:	f000 80d5 	beq.w	8003ecc <_printf_i+0x1cc>
 8003d22:	2f58      	cmp	r7, #88	; 0x58
 8003d24:	f000 80c1 	beq.w	8003eaa <_printf_i+0x1aa>
 8003d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d30:	e03a      	b.n	8003da8 <_printf_i+0xa8>
 8003d32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d36:	2b15      	cmp	r3, #21
 8003d38:	d8f6      	bhi.n	8003d28 <_printf_i+0x28>
 8003d3a:	a101      	add	r1, pc, #4	; (adr r1, 8003d40 <_printf_i+0x40>)
 8003d3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d40:	08003d99 	.word	0x08003d99
 8003d44:	08003dad 	.word	0x08003dad
 8003d48:	08003d29 	.word	0x08003d29
 8003d4c:	08003d29 	.word	0x08003d29
 8003d50:	08003d29 	.word	0x08003d29
 8003d54:	08003d29 	.word	0x08003d29
 8003d58:	08003dad 	.word	0x08003dad
 8003d5c:	08003d29 	.word	0x08003d29
 8003d60:	08003d29 	.word	0x08003d29
 8003d64:	08003d29 	.word	0x08003d29
 8003d68:	08003d29 	.word	0x08003d29
 8003d6c:	08003eb3 	.word	0x08003eb3
 8003d70:	08003dd9 	.word	0x08003dd9
 8003d74:	08003e6d 	.word	0x08003e6d
 8003d78:	08003d29 	.word	0x08003d29
 8003d7c:	08003d29 	.word	0x08003d29
 8003d80:	08003ed5 	.word	0x08003ed5
 8003d84:	08003d29 	.word	0x08003d29
 8003d88:	08003dd9 	.word	0x08003dd9
 8003d8c:	08003d29 	.word	0x08003d29
 8003d90:	08003d29 	.word	0x08003d29
 8003d94:	08003e75 	.word	0x08003e75
 8003d98:	682b      	ldr	r3, [r5, #0]
 8003d9a:	1d1a      	adds	r2, r3, #4
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	602a      	str	r2, [r5, #0]
 8003da0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003da4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003da8:	2301      	movs	r3, #1
 8003daa:	e0a0      	b.n	8003eee <_printf_i+0x1ee>
 8003dac:	6820      	ldr	r0, [r4, #0]
 8003dae:	682b      	ldr	r3, [r5, #0]
 8003db0:	0607      	lsls	r7, r0, #24
 8003db2:	f103 0104 	add.w	r1, r3, #4
 8003db6:	6029      	str	r1, [r5, #0]
 8003db8:	d501      	bpl.n	8003dbe <_printf_i+0xbe>
 8003dba:	681e      	ldr	r6, [r3, #0]
 8003dbc:	e003      	b.n	8003dc6 <_printf_i+0xc6>
 8003dbe:	0646      	lsls	r6, r0, #25
 8003dc0:	d5fb      	bpl.n	8003dba <_printf_i+0xba>
 8003dc2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003dc6:	2e00      	cmp	r6, #0
 8003dc8:	da03      	bge.n	8003dd2 <_printf_i+0xd2>
 8003dca:	232d      	movs	r3, #45	; 0x2d
 8003dcc:	4276      	negs	r6, r6
 8003dce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dd2:	230a      	movs	r3, #10
 8003dd4:	4859      	ldr	r0, [pc, #356]	; (8003f3c <_printf_i+0x23c>)
 8003dd6:	e012      	b.n	8003dfe <_printf_i+0xfe>
 8003dd8:	682b      	ldr	r3, [r5, #0]
 8003dda:	6820      	ldr	r0, [r4, #0]
 8003ddc:	1d19      	adds	r1, r3, #4
 8003dde:	6029      	str	r1, [r5, #0]
 8003de0:	0605      	lsls	r5, r0, #24
 8003de2:	d501      	bpl.n	8003de8 <_printf_i+0xe8>
 8003de4:	681e      	ldr	r6, [r3, #0]
 8003de6:	e002      	b.n	8003dee <_printf_i+0xee>
 8003de8:	0641      	lsls	r1, r0, #25
 8003dea:	d5fb      	bpl.n	8003de4 <_printf_i+0xe4>
 8003dec:	881e      	ldrh	r6, [r3, #0]
 8003dee:	2f6f      	cmp	r7, #111	; 0x6f
 8003df0:	bf0c      	ite	eq
 8003df2:	2308      	moveq	r3, #8
 8003df4:	230a      	movne	r3, #10
 8003df6:	4851      	ldr	r0, [pc, #324]	; (8003f3c <_printf_i+0x23c>)
 8003df8:	2100      	movs	r1, #0
 8003dfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003dfe:	6865      	ldr	r5, [r4, #4]
 8003e00:	2d00      	cmp	r5, #0
 8003e02:	bfa8      	it	ge
 8003e04:	6821      	ldrge	r1, [r4, #0]
 8003e06:	60a5      	str	r5, [r4, #8]
 8003e08:	bfa4      	itt	ge
 8003e0a:	f021 0104 	bicge.w	r1, r1, #4
 8003e0e:	6021      	strge	r1, [r4, #0]
 8003e10:	b90e      	cbnz	r6, 8003e16 <_printf_i+0x116>
 8003e12:	2d00      	cmp	r5, #0
 8003e14:	d04b      	beq.n	8003eae <_printf_i+0x1ae>
 8003e16:	4615      	mov	r5, r2
 8003e18:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e1c:	fb03 6711 	mls	r7, r3, r1, r6
 8003e20:	5dc7      	ldrb	r7, [r0, r7]
 8003e22:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e26:	4637      	mov	r7, r6
 8003e28:	42bb      	cmp	r3, r7
 8003e2a:	460e      	mov	r6, r1
 8003e2c:	d9f4      	bls.n	8003e18 <_printf_i+0x118>
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d10b      	bne.n	8003e4a <_printf_i+0x14a>
 8003e32:	6823      	ldr	r3, [r4, #0]
 8003e34:	07de      	lsls	r6, r3, #31
 8003e36:	d508      	bpl.n	8003e4a <_printf_i+0x14a>
 8003e38:	6923      	ldr	r3, [r4, #16]
 8003e3a:	6861      	ldr	r1, [r4, #4]
 8003e3c:	4299      	cmp	r1, r3
 8003e3e:	bfde      	ittt	le
 8003e40:	2330      	movle	r3, #48	; 0x30
 8003e42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e4a:	1b52      	subs	r2, r2, r5
 8003e4c:	6122      	str	r2, [r4, #16]
 8003e4e:	464b      	mov	r3, r9
 8003e50:	4621      	mov	r1, r4
 8003e52:	4640      	mov	r0, r8
 8003e54:	f8cd a000 	str.w	sl, [sp]
 8003e58:	aa03      	add	r2, sp, #12
 8003e5a:	f7ff fedf 	bl	8003c1c <_printf_common>
 8003e5e:	3001      	adds	r0, #1
 8003e60:	d14a      	bne.n	8003ef8 <_printf_i+0x1f8>
 8003e62:	f04f 30ff 	mov.w	r0, #4294967295
 8003e66:	b004      	add	sp, #16
 8003e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	f043 0320 	orr.w	r3, r3, #32
 8003e72:	6023      	str	r3, [r4, #0]
 8003e74:	2778      	movs	r7, #120	; 0x78
 8003e76:	4832      	ldr	r0, [pc, #200]	; (8003f40 <_printf_i+0x240>)
 8003e78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e7c:	6823      	ldr	r3, [r4, #0]
 8003e7e:	6829      	ldr	r1, [r5, #0]
 8003e80:	061f      	lsls	r7, r3, #24
 8003e82:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e86:	d402      	bmi.n	8003e8e <_printf_i+0x18e>
 8003e88:	065f      	lsls	r7, r3, #25
 8003e8a:	bf48      	it	mi
 8003e8c:	b2b6      	uxthmi	r6, r6
 8003e8e:	07df      	lsls	r7, r3, #31
 8003e90:	bf48      	it	mi
 8003e92:	f043 0320 	orrmi.w	r3, r3, #32
 8003e96:	6029      	str	r1, [r5, #0]
 8003e98:	bf48      	it	mi
 8003e9a:	6023      	strmi	r3, [r4, #0]
 8003e9c:	b91e      	cbnz	r6, 8003ea6 <_printf_i+0x1a6>
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	f023 0320 	bic.w	r3, r3, #32
 8003ea4:	6023      	str	r3, [r4, #0]
 8003ea6:	2310      	movs	r3, #16
 8003ea8:	e7a6      	b.n	8003df8 <_printf_i+0xf8>
 8003eaa:	4824      	ldr	r0, [pc, #144]	; (8003f3c <_printf_i+0x23c>)
 8003eac:	e7e4      	b.n	8003e78 <_printf_i+0x178>
 8003eae:	4615      	mov	r5, r2
 8003eb0:	e7bd      	b.n	8003e2e <_printf_i+0x12e>
 8003eb2:	682b      	ldr	r3, [r5, #0]
 8003eb4:	6826      	ldr	r6, [r4, #0]
 8003eb6:	1d18      	adds	r0, r3, #4
 8003eb8:	6961      	ldr	r1, [r4, #20]
 8003eba:	6028      	str	r0, [r5, #0]
 8003ebc:	0635      	lsls	r5, r6, #24
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	d501      	bpl.n	8003ec6 <_printf_i+0x1c6>
 8003ec2:	6019      	str	r1, [r3, #0]
 8003ec4:	e002      	b.n	8003ecc <_printf_i+0x1cc>
 8003ec6:	0670      	lsls	r0, r6, #25
 8003ec8:	d5fb      	bpl.n	8003ec2 <_printf_i+0x1c2>
 8003eca:	8019      	strh	r1, [r3, #0]
 8003ecc:	2300      	movs	r3, #0
 8003ece:	4615      	mov	r5, r2
 8003ed0:	6123      	str	r3, [r4, #16]
 8003ed2:	e7bc      	b.n	8003e4e <_printf_i+0x14e>
 8003ed4:	682b      	ldr	r3, [r5, #0]
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	1d1a      	adds	r2, r3, #4
 8003eda:	602a      	str	r2, [r5, #0]
 8003edc:	681d      	ldr	r5, [r3, #0]
 8003ede:	6862      	ldr	r2, [r4, #4]
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	f000 f859 	bl	8003f98 <memchr>
 8003ee6:	b108      	cbz	r0, 8003eec <_printf_i+0x1ec>
 8003ee8:	1b40      	subs	r0, r0, r5
 8003eea:	6060      	str	r0, [r4, #4]
 8003eec:	6863      	ldr	r3, [r4, #4]
 8003eee:	6123      	str	r3, [r4, #16]
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ef6:	e7aa      	b.n	8003e4e <_printf_i+0x14e>
 8003ef8:	462a      	mov	r2, r5
 8003efa:	4649      	mov	r1, r9
 8003efc:	4640      	mov	r0, r8
 8003efe:	6923      	ldr	r3, [r4, #16]
 8003f00:	47d0      	blx	sl
 8003f02:	3001      	adds	r0, #1
 8003f04:	d0ad      	beq.n	8003e62 <_printf_i+0x162>
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	079b      	lsls	r3, r3, #30
 8003f0a:	d413      	bmi.n	8003f34 <_printf_i+0x234>
 8003f0c:	68e0      	ldr	r0, [r4, #12]
 8003f0e:	9b03      	ldr	r3, [sp, #12]
 8003f10:	4298      	cmp	r0, r3
 8003f12:	bfb8      	it	lt
 8003f14:	4618      	movlt	r0, r3
 8003f16:	e7a6      	b.n	8003e66 <_printf_i+0x166>
 8003f18:	2301      	movs	r3, #1
 8003f1a:	4632      	mov	r2, r6
 8003f1c:	4649      	mov	r1, r9
 8003f1e:	4640      	mov	r0, r8
 8003f20:	47d0      	blx	sl
 8003f22:	3001      	adds	r0, #1
 8003f24:	d09d      	beq.n	8003e62 <_printf_i+0x162>
 8003f26:	3501      	adds	r5, #1
 8003f28:	68e3      	ldr	r3, [r4, #12]
 8003f2a:	9903      	ldr	r1, [sp, #12]
 8003f2c:	1a5b      	subs	r3, r3, r1
 8003f2e:	42ab      	cmp	r3, r5
 8003f30:	dcf2      	bgt.n	8003f18 <_printf_i+0x218>
 8003f32:	e7eb      	b.n	8003f0c <_printf_i+0x20c>
 8003f34:	2500      	movs	r5, #0
 8003f36:	f104 0619 	add.w	r6, r4, #25
 8003f3a:	e7f5      	b.n	8003f28 <_printf_i+0x228>
 8003f3c:	08004097 	.word	0x08004097
 8003f40:	080040a8 	.word	0x080040a8

08003f44 <memmove>:
 8003f44:	4288      	cmp	r0, r1
 8003f46:	b510      	push	{r4, lr}
 8003f48:	eb01 0402 	add.w	r4, r1, r2
 8003f4c:	d902      	bls.n	8003f54 <memmove+0x10>
 8003f4e:	4284      	cmp	r4, r0
 8003f50:	4623      	mov	r3, r4
 8003f52:	d807      	bhi.n	8003f64 <memmove+0x20>
 8003f54:	1e43      	subs	r3, r0, #1
 8003f56:	42a1      	cmp	r1, r4
 8003f58:	d008      	beq.n	8003f6c <memmove+0x28>
 8003f5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f62:	e7f8      	b.n	8003f56 <memmove+0x12>
 8003f64:	4601      	mov	r1, r0
 8003f66:	4402      	add	r2, r0
 8003f68:	428a      	cmp	r2, r1
 8003f6a:	d100      	bne.n	8003f6e <memmove+0x2a>
 8003f6c:	bd10      	pop	{r4, pc}
 8003f6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f76:	e7f7      	b.n	8003f68 <memmove+0x24>

08003f78 <_sbrk_r>:
 8003f78:	b538      	push	{r3, r4, r5, lr}
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	4d05      	ldr	r5, [pc, #20]	; (8003f94 <_sbrk_r+0x1c>)
 8003f7e:	4604      	mov	r4, r0
 8003f80:	4608      	mov	r0, r1
 8003f82:	602b      	str	r3, [r5, #0]
 8003f84:	f7fc fc9e 	bl	80008c4 <_sbrk>
 8003f88:	1c43      	adds	r3, r0, #1
 8003f8a:	d102      	bne.n	8003f92 <_sbrk_r+0x1a>
 8003f8c:	682b      	ldr	r3, [r5, #0]
 8003f8e:	b103      	cbz	r3, 8003f92 <_sbrk_r+0x1a>
 8003f90:	6023      	str	r3, [r4, #0]
 8003f92:	bd38      	pop	{r3, r4, r5, pc}
 8003f94:	200002f8 	.word	0x200002f8

08003f98 <memchr>:
 8003f98:	4603      	mov	r3, r0
 8003f9a:	b510      	push	{r4, lr}
 8003f9c:	b2c9      	uxtb	r1, r1
 8003f9e:	4402      	add	r2, r0
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	d101      	bne.n	8003faa <memchr+0x12>
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	e003      	b.n	8003fb2 <memchr+0x1a>
 8003faa:	7804      	ldrb	r4, [r0, #0]
 8003fac:	3301      	adds	r3, #1
 8003fae:	428c      	cmp	r4, r1
 8003fb0:	d1f6      	bne.n	8003fa0 <memchr+0x8>
 8003fb2:	bd10      	pop	{r4, pc}

08003fb4 <memcpy>:
 8003fb4:	440a      	add	r2, r1
 8003fb6:	4291      	cmp	r1, r2
 8003fb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003fbc:	d100      	bne.n	8003fc0 <memcpy+0xc>
 8003fbe:	4770      	bx	lr
 8003fc0:	b510      	push	{r4, lr}
 8003fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fc6:	4291      	cmp	r1, r2
 8003fc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fcc:	d1f9      	bne.n	8003fc2 <memcpy+0xe>
 8003fce:	bd10      	pop	{r4, pc}

08003fd0 <_realloc_r>:
 8003fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fd4:	4680      	mov	r8, r0
 8003fd6:	4614      	mov	r4, r2
 8003fd8:	460e      	mov	r6, r1
 8003fda:	b921      	cbnz	r1, 8003fe6 <_realloc_r+0x16>
 8003fdc:	4611      	mov	r1, r2
 8003fde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fe2:	f7ff bc37 	b.w	8003854 <_malloc_r>
 8003fe6:	b92a      	cbnz	r2, 8003ff4 <_realloc_r+0x24>
 8003fe8:	f7ff fbcc 	bl	8003784 <_free_r>
 8003fec:	4625      	mov	r5, r4
 8003fee:	4628      	mov	r0, r5
 8003ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ff4:	f000 f81b 	bl	800402e <_malloc_usable_size_r>
 8003ff8:	4284      	cmp	r4, r0
 8003ffa:	4607      	mov	r7, r0
 8003ffc:	d802      	bhi.n	8004004 <_realloc_r+0x34>
 8003ffe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004002:	d812      	bhi.n	800402a <_realloc_r+0x5a>
 8004004:	4621      	mov	r1, r4
 8004006:	4640      	mov	r0, r8
 8004008:	f7ff fc24 	bl	8003854 <_malloc_r>
 800400c:	4605      	mov	r5, r0
 800400e:	2800      	cmp	r0, #0
 8004010:	d0ed      	beq.n	8003fee <_realloc_r+0x1e>
 8004012:	42bc      	cmp	r4, r7
 8004014:	4622      	mov	r2, r4
 8004016:	4631      	mov	r1, r6
 8004018:	bf28      	it	cs
 800401a:	463a      	movcs	r2, r7
 800401c:	f7ff ffca 	bl	8003fb4 <memcpy>
 8004020:	4631      	mov	r1, r6
 8004022:	4640      	mov	r0, r8
 8004024:	f7ff fbae 	bl	8003784 <_free_r>
 8004028:	e7e1      	b.n	8003fee <_realloc_r+0x1e>
 800402a:	4635      	mov	r5, r6
 800402c:	e7df      	b.n	8003fee <_realloc_r+0x1e>

0800402e <_malloc_usable_size_r>:
 800402e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004032:	1f18      	subs	r0, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	bfbc      	itt	lt
 8004038:	580b      	ldrlt	r3, [r1, r0]
 800403a:	18c0      	addlt	r0, r0, r3
 800403c:	4770      	bx	lr
	...

08004040 <_init>:
 8004040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004042:	bf00      	nop
 8004044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004046:	bc08      	pop	{r3}
 8004048:	469e      	mov	lr, r3
 800404a:	4770      	bx	lr

0800404c <_fini>:
 800404c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404e:	bf00      	nop
 8004050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004052:	bc08      	pop	{r3}
 8004054:	469e      	mov	lr, r3
 8004056:	4770      	bx	lr
