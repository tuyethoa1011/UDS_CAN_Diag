
ECU_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080045dc  080045dc  000145dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046ec  080046ec  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080046ec  080046ec  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046ec  080046ec  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046ec  080046ec  000146ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046f0  080046f0  000146f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080046f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000078  0800476c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  0800476c  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   000099f8  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bb9  00000000  00000000  00029adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e8  00000000  00000000  0002b698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006c3  00000000  00000000  0002bf80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018012  00000000  00000000  0002c643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b33b  00000000  00000000  00044655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086be2  00000000  00000000  0004f990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d14  00000000  00000000  000d6574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000d9288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080045c4 	.word	0x080045c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080045c4 	.word	0x080045c4

0800014c <GetSecurityLevel>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t GetSecurityLevel(uint8_t LV_byteSring, uint8_t *keyLV_byteString)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	71fb      	strb	r3, [r7, #7]
	uint8_t SecLevel_res;
	uint8_t key_lv;
	switch(LV_byteSring)
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	2b01      	cmp	r3, #1
 800015c:	d107      	bne.n	800016e <GetSecurityLevel+0x22>
	{
		case SEC_LEVEL1:
		{
			key_lv = 0x02;
 800015e:	2302      	movs	r3, #2
 8000160:	73bb      	strb	r3, [r7, #14]
			keyLV_byteString = &key_lv;
 8000162:	f107 030e 	add.w	r3, r7, #14
 8000166:	603b      	str	r3, [r7, #0]
			SecLevel_res = 0;
 8000168:	2300      	movs	r3, #0
 800016a:	73fb      	strb	r3, [r7, #15]
			break;
 800016c:	bf00      	nop
		}
	}
	return SecLevel_res;
 800016e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000170:	4618      	mov	r0, r3
 8000172:	3714      	adds	r7, #20
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr

0800017a <GetDID>:
uint16_t GetDID(uint8_t DID_HByteString,uint8_t DID_LByteString)
{
 800017a:	b480      	push	{r7}
 800017c:	b085      	sub	sp, #20
 800017e:	af00      	add	r7, sp, #0
 8000180:	4603      	mov	r3, r0
 8000182:	460a      	mov	r2, r1
 8000184:	71fb      	strb	r3, [r7, #7]
 8000186:	4613      	mov	r3, r2
 8000188:	71bb      	strb	r3, [r7, #6]
	uint16_t DID_res;
	DID_res = (DID_HByteString << 8) | DID_LByteString;
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	021b      	lsls	r3, r3, #8
 800018e:	b21a      	sxth	r2, r3
 8000190:	79bb      	ldrb	r3, [r7, #6]
 8000192:	b21b      	sxth	r3, r3
 8000194:	4313      	orrs	r3, r2
 8000196:	b21b      	sxth	r3, r3
 8000198:	81fb      	strh	r3, [r7, #14]
	return DID_res;
 800019a:	89fb      	ldrh	r3, [r7, #14]
}
 800019c:	4618      	mov	r0, r3
 800019e:	3714      	adds	r7, #20
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
	...

080001a8 <GetCANFrameSize>:
uint8_t GetCANFrameSize(uint8_t aData[])
{
 80001a8:	b480      	push	{r7}
 80001aa:	b085      	sub	sp, #20
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	uint8_t SizeCount = 0;
 80001b0:	2300      	movs	r3, #0
 80001b2:	73fb      	strb	r3, [r7, #15]
	for(index_array=0;index_array<8;index_array++)
 80001b4:	4b0f      	ldr	r3, [pc, #60]	; (80001f4 <GetCANFrameSize+0x4c>)
 80001b6:	2200      	movs	r2, #0
 80001b8:	701a      	strb	r2, [r3, #0]
 80001ba:	e010      	b.n	80001de <GetCANFrameSize+0x36>
	{
		if(aData[index_array]!=0)
 80001bc:	4b0d      	ldr	r3, [pc, #52]	; (80001f4 <GetCANFrameSize+0x4c>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	461a      	mov	r2, r3
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	4413      	add	r3, r2
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d002      	beq.n	80001d2 <GetCANFrameSize+0x2a>
		{
			SizeCount++;
 80001cc:	7bfb      	ldrb	r3, [r7, #15]
 80001ce:	3301      	adds	r3, #1
 80001d0:	73fb      	strb	r3, [r7, #15]
	for(index_array=0;index_array<8;index_array++)
 80001d2:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <GetCANFrameSize+0x4c>)
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	3301      	adds	r3, #1
 80001d8:	b2da      	uxtb	r2, r3
 80001da:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <GetCANFrameSize+0x4c>)
 80001dc:	701a      	strb	r2, [r3, #0]
 80001de:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <GetCANFrameSize+0x4c>)
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	2b07      	cmp	r3, #7
 80001e4:	d9ea      	bls.n	80001bc <GetCANFrameSize+0x14>
		}
	}
	return SizeCount;
 80001e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	2000015d 	.word	0x2000015d

080001f8 <Check_ReadRq_Validation>:
uint8_t Check_ReadRq_Validation(uint8_t FT, uint8_t DL, uint8_t Data_buf[])
{
 80001f8:	b590      	push	{r4, r7, lr}
 80001fa:	b085      	sub	sp, #20
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	603a      	str	r2, [r7, #0]
 8000202:	71fb      	strb	r3, [r7, #7]
 8000204:	460b      	mov	r3, r1
 8000206:	71bb      	strb	r3, [r7, #6]
	uint8_t Resp_res;
	/*Negative response case*/
	//case 1
	if(FT > 3)
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	2b03      	cmp	r3, #3
 800020c:	d902      	bls.n	8000214 <Check_ReadRq_Validation+0x1c>
	{
		//transmit negative response
		Resp_res = NEGATIVE_RESPONSE;
 800020e:	2301      	movs	r3, #1
 8000210:	73fb      	strb	r3, [r7, #15]
 8000212:	e018      	b.n	8000246 <Check_ReadRq_Validation+0x4e>
	} else
	{
		switch(FT)
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <Check_ReadRq_Validation+0x26>
 800021a:	2b01      	cmp	r3, #1
				}
				break;
			}
			case 1: //flow control
			{
				break;
 800021c:	e013      	b.n	8000246 <Check_ReadRq_Validation+0x4e>
				if(DL>7)
 800021e:	79bb      	ldrb	r3, [r7, #6]
 8000220:	2b07      	cmp	r3, #7
 8000222:	d902      	bls.n	800022a <Check_ReadRq_Validation+0x32>
					Resp_res = NEGATIVE_RESPONSE;
 8000224:	2301      	movs	r3, #1
 8000226:	73fb      	strb	r3, [r7, #15]
				break;
 8000228:	e00c      	b.n	8000244 <Check_ReadRq_Validation+0x4c>
					if(DL != (GetCANFrameSize(Data_buf)-1))
 800022a:	79bc      	ldrb	r4, [r7, #6]
 800022c:	6838      	ldr	r0, [r7, #0]
 800022e:	f7ff ffbb 	bl	80001a8 <GetCANFrameSize>
 8000232:	4603      	mov	r3, r0
 8000234:	3b01      	subs	r3, #1
 8000236:	429c      	cmp	r4, r3
 8000238:	d002      	beq.n	8000240 <Check_ReadRq_Validation+0x48>
						Resp_res = NEGATIVE_RESPONSE;
 800023a:	2301      	movs	r3, #1
 800023c:	73fb      	strb	r3, [r7, #15]
				break;
 800023e:	e001      	b.n	8000244 <Check_ReadRq_Validation+0x4c>
						Resp_res = POSITIVE_RESPONSE;
 8000240:	2300      	movs	r3, #0
 8000242:	73fb      	strb	r3, [r7, #15]
				break;
 8000244:	bf00      	nop
			}
		}
	}

	return Resp_res;
 8000246:	7bfb      	ldrb	r3, [r7, #15]
}
 8000248:	4618      	mov	r0, r3
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bd90      	pop	{r4, r7, pc}

08000250 <GetFrameType>:
uint8_t GetFrameType(uint8_t FT_byteString) //Frame type co the dung chung cho SF FF
{
 8000250:	b480      	push	{r7}
 8000252:	b085      	sub	sp, #20
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	71fb      	strb	r3, [r7, #7]
	uint8_t FT_res;
	switch(FT_byteString)
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	2b03      	cmp	r3, #3
 800025e:	d817      	bhi.n	8000290 <GetFrameType+0x40>
 8000260:	a201      	add	r2, pc, #4	; (adr r2, 8000268 <GetFrameType+0x18>)
 8000262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000266:	bf00      	nop
 8000268:	08000279 	.word	0x08000279
 800026c:	0800027f 	.word	0x0800027f
 8000270:	08000285 	.word	0x08000285
 8000274:	0800028b 	.word	0x0800028b
	{
		case 0x00: //single frame
		{
			FT_res = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	73fb      	strb	r3, [r7, #15]
			break;
 800027c:	e008      	b.n	8000290 <GetFrameType+0x40>
		}
		case 0x01: //first frame
		{
			FT_res = 1;
 800027e:	2301      	movs	r3, #1
 8000280:	73fb      	strb	r3, [r7, #15]
			break;
 8000282:	e005      	b.n	8000290 <GetFrameType+0x40>
		}
		case 0x02: //consecutive frame
		{
			FT_res = 2;
 8000284:	2302      	movs	r3, #2
 8000286:	73fb      	strb	r3, [r7, #15]
			break;
 8000288:	e002      	b.n	8000290 <GetFrameType+0x40>
		}
		case 0x03: //flow control
		{
			FT_res = 3;
 800028a:	2303      	movs	r3, #3
 800028c:	73fb      	strb	r3, [r7, #15]
			break;
 800028e:	bf00      	nop
		}
	}
	return FT_res;
 8000290:	7bfb      	ldrb	r3, [r7, #15]
}
 8000292:	4618      	mov	r0, r3
 8000294:	3714      	adds	r7, #20
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr

0800029c <GetDataLength>:
uint8_t GetDataLength(uint8_t DL_byteString) //Get datalength - co the trong tuong lai cai nay se dung chung duoc
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
	uint8_t DL_res;
	switch(DL_byteString)
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	2b70      	cmp	r3, #112	; 0x70
 80002aa:	d02f      	beq.n	800030c <GetDataLength+0x70>
 80002ac:	2b70      	cmp	r3, #112	; 0x70
 80002ae:	dc30      	bgt.n	8000312 <GetDataLength+0x76>
 80002b0:	2b60      	cmp	r3, #96	; 0x60
 80002b2:	d028      	beq.n	8000306 <GetDataLength+0x6a>
 80002b4:	2b60      	cmp	r3, #96	; 0x60
 80002b6:	dc2c      	bgt.n	8000312 <GetDataLength+0x76>
 80002b8:	2b50      	cmp	r3, #80	; 0x50
 80002ba:	d021      	beq.n	8000300 <GetDataLength+0x64>
 80002bc:	2b50      	cmp	r3, #80	; 0x50
 80002be:	dc28      	bgt.n	8000312 <GetDataLength+0x76>
 80002c0:	2b40      	cmp	r3, #64	; 0x40
 80002c2:	d01a      	beq.n	80002fa <GetDataLength+0x5e>
 80002c4:	2b40      	cmp	r3, #64	; 0x40
 80002c6:	dc24      	bgt.n	8000312 <GetDataLength+0x76>
 80002c8:	2b30      	cmp	r3, #48	; 0x30
 80002ca:	d013      	beq.n	80002f4 <GetDataLength+0x58>
 80002cc:	2b30      	cmp	r3, #48	; 0x30
 80002ce:	dc20      	bgt.n	8000312 <GetDataLength+0x76>
 80002d0:	2b20      	cmp	r3, #32
 80002d2:	d00c      	beq.n	80002ee <GetDataLength+0x52>
 80002d4:	2b20      	cmp	r3, #32
 80002d6:	dc1c      	bgt.n	8000312 <GetDataLength+0x76>
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d002      	beq.n	80002e2 <GetDataLength+0x46>
 80002dc:	2b10      	cmp	r3, #16
 80002de:	d003      	beq.n	80002e8 <GetDataLength+0x4c>
 80002e0:	e017      	b.n	8000312 <GetDataLength+0x76>
	{
		case DL_NONE_DATABYTE:
		{
			DL_res = 0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	73fb      	strb	r3, [r7, #15]
			break;
 80002e6:	e014      	b.n	8000312 <GetDataLength+0x76>
		}
		case DL_1_DATABYTE:
		{
			DL_res = 1;
 80002e8:	2301      	movs	r3, #1
 80002ea:	73fb      	strb	r3, [r7, #15]
			break;
 80002ec:	e011      	b.n	8000312 <GetDataLength+0x76>
		}
		case DL_2_DATABYTE:
		{
			DL_res = 2;
 80002ee:	2302      	movs	r3, #2
 80002f0:	73fb      	strb	r3, [r7, #15]
			break;
 80002f2:	e00e      	b.n	8000312 <GetDataLength+0x76>
		}
		case DL_3_DATABYTE:
		{
			DL_res = 3;
 80002f4:	2303      	movs	r3, #3
 80002f6:	73fb      	strb	r3, [r7, #15]
			break;
 80002f8:	e00b      	b.n	8000312 <GetDataLength+0x76>
		}
		case DL_4_DATABYTE:
		{
			DL_res = 4;
 80002fa:	2304      	movs	r3, #4
 80002fc:	73fb      	strb	r3, [r7, #15]
			break;
 80002fe:	e008      	b.n	8000312 <GetDataLength+0x76>
		}
		case DL_5_DATABYTE:
		{
			DL_res = 5;
 8000300:	2305      	movs	r3, #5
 8000302:	73fb      	strb	r3, [r7, #15]
			break;
 8000304:	e005      	b.n	8000312 <GetDataLength+0x76>
		}
		case  DL_6_DATABYTE:
		{
			DL_res = 6;
 8000306:	2306      	movs	r3, #6
 8000308:	73fb      	strb	r3, [r7, #15]
			break;
 800030a:	e002      	b.n	8000312 <GetDataLength+0x76>
		}
		case DL_7_DATABYTE:
		{
			DL_res = 7;
 800030c:	2307      	movs	r3, #7
 800030e:	73fb      	strb	r3, [r7, #15]
			break;
 8000310:	bf00      	nop
		}
	}
	return DL_res;
 8000312:	7bfb      	ldrb	r3, [r7, #15]
}
 8000314:	4618      	mov	r0, r3
 8000316:	3714      	adds	r7, #20
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr

0800031e <SF_N_PCI_FrameTypeHandle>:
uint8_t SF_N_PCI_FrameTypeHandle(uint8_t byteString) //SF_PCI: Single Frame Protocol Control Info: FT + DL
{
 800031e:	b480      	push	{r7}
 8000320:	b083      	sub	sp, #12
 8000322:	af00      	add	r7, sp, #0
 8000324:	4603      	mov	r3, r0
 8000326:	71fb      	strb	r3, [r7, #7]
	return (byteString >> 4) & 0x03;
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	091b      	lsrs	r3, r3, #4
 800032c:	b2db      	uxtb	r3, r3
 800032e:	f003 0303 	and.w	r3, r3, #3
 8000332:	b2db      	uxtb	r3, r3
}
 8000334:	4618      	mov	r0, r3
 8000336:	370c      	adds	r7, #12
 8000338:	46bd      	mov	sp, r7
 800033a:	bc80      	pop	{r7}
 800033c:	4770      	bx	lr

0800033e <SF_N_PCI_DataLenngthHandle>:
uint8_t SF_N_PCI_DataLenngthHandle(uint8_t byteString) //SF_PCI: Single Frame Protocol Control Info: FT + DL
{
 800033e:	b480      	push	{r7}
 8000340:	b083      	sub	sp, #12
 8000342:	af00      	add	r7, sp, #0
 8000344:	4603      	mov	r3, r0
 8000346:	71fb      	strb	r3, [r7, #7]
	return (byteString << 4) & 0x70;
 8000348:	79fb      	ldrb	r3, [r7, #7]
 800034a:	011b      	lsls	r3, r3, #4
 800034c:	b2db      	uxtb	r3, r3
 800034e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000352:	b2db      	uxtb	r3, r3
}
 8000354:	4618      	mov	r0, r3
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	bc80      	pop	{r7}
 800035c:	4770      	bx	lr
	...

08000360 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &ECU_RxHeader, ECU_RxData) != HAL_OK)
 8000368:	4b09      	ldr	r3, [pc, #36]	; (8000390 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 800036a:	4a0a      	ldr	r2, [pc, #40]	; (8000394 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 800036c:	2101      	movs	r1, #1
 800036e:	6878      	ldr	r0, [r7, #4]
 8000370:	f001 f94b 	bl	800160a <HAL_CAN_GetRxMessage>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d002      	beq.n	8000380 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>
	{
		Error_Handler();
 800037a:	f000 fbe1 	bl	8000b40 <Error_Handler>
	}
	else
	{
		ReadRq_flag = 1;
	}
}
 800037e:	e002      	b.n	8000386 <HAL_CAN_RxFifo1MsgPendingCallback+0x26>
		ReadRq_flag = 1;
 8000380:	4b05      	ldr	r3, [pc, #20]	; (8000398 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 8000382:	2201      	movs	r2, #1
 8000384:	701a      	strb	r2, [r3, #0]
}
 8000386:	bf00      	nop
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	2000014c 	.word	0x2000014c
 8000394:	2000011c 	.word	0x2000011c
 8000398:	2000015f 	.word	0x2000015f

0800039c <ReadRequest_handle>:

void ReadRequest_handle(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
	FT_String = SF_N_PCI_FrameTypeHandle(ECU_RxData[0]);
 80003a2:	4b48      	ldr	r3, [pc, #288]	; (80004c4 <ReadRequest_handle+0x128>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	4618      	mov	r0, r3
 80003a8:	f7ff ffb9 	bl	800031e <SF_N_PCI_FrameTypeHandle>
 80003ac:	4603      	mov	r3, r0
 80003ae:	461a      	mov	r2, r3
 80003b0:	4b45      	ldr	r3, [pc, #276]	; (80004c8 <ReadRequest_handle+0x12c>)
 80003b2:	701a      	strb	r2, [r3, #0]
	DL_String = SF_N_PCI_DataLenngthHandle(ECU_RxData[0]);
 80003b4:	4b43      	ldr	r3, [pc, #268]	; (80004c4 <ReadRequest_handle+0x128>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff ffc0 	bl	800033e <SF_N_PCI_DataLenngthHandle>
 80003be:	4603      	mov	r3, r0
 80003c0:	461a      	mov	r2, r3
 80003c2:	4b42      	ldr	r3, [pc, #264]	; (80004cc <ReadRequest_handle+0x130>)
 80003c4:	701a      	strb	r2, [r3, #0]

	FrameType = GetFrameType(FT_String);
 80003c6:	4b40      	ldr	r3, [pc, #256]	; (80004c8 <ReadRequest_handle+0x12c>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff ff40 	bl	8000250 <GetFrameType>
 80003d0:	4603      	mov	r3, r0
 80003d2:	461a      	mov	r2, r3
 80003d4:	4b3e      	ldr	r3, [pc, #248]	; (80004d0 <ReadRequest_handle+0x134>)
 80003d6:	701a      	strb	r2, [r3, #0]
	DataLength = GetDataLength(DL_String);
 80003d8:	4b3c      	ldr	r3, [pc, #240]	; (80004cc <ReadRequest_handle+0x130>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	4618      	mov	r0, r3
 80003de:	f7ff ff5d 	bl	800029c <GetDataLength>
 80003e2:	4603      	mov	r3, r0
 80003e4:	461a      	mov	r2, r3
 80003e6:	4b3b      	ldr	r3, [pc, #236]	; (80004d4 <ReadRequest_handle+0x138>)
 80003e8:	701a      	strb	r2, [r3, #0]

	if(Check_ReadRq_Validation(FrameType,DataLength, ECU_RxData) != POSITIVE_RESPONSE)
 80003ea:	4b39      	ldr	r3, [pc, #228]	; (80004d0 <ReadRequest_handle+0x134>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	4a39      	ldr	r2, [pc, #228]	; (80004d4 <ReadRequest_handle+0x138>)
 80003f0:	7811      	ldrb	r1, [r2, #0]
 80003f2:	4a34      	ldr	r2, [pc, #208]	; (80004c4 <ReadRequest_handle+0x128>)
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff feff 	bl	80001f8 <Check_ReadRq_Validation>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d006      	beq.n	800040e <ReadRequest_handle+0x72>
	{
		//transmit negative response CAN frame packet
		HAL_CAN_AddTxMessage(&hcan, &ECU_TxHeader,NegativeReadRsp_TxData,&ECU_TxMailbox);
 8000400:	4b35      	ldr	r3, [pc, #212]	; (80004d8 <ReadRequest_handle+0x13c>)
 8000402:	4a36      	ldr	r2, [pc, #216]	; (80004dc <ReadRequest_handle+0x140>)
 8000404:	4936      	ldr	r1, [pc, #216]	; (80004e0 <ReadRequest_handle+0x144>)
 8000406:	4837      	ldr	r0, [pc, #220]	; (80004e4 <ReadRequest_handle+0x148>)
 8000408:	f001 f830 	bl	800146c <HAL_CAN_AddTxMessage>
					}
					//free(DataBuffer);
			break;
		}
	}
}
 800040c:	e055      	b.n	80004ba <ReadRequest_handle+0x11e>
		DID_Val = GetDID(ECU_RxData[2], ECU_RxData[3]);
 800040e:	4b2d      	ldr	r3, [pc, #180]	; (80004c4 <ReadRequest_handle+0x128>)
 8000410:	789b      	ldrb	r3, [r3, #2]
 8000412:	4a2c      	ldr	r2, [pc, #176]	; (80004c4 <ReadRequest_handle+0x128>)
 8000414:	78d2      	ldrb	r2, [r2, #3]
 8000416:	4611      	mov	r1, r2
 8000418:	4618      	mov	r0, r3
 800041a:	f7ff feae 	bl	800017a <GetDID>
 800041e:	4603      	mov	r3, r0
 8000420:	461a      	mov	r2, r3
 8000422:	4b31      	ldr	r3, [pc, #196]	; (80004e8 <ReadRequest_handle+0x14c>)
 8000424:	801a      	strh	r2, [r3, #0]
		switch(DID_Val)
 8000426:	4b30      	ldr	r3, [pc, #192]	; (80004e8 <ReadRequest_handle+0x14c>)
 8000428:	881b      	ldrh	r3, [r3, #0]
 800042a:	461a      	mov	r2, r3
 800042c:	f240 1323 	movw	r3, #291	; 0x123
 8000430:	429a      	cmp	r2, r3
 8000432:	d142      	bne.n	80004ba <ReadRequest_handle+0x11e>
				uint8_t DataBuffer[sizeof(TEST_LABEL)] = TEST_LABEL;
 8000434:	4a2d      	ldr	r2, [pc, #180]	; (80004ec <ReadRequest_handle+0x150>)
 8000436:	463b      	mov	r3, r7
 8000438:	e892 0003 	ldmia.w	r2, {r0, r1}
 800043c:	6018      	str	r0, [r3, #0]
 800043e:	3304      	adds	r3, #4
 8000440:	7019      	strb	r1, [r3, #0]
					PositiveReadRsp_TxData[0] = ECU_RxData[1] + 0x40;
 8000442:	4b20      	ldr	r3, [pc, #128]	; (80004c4 <ReadRequest_handle+0x128>)
 8000444:	785b      	ldrb	r3, [r3, #1]
 8000446:	3340      	adds	r3, #64	; 0x40
 8000448:	b2da      	uxtb	r2, r3
 800044a:	4b29      	ldr	r3, [pc, #164]	; (80004f0 <ReadRequest_handle+0x154>)
 800044c:	701a      	strb	r2, [r3, #0]
					PositiveReadRsp_TxData[1] = ECU_RxData[2];
 800044e:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <ReadRequest_handle+0x128>)
 8000450:	789a      	ldrb	r2, [r3, #2]
 8000452:	4b27      	ldr	r3, [pc, #156]	; (80004f0 <ReadRequest_handle+0x154>)
 8000454:	705a      	strb	r2, [r3, #1]
					PositiveReadRsp_TxData[2] = ECU_RxData[3];
 8000456:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <ReadRequest_handle+0x128>)
 8000458:	78da      	ldrb	r2, [r3, #3]
 800045a:	4b25      	ldr	r3, [pc, #148]	; (80004f0 <ReadRequest_handle+0x154>)
 800045c:	709a      	strb	r2, [r3, #2]
					PositiveReadRsp_TxData[3] = FT_SINGLEFRAME + sizeof(DataBuffer); //du lieu data co do dai la 4 - TEST
 800045e:	4b24      	ldr	r3, [pc, #144]	; (80004f0 <ReadRequest_handle+0x154>)
 8000460:	2205      	movs	r2, #5
 8000462:	70da      	strb	r2, [r3, #3]
					for (index_array = 0;index_array<sizeof(DataBuffer);index_array++)
 8000464:	4b23      	ldr	r3, [pc, #140]	; (80004f4 <ReadRequest_handle+0x158>)
 8000466:	2200      	movs	r2, #0
 8000468:	701a      	strb	r2, [r3, #0]
 800046a:	e011      	b.n	8000490 <ReadRequest_handle+0xf4>
						PositiveReadRsp_TxData[index_array+4] = DataBuffer[index_array];
 800046c:	4b21      	ldr	r3, [pc, #132]	; (80004f4 <ReadRequest_handle+0x158>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	461a      	mov	r2, r3
 8000472:	4b20      	ldr	r3, [pc, #128]	; (80004f4 <ReadRequest_handle+0x158>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	3304      	adds	r3, #4
 8000478:	3208      	adds	r2, #8
 800047a:	443a      	add	r2, r7
 800047c:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 8000480:	4a1b      	ldr	r2, [pc, #108]	; (80004f0 <ReadRequest_handle+0x154>)
 8000482:	54d1      	strb	r1, [r2, r3]
					for (index_array = 0;index_array<sizeof(DataBuffer);index_array++)
 8000484:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <ReadRequest_handle+0x158>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	3301      	adds	r3, #1
 800048a:	b2da      	uxtb	r2, r3
 800048c:	4b19      	ldr	r3, [pc, #100]	; (80004f4 <ReadRequest_handle+0x158>)
 800048e:	701a      	strb	r2, [r3, #0]
 8000490:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <ReadRequest_handle+0x158>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b04      	cmp	r3, #4
 8000496:	d9e9      	bls.n	800046c <ReadRequest_handle+0xd0>
					if (HAL_CAN_AddTxMessage(&hcan, &ECU_TxHeader,PositiveReadRsp_TxData,&ECU_TxMailbox) != HAL_OK)
 8000498:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <ReadRequest_handle+0x13c>)
 800049a:	4a15      	ldr	r2, [pc, #84]	; (80004f0 <ReadRequest_handle+0x154>)
 800049c:	4910      	ldr	r1, [pc, #64]	; (80004e0 <ReadRequest_handle+0x144>)
 800049e:	4811      	ldr	r0, [pc, #68]	; (80004e4 <ReadRequest_handle+0x148>)
 80004a0:	f000 ffe4 	bl	800146c <HAL_CAN_AddTxMessage>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d003      	beq.n	80004b2 <ReadRequest_handle+0x116>
								error_flag = 1;
 80004aa:	4b13      	ldr	r3, [pc, #76]	; (80004f8 <ReadRequest_handle+0x15c>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	701a      	strb	r2, [r3, #0]
			break;
 80004b0:	e002      	b.n	80004b8 <ReadRequest_handle+0x11c>
								error_flag = 0;
 80004b2:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <ReadRequest_handle+0x15c>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
			break;
 80004b8:	bf00      	nop
}
 80004ba:	bf00      	nop
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	2000014c 	.word	0x2000014c
 80004c8:	20000154 	.word	0x20000154
 80004cc:	20000155 	.word	0x20000155
 80004d0:	20000156 	.word	0x20000156
 80004d4:	20000157 	.word	0x20000157
 80004d8:	20000138 	.word	0x20000138
 80004dc:	20000000 	.word	0x20000000
 80004e0:	20000104 	.word	0x20000104
 80004e4:	20000094 	.word	0x20000094
 80004e8:	2000015a 	.word	0x2000015a
 80004ec:	080045dc 	.word	0x080045dc
 80004f0:	2000013c 	.word	0x2000013c
 80004f4:	2000015d 	.word	0x2000015d
 80004f8:	2000015e 	.word	0x2000015e

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08a      	sub	sp, #40	; 0x28
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f000 fd25 	bl	8000f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 fa51 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 faf7 	bl	8000afc <MX_GPIO_Init>
  MX_CAN_Init();
 800050e:	f000 fa93 	bl	8000a38 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000512:	f000 fac9 	bl	8000aa8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Init(&hcan);
 8000516:	4888      	ldr	r0, [pc, #544]	; (8000738 <main+0x23c>)
 8000518:	f000 fda0 	bl	800105c <HAL_CAN_Init>

  //Send notify signal to recieve message from actuator node
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800051c:	2110      	movs	r1, #16
 800051e:	4886      	ldr	r0, [pc, #536]	; (8000738 <main+0x23c>)
 8000520:	f001 f994 	bl	800184c <HAL_CAN_ActivateNotification>

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000524:	2301      	movs	r3, #1
 8000526:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 2;  // anything between 0 to SlaveStartFilterBank
 8000528:	2302      	movs	r3, #2
 800052a:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 800052c:	2301      	movs	r3, #1
 800052e:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x712 << 5;
 8000530:	f24e 2340 	movw	r3, #57920	; 0xe240
 8000534:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x712 << 5;
 800053a:	f24e 2340 	movw	r3, #57920	; 0xe240
 800053e:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000544:	2300      	movs	r3, #0
 8000546:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000548:	2301      	movs	r3, #1
 800054a:	61fb      	str	r3, [r7, #28]
  //canfilterconfig.SlaveStartFilterBank = 14;

   HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800054c:	463b      	mov	r3, r7
 800054e:	4619      	mov	r1, r3
 8000550:	4879      	ldr	r0, [pc, #484]	; (8000738 <main+0x23c>)
 8000552:	f000 fe7e 	bl	8001252 <HAL_CAN_ConfigFilter>

   HAL_CAN_Start(&hcan);
 8000556:	4878      	ldr	r0, [pc, #480]	; (8000738 <main+0x23c>)
 8000558:	f000 ff44 	bl	80013e4 <HAL_CAN_Start>

   //Tx ECU header general
   //Config CAN Tx header
   ECU_TxHeader.DLC = 8;
 800055c:	4b77      	ldr	r3, [pc, #476]	; (800073c <main+0x240>)
 800055e:	2208      	movs	r2, #8
 8000560:	611a      	str	r2, [r3, #16]
   ECU_TxHeader.ExtId = 0;
 8000562:	4b76      	ldr	r3, [pc, #472]	; (800073c <main+0x240>)
 8000564:	2200      	movs	r2, #0
 8000566:	605a      	str	r2, [r3, #4]
   ECU_TxHeader.IDE = CAN_ID_STD;
 8000568:	4b74      	ldr	r3, [pc, #464]	; (800073c <main+0x240>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
   ECU_TxHeader.RTR = CAN_RTR_DATA;
 800056e:	4b73      	ldr	r3, [pc, #460]	; (800073c <main+0x240>)
 8000570:	2200      	movs	r2, #0
 8000572:	60da      	str	r2, [r3, #12]
   ECU_TxHeader.StdId = 0x7A2;
 8000574:	4b71      	ldr	r3, [pc, #452]	; (800073c <main+0x240>)
 8000576:	f240 72a2 	movw	r2, #1954	; 0x7a2
 800057a:	601a      	str	r2, [r3, #0]
   ECU_TxHeader.TransmitGlobalTime = DISABLE;
 800057c:	4b6f      	ldr	r3, [pc, #444]	; (800073c <main+0x240>)
 800057e:	2200      	movs	r2, #0
 8000580:	751a      	strb	r2, [r3, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 HAL_Delay(1000);
 8000582:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000586:	f000 fd45 	bl	8001014 <HAL_Delay>

	 switch(ecu_state)
 800058a:	4b6d      	ldr	r3, [pc, #436]	; (8000740 <main+0x244>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b03      	cmp	r3, #3
 8000590:	d8f7      	bhi.n	8000582 <main+0x86>
 8000592:	a201      	add	r2, pc, #4	; (adr r2, 8000598 <main+0x9c>)
 8000594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000598:	080005a9 	.word	0x080005a9
 800059c:	080005f3 	.word	0x080005f3
 80005a0:	08000607 	.word	0x08000607
 80005a4:	080005ff 	.word	0x080005ff
	 {
	 	 case IDLE_STATE:
	 	 {
	 		 if(ReadRq_flag == 1)
 80005a8:	4b66      	ldr	r3, [pc, #408]	; (8000744 <main+0x248>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d117      	bne.n	80005e0 <main+0xe4>
	 		 {
	 			 switch(ECU_RxData[1])
 80005b0:	4b65      	ldr	r3, [pc, #404]	; (8000748 <main+0x24c>)
 80005b2:	785b      	ldrb	r3, [r3, #1]
 80005b4:	2b2e      	cmp	r3, #46	; 0x2e
 80005b6:	d00e      	beq.n	80005d6 <main+0xda>
 80005b8:	2b2e      	cmp	r3, #46	; 0x2e
 80005ba:	dc0d      	bgt.n	80005d8 <main+0xdc>
 80005bc:	2b22      	cmp	r3, #34	; 0x22
 80005be:	d002      	beq.n	80005c6 <main+0xca>
 80005c0:	2b27      	cmp	r3, #39	; 0x27
 80005c2:	d004      	beq.n	80005ce <main+0xd2>
 80005c4:	e008      	b.n	80005d8 <main+0xdc>
	 			 {
	 			 	 case ReadDataByIdentifier:
	 			 	 {
	 			 		 ecu_state = READREQUEST_STATE;
 80005c6:	4b5e      	ldr	r3, [pc, #376]	; (8000740 <main+0x244>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	701a      	strb	r2, [r3, #0]
	 			 		 break;
 80005cc:	e004      	b.n	80005d8 <main+0xdc>
//	 			 		 }
	 			 		 break;
	 			 	 }
	 			 	 case SecurityAccess:
	 			 	 {
	 			 		 ecu_state = SECURITY_ACCESS_STATE;
 80005ce:	4b5c      	ldr	r3, [pc, #368]	; (8000740 <main+0x244>)
 80005d0:	2202      	movs	r2, #2
 80005d2:	701a      	strb	r2, [r3, #0]
	 			 		 break;
 80005d4:	e000      	b.n	80005d8 <main+0xdc>
	 			 		 break;
 80005d6:	bf00      	nop
	 			 	 }
	 			 }
	 			ReadRq_flag = 0;
 80005d8:	4b5a      	ldr	r3, [pc, #360]	; (8000744 <main+0x248>)
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
	 		 } else if (ReadRq_flag == 0)
	 		 {
	 			 ecu_state = IDLE_STATE;
	 		 }
	 		 break;
 80005de:	e1bd      	b.n	800095c <main+0x460>
	 		 } else if (ReadRq_flag == 0)
 80005e0:	4b58      	ldr	r3, [pc, #352]	; (8000744 <main+0x248>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	f040 81b9 	bne.w	800095c <main+0x460>
	 			 ecu_state = IDLE_STATE;
 80005ea:	4b55      	ldr	r3, [pc, #340]	; (8000740 <main+0x244>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	 		 break;
 80005f0:	e1b4      	b.n	800095c <main+0x460>
	 	 }
	 	 case READREQUEST_STATE:
	 	 {
	 		 ReadRequest_handle();
 80005f2:	f7ff fed3 	bl	800039c <ReadRequest_handle>
	 		 ecu_state = IDLE_STATE;
 80005f6:	4b52      	ldr	r3, [pc, #328]	; (8000740 <main+0x244>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
	 		 break;
 80005fc:	e1b2      	b.n	8000964 <main+0x468>
	 	 }
	 	 case WRITEREQUEST_STATE:
	 	 {
	 		 ecu_state = IDLE_STATE;
 80005fe:	4b50      	ldr	r3, [pc, #320]	; (8000740 <main+0x244>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
	 		 break;
 8000604:	e1ae      	b.n	8000964 <main+0x468>
	 	 }
	 	 case SECURITY_ACCESS_STATE:
	 	 {
	 		 switch(security_state)
 8000606:	4b51      	ldr	r3, [pc, #324]	; (800074c <main+0x250>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b02      	cmp	r3, #2
 800060c:	f000 81a2 	beq.w	8000954 <main+0x458>
 8000610:	2b02      	cmp	r3, #2
 8000612:	f300 81a5 	bgt.w	8000960 <main+0x464>
 8000616:	2b00      	cmp	r3, #0
 8000618:	d003      	beq.n	8000622 <main+0x126>
 800061a:	2b01      	cmp	r3, #1
 800061c:	f000 80a6 	beq.w	800076c <main+0x270>

	 		 		 break;
	 		 	 }

	 		 }
	 		 break; //break security access state
 8000620:	e19e      	b.n	8000960 <main+0x464>
	 		 		SecurityLevel = GetSecurityLevel(ECU_RxData[2],&key_level);
 8000622:	4b49      	ldr	r3, [pc, #292]	; (8000748 <main+0x24c>)
 8000624:	789b      	ldrb	r3, [r3, #2]
 8000626:	494a      	ldr	r1, [pc, #296]	; (8000750 <main+0x254>)
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fd8f 	bl	800014c <GetSecurityLevel>
 800062e:	4603      	mov	r3, r0
 8000630:	461a      	mov	r2, r3
 8000632:	4b48      	ldr	r3, [pc, #288]	; (8000754 <main+0x258>)
 8000634:	701a      	strb	r2, [r3, #0]
	 		 		switch(SecurityLevel)
 8000636:	4b47      	ldr	r3, [pc, #284]	; (8000754 <main+0x258>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d177      	bne.n	800072e <main+0x232>
	 		 				SecuritySeed_TxData[0] = 0x06;
 800063e:	4b46      	ldr	r3, [pc, #280]	; (8000758 <main+0x25c>)
 8000640:	2206      	movs	r2, #6
 8000642:	701a      	strb	r2, [r3, #0]
	 		 			 	SecuritySeed_TxData[1] = ECU_RxData[1] + 40;
 8000644:	4b40      	ldr	r3, [pc, #256]	; (8000748 <main+0x24c>)
 8000646:	785b      	ldrb	r3, [r3, #1]
 8000648:	3328      	adds	r3, #40	; 0x28
 800064a:	b2da      	uxtb	r2, r3
 800064c:	4b42      	ldr	r3, [pc, #264]	; (8000758 <main+0x25c>)
 800064e:	705a      	strb	r2, [r3, #1]
	 		 			 	SecuritySeed_TxData[2] = ECU_RxData[2];
 8000650:	4b3d      	ldr	r3, [pc, #244]	; (8000748 <main+0x24c>)
 8000652:	789a      	ldrb	r2, [r3, #2]
 8000654:	4b40      	ldr	r3, [pc, #256]	; (8000758 <main+0x25c>)
 8000656:	709a      	strb	r2, [r3, #2]
	 		 			 	seed[0] = rand()%255;
 8000658:	f002 ffc6 	bl	80035e8 <rand>
 800065c:	4602      	mov	r2, r0
 800065e:	4b3f      	ldr	r3, [pc, #252]	; (800075c <main+0x260>)
 8000660:	fb83 1302 	smull	r1, r3, r3, r2
 8000664:	4413      	add	r3, r2
 8000666:	11d9      	asrs	r1, r3, #7
 8000668:	17d3      	asrs	r3, r2, #31
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	460b      	mov	r3, r1
 800066e:	021b      	lsls	r3, r3, #8
 8000670:	1a5b      	subs	r3, r3, r1
 8000672:	1ad1      	subs	r1, r2, r3
 8000674:	b2ca      	uxtb	r2, r1
 8000676:	4b3a      	ldr	r3, [pc, #232]	; (8000760 <main+0x264>)
 8000678:	701a      	strb	r2, [r3, #0]
	 		 			 	seed[1] = rand()%255;
 800067a:	f002 ffb5 	bl	80035e8 <rand>
 800067e:	4602      	mov	r2, r0
 8000680:	4b36      	ldr	r3, [pc, #216]	; (800075c <main+0x260>)
 8000682:	fb83 1302 	smull	r1, r3, r3, r2
 8000686:	4413      	add	r3, r2
 8000688:	11d9      	asrs	r1, r3, #7
 800068a:	17d3      	asrs	r3, r2, #31
 800068c:	1ac9      	subs	r1, r1, r3
 800068e:	460b      	mov	r3, r1
 8000690:	021b      	lsls	r3, r3, #8
 8000692:	1a5b      	subs	r3, r3, r1
 8000694:	1ad1      	subs	r1, r2, r3
 8000696:	b2ca      	uxtb	r2, r1
 8000698:	4b31      	ldr	r3, [pc, #196]	; (8000760 <main+0x264>)
 800069a:	705a      	strb	r2, [r3, #1]
	 		 			 	seed[2] = rand()%255;
 800069c:	f002 ffa4 	bl	80035e8 <rand>
 80006a0:	4602      	mov	r2, r0
 80006a2:	4b2e      	ldr	r3, [pc, #184]	; (800075c <main+0x260>)
 80006a4:	fb83 1302 	smull	r1, r3, r3, r2
 80006a8:	4413      	add	r3, r2
 80006aa:	11d9      	asrs	r1, r3, #7
 80006ac:	17d3      	asrs	r3, r2, #31
 80006ae:	1ac9      	subs	r1, r1, r3
 80006b0:	460b      	mov	r3, r1
 80006b2:	021b      	lsls	r3, r3, #8
 80006b4:	1a5b      	subs	r3, r3, r1
 80006b6:	1ad1      	subs	r1, r2, r3
 80006b8:	b2ca      	uxtb	r2, r1
 80006ba:	4b29      	ldr	r3, [pc, #164]	; (8000760 <main+0x264>)
 80006bc:	709a      	strb	r2, [r3, #2]
	 		 			 	seed[3] = rand()%255;
 80006be:	f002 ff93 	bl	80035e8 <rand>
 80006c2:	4602      	mov	r2, r0
 80006c4:	4b25      	ldr	r3, [pc, #148]	; (800075c <main+0x260>)
 80006c6:	fb83 1302 	smull	r1, r3, r3, r2
 80006ca:	4413      	add	r3, r2
 80006cc:	11d9      	asrs	r1, r3, #7
 80006ce:	17d3      	asrs	r3, r2, #31
 80006d0:	1ac9      	subs	r1, r1, r3
 80006d2:	460b      	mov	r3, r1
 80006d4:	021b      	lsls	r3, r3, #8
 80006d6:	1a5b      	subs	r3, r3, r1
 80006d8:	1ad1      	subs	r1, r2, r3
 80006da:	b2ca      	uxtb	r2, r1
 80006dc:	4b20      	ldr	r3, [pc, #128]	; (8000760 <main+0x264>)
 80006de:	70da      	strb	r2, [r3, #3]
	 		 			 	SecuritySeed_TxData[3] = seed[0];
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <main+0x264>)
 80006e2:	781a      	ldrb	r2, [r3, #0]
 80006e4:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <main+0x25c>)
 80006e6:	70da      	strb	r2, [r3, #3]
	 		 			 	SecuritySeed_TxData[4] = seed[1];
 80006e8:	4b1d      	ldr	r3, [pc, #116]	; (8000760 <main+0x264>)
 80006ea:	785a      	ldrb	r2, [r3, #1]
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <main+0x25c>)
 80006ee:	711a      	strb	r2, [r3, #4]
	 		 			 	SecuritySeed_TxData[5] = seed[2];
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <main+0x264>)
 80006f2:	789a      	ldrb	r2, [r3, #2]
 80006f4:	4b18      	ldr	r3, [pc, #96]	; (8000758 <main+0x25c>)
 80006f6:	715a      	strb	r2, [r3, #5]
	 		 			 	SecuritySeed_TxData[6] = seed[3];
 80006f8:	4b19      	ldr	r3, [pc, #100]	; (8000760 <main+0x264>)
 80006fa:	78da      	ldrb	r2, [r3, #3]
 80006fc:	4b16      	ldr	r3, [pc, #88]	; (8000758 <main+0x25c>)
 80006fe:	719a      	strb	r2, [r3, #6]
	 		 			 	SecuritySeed_TxData[7] = 0x00;
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <main+0x25c>)
 8000702:	2200      	movs	r2, #0
 8000704:	71da      	strb	r2, [r3, #7]
	 		 			 	SecuritySeed_TxData[8] = 0x00;
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <main+0x25c>)
 8000708:	2200      	movs	r2, #0
 800070a:	721a      	strb	r2, [r3, #8]
	 		 			 	if(HAL_CAN_AddTxMessage(&hcan,&ECU_TxHeader,SecuritySeed_TxData,&ECU_TxMailbox) != HAL_OK)
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <main+0x268>)
 800070e:	4a12      	ldr	r2, [pc, #72]	; (8000758 <main+0x25c>)
 8000710:	490a      	ldr	r1, [pc, #40]	; (800073c <main+0x240>)
 8000712:	4809      	ldr	r0, [pc, #36]	; (8000738 <main+0x23c>)
 8000714:	f000 feaa 	bl	800146c <HAL_CAN_AddTxMessage>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d003      	beq.n	8000726 <main+0x22a>
	 		 			 		error_flag = 1;
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <main+0x26c>)
 8000720:	2201      	movs	r2, #1
 8000722:	701a      	strb	r2, [r3, #0]
	 		 				break;
 8000724:	e002      	b.n	800072c <main+0x230>
	 		 			 		error_flag = 0;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <main+0x26c>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
	 		 				break;
 800072c:	bf00      	nop
	 		 		ReadRq_flag = 0;
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <main+0x248>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
	 		 		break;
 8000734:	e111      	b.n	800095a <main+0x45e>
 8000736:	bf00      	nop
 8000738:	20000094 	.word	0x20000094
 800073c:	20000104 	.word	0x20000104
 8000740:	20000188 	.word	0x20000188
 8000744:	2000015f 	.word	0x2000015f
 8000748:	2000014c 	.word	0x2000014c
 800074c:	20000189 	.word	0x20000189
 8000750:	2000015c 	.word	0x2000015c
 8000754:	20000158 	.word	0x20000158
 8000758:	20000144 	.word	0x20000144
 800075c:	80808081 	.word	0x80808081
 8000760:	20000160 	.word	0x20000160
 8000764:	20000138 	.word	0x20000138
 8000768:	2000015e 	.word	0x2000015e
	 		 		if(ReadRq_flag == 1)
 800076c:	4b7e      	ldr	r3, [pc, #504]	; (8000968 <main+0x46c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b01      	cmp	r3, #1
 8000772:	f040 80f1 	bne.w	8000958 <main+0x45c>
	 		 			FT_String = SF_N_PCI_FrameTypeHandle(ECU_RxData[0]);
 8000776:	4b7d      	ldr	r3, [pc, #500]	; (800096c <main+0x470>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fdcf 	bl	800031e <SF_N_PCI_FrameTypeHandle>
 8000780:	4603      	mov	r3, r0
 8000782:	461a      	mov	r2, r3
 8000784:	4b7a      	ldr	r3, [pc, #488]	; (8000970 <main+0x474>)
 8000786:	701a      	strb	r2, [r3, #0]
	 		 			FrameType = GetFrameType(FT_String);
 8000788:	4b79      	ldr	r3, [pc, #484]	; (8000970 <main+0x474>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fd5f 	bl	8000250 <GetFrameType>
 8000792:	4603      	mov	r3, r0
 8000794:	461a      	mov	r2, r3
 8000796:	4b77      	ldr	r3, [pc, #476]	; (8000974 <main+0x478>)
 8000798:	701a      	strb	r2, [r3, #0]
	 		 			 if(FrameType==2)
 800079a:	4b76      	ldr	r3, [pc, #472]	; (8000974 <main+0x478>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b02      	cmp	r3, #2
 80007a0:	f040 808c 	bne.w	80008bc <main+0x3c0>
	 		 				 switch(SecurityLevel)
 80007a4:	4b74      	ldr	r3, [pc, #464]	; (8000978 <main+0x47c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	f040 8087 	bne.w	80008bc <main+0x3c0>
	 		 				 		 if(key_level == ECU_RxData[3])
 80007ae:	4b6f      	ldr	r3, [pc, #444]	; (800096c <main+0x470>)
 80007b0:	78da      	ldrb	r2, [r3, #3]
 80007b2:	4b72      	ldr	r3, [pc, #456]	; (800097c <main+0x480>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d17f      	bne.n	80008ba <main+0x3be>
	 		 				 			key[0] = seed[0] ^ seed[1]; //xor
 80007ba:	4b71      	ldr	r3, [pc, #452]	; (8000980 <main+0x484>)
 80007bc:	781a      	ldrb	r2, [r3, #0]
 80007be:	4b70      	ldr	r3, [pc, #448]	; (8000980 <main+0x484>)
 80007c0:	785b      	ldrb	r3, [r3, #1]
 80007c2:	4053      	eors	r3, r2
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4b6f      	ldr	r3, [pc, #444]	; (8000984 <main+0x488>)
 80007c8:	701a      	strb	r2, [r3, #0]
	 		 				 			key[1] = seed[1] + seed[2];
 80007ca:	4b6d      	ldr	r3, [pc, #436]	; (8000980 <main+0x484>)
 80007cc:	785a      	ldrb	r2, [r3, #1]
 80007ce:	4b6c      	ldr	r3, [pc, #432]	; (8000980 <main+0x484>)
 80007d0:	789b      	ldrb	r3, [r3, #2]
 80007d2:	4413      	add	r3, r2
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b6b      	ldr	r3, [pc, #428]	; (8000984 <main+0x488>)
 80007d8:	705a      	strb	r2, [r3, #1]
	 		 				 			key[2] = seed[2] ^ seed[3];
 80007da:	4b69      	ldr	r3, [pc, #420]	; (8000980 <main+0x484>)
 80007dc:	789a      	ldrb	r2, [r3, #2]
 80007de:	4b68      	ldr	r3, [pc, #416]	; (8000980 <main+0x484>)
 80007e0:	78db      	ldrb	r3, [r3, #3]
 80007e2:	4053      	eors	r3, r2
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4b67      	ldr	r3, [pc, #412]	; (8000984 <main+0x488>)
 80007e8:	709a      	strb	r2, [r3, #2]
	 		 				 			key[3] = seed[3] + seed[0];
 80007ea:	4b65      	ldr	r3, [pc, #404]	; (8000980 <main+0x484>)
 80007ec:	78da      	ldrb	r2, [r3, #3]
 80007ee:	4b64      	ldr	r3, [pc, #400]	; (8000980 <main+0x484>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	4413      	add	r3, r2
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b63      	ldr	r3, [pc, #396]	; (8000984 <main+0x488>)
 80007f8:	70da      	strb	r2, [r3, #3]
	 		 				 			key[4] = seed[0] | seed[1];
 80007fa:	4b61      	ldr	r3, [pc, #388]	; (8000980 <main+0x484>)
 80007fc:	781a      	ldrb	r2, [r3, #0]
 80007fe:	4b60      	ldr	r3, [pc, #384]	; (8000980 <main+0x484>)
 8000800:	785b      	ldrb	r3, [r3, #1]
 8000802:	4313      	orrs	r3, r2
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4b5f      	ldr	r3, [pc, #380]	; (8000984 <main+0x488>)
 8000808:	711a      	strb	r2, [r3, #4]
	 		 				 			key[5] = seed[1] + seed[2];
 800080a:	4b5d      	ldr	r3, [pc, #372]	; (8000980 <main+0x484>)
 800080c:	785a      	ldrb	r2, [r3, #1]
 800080e:	4b5c      	ldr	r3, [pc, #368]	; (8000980 <main+0x484>)
 8000810:	789b      	ldrb	r3, [r3, #2]
 8000812:	4413      	add	r3, r2
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b5b      	ldr	r3, [pc, #364]	; (8000984 <main+0x488>)
 8000818:	715a      	strb	r2, [r3, #5]
	 		 				 			key[6] = seed[2] | seed[3];
 800081a:	4b59      	ldr	r3, [pc, #356]	; (8000980 <main+0x484>)
 800081c:	789a      	ldrb	r2, [r3, #2]
 800081e:	4b58      	ldr	r3, [pc, #352]	; (8000980 <main+0x484>)
 8000820:	78db      	ldrb	r3, [r3, #3]
 8000822:	4313      	orrs	r3, r2
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b57      	ldr	r3, [pc, #348]	; (8000984 <main+0x488>)
 8000828:	719a      	strb	r2, [r3, #6]
	 		 				 			key[7] = seed[3] + seed[0];
 800082a:	4b55      	ldr	r3, [pc, #340]	; (8000980 <main+0x484>)
 800082c:	78da      	ldrb	r2, [r3, #3]
 800082e:	4b54      	ldr	r3, [pc, #336]	; (8000980 <main+0x484>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	4413      	add	r3, r2
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b53      	ldr	r3, [pc, #332]	; (8000984 <main+0x488>)
 8000838:	71da      	strb	r2, [r3, #7]
	 		 				 			key[8] = seed[0] & seed[1];
 800083a:	4b51      	ldr	r3, [pc, #324]	; (8000980 <main+0x484>)
 800083c:	781a      	ldrb	r2, [r3, #0]
 800083e:	4b50      	ldr	r3, [pc, #320]	; (8000980 <main+0x484>)
 8000840:	785b      	ldrb	r3, [r3, #1]
 8000842:	4013      	ands	r3, r2
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b4f      	ldr	r3, [pc, #316]	; (8000984 <main+0x488>)
 8000848:	721a      	strb	r2, [r3, #8]
	 		 				 			key[9] = seed[1] + seed[2];
 800084a:	4b4d      	ldr	r3, [pc, #308]	; (8000980 <main+0x484>)
 800084c:	785a      	ldrb	r2, [r3, #1]
 800084e:	4b4c      	ldr	r3, [pc, #304]	; (8000980 <main+0x484>)
 8000850:	789b      	ldrb	r3, [r3, #2]
 8000852:	4413      	add	r3, r2
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4b4b      	ldr	r3, [pc, #300]	; (8000984 <main+0x488>)
 8000858:	725a      	strb	r2, [r3, #9]
	 		 				 			key[10] = seed[2] & seed[3];
 800085a:	4b49      	ldr	r3, [pc, #292]	; (8000980 <main+0x484>)
 800085c:	789a      	ldrb	r2, [r3, #2]
 800085e:	4b48      	ldr	r3, [pc, #288]	; (8000980 <main+0x484>)
 8000860:	78db      	ldrb	r3, [r3, #3]
 8000862:	4013      	ands	r3, r2
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4b47      	ldr	r3, [pc, #284]	; (8000984 <main+0x488>)
 8000868:	729a      	strb	r2, [r3, #10]
	 		 				 			key[11] = seed[3] + seed[0];
 800086a:	4b45      	ldr	r3, [pc, #276]	; (8000980 <main+0x484>)
 800086c:	78da      	ldrb	r2, [r3, #3]
 800086e:	4b44      	ldr	r3, [pc, #272]	; (8000980 <main+0x484>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	4413      	add	r3, r2
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b43      	ldr	r3, [pc, #268]	; (8000984 <main+0x488>)
 8000878:	72da      	strb	r2, [r3, #11]
	 		 				 			key[12] = seed[0] - seed[1];
 800087a:	4b41      	ldr	r3, [pc, #260]	; (8000980 <main+0x484>)
 800087c:	781a      	ldrb	r2, [r3, #0]
 800087e:	4b40      	ldr	r3, [pc, #256]	; (8000980 <main+0x484>)
 8000880:	785b      	ldrb	r3, [r3, #1]
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	b2da      	uxtb	r2, r3
 8000886:	4b3f      	ldr	r3, [pc, #252]	; (8000984 <main+0x488>)
 8000888:	731a      	strb	r2, [r3, #12]
	 		 				 			key[13] = seed[1] + seed[2];
 800088a:	4b3d      	ldr	r3, [pc, #244]	; (8000980 <main+0x484>)
 800088c:	785a      	ldrb	r2, [r3, #1]
 800088e:	4b3c      	ldr	r3, [pc, #240]	; (8000980 <main+0x484>)
 8000890:	789b      	ldrb	r3, [r3, #2]
 8000892:	4413      	add	r3, r2
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4b3b      	ldr	r3, [pc, #236]	; (8000984 <main+0x488>)
 8000898:	735a      	strb	r2, [r3, #13]
	 		 				 			key[14] = seed[2] - seed[3];
 800089a:	4b39      	ldr	r3, [pc, #228]	; (8000980 <main+0x484>)
 800089c:	789a      	ldrb	r2, [r3, #2]
 800089e:	4b38      	ldr	r3, [pc, #224]	; (8000980 <main+0x484>)
 80008a0:	78db      	ldrb	r3, [r3, #3]
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4b37      	ldr	r3, [pc, #220]	; (8000984 <main+0x488>)
 80008a8:	739a      	strb	r2, [r3, #14]
	 		 				 			key[15] = seed[3] + seed[0];
 80008aa:	4b35      	ldr	r3, [pc, #212]	; (8000980 <main+0x484>)
 80008ac:	78da      	ldrb	r2, [r3, #3]
 80008ae:	4b34      	ldr	r3, [pc, #208]	; (8000980 <main+0x484>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	4413      	add	r3, r2
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4b33      	ldr	r3, [pc, #204]	; (8000984 <main+0x488>)
 80008b8:	73da      	strb	r2, [r3, #15]
	 		 				 		 break;
 80008ba:	bf00      	nop
	 		 				tester_key[0] = ECU_RxData[4];
 80008bc:	4b2b      	ldr	r3, [pc, #172]	; (800096c <main+0x470>)
 80008be:	791a      	ldrb	r2, [r3, #4]
 80008c0:	4b31      	ldr	r3, [pc, #196]	; (8000988 <main+0x48c>)
 80008c2:	701a      	strb	r2, [r3, #0]
	 		 				tester_key[1] = ECU_RxData[5];
 80008c4:	4b29      	ldr	r3, [pc, #164]	; (800096c <main+0x470>)
 80008c6:	795a      	ldrb	r2, [r3, #5]
 80008c8:	4b2f      	ldr	r3, [pc, #188]	; (8000988 <main+0x48c>)
 80008ca:	705a      	strb	r2, [r3, #1]
	 		 				tester_key[2] = ECU_RxData[6];
 80008cc:	4b27      	ldr	r3, [pc, #156]	; (800096c <main+0x470>)
 80008ce:	799a      	ldrb	r2, [r3, #6]
 80008d0:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <main+0x48c>)
 80008d2:	709a      	strb	r2, [r3, #2]
	 		 				tester_key[3] = ECU_RxData[7];
 80008d4:	4b25      	ldr	r3, [pc, #148]	; (800096c <main+0x470>)
 80008d6:	79da      	ldrb	r2, [r3, #7]
 80008d8:	4b2b      	ldr	r3, [pc, #172]	; (8000988 <main+0x48c>)
 80008da:	70da      	strb	r2, [r3, #3]
	 		 				for(index_array = 0;index_array<4;index_array++)
 80008dc:	4b2b      	ldr	r3, [pc, #172]	; (800098c <main+0x490>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
 80008e2:	e017      	b.n	8000914 <main+0x418>
	 		 					if(tester_key[index_array] == ECU_RxData[index_array+4])
 80008e4:	4b29      	ldr	r3, [pc, #164]	; (800098c <main+0x490>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b27      	ldr	r3, [pc, #156]	; (8000988 <main+0x48c>)
 80008ec:	5c9a      	ldrb	r2, [r3, r2]
 80008ee:	4b27      	ldr	r3, [pc, #156]	; (800098c <main+0x490>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	3304      	adds	r3, #4
 80008f4:	491d      	ldr	r1, [pc, #116]	; (800096c <main+0x470>)
 80008f6:	5ccb      	ldrb	r3, [r1, r3]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d105      	bne.n	8000908 <main+0x40c>
	 		 					 	count_checkkey_fc++;
 80008fc:	4b24      	ldr	r3, [pc, #144]	; (8000990 <main+0x494>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	3301      	adds	r3, #1
 8000902:	b2da      	uxtb	r2, r3
 8000904:	4b22      	ldr	r3, [pc, #136]	; (8000990 <main+0x494>)
 8000906:	701a      	strb	r2, [r3, #0]
	 		 				for(index_array = 0;index_array<4;index_array++)
 8000908:	4b20      	ldr	r3, [pc, #128]	; (800098c <main+0x490>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	3301      	adds	r3, #1
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b1e      	ldr	r3, [pc, #120]	; (800098c <main+0x490>)
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <main+0x490>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b03      	cmp	r3, #3
 800091a:	d9e3      	bls.n	80008e4 <main+0x3e8>
	 		 				if(count_checkkey_fc == 4 && ECU_RxData[1]==KEY_LENGTH)//4 key corrrect send back flow control
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <main+0x494>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b04      	cmp	r3, #4
 8000922:	d119      	bne.n	8000958 <main+0x45c>
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <main+0x470>)
 8000926:	785b      	ldrb	r3, [r3, #1]
 8000928:	2b10      	cmp	r3, #16
 800092a:	d115      	bne.n	8000958 <main+0x45c>
	 		 					if(HAL_CAN_AddTxMessage(&hcan,&ECU_TxHeader,SecurityFlowControl_TxData,&ECU_TxMailbox)!=HAL_OK)
 800092c:	4b19      	ldr	r3, [pc, #100]	; (8000994 <main+0x498>)
 800092e:	4a1a      	ldr	r2, [pc, #104]	; (8000998 <main+0x49c>)
 8000930:	491a      	ldr	r1, [pc, #104]	; (800099c <main+0x4a0>)
 8000932:	481b      	ldr	r0, [pc, #108]	; (80009a0 <main+0x4a4>)
 8000934:	f000 fd9a 	bl	800146c <HAL_CAN_AddTxMessage>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d003      	beq.n	8000946 <main+0x44a>
	 		 					 	error_flag = 1;
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <main+0x4a8>)
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
	 		 		break;
 8000944:	e008      	b.n	8000958 <main+0x45c>
	 		 					 	error_flag = 0;
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <main+0x4a8>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
	 		 					 	security_state = AUTHENTICATE_TESTERKEY;
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <main+0x4ac>)
 800094e:	2202      	movs	r2, #2
 8000950:	701a      	strb	r2, [r3, #0]
	 		 		break;
 8000952:	e001      	b.n	8000958 <main+0x45c>
	 		 		 break;
 8000954:	bf00      	nop
 8000956:	e003      	b.n	8000960 <main+0x464>
	 		 		break;
 8000958:	bf00      	nop
	 		 break; //break security access state
 800095a:	e001      	b.n	8000960 <main+0x464>
	 		 break;
 800095c:	bf00      	nop
 800095e:	e610      	b.n	8000582 <main+0x86>
	 		 break; //break security access state
 8000960:	bf00      	nop
 8000962:	e60e      	b.n	8000582 <main+0x86>
	 HAL_Delay(1000);
 8000964:	e60d      	b.n	8000582 <main+0x86>
 8000966:	bf00      	nop
 8000968:	2000015f 	.word	0x2000015f
 800096c:	2000014c 	.word	0x2000014c
 8000970:	20000154 	.word	0x20000154
 8000974:	20000156 	.word	0x20000156
 8000978:	20000158 	.word	0x20000158
 800097c:	2000015c 	.word	0x2000015c
 8000980:	20000160 	.word	0x20000160
 8000984:	20000164 	.word	0x20000164
 8000988:	20000178 	.word	0x20000178
 800098c:	2000015d 	.word	0x2000015d
 8000990:	20000174 	.word	0x20000174
 8000994:	20000138 	.word	0x20000138
 8000998:	20000008 	.word	0x20000008
 800099c:	20000104 	.word	0x20000104
 80009a0:	20000094 	.word	0x20000094
 80009a4:	2000015e 	.word	0x2000015e
 80009a8:	20000189 	.word	0x20000189

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b090      	sub	sp, #64	; 0x40
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 0318 	add.w	r3, r7, #24
 80009b6:	2228      	movs	r2, #40	; 0x28
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 ff57 	bl	800386e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ce:	2301      	movs	r3, #1
 80009d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009dc:	2301      	movs	r3, #1
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e0:	2302      	movs	r3, #2
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f0:	f107 0318 	add.w	r3, r7, #24
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 fcb5 	bl	8002364 <HAL_RCC_OscConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a00:	f000 f89e 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a04:	230f      	movs	r3, #15
 8000a06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f001 ff22 	bl	8002868 <HAL_RCC_ClockConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a2a:	f000 f889 	bl	8000b40 <Error_Handler>
  }
}
 8000a2e:	bf00      	nop
 8000a30:	3740      	adds	r7, #64	; 0x40
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_CAN_Init+0x68>)
 8000a3e:	4a19      	ldr	r2, [pc, #100]	; (8000aa4 <MX_CAN_Init+0x6c>)
 8000a40:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <MX_CAN_Init+0x68>)
 8000a44:	2204      	movs	r2, #4
 8000a46:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <MX_CAN_Init+0x68>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_CAN_Init+0x68>)
 8000a50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a54:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_CAN_Init+0x68>)
 8000a58:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000a5c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_CAN_Init+0x68>)
 8000a60:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000a64:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_CAN_Init+0x68>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_CAN_Init+0x68>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MX_CAN_Init+0x68>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_CAN_Init+0x68>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <MX_CAN_Init+0x68>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_CAN_Init+0x68>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_CAN_Init+0x68>)
 8000a8c:	f000 fae6 	bl	800105c <HAL_CAN_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000a96:	f000 f853 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000094 	.word	0x20000094
 8000aa4:	40006400 	.word	0x40006400

08000aa8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000aae:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <MX_USART1_UART_Init+0x50>)
 8000ab0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000ace:	220c      	movs	r2, #12
 8000ad0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000ae0:	f002 f850 	bl	8002b84 <HAL_UART_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aea:	f000 f829 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200000bc 	.word	0x200000bc
 8000af8:	40013800 	.word	0x40013800

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_GPIO_Init+0x40>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	4a0d      	ldr	r2, [pc, #52]	; (8000b3c <MX_GPIO_Init+0x40>)
 8000b08:	f043 0320 	orr.w	r3, r3, #32
 8000b0c:	6193      	str	r3, [r2, #24]
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <MX_GPIO_Init+0x40>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	f003 0320 	and.w	r3, r3, #32
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <MX_GPIO_Init+0x40>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <MX_GPIO_Init+0x40>)
 8000b20:	f043 0304 	orr.w	r3, r3, #4
 8000b24:	6193      	str	r3, [r2, #24]
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <MX_GPIO_Init+0x40>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	40021000 	.word	0x40021000

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <Error_Handler+0x8>
	...

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <HAL_MspInit+0x5c>)
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	4a14      	ldr	r2, [pc, #80]	; (8000ba8 <HAL_MspInit+0x5c>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6193      	str	r3, [r2, #24]
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_MspInit+0x5c>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <HAL_MspInit+0x5c>)
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ba8 <HAL_MspInit+0x5c>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	61d3      	str	r3, [r2, #28]
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <HAL_MspInit+0x5c>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <HAL_MspInit+0x60>)
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	4a04      	ldr	r2, [pc, #16]	; (8000bac <HAL_MspInit+0x60>)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40010000 	.word	0x40010000

08000bb0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a20      	ldr	r2, [pc, #128]	; (8000c4c <HAL_CAN_MspInit+0x9c>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d139      	bne.n	8000c44 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <HAL_CAN_MspInit+0xa0>)
 8000bd2:	69db      	ldr	r3, [r3, #28]
 8000bd4:	4a1e      	ldr	r2, [pc, #120]	; (8000c50 <HAL_CAN_MspInit+0xa0>)
 8000bd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bda:	61d3      	str	r3, [r2, #28]
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <HAL_CAN_MspInit+0xa0>)
 8000bde:	69db      	ldr	r3, [r3, #28]
 8000be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be8:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <HAL_CAN_MspInit+0xa0>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a18      	ldr	r2, [pc, #96]	; (8000c50 <HAL_CAN_MspInit+0xa0>)
 8000bee:	f043 0304 	orr.w	r3, r3, #4
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <HAL_CAN_MspInit+0xa0>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f003 0304 	and.w	r3, r3, #4
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 0310 	add.w	r3, r7, #16
 8000c12:	4619      	mov	r1, r3
 8000c14:	480f      	ldr	r0, [pc, #60]	; (8000c54 <HAL_CAN_MspInit+0xa4>)
 8000c16:	f001 fa21 	bl	800205c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4809      	ldr	r0, [pc, #36]	; (8000c54 <HAL_CAN_MspInit+0xa4>)
 8000c30:	f001 fa14 	bl	800205c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	2015      	movs	r0, #21
 8000c3a:	f001 f926 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000c3e:	2015      	movs	r0, #21
 8000c40:	f001 f93f 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c44:	bf00      	nop
 8000c46:	3720      	adds	r7, #32
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40006400 	.word	0x40006400
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40010800 	.word	0x40010800

08000c58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a20      	ldr	r2, [pc, #128]	; (8000cf4 <HAL_UART_MspInit+0x9c>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d139      	bne.n	8000cec <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c78:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <HAL_UART_MspInit+0xa0>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	4a1e      	ldr	r2, [pc, #120]	; (8000cf8 <HAL_UART_MspInit+0xa0>)
 8000c7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c82:	6193      	str	r3, [r2, #24]
 8000c84:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <HAL_UART_MspInit+0xa0>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <HAL_UART_MspInit+0xa0>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a18      	ldr	r2, [pc, #96]	; (8000cf8 <HAL_UART_MspInit+0xa0>)
 8000c96:	f043 0304 	orr.w	r3, r3, #4
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <HAL_UART_MspInit+0xa0>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f003 0304 	and.w	r3, r3, #4
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ca8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0310 	add.w	r3, r7, #16
 8000cba:	4619      	mov	r1, r3
 8000cbc:	480f      	ldr	r0, [pc, #60]	; (8000cfc <HAL_UART_MspInit+0xa4>)
 8000cbe:	f001 f9cd 	bl	800205c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4809      	ldr	r0, [pc, #36]	; (8000cfc <HAL_UART_MspInit+0xa4>)
 8000cd8:	f001 f9c0 	bl	800205c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2025      	movs	r0, #37	; 0x25
 8000ce2:	f001 f8d2 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ce6:	2025      	movs	r0, #37	; 0x25
 8000ce8:	f001 f8eb 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cec:	bf00      	nop
 8000cee:	3720      	adds	r7, #32
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40013800 	.word	0x40013800
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010800 	.word	0x40010800

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <NMI_Handler+0x4>

08000d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <HardFault_Handler+0x4>

08000d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <MemManage_Handler+0x4>

08000d12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <BusFault_Handler+0x4>

08000d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <UsageFault_Handler+0x4>

08000d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr

08000d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr

08000d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr

08000d42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d46:	f000 f949 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <CAN1_RX1_IRQHandler+0x10>)
 8000d56:	f000 fd9e 	bl	8001896 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000094 	.word	0x20000094

08000d64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <USART1_IRQHandler+0x10>)
 8000d6a:	f001 ff5b 	bl	8002c24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200000bc 	.word	0x200000bc

08000d78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return 1;
 8000d7c:	2301      	movs	r3, #1
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr

08000d86 <_kill>:

int _kill(int pid, int sig)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
 8000d8e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d90:	f002 fdbc 	bl	800390c <__errno>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2216      	movs	r2, #22
 8000d98:	601a      	str	r2, [r3, #0]
  return -1;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <_exit>:

void _exit (int status)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000dae:	f04f 31ff 	mov.w	r1, #4294967295
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ffe7 	bl	8000d86 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000db8:	e7fe      	b.n	8000db8 <_exit+0x12>

08000dba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b086      	sub	sp, #24
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	60f8      	str	r0, [r7, #12]
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
 8000dca:	e00a      	b.n	8000de2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dcc:	f3af 8000 	nop.w
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	1c5a      	adds	r2, r3, #1
 8000dd6:	60ba      	str	r2, [r7, #8]
 8000dd8:	b2ca      	uxtb	r2, r1
 8000dda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	3301      	adds	r3, #1
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	dbf0      	blt.n	8000dcc <_read+0x12>
  }

  return len;
 8000dea:	687b      	ldr	r3, [r7, #4]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	e009      	b.n	8000e1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	1c5a      	adds	r2, r3, #1
 8000e0a:	60ba      	str	r2, [r7, #8]
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	3301      	adds	r3, #1
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	dbf1      	blt.n	8000e06 <_write+0x12>
  }
  return len;
 8000e22:	687b      	ldr	r3, [r7, #4]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <_close>:

int _close(int file)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr

08000e42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e52:	605a      	str	r2, [r3, #4]
  return 0;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <_isatty>:

int _isatty(int file)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e68:	2301      	movs	r3, #1
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f002 fd26 	bl	800390c <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20005000 	.word	0x20005000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	2000018c 	.word	0x2000018c
 8000ef4:	200002e0 	.word	0x200002e0

08000ef8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f04:	f7ff fff8 	bl	8000ef8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f08:	480b      	ldr	r0, [pc, #44]	; (8000f38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f0a:	490c      	ldr	r1, [pc, #48]	; (8000f3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f0c:	4a0c      	ldr	r2, [pc, #48]	; (8000f40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f10:	e002      	b.n	8000f18 <LoopCopyDataInit>

08000f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f16:	3304      	adds	r3, #4

08000f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f1c:	d3f9      	bcc.n	8000f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1e:	4a09      	ldr	r2, [pc, #36]	; (8000f44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f20:	4c09      	ldr	r4, [pc, #36]	; (8000f48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f24:	e001      	b.n	8000f2a <LoopFillZerobss>

08000f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f28:	3204      	adds	r2, #4

08000f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f2c:	d3fb      	bcc.n	8000f26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f2e:	f002 fcf3 	bl	8003918 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f32:	f7ff fae3 	bl	80004fc <main>
  bx lr
 8000f36:	4770      	bx	lr
  ldr r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f3c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f40:	080046f4 	.word	0x080046f4
  ldr r2, =_sbss
 8000f44:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f48:	200002e0 	.word	0x200002e0

08000f4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC1_2_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_Init+0x28>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_Init+0x28>)
 8000f5a:	f043 0310 	orr.w	r3, r3, #16
 8000f5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 ff87 	bl	8001e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f66:	200f      	movs	r0, #15
 8000f68:	f000 f808 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6c:	f7ff fdee 	bl	8000b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40022000 	.word	0x40022000

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x54>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x58>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 ff9f 	bl	8001ede <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 ff67 	bl	8001e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000010 	.word	0x20000010
 8000fd4:	20000018 	.word	0x20000018
 8000fd8:	20000014 	.word	0x20000014

08000fdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <HAL_IncTick+0x1c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a03      	ldr	r2, [pc, #12]	; (8000ffc <HAL_IncTick+0x20>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	20000018 	.word	0x20000018
 8000ffc:	20000190 	.word	0x20000190

08001000 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return uwTick;
 8001004:	4b02      	ldr	r3, [pc, #8]	; (8001010 <HAL_GetTick+0x10>)
 8001006:	681b      	ldr	r3, [r3, #0]
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	20000190 	.word	0x20000190

08001014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800101c:	f7ff fff0 	bl	8001000 <HAL_GetTick>
 8001020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800102c:	d005      	beq.n	800103a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HAL_Delay+0x44>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4413      	add	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800103a:	bf00      	nop
 800103c:	f7ff ffe0 	bl	8001000 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	429a      	cmp	r2, r3
 800104a:	d8f7      	bhi.n	800103c <HAL_Delay+0x28>
  {
  }
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000018 	.word	0x20000018

0800105c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e0ed      	b.n	800124a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d102      	bne.n	8001080 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff fd98 	bl	8000bb0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f042 0201 	orr.w	r2, r2, #1
 800108e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001090:	f7ff ffb6 	bl	8001000 <HAL_GetTick>
 8001094:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001096:	e012      	b.n	80010be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001098:	f7ff ffb2 	bl	8001000 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b0a      	cmp	r3, #10
 80010a4:	d90b      	bls.n	80010be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2205      	movs	r2, #5
 80010b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e0c5      	b.n	800124a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0e5      	beq.n	8001098 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0202 	bic.w	r2, r2, #2
 80010da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010dc:	f7ff ff90 	bl	8001000 <HAL_GetTick>
 80010e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010e2:	e012      	b.n	800110a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010e4:	f7ff ff8c 	bl	8001000 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b0a      	cmp	r3, #10
 80010f0:	d90b      	bls.n	800110a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2205      	movs	r2, #5
 8001102:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e09f      	b.n	800124a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1e5      	bne.n	80010e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	7e1b      	ldrb	r3, [r3, #24]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d108      	bne.n	8001132 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	e007      	b.n	8001142 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001140:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7e5b      	ldrb	r3, [r3, #25]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d108      	bne.n	800115c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	e007      	b.n	800116c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800116a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	7e9b      	ldrb	r3, [r3, #26]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d108      	bne.n	8001186 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0220 	orr.w	r2, r2, #32
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	e007      	b.n	8001196 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f022 0220 	bic.w	r2, r2, #32
 8001194:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	7edb      	ldrb	r3, [r3, #27]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d108      	bne.n	80011b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0210 	bic.w	r2, r2, #16
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	e007      	b.n	80011c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0210 	orr.w	r2, r2, #16
 80011be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7f1b      	ldrb	r3, [r3, #28]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d108      	bne.n	80011da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f042 0208 	orr.w	r2, r2, #8
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	e007      	b.n	80011ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0208 	bic.w	r2, r2, #8
 80011e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	7f5b      	ldrb	r3, [r3, #29]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d108      	bne.n	8001204 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f042 0204 	orr.w	r2, r2, #4
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	e007      	b.n	8001214 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0204 	bic.w	r2, r2, #4
 8001212:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	431a      	orrs	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	431a      	orrs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	ea42 0103 	orr.w	r1, r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	1e5a      	subs	r2, r3, #1
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	430a      	orrs	r2, r1
 8001238:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2201      	movs	r2, #1
 8001244:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001252:	b480      	push	{r7}
 8001254:	b087      	sub	sp, #28
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001268:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800126a:	7cfb      	ldrb	r3, [r7, #19]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d003      	beq.n	8001278 <HAL_CAN_ConfigFilter+0x26>
 8001270:	7cfb      	ldrb	r3, [r7, #19]
 8001272:	2b02      	cmp	r3, #2
 8001274:	f040 80aa 	bne.w	80013cc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800127e:	f043 0201 	orr.w	r2, r3, #1
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	f003 031f 	and.w	r3, r3, #31
 8001290:	2201      	movs	r2, #1
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	401a      	ands	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d123      	bne.n	80012fa <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	401a      	ands	r2, r3
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012d4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3248      	adds	r2, #72	; 0x48
 80012da:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012ee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012f0:	6979      	ldr	r1, [r7, #20]
 80012f2:	3348      	adds	r3, #72	; 0x48
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	440b      	add	r3, r1
 80012f8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d122      	bne.n	8001348 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	431a      	orrs	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001322:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	3248      	adds	r2, #72	; 0x48
 8001328:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800133c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800133e:	6979      	ldr	r1, [r7, #20]
 8001340:	3348      	adds	r3, #72	; 0x48
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	440b      	add	r3, r1
 8001346:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d109      	bne.n	8001364 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	43db      	mvns	r3, r3
 800135a:	401a      	ands	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001362:	e007      	b.n	8001374 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	431a      	orrs	r2, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d109      	bne.n	8001390 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	43db      	mvns	r3, r3
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800138e:	e007      	b.n	80013a0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	431a      	orrs	r2, r3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d107      	bne.n	80013b8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	431a      	orrs	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013be:	f023 0201 	bic.w	r2, r3, #1
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	e006      	b.n	80013da <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
  }
}
 80013da:	4618      	mov	r0, r3
 80013dc:	371c      	adds	r7, #28
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d12e      	bne.n	8001456 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2202      	movs	r2, #2
 80013fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 0201 	bic.w	r2, r2, #1
 800140e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001410:	f7ff fdf6 	bl	8001000 <HAL_GetTick>
 8001414:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001416:	e012      	b.n	800143e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001418:	f7ff fdf2 	bl	8001000 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b0a      	cmp	r3, #10
 8001424:	d90b      	bls.n	800143e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2205      	movs	r2, #5
 8001436:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e012      	b.n	8001464 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1e5      	bne.n	8001418 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001452:	2300      	movs	r3, #0
 8001454:	e006      	b.n	8001464 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
  }
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	; 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
 8001478:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001480:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800148a:	7ffb      	ldrb	r3, [r7, #31]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d003      	beq.n	8001498 <HAL_CAN_AddTxMessage+0x2c>
 8001490:	7ffb      	ldrb	r3, [r7, #31]
 8001492:	2b02      	cmp	r3, #2
 8001494:	f040 80ad 	bne.w	80015f2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10a      	bne.n	80014b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d105      	bne.n	80014b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 8095 	beq.w	80015e2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	0e1b      	lsrs	r3, r3, #24
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80014c2:	2201      	movs	r2, #1
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	409a      	lsls	r2, r3
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d10d      	bne.n	80014f0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014de:	68f9      	ldr	r1, [r7, #12]
 80014e0:	6809      	ldr	r1, [r1, #0]
 80014e2:	431a      	orrs	r2, r3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	3318      	adds	r3, #24
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	440b      	add	r3, r1
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	e00f      	b.n	8001510 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014fa:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001500:	68f9      	ldr	r1, [r7, #12]
 8001502:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001504:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3318      	adds	r3, #24
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	440b      	add	r3, r1
 800150e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6819      	ldr	r1, [r3, #0]
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	691a      	ldr	r2, [r3, #16]
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	3318      	adds	r3, #24
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	440b      	add	r3, r1
 8001520:	3304      	adds	r3, #4
 8001522:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	7d1b      	ldrb	r3, [r3, #20]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d111      	bne.n	8001550 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	3318      	adds	r3, #24
 8001534:	011b      	lsls	r3, r3, #4
 8001536:	4413      	add	r3, r2
 8001538:	3304      	adds	r3, #4
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	6811      	ldr	r1, [r2, #0]
 8001540:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	3318      	adds	r3, #24
 8001548:	011b      	lsls	r3, r3, #4
 800154a:	440b      	add	r3, r1
 800154c:	3304      	adds	r3, #4
 800154e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3307      	adds	r3, #7
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	061a      	lsls	r2, r3, #24
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3306      	adds	r3, #6
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	041b      	lsls	r3, r3, #16
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3305      	adds	r3, #5
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	4313      	orrs	r3, r2
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	3204      	adds	r2, #4
 8001570:	7812      	ldrb	r2, [r2, #0]
 8001572:	4610      	mov	r0, r2
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	6811      	ldr	r1, [r2, #0]
 8001578:	ea43 0200 	orr.w	r2, r3, r0
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	011b      	lsls	r3, r3, #4
 8001580:	440b      	add	r3, r1
 8001582:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001586:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3303      	adds	r3, #3
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	061a      	lsls	r2, r3, #24
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3302      	adds	r3, #2
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	041b      	lsls	r3, r3, #16
 8001598:	431a      	orrs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3301      	adds	r3, #1
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	4313      	orrs	r3, r2
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	7812      	ldrb	r2, [r2, #0]
 80015a8:	4610      	mov	r0, r2
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	6811      	ldr	r1, [r2, #0]
 80015ae:	ea43 0200 	orr.w	r2, r3, r0
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	011b      	lsls	r3, r3, #4
 80015b6:	440b      	add	r3, r1
 80015b8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80015bc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	3318      	adds	r3, #24
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	4413      	add	r3, r2
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	6811      	ldr	r1, [r2, #0]
 80015d0:	f043 0201 	orr.w	r2, r3, #1
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	3318      	adds	r3, #24
 80015d8:	011b      	lsls	r3, r3, #4
 80015da:	440b      	add	r3, r1
 80015dc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	e00e      	b.n	8001600 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e006      	b.n	8001600 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
  }
}
 8001600:	4618      	mov	r0, r3
 8001602:	3724      	adds	r7, #36	; 0x24
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr

0800160a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800160a:	b480      	push	{r7}
 800160c:	b087      	sub	sp, #28
 800160e:	af00      	add	r7, sp, #0
 8001610:	60f8      	str	r0, [r7, #12]
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800161e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001620:	7dfb      	ldrb	r3, [r7, #23]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d003      	beq.n	800162e <HAL_CAN_GetRxMessage+0x24>
 8001626:	7dfb      	ldrb	r3, [r7, #23]
 8001628:	2b02      	cmp	r3, #2
 800162a:	f040 8103 	bne.w	8001834 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10e      	bne.n	8001652 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d116      	bne.n	8001670 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e0f7      	b.n	8001842 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d107      	bne.n	8001670 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e0e8      	b.n	8001842 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	331b      	adds	r3, #27
 8001678:	011b      	lsls	r3, r3, #4
 800167a:	4413      	add	r3, r2
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0204 	and.w	r2, r3, #4
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10c      	bne.n	80016a8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	331b      	adds	r3, #27
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	4413      	add	r3, r2
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	0d5b      	lsrs	r3, r3, #21
 800169e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	e00b      	b.n	80016c0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	331b      	adds	r3, #27
 80016b0:	011b      	lsls	r3, r3, #4
 80016b2:	4413      	add	r3, r2
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	08db      	lsrs	r3, r3, #3
 80016b8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	331b      	adds	r3, #27
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	4413      	add	r3, r2
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0202 	and.w	r2, r3, #2
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	331b      	adds	r3, #27
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	4413      	add	r3, r2
 80016e2:	3304      	adds	r3, #4
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2208      	movs	r2, #8
 80016f2:	611a      	str	r2, [r3, #16]
 80016f4:	e00b      	b.n	800170e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	331b      	adds	r3, #27
 80016fe:	011b      	lsls	r3, r3, #4
 8001700:	4413      	add	r3, r2
 8001702:	3304      	adds	r3, #4
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 020f 	and.w	r2, r3, #15
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	331b      	adds	r3, #27
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	4413      	add	r3, r2
 800171a:	3304      	adds	r3, #4
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	0a1b      	lsrs	r3, r3, #8
 8001720:	b2da      	uxtb	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	331b      	adds	r3, #27
 800172e:	011b      	lsls	r3, r3, #4
 8001730:	4413      	add	r3, r2
 8001732:	3304      	adds	r3, #4
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	0c1b      	lsrs	r3, r3, #16
 8001738:	b29a      	uxth	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	4413      	add	r3, r2
 8001748:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	b2da      	uxtb	r2, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	011b      	lsls	r3, r3, #4
 800175c:	4413      	add	r3, r2
 800175e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	0a1a      	lsrs	r2, r3, #8
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	3301      	adds	r3, #1
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	4413      	add	r3, r2
 8001778:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	0c1a      	lsrs	r2, r3, #16
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	3302      	adds	r3, #2
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	4413      	add	r3, r2
 8001792:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	0e1a      	lsrs	r2, r3, #24
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	3303      	adds	r3, #3
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	4413      	add	r3, r2
 80017ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	3304      	adds	r3, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	4413      	add	r3, r2
 80017c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	0a1a      	lsrs	r2, r3, #8
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	3305      	adds	r3, #5
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	011b      	lsls	r3, r3, #4
 80017dc:	4413      	add	r3, r2
 80017de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	0c1a      	lsrs	r2, r3, #16
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	3306      	adds	r3, #6
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	4413      	add	r3, r2
 80017f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	0e1a      	lsrs	r2, r3, #24
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	3307      	adds	r3, #7
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d108      	bne.n	8001820 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f042 0220 	orr.w	r2, r2, #32
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	e007      	b.n	8001830 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	691a      	ldr	r2, [r3, #16]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0220 	orr.w	r2, r2, #32
 800182e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	e006      	b.n	8001842 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
  }
}
 8001842:	4618      	mov	r0, r3
 8001844:	371c      	adds	r7, #28
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 3020 	ldrb.w	r3, [r3, #32]
 800185c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d002      	beq.n	800186a <HAL_CAN_ActivateNotification+0x1e>
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d109      	bne.n	800187e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6959      	ldr	r1, [r3, #20]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	e006      	b.n	800188c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
  }
}
 800188c:	4618      	mov	r0, r3
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr

08001896 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b08a      	sub	sp, #40	; 0x28
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800189e:	2300      	movs	r3, #0
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d07c      	beq.n	80019d6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d023      	beq.n	800192e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2201      	movs	r2, #1
 80018ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 f983 	bl	8001c04 <HAL_CAN_TxMailbox0CompleteCallback>
 80018fe:	e016      	b.n	800192e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	2b00      	cmp	r3, #0
 8001908:	d004      	beq.n	8001914 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
 8001912:	e00c      	b.n	800192e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d004      	beq.n	8001928 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
 8001926:	e002      	b.n	800192e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 f986 	bl	8001c3a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001934:	2b00      	cmp	r3, #0
 8001936:	d024      	beq.n	8001982 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001940:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f962 	bl	8001c16 <HAL_CAN_TxMailbox1CompleteCallback>
 8001952:	e016      	b.n	8001982 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800195a:	2b00      	cmp	r3, #0
 800195c:	d004      	beq.n	8001968 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
 8001966:	e00c      	b.n	8001982 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800196e:	2b00      	cmp	r3, #0
 8001970:	d004      	beq.n	800197c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
 800197a:	e002      	b.n	8001982 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f965 	bl	8001c4c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d024      	beq.n	80019d6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001994:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 f941 	bl	8001c28 <HAL_CAN_TxMailbox2CompleteCallback>
 80019a6:	e016      	b.n	80019d6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d004      	beq.n	80019bc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ba:	e00c      	b.n	80019d6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d004      	beq.n	80019d0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
 80019ce:	e002      	b.n	80019d6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f944 	bl	8001c5e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00c      	beq.n	80019fa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	f003 0310 	and.w	r3, r3, #16
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d007      	beq.n	80019fa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2210      	movs	r2, #16
 80019f8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80019fa:	6a3b      	ldr	r3, [r7, #32]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00b      	beq.n	8001a1c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d006      	beq.n	8001a1c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2208      	movs	r2, #8
 8001a14:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f933 	bl	8001c82 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d009      	beq.n	8001a3a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d002      	beq.n	8001a3a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f91b 	bl	8001c70 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00c      	beq.n	8001a5e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d007      	beq.n	8001a5e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2210      	movs	r2, #16
 8001a5c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a5e:	6a3b      	ldr	r3, [r7, #32]
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00b      	beq.n	8001a80 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d006      	beq.n	8001a80 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2208      	movs	r2, #8
 8001a78:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f90a 	bl	8001c94 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001a80:	6a3b      	ldr	r3, [r7, #32]
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d009      	beq.n	8001a9e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d002      	beq.n	8001a9e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7fe fc61 	bl	8000360 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00b      	beq.n	8001ac0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f003 0310 	and.w	r3, r3, #16
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d006      	beq.n	8001ac0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2210      	movs	r2, #16
 8001ab8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f8f3 	bl	8001ca6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00b      	beq.n	8001ae2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d006      	beq.n	8001ae2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2208      	movs	r2, #8
 8001ada:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f8eb 	bl	8001cb8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d07b      	beq.n	8001be4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d072      	beq.n	8001bdc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d008      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d008      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d008      	beq.n	8001b4a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	f043 0304 	orr.w	r3, r3, #4
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d043      	beq.n	8001bdc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d03e      	beq.n	8001bdc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b64:	2b60      	cmp	r3, #96	; 0x60
 8001b66:	d02b      	beq.n	8001bc0 <HAL_CAN_IRQHandler+0x32a>
 8001b68:	2b60      	cmp	r3, #96	; 0x60
 8001b6a:	d82e      	bhi.n	8001bca <HAL_CAN_IRQHandler+0x334>
 8001b6c:	2b50      	cmp	r3, #80	; 0x50
 8001b6e:	d022      	beq.n	8001bb6 <HAL_CAN_IRQHandler+0x320>
 8001b70:	2b50      	cmp	r3, #80	; 0x50
 8001b72:	d82a      	bhi.n	8001bca <HAL_CAN_IRQHandler+0x334>
 8001b74:	2b40      	cmp	r3, #64	; 0x40
 8001b76:	d019      	beq.n	8001bac <HAL_CAN_IRQHandler+0x316>
 8001b78:	2b40      	cmp	r3, #64	; 0x40
 8001b7a:	d826      	bhi.n	8001bca <HAL_CAN_IRQHandler+0x334>
 8001b7c:	2b30      	cmp	r3, #48	; 0x30
 8001b7e:	d010      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0x30c>
 8001b80:	2b30      	cmp	r3, #48	; 0x30
 8001b82:	d822      	bhi.n	8001bca <HAL_CAN_IRQHandler+0x334>
 8001b84:	2b10      	cmp	r3, #16
 8001b86:	d002      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x2f8>
 8001b88:	2b20      	cmp	r3, #32
 8001b8a:	d005      	beq.n	8001b98 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001b8c:	e01d      	b.n	8001bca <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	f043 0308 	orr.w	r3, r3, #8
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b96:	e019      	b.n	8001bcc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	f043 0310 	orr.w	r3, r3, #16
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ba0:	e014      	b.n	8001bcc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	f043 0320 	orr.w	r3, r3, #32
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001baa:	e00f      	b.n	8001bcc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bb4:	e00a      	b.n	8001bcc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bbe:	e005      	b.n	8001bcc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bc8:	e000      	b.n	8001bcc <HAL_CAN_IRQHandler+0x336>
            break;
 8001bca:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699a      	ldr	r2, [r3, #24]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001bda:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2204      	movs	r2, #4
 8001be2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d008      	beq.n	8001bfc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f867 	bl	8001cca <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	3728      	adds	r7, #40	; 0x28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr

08001c16 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr

08001c28 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr

08001c3a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr

08001c5e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr

08001c82 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr

08001cca <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <__NVIC_SetPriorityGrouping+0x44>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0e:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <__NVIC_SetPriorityGrouping+0x44>)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	60d3      	str	r3, [r2, #12]
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d28:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <__NVIC_GetPriorityGrouping+0x18>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	0a1b      	lsrs	r3, r3, #8
 8001d2e:	f003 0307 	and.w	r3, r3, #7
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	db0b      	blt.n	8001d6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	f003 021f 	and.w	r2, r3, #31
 8001d58:	4906      	ldr	r1, [pc, #24]	; (8001d74 <__NVIC_EnableIRQ+0x34>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	095b      	lsrs	r3, r3, #5
 8001d60:	2001      	movs	r0, #1
 8001d62:	fa00 f202 	lsl.w	r2, r0, r2
 8001d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	e000e100 	.word	0xe000e100

08001d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	6039      	str	r1, [r7, #0]
 8001d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	db0a      	blt.n	8001da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	490c      	ldr	r1, [pc, #48]	; (8001dc4 <__NVIC_SetPriority+0x4c>)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	0112      	lsls	r2, r2, #4
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da0:	e00a      	b.n	8001db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	4908      	ldr	r1, [pc, #32]	; (8001dc8 <__NVIC_SetPriority+0x50>)
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	3b04      	subs	r3, #4
 8001db0:	0112      	lsls	r2, r2, #4
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	440b      	add	r3, r1
 8001db6:	761a      	strb	r2, [r3, #24]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000e100 	.word	0xe000e100
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	; 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f1c3 0307 	rsb	r3, r3, #7
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	bf28      	it	cs
 8001dea:	2304      	movcs	r3, #4
 8001dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3304      	adds	r3, #4
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d902      	bls.n	8001dfc <NVIC_EncodePriority+0x30>
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3b03      	subs	r3, #3
 8001dfa:	e000      	b.n	8001dfe <NVIC_EncodePriority+0x32>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	f04f 32ff 	mov.w	r2, #4294967295
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	401a      	ands	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e14:	f04f 31ff 	mov.w	r1, #4294967295
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	43d9      	mvns	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	4313      	orrs	r3, r2
         );
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3724      	adds	r7, #36	; 0x24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e40:	d301      	bcc.n	8001e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e42:	2301      	movs	r3, #1
 8001e44:	e00f      	b.n	8001e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e46:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <SysTick_Config+0x40>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4e:	210f      	movs	r1, #15
 8001e50:	f04f 30ff 	mov.w	r0, #4294967295
 8001e54:	f7ff ff90 	bl	8001d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <SysTick_Config+0x40>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5e:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <SysTick_Config+0x40>)
 8001e60:	2207      	movs	r2, #7
 8001e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	e000e010 	.word	0xe000e010

08001e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ff2d 	bl	8001cdc <__NVIC_SetPriorityGrouping>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e9c:	f7ff ff42 	bl	8001d24 <__NVIC_GetPriorityGrouping>
 8001ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	6978      	ldr	r0, [r7, #20]
 8001ea8:	f7ff ff90 	bl	8001dcc <NVIC_EncodePriority>
 8001eac:	4602      	mov	r2, r0
 8001eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff5f 	bl	8001d78 <__NVIC_SetPriority>
}
 8001eba:	bf00      	nop
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff35 	bl	8001d40 <__NVIC_EnableIRQ>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ffa2 	bl	8001e30 <SysTick_Config>
 8001eec:	4603      	mov	r3, r0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b085      	sub	sp, #20
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d008      	beq.n	8001f20 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2204      	movs	r2, #4
 8001f12:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e020      	b.n	8001f62 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 020e 	bic.w	r2, r2, #14
 8001f2e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0201 	bic.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f48:	2101      	movs	r1, #1
 8001f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr

08001f6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d005      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2204      	movs	r2, #4
 8001f88:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
 8001f8e:	e051      	b.n	8002034 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 020e 	bic.w	r2, r2, #14
 8001f9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0201 	bic.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a22      	ldr	r2, [pc, #136]	; (8002040 <HAL_DMA_Abort_IT+0xd4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d029      	beq.n	800200e <HAL_DMA_Abort_IT+0xa2>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a21      	ldr	r2, [pc, #132]	; (8002044 <HAL_DMA_Abort_IT+0xd8>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d022      	beq.n	800200a <HAL_DMA_Abort_IT+0x9e>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a1f      	ldr	r2, [pc, #124]	; (8002048 <HAL_DMA_Abort_IT+0xdc>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d01a      	beq.n	8002004 <HAL_DMA_Abort_IT+0x98>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a1e      	ldr	r2, [pc, #120]	; (800204c <HAL_DMA_Abort_IT+0xe0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d012      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x92>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a1c      	ldr	r2, [pc, #112]	; (8002050 <HAL_DMA_Abort_IT+0xe4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00a      	beq.n	8001ff8 <HAL_DMA_Abort_IT+0x8c>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a1b      	ldr	r2, [pc, #108]	; (8002054 <HAL_DMA_Abort_IT+0xe8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d102      	bne.n	8001ff2 <HAL_DMA_Abort_IT+0x86>
 8001fec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ff0:	e00e      	b.n	8002010 <HAL_DMA_Abort_IT+0xa4>
 8001ff2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ff6:	e00b      	b.n	8002010 <HAL_DMA_Abort_IT+0xa4>
 8001ff8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ffc:	e008      	b.n	8002010 <HAL_DMA_Abort_IT+0xa4>
 8001ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002002:	e005      	b.n	8002010 <HAL_DMA_Abort_IT+0xa4>
 8002004:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002008:	e002      	b.n	8002010 <HAL_DMA_Abort_IT+0xa4>
 800200a:	2310      	movs	r3, #16
 800200c:	e000      	b.n	8002010 <HAL_DMA_Abort_IT+0xa4>
 800200e:	2301      	movs	r3, #1
 8002010:	4a11      	ldr	r2, [pc, #68]	; (8002058 <HAL_DMA_Abort_IT+0xec>)
 8002012:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	4798      	blx	r3
    } 
  }
  return status;
 8002034:	7bfb      	ldrb	r3, [r7, #15]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40020008 	.word	0x40020008
 8002044:	4002001c 	.word	0x4002001c
 8002048:	40020030 	.word	0x40020030
 800204c:	40020044 	.word	0x40020044
 8002050:	40020058 	.word	0x40020058
 8002054:	4002006c 	.word	0x4002006c
 8002058:	40020000 	.word	0x40020000

0800205c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800205c:	b480      	push	{r7}
 800205e:	b08b      	sub	sp, #44	; 0x2c
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800206a:	2300      	movs	r3, #0
 800206c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206e:	e169      	b.n	8002344 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002070:	2201      	movs	r2, #1
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	69fa      	ldr	r2, [r7, #28]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	429a      	cmp	r2, r3
 800208a:	f040 8158 	bne.w	800233e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	4a9a      	ldr	r2, [pc, #616]	; (80022fc <HAL_GPIO_Init+0x2a0>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d05e      	beq.n	8002156 <HAL_GPIO_Init+0xfa>
 8002098:	4a98      	ldr	r2, [pc, #608]	; (80022fc <HAL_GPIO_Init+0x2a0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d875      	bhi.n	800218a <HAL_GPIO_Init+0x12e>
 800209e:	4a98      	ldr	r2, [pc, #608]	; (8002300 <HAL_GPIO_Init+0x2a4>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d058      	beq.n	8002156 <HAL_GPIO_Init+0xfa>
 80020a4:	4a96      	ldr	r2, [pc, #600]	; (8002300 <HAL_GPIO_Init+0x2a4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d86f      	bhi.n	800218a <HAL_GPIO_Init+0x12e>
 80020aa:	4a96      	ldr	r2, [pc, #600]	; (8002304 <HAL_GPIO_Init+0x2a8>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d052      	beq.n	8002156 <HAL_GPIO_Init+0xfa>
 80020b0:	4a94      	ldr	r2, [pc, #592]	; (8002304 <HAL_GPIO_Init+0x2a8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d869      	bhi.n	800218a <HAL_GPIO_Init+0x12e>
 80020b6:	4a94      	ldr	r2, [pc, #592]	; (8002308 <HAL_GPIO_Init+0x2ac>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d04c      	beq.n	8002156 <HAL_GPIO_Init+0xfa>
 80020bc:	4a92      	ldr	r2, [pc, #584]	; (8002308 <HAL_GPIO_Init+0x2ac>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d863      	bhi.n	800218a <HAL_GPIO_Init+0x12e>
 80020c2:	4a92      	ldr	r2, [pc, #584]	; (800230c <HAL_GPIO_Init+0x2b0>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d046      	beq.n	8002156 <HAL_GPIO_Init+0xfa>
 80020c8:	4a90      	ldr	r2, [pc, #576]	; (800230c <HAL_GPIO_Init+0x2b0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d85d      	bhi.n	800218a <HAL_GPIO_Init+0x12e>
 80020ce:	2b12      	cmp	r3, #18
 80020d0:	d82a      	bhi.n	8002128 <HAL_GPIO_Init+0xcc>
 80020d2:	2b12      	cmp	r3, #18
 80020d4:	d859      	bhi.n	800218a <HAL_GPIO_Init+0x12e>
 80020d6:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <HAL_GPIO_Init+0x80>)
 80020d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020dc:	08002157 	.word	0x08002157
 80020e0:	08002131 	.word	0x08002131
 80020e4:	08002143 	.word	0x08002143
 80020e8:	08002185 	.word	0x08002185
 80020ec:	0800218b 	.word	0x0800218b
 80020f0:	0800218b 	.word	0x0800218b
 80020f4:	0800218b 	.word	0x0800218b
 80020f8:	0800218b 	.word	0x0800218b
 80020fc:	0800218b 	.word	0x0800218b
 8002100:	0800218b 	.word	0x0800218b
 8002104:	0800218b 	.word	0x0800218b
 8002108:	0800218b 	.word	0x0800218b
 800210c:	0800218b 	.word	0x0800218b
 8002110:	0800218b 	.word	0x0800218b
 8002114:	0800218b 	.word	0x0800218b
 8002118:	0800218b 	.word	0x0800218b
 800211c:	0800218b 	.word	0x0800218b
 8002120:	08002139 	.word	0x08002139
 8002124:	0800214d 	.word	0x0800214d
 8002128:	4a79      	ldr	r2, [pc, #484]	; (8002310 <HAL_GPIO_Init+0x2b4>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d013      	beq.n	8002156 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800212e:	e02c      	b.n	800218a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	623b      	str	r3, [r7, #32]
          break;
 8002136:	e029      	b.n	800218c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	3304      	adds	r3, #4
 800213e:	623b      	str	r3, [r7, #32]
          break;
 8002140:	e024      	b.n	800218c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	3308      	adds	r3, #8
 8002148:	623b      	str	r3, [r7, #32]
          break;
 800214a:	e01f      	b.n	800218c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	330c      	adds	r3, #12
 8002152:	623b      	str	r3, [r7, #32]
          break;
 8002154:	e01a      	b.n	800218c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d102      	bne.n	8002164 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800215e:	2304      	movs	r3, #4
 8002160:	623b      	str	r3, [r7, #32]
          break;
 8002162:	e013      	b.n	800218c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d105      	bne.n	8002178 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800216c:	2308      	movs	r3, #8
 800216e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	611a      	str	r2, [r3, #16]
          break;
 8002176:	e009      	b.n	800218c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002178:	2308      	movs	r3, #8
 800217a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	615a      	str	r2, [r3, #20]
          break;
 8002182:	e003      	b.n	800218c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002184:	2300      	movs	r3, #0
 8002186:	623b      	str	r3, [r7, #32]
          break;
 8002188:	e000      	b.n	800218c <HAL_GPIO_Init+0x130>
          break;
 800218a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2bff      	cmp	r3, #255	; 0xff
 8002190:	d801      	bhi.n	8002196 <HAL_GPIO_Init+0x13a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	e001      	b.n	800219a <HAL_GPIO_Init+0x13e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3304      	adds	r3, #4
 800219a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	2bff      	cmp	r3, #255	; 0xff
 80021a0:	d802      	bhi.n	80021a8 <HAL_GPIO_Init+0x14c>
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	e002      	b.n	80021ae <HAL_GPIO_Init+0x152>
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	3b08      	subs	r3, #8
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	210f      	movs	r1, #15
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	fa01 f303 	lsl.w	r3, r1, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	401a      	ands	r2, r3
 80021c0:	6a39      	ldr	r1, [r7, #32]
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	fa01 f303 	lsl.w	r3, r1, r3
 80021c8:	431a      	orrs	r2, r3
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 80b1 	beq.w	800233e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021dc:	4b4d      	ldr	r3, [pc, #308]	; (8002314 <HAL_GPIO_Init+0x2b8>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	4a4c      	ldr	r2, [pc, #304]	; (8002314 <HAL_GPIO_Init+0x2b8>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6193      	str	r3, [r2, #24]
 80021e8:	4b4a      	ldr	r3, [pc, #296]	; (8002314 <HAL_GPIO_Init+0x2b8>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021f4:	4a48      	ldr	r2, [pc, #288]	; (8002318 <HAL_GPIO_Init+0x2bc>)
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	089b      	lsrs	r3, r3, #2
 80021fa:	3302      	adds	r3, #2
 80021fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002200:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	220f      	movs	r2, #15
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	4013      	ands	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a40      	ldr	r2, [pc, #256]	; (800231c <HAL_GPIO_Init+0x2c0>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d013      	beq.n	8002248 <HAL_GPIO_Init+0x1ec>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a3f      	ldr	r2, [pc, #252]	; (8002320 <HAL_GPIO_Init+0x2c4>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d00d      	beq.n	8002244 <HAL_GPIO_Init+0x1e8>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a3e      	ldr	r2, [pc, #248]	; (8002324 <HAL_GPIO_Init+0x2c8>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d007      	beq.n	8002240 <HAL_GPIO_Init+0x1e4>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a3d      	ldr	r2, [pc, #244]	; (8002328 <HAL_GPIO_Init+0x2cc>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d101      	bne.n	800223c <HAL_GPIO_Init+0x1e0>
 8002238:	2303      	movs	r3, #3
 800223a:	e006      	b.n	800224a <HAL_GPIO_Init+0x1ee>
 800223c:	2304      	movs	r3, #4
 800223e:	e004      	b.n	800224a <HAL_GPIO_Init+0x1ee>
 8002240:	2302      	movs	r3, #2
 8002242:	e002      	b.n	800224a <HAL_GPIO_Init+0x1ee>
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <HAL_GPIO_Init+0x1ee>
 8002248:	2300      	movs	r3, #0
 800224a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224c:	f002 0203 	and.w	r2, r2, #3
 8002250:	0092      	lsls	r2, r2, #2
 8002252:	4093      	lsls	r3, r2
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800225a:	492f      	ldr	r1, [pc, #188]	; (8002318 <HAL_GPIO_Init+0x2bc>)
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	089b      	lsrs	r3, r3, #2
 8002260:	3302      	adds	r3, #2
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d006      	beq.n	8002282 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002274:	4b2d      	ldr	r3, [pc, #180]	; (800232c <HAL_GPIO_Init+0x2d0>)
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	492c      	ldr	r1, [pc, #176]	; (800232c <HAL_GPIO_Init+0x2d0>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	608b      	str	r3, [r1, #8]
 8002280:	e006      	b.n	8002290 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002282:	4b2a      	ldr	r3, [pc, #168]	; (800232c <HAL_GPIO_Init+0x2d0>)
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	43db      	mvns	r3, r3
 800228a:	4928      	ldr	r1, [pc, #160]	; (800232c <HAL_GPIO_Init+0x2d0>)
 800228c:	4013      	ands	r3, r2
 800228e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d006      	beq.n	80022aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800229c:	4b23      	ldr	r3, [pc, #140]	; (800232c <HAL_GPIO_Init+0x2d0>)
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	4922      	ldr	r1, [pc, #136]	; (800232c <HAL_GPIO_Init+0x2d0>)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	60cb      	str	r3, [r1, #12]
 80022a8:	e006      	b.n	80022b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022aa:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_GPIO_Init+0x2d0>)
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	491e      	ldr	r1, [pc, #120]	; (800232c <HAL_GPIO_Init+0x2d0>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d006      	beq.n	80022d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022c4:	4b19      	ldr	r3, [pc, #100]	; (800232c <HAL_GPIO_Init+0x2d0>)
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	4918      	ldr	r1, [pc, #96]	; (800232c <HAL_GPIO_Init+0x2d0>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]
 80022d0:	e006      	b.n	80022e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022d2:	4b16      	ldr	r3, [pc, #88]	; (800232c <HAL_GPIO_Init+0x2d0>)
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	43db      	mvns	r3, r3
 80022da:	4914      	ldr	r1, [pc, #80]	; (800232c <HAL_GPIO_Init+0x2d0>)
 80022dc:	4013      	ands	r3, r2
 80022de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d021      	beq.n	8002330 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022ec:	4b0f      	ldr	r3, [pc, #60]	; (800232c <HAL_GPIO_Init+0x2d0>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	490e      	ldr	r1, [pc, #56]	; (800232c <HAL_GPIO_Init+0x2d0>)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	600b      	str	r3, [r1, #0]
 80022f8:	e021      	b.n	800233e <HAL_GPIO_Init+0x2e2>
 80022fa:	bf00      	nop
 80022fc:	10320000 	.word	0x10320000
 8002300:	10310000 	.word	0x10310000
 8002304:	10220000 	.word	0x10220000
 8002308:	10210000 	.word	0x10210000
 800230c:	10120000 	.word	0x10120000
 8002310:	10110000 	.word	0x10110000
 8002314:	40021000 	.word	0x40021000
 8002318:	40010000 	.word	0x40010000
 800231c:	40010800 	.word	0x40010800
 8002320:	40010c00 	.word	0x40010c00
 8002324:	40011000 	.word	0x40011000
 8002328:	40011400 	.word	0x40011400
 800232c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_GPIO_Init+0x304>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	43db      	mvns	r3, r3
 8002338:	4909      	ldr	r1, [pc, #36]	; (8002360 <HAL_GPIO_Init+0x304>)
 800233a:	4013      	ands	r3, r2
 800233c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	3301      	adds	r3, #1
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	fa22 f303 	lsr.w	r3, r2, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	f47f ae8e 	bne.w	8002070 <HAL_GPIO_Init+0x14>
  }
}
 8002354:	bf00      	nop
 8002356:	bf00      	nop
 8002358:	372c      	adds	r7, #44	; 0x2c
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	40010400 	.word	0x40010400

08002364 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e272      	b.n	800285c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 8087 	beq.w	8002492 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002384:	4b92      	ldr	r3, [pc, #584]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 030c 	and.w	r3, r3, #12
 800238c:	2b04      	cmp	r3, #4
 800238e:	d00c      	beq.n	80023aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002390:	4b8f      	ldr	r3, [pc, #572]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 030c 	and.w	r3, r3, #12
 8002398:	2b08      	cmp	r3, #8
 800239a:	d112      	bne.n	80023c2 <HAL_RCC_OscConfig+0x5e>
 800239c:	4b8c      	ldr	r3, [pc, #560]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a8:	d10b      	bne.n	80023c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023aa:	4b89      	ldr	r3, [pc, #548]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d06c      	beq.n	8002490 <HAL_RCC_OscConfig+0x12c>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d168      	bne.n	8002490 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e24c      	b.n	800285c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ca:	d106      	bne.n	80023da <HAL_RCC_OscConfig+0x76>
 80023cc:	4b80      	ldr	r3, [pc, #512]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a7f      	ldr	r2, [pc, #508]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 80023d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	e02e      	b.n	8002438 <HAL_RCC_OscConfig+0xd4>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10c      	bne.n	80023fc <HAL_RCC_OscConfig+0x98>
 80023e2:	4b7b      	ldr	r3, [pc, #492]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a7a      	ldr	r2, [pc, #488]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 80023e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	4b78      	ldr	r3, [pc, #480]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a77      	ldr	r2, [pc, #476]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	e01d      	b.n	8002438 <HAL_RCC_OscConfig+0xd4>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002404:	d10c      	bne.n	8002420 <HAL_RCC_OscConfig+0xbc>
 8002406:	4b72      	ldr	r3, [pc, #456]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a71      	ldr	r2, [pc, #452]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 800240c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	4b6f      	ldr	r3, [pc, #444]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a6e      	ldr	r2, [pc, #440]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 8002418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	e00b      	b.n	8002438 <HAL_RCC_OscConfig+0xd4>
 8002420:	4b6b      	ldr	r3, [pc, #428]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a6a      	ldr	r2, [pc, #424]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 8002426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	4b68      	ldr	r3, [pc, #416]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a67      	ldr	r2, [pc, #412]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 8002432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002436:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d013      	beq.n	8002468 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7fe fdde 	bl	8001000 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002448:	f7fe fdda 	bl	8001000 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	; 0x64
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e200      	b.n	800285c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245a:	4b5d      	ldr	r3, [pc, #372]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0xe4>
 8002466:	e014      	b.n	8002492 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7fe fdca 	bl	8001000 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002470:	f7fe fdc6 	bl	8001000 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b64      	cmp	r3, #100	; 0x64
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e1ec      	b.n	800285c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002482:	4b53      	ldr	r3, [pc, #332]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x10c>
 800248e:	e000      	b.n	8002492 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d063      	beq.n	8002566 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800249e:	4b4c      	ldr	r3, [pc, #304]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00b      	beq.n	80024c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024aa:	4b49      	ldr	r3, [pc, #292]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 030c 	and.w	r3, r3, #12
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d11c      	bne.n	80024f0 <HAL_RCC_OscConfig+0x18c>
 80024b6:	4b46      	ldr	r3, [pc, #280]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d116      	bne.n	80024f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c2:	4b43      	ldr	r3, [pc, #268]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d005      	beq.n	80024da <HAL_RCC_OscConfig+0x176>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d001      	beq.n	80024da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e1c0      	b.n	800285c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024da:	4b3d      	ldr	r3, [pc, #244]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4939      	ldr	r1, [pc, #228]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ee:	e03a      	b.n	8002566 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d020      	beq.n	800253a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f8:	4b36      	ldr	r3, [pc, #216]	; (80025d4 <HAL_RCC_OscConfig+0x270>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fe:	f7fe fd7f 	bl	8001000 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002506:	f7fe fd7b 	bl	8001000 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e1a1      	b.n	800285c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002518:	4b2d      	ldr	r3, [pc, #180]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0f0      	beq.n	8002506 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002524:	4b2a      	ldr	r3, [pc, #168]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4927      	ldr	r1, [pc, #156]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 8002534:	4313      	orrs	r3, r2
 8002536:	600b      	str	r3, [r1, #0]
 8002538:	e015      	b.n	8002566 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800253a:	4b26      	ldr	r3, [pc, #152]	; (80025d4 <HAL_RCC_OscConfig+0x270>)
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7fe fd5e 	bl	8001000 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002548:	f7fe fd5a 	bl	8001000 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e180      	b.n	800285c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255a:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d03a      	beq.n	80025e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d019      	beq.n	80025ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800257a:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <HAL_RCC_OscConfig+0x274>)
 800257c:	2201      	movs	r2, #1
 800257e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002580:	f7fe fd3e 	bl	8001000 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002588:	f7fe fd3a 	bl	8001000 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e160      	b.n	800285c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259a:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025a6:	2001      	movs	r0, #1
 80025a8:	f000 face 	bl	8002b48 <RCC_Delay>
 80025ac:	e01c      	b.n	80025e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ae:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <HAL_RCC_OscConfig+0x274>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b4:	f7fe fd24 	bl	8001000 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ba:	e00f      	b.n	80025dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025bc:	f7fe fd20 	bl	8001000 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d908      	bls.n	80025dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e146      	b.n	800285c <HAL_RCC_OscConfig+0x4f8>
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000
 80025d4:	42420000 	.word	0x42420000
 80025d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025dc:	4b92      	ldr	r3, [pc, #584]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1e9      	bne.n	80025bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 80a6 	beq.w	8002742 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025f6:	2300      	movs	r3, #0
 80025f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025fa:	4b8b      	ldr	r3, [pc, #556]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10d      	bne.n	8002622 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002606:	4b88      	ldr	r3, [pc, #544]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	4a87      	ldr	r2, [pc, #540]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 800260c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002610:	61d3      	str	r3, [r2, #28]
 8002612:	4b85      	ldr	r3, [pc, #532]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800261e:	2301      	movs	r3, #1
 8002620:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002622:	4b82      	ldr	r3, [pc, #520]	; (800282c <HAL_RCC_OscConfig+0x4c8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262a:	2b00      	cmp	r3, #0
 800262c:	d118      	bne.n	8002660 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800262e:	4b7f      	ldr	r3, [pc, #508]	; (800282c <HAL_RCC_OscConfig+0x4c8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a7e      	ldr	r2, [pc, #504]	; (800282c <HAL_RCC_OscConfig+0x4c8>)
 8002634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800263a:	f7fe fce1 	bl	8001000 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002642:	f7fe fcdd 	bl	8001000 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b64      	cmp	r3, #100	; 0x64
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e103      	b.n	800285c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002654:	4b75      	ldr	r3, [pc, #468]	; (800282c <HAL_RCC_OscConfig+0x4c8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d106      	bne.n	8002676 <HAL_RCC_OscConfig+0x312>
 8002668:	4b6f      	ldr	r3, [pc, #444]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	4a6e      	ldr	r2, [pc, #440]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6213      	str	r3, [r2, #32]
 8002674:	e02d      	b.n	80026d2 <HAL_RCC_OscConfig+0x36e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10c      	bne.n	8002698 <HAL_RCC_OscConfig+0x334>
 800267e:	4b6a      	ldr	r3, [pc, #424]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	4a69      	ldr	r2, [pc, #420]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 8002684:	f023 0301 	bic.w	r3, r3, #1
 8002688:	6213      	str	r3, [r2, #32]
 800268a:	4b67      	ldr	r3, [pc, #412]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	4a66      	ldr	r2, [pc, #408]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 8002690:	f023 0304 	bic.w	r3, r3, #4
 8002694:	6213      	str	r3, [r2, #32]
 8002696:	e01c      	b.n	80026d2 <HAL_RCC_OscConfig+0x36e>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	2b05      	cmp	r3, #5
 800269e:	d10c      	bne.n	80026ba <HAL_RCC_OscConfig+0x356>
 80026a0:	4b61      	ldr	r3, [pc, #388]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	4a60      	ldr	r2, [pc, #384]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 80026a6:	f043 0304 	orr.w	r3, r3, #4
 80026aa:	6213      	str	r3, [r2, #32]
 80026ac:	4b5e      	ldr	r3, [pc, #376]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	4a5d      	ldr	r2, [pc, #372]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6213      	str	r3, [r2, #32]
 80026b8:	e00b      	b.n	80026d2 <HAL_RCC_OscConfig+0x36e>
 80026ba:	4b5b      	ldr	r3, [pc, #364]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	4a5a      	ldr	r2, [pc, #360]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 80026c0:	f023 0301 	bic.w	r3, r3, #1
 80026c4:	6213      	str	r3, [r2, #32]
 80026c6:	4b58      	ldr	r3, [pc, #352]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	4a57      	ldr	r2, [pc, #348]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 80026cc:	f023 0304 	bic.w	r3, r3, #4
 80026d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d015      	beq.n	8002706 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026da:	f7fe fc91 	bl	8001000 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e0:	e00a      	b.n	80026f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e2:	f7fe fc8d 	bl	8001000 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e0b1      	b.n	800285c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f8:	4b4b      	ldr	r3, [pc, #300]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0ee      	beq.n	80026e2 <HAL_RCC_OscConfig+0x37e>
 8002704:	e014      	b.n	8002730 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002706:	f7fe fc7b 	bl	8001000 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800270c:	e00a      	b.n	8002724 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270e:	f7fe fc77 	bl	8001000 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f241 3288 	movw	r2, #5000	; 0x1388
 800271c:	4293      	cmp	r3, r2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e09b      	b.n	800285c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002724:	4b40      	ldr	r3, [pc, #256]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1ee      	bne.n	800270e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002730:	7dfb      	ldrb	r3, [r7, #23]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d105      	bne.n	8002742 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002736:	4b3c      	ldr	r3, [pc, #240]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	4a3b      	ldr	r2, [pc, #236]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 800273c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002740:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 8087 	beq.w	800285a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800274c:	4b36      	ldr	r3, [pc, #216]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 030c 	and.w	r3, r3, #12
 8002754:	2b08      	cmp	r3, #8
 8002756:	d061      	beq.n	800281c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d146      	bne.n	80027ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002760:	4b33      	ldr	r3, [pc, #204]	; (8002830 <HAL_RCC_OscConfig+0x4cc>)
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002766:	f7fe fc4b 	bl	8001000 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800276e:	f7fe fc47 	bl	8001000 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e06d      	b.n	800285c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002780:	4b29      	ldr	r3, [pc, #164]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f0      	bne.n	800276e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002794:	d108      	bne.n	80027a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002796:	4b24      	ldr	r3, [pc, #144]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	4921      	ldr	r1, [pc, #132]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027a8:	4b1f      	ldr	r3, [pc, #124]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a19      	ldr	r1, [r3, #32]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	430b      	orrs	r3, r1
 80027ba:	491b      	ldr	r1, [pc, #108]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027c0:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <HAL_RCC_OscConfig+0x4cc>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c6:	f7fe fc1b 	bl	8001000 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ce:	f7fe fc17 	bl	8001000 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e03d      	b.n	800285c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027e0:	4b11      	ldr	r3, [pc, #68]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_OscConfig+0x46a>
 80027ec:	e035      	b.n	800285a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ee:	4b10      	ldr	r3, [pc, #64]	; (8002830 <HAL_RCC_OscConfig+0x4cc>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7fe fc04 	bl	8001000 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fc:	f7fe fc00 	bl	8001000 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e026      	b.n	800285c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800280e:	4b06      	ldr	r3, [pc, #24]	; (8002828 <HAL_RCC_OscConfig+0x4c4>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x498>
 800281a:	e01e      	b.n	800285a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d107      	bne.n	8002834 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e019      	b.n	800285c <HAL_RCC_OscConfig+0x4f8>
 8002828:	40021000 	.word	0x40021000
 800282c:	40007000 	.word	0x40007000
 8002830:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <HAL_RCC_OscConfig+0x500>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	429a      	cmp	r2, r3
 8002846:	d106      	bne.n	8002856 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002852:	429a      	cmp	r2, r3
 8002854:	d001      	beq.n	800285a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40021000 	.word	0x40021000

08002868 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0d0      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800287c:	4b6a      	ldr	r3, [pc, #424]	; (8002a28 <HAL_RCC_ClockConfig+0x1c0>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d910      	bls.n	80028ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288a:	4b67      	ldr	r3, [pc, #412]	; (8002a28 <HAL_RCC_ClockConfig+0x1c0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f023 0207 	bic.w	r2, r3, #7
 8002892:	4965      	ldr	r1, [pc, #404]	; (8002a28 <HAL_RCC_ClockConfig+0x1c0>)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	4313      	orrs	r3, r2
 8002898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289a:	4b63      	ldr	r3, [pc, #396]	; (8002a28 <HAL_RCC_ClockConfig+0x1c0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d001      	beq.n	80028ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0b8      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d020      	beq.n	80028fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028c4:	4b59      	ldr	r3, [pc, #356]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	4a58      	ldr	r2, [pc, #352]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 80028ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028dc:	4b53      	ldr	r3, [pc, #332]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4a52      	ldr	r2, [pc, #328]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e8:	4b50      	ldr	r3, [pc, #320]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	494d      	ldr	r1, [pc, #308]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d040      	beq.n	8002988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d107      	bne.n	800291e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290e:	4b47      	ldr	r3, [pc, #284]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d115      	bne.n	8002946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e07f      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d107      	bne.n	8002936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002926:	4b41      	ldr	r3, [pc, #260]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d109      	bne.n	8002946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e073      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002936:	4b3d      	ldr	r3, [pc, #244]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e06b      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002946:	4b39      	ldr	r3, [pc, #228]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f023 0203 	bic.w	r2, r3, #3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	4936      	ldr	r1, [pc, #216]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002958:	f7fe fb52 	bl	8001000 <HAL_GetTick>
 800295c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295e:	e00a      	b.n	8002976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002960:	f7fe fb4e 	bl	8001000 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f241 3288 	movw	r2, #5000	; 0x1388
 800296e:	4293      	cmp	r3, r2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e053      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002976:	4b2d      	ldr	r3, [pc, #180]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 020c 	and.w	r2, r3, #12
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	429a      	cmp	r2, r3
 8002986:	d1eb      	bne.n	8002960 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002988:	4b27      	ldr	r3, [pc, #156]	; (8002a28 <HAL_RCC_ClockConfig+0x1c0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d210      	bcs.n	80029b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b24      	ldr	r3, [pc, #144]	; (8002a28 <HAL_RCC_ClockConfig+0x1c0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 0207 	bic.w	r2, r3, #7
 800299e:	4922      	ldr	r1, [pc, #136]	; (8002a28 <HAL_RCC_ClockConfig+0x1c0>)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	4b20      	ldr	r3, [pc, #128]	; (8002a28 <HAL_RCC_ClockConfig+0x1c0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e032      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c4:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	4916      	ldr	r1, [pc, #88]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d009      	beq.n	80029f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029e2:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	490e      	ldr	r1, [pc, #56]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029f6:	f000 f821 	bl	8002a3c <HAL_RCC_GetSysClockFreq>
 80029fa:	4602      	mov	r2, r0
 80029fc:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	490a      	ldr	r1, [pc, #40]	; (8002a30 <HAL_RCC_ClockConfig+0x1c8>)
 8002a08:	5ccb      	ldrb	r3, [r1, r3]
 8002a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0e:	4a09      	ldr	r2, [pc, #36]	; (8002a34 <HAL_RCC_ClockConfig+0x1cc>)
 8002a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a12:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <HAL_RCC_ClockConfig+0x1d0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe fab0 	bl	8000f7c <HAL_InitTick>

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40022000 	.word	0x40022000
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	080045e4 	.word	0x080045e4
 8002a34:	20000010 	.word	0x20000010
 8002a38:	20000014 	.word	0x20000014

08002a3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	2300      	movs	r3, #0
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a56:	4b1e      	ldr	r3, [pc, #120]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d002      	beq.n	8002a6c <HAL_RCC_GetSysClockFreq+0x30>
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d003      	beq.n	8002a72 <HAL_RCC_GetSysClockFreq+0x36>
 8002a6a:	e027      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a6e:	613b      	str	r3, [r7, #16]
      break;
 8002a70:	e027      	b.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	0c9b      	lsrs	r3, r3, #18
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	4a17      	ldr	r2, [pc, #92]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a7c:	5cd3      	ldrb	r3, [r2, r3]
 8002a7e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d010      	beq.n	8002aac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a8a:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	0c5b      	lsrs	r3, r3, #17
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	4a11      	ldr	r2, [pc, #68]	; (8002adc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a96:	5cd3      	ldrb	r3, [r2, r3]
 8002a98:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a0d      	ldr	r2, [pc, #52]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a9e:	fb03 f202 	mul.w	r2, r3, r2
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa8:	617b      	str	r3, [r7, #20]
 8002aaa:	e004      	b.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a0c      	ldr	r2, [pc, #48]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ab0:	fb02 f303 	mul.w	r3, r2, r3
 8002ab4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	613b      	str	r3, [r7, #16]
      break;
 8002aba:	e002      	b.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002abc:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002abe:	613b      	str	r3, [r7, #16]
      break;
 8002ac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ac2:	693b      	ldr	r3, [r7, #16]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	371c      	adds	r7, #28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	007a1200 	.word	0x007a1200
 8002ad8:	080045fc 	.word	0x080045fc
 8002adc:	0800460c 	.word	0x0800460c
 8002ae0:	003d0900 	.word	0x003d0900

08002ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae8:	4b02      	ldr	r3, [pc, #8]	; (8002af4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr
 8002af4:	20000010 	.word	0x20000010

08002af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002afc:	f7ff fff2 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b00:	4602      	mov	r2, r0
 8002b02:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	0a1b      	lsrs	r3, r3, #8
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	4903      	ldr	r1, [pc, #12]	; (8002b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b0e:	5ccb      	ldrb	r3, [r1, r3]
 8002b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	080045f4 	.word	0x080045f4

08002b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b24:	f7ff ffde 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	0adb      	lsrs	r3, r3, #11
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	4903      	ldr	r1, [pc, #12]	; (8002b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b36:	5ccb      	ldrb	r3, [r1, r3]
 8002b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40021000 	.word	0x40021000
 8002b44:	080045f4 	.word	0x080045f4

08002b48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b50:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <RCC_Delay+0x34>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <RCC_Delay+0x38>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	0a5b      	lsrs	r3, r3, #9
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	fb02 f303 	mul.w	r3, r2, r3
 8002b62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b64:	bf00      	nop
  }
  while (Delay --);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	1e5a      	subs	r2, r3, #1
 8002b6a:	60fa      	str	r2, [r7, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1f9      	bne.n	8002b64 <RCC_Delay+0x1c>
}
 8002b70:	bf00      	nop
 8002b72:	bf00      	nop
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr
 8002b7c:	20000010 	.word	0x20000010
 8002b80:	10624dd3 	.word	0x10624dd3

08002b84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e042      	b.n	8002c1c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d106      	bne.n	8002bb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7fe f854 	bl	8000c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2224      	movs	r2, #36	; 0x24
 8002bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 fc7f 	bl	80034cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695a      	ldr	r2, [r3, #20]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2220      	movs	r2, #32
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b0ba      	sub	sp, #232	; 0xe8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002c62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10f      	bne.n	8002c8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c6e:	f003 0320 	and.w	r3, r3, #32
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d009      	beq.n	8002c8a <HAL_UART_IRQHandler+0x66>
 8002c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c7a:	f003 0320 	and.w	r3, r3, #32
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 fb63 	bl	800334e <UART_Receive_IT>
      return;
 8002c88:	e25b      	b.n	8003142 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80de 	beq.w	8002e50 <HAL_UART_IRQHandler+0x22c>
 8002c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d106      	bne.n	8002cae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ca4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 80d1 	beq.w	8002e50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00b      	beq.n	8002cd2 <HAL_UART_IRQHandler+0xae>
 8002cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	f043 0201 	orr.w	r2, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <HAL_UART_IRQHandler+0xd2>
 8002cde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d005      	beq.n	8002cf6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	f043 0202 	orr.w	r2, r3, #2
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00b      	beq.n	8002d1a <HAL_UART_IRQHandler+0xf6>
 8002d02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f043 0204 	orr.w	r2, r3, #4
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d011      	beq.n	8002d4a <HAL_UART_IRQHandler+0x126>
 8002d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d2a:	f003 0320 	and.w	r3, r3, #32
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d105      	bne.n	8002d3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d005      	beq.n	8002d4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	f043 0208 	orr.w	r2, r3, #8
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 81f2 	beq.w	8003138 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d58:	f003 0320 	and.w	r3, r3, #32
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d008      	beq.n	8002d72 <HAL_UART_IRQHandler+0x14e>
 8002d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d64:	f003 0320 	and.w	r3, r3, #32
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 faee 	bl	800334e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bf14      	ite	ne
 8002d80:	2301      	movne	r3, #1
 8002d82:	2300      	moveq	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d103      	bne.n	8002d9e <HAL_UART_IRQHandler+0x17a>
 8002d96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d04f      	beq.n	8002e3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f9f8 	bl	8003194 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d041      	beq.n	8002e36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3314      	adds	r3, #20
 8002db8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dc0:	e853 3f00 	ldrex	r3, [r3]
 8002dc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002dc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	3314      	adds	r3, #20
 8002dda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002dde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002de2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002dea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002dee:	e841 2300 	strex	r3, r2, [r1]
 8002df2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002df6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1d9      	bne.n	8002db2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d013      	beq.n	8002e2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0a:	4a7e      	ldr	r2, [pc, #504]	; (8003004 <HAL_UART_IRQHandler+0x3e0>)
 8002e0c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff f8aa 	bl	8001f6c <HAL_DMA_Abort_IT>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d016      	beq.n	8002e4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e28:	4610      	mov	r0, r2
 8002e2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e2c:	e00e      	b.n	8002e4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f99c 	bl	800316c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e34:	e00a      	b.n	8002e4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f998 	bl	800316c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e3c:	e006      	b.n	8002e4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f994 	bl	800316c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002e4a:	e175      	b.n	8003138 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e4c:	bf00      	nop
    return;
 8002e4e:	e173      	b.n	8003138 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	f040 814f 	bne.w	80030f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 8148 	beq.w	80030f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 8141 	beq.w	80030f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e76:	2300      	movs	r3, #0
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 80b6 	beq.w	8003008 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ea8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 8145 	beq.w	800313c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002eb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	f080 813e 	bcs.w	800313c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ec6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	2b20      	cmp	r3, #32
 8002ed0:	f000 8088 	beq.w	8002fe4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	330c      	adds	r3, #12
 8002eda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ede:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ee2:	e853 3f00 	ldrex	r3, [r3]
 8002ee6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002eea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ef2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	330c      	adds	r3, #12
 8002efc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002f00:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f08:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f10:	e841 2300 	strex	r3, r2, [r1]
 8002f14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1d9      	bne.n	8002ed4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3314      	adds	r3, #20
 8002f26:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f2a:	e853 3f00 	ldrex	r3, [r3]
 8002f2e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f32:	f023 0301 	bic.w	r3, r3, #1
 8002f36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	3314      	adds	r3, #20
 8002f40:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f44:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f48:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f50:	e841 2300 	strex	r3, r2, [r1]
 8002f54:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1e1      	bne.n	8002f20 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3314      	adds	r3, #20
 8002f62:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f66:	e853 3f00 	ldrex	r3, [r3]
 8002f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	3314      	adds	r3, #20
 8002f7c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f80:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f86:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f88:	e841 2300 	strex	r3, r2, [r1]
 8002f8c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1e3      	bne.n	8002f5c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	330c      	adds	r3, #12
 8002fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fac:	e853 3f00 	ldrex	r3, [r3]
 8002fb0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fb4:	f023 0310 	bic.w	r3, r3, #16
 8002fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	330c      	adds	r3, #12
 8002fc2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002fc6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002fc8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002fcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fce:	e841 2300 	strex	r3, r2, [r1]
 8002fd2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1e3      	bne.n	8002fa2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fe ff89 	bl	8001ef6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f8bf 	bl	800317e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003000:	e09c      	b.n	800313c <HAL_UART_IRQHandler+0x518>
 8003002:	bf00      	nop
 8003004:	08003259 	.word	0x08003259
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003010:	b29b      	uxth	r3, r3
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 808e 	beq.w	8003140 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003024:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 8089 	beq.w	8003140 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	330c      	adds	r3, #12
 8003034:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003038:	e853 3f00 	ldrex	r3, [r3]
 800303c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800303e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003040:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003044:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	330c      	adds	r3, #12
 800304e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003052:	647a      	str	r2, [r7, #68]	; 0x44
 8003054:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003056:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003058:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800305a:	e841 2300 	strex	r3, r2, [r1]
 800305e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1e3      	bne.n	800302e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3314      	adds	r3, #20
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	e853 3f00 	ldrex	r3, [r3]
 8003074:	623b      	str	r3, [r7, #32]
   return(result);
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	f023 0301 	bic.w	r3, r3, #1
 800307c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	3314      	adds	r3, #20
 8003086:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800308a:	633a      	str	r2, [r7, #48]	; 0x30
 800308c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003092:	e841 2300 	strex	r3, r2, [r1]
 8003096:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1e3      	bne.n	8003066 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	330c      	adds	r3, #12
 80030b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	e853 3f00 	ldrex	r3, [r3]
 80030ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 0310 	bic.w	r3, r3, #16
 80030c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	330c      	adds	r3, #12
 80030cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80030d0:	61fa      	str	r2, [r7, #28]
 80030d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d4:	69b9      	ldr	r1, [r7, #24]
 80030d6:	69fa      	ldr	r2, [r7, #28]
 80030d8:	e841 2300 	strex	r3, r2, [r1]
 80030dc:	617b      	str	r3, [r7, #20]
   return(result);
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1e3      	bne.n	80030ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030ee:	4619      	mov	r1, r3
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f844 	bl	800317e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030f6:	e023      	b.n	8003140 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003100:	2b00      	cmp	r3, #0
 8003102:	d009      	beq.n	8003118 <HAL_UART_IRQHandler+0x4f4>
 8003104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f8b5 	bl	8003280 <UART_Transmit_IT>
    return;
 8003116:	e014      	b.n	8003142 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800311c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00e      	beq.n	8003142 <HAL_UART_IRQHandler+0x51e>
 8003124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312c:	2b00      	cmp	r3, #0
 800312e:	d008      	beq.n	8003142 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f8f4 	bl	800331e <UART_EndTransmit_IT>
    return;
 8003136:	e004      	b.n	8003142 <HAL_UART_IRQHandler+0x51e>
    return;
 8003138:	bf00      	nop
 800313a:	e002      	b.n	8003142 <HAL_UART_IRQHandler+0x51e>
      return;
 800313c:	bf00      	nop
 800313e:	e000      	b.n	8003142 <HAL_UART_IRQHandler+0x51e>
      return;
 8003140:	bf00      	nop
  }
}
 8003142:	37e8      	adds	r7, #232	; 0xe8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr

0800317e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
 8003186:	460b      	mov	r3, r1
 8003188:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr

08003194 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003194:	b480      	push	{r7}
 8003196:	b095      	sub	sp, #84	; 0x54
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	330c      	adds	r3, #12
 80031a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a6:	e853 3f00 	ldrex	r3, [r3]
 80031aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80031ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	330c      	adds	r3, #12
 80031ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031bc:	643a      	str	r2, [r7, #64]	; 0x40
 80031be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80031c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031c4:	e841 2300 	strex	r3, r2, [r1]
 80031c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1e5      	bne.n	800319c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	3314      	adds	r3, #20
 80031d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	e853 3f00 	ldrex	r3, [r3]
 80031de:	61fb      	str	r3, [r7, #28]
   return(result);
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f023 0301 	bic.w	r3, r3, #1
 80031e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3314      	adds	r3, #20
 80031ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f8:	e841 2300 	strex	r3, r2, [r1]
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1e5      	bne.n	80031d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003208:	2b01      	cmp	r3, #1
 800320a:	d119      	bne.n	8003240 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	330c      	adds	r3, #12
 8003212:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	e853 3f00 	ldrex	r3, [r3]
 800321a:	60bb      	str	r3, [r7, #8]
   return(result);
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f023 0310 	bic.w	r3, r3, #16
 8003222:	647b      	str	r3, [r7, #68]	; 0x44
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	330c      	adds	r3, #12
 800322a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800322c:	61ba      	str	r2, [r7, #24]
 800322e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003230:	6979      	ldr	r1, [r7, #20]
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	e841 2300 	strex	r3, r2, [r1]
 8003238:	613b      	str	r3, [r7, #16]
   return(result);
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1e5      	bne.n	800320c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800324e:	bf00      	nop
 8003250:	3754      	adds	r7, #84	; 0x54
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr

08003258 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f7ff ff7a 	bl	800316c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003278:	bf00      	nop
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b21      	cmp	r3, #33	; 0x21
 8003292:	d13e      	bne.n	8003312 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800329c:	d114      	bne.n	80032c8 <UART_Transmit_IT+0x48>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d110      	bne.n	80032c8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	461a      	mov	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	1c9a      	adds	r2, r3, #2
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	621a      	str	r2, [r3, #32]
 80032c6:	e008      	b.n	80032da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	1c59      	adds	r1, r3, #1
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6211      	str	r1, [r2, #32]
 80032d2:	781a      	ldrb	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	4619      	mov	r1, r3
 80032e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10f      	bne.n	800330e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800330c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	e000      	b.n	8003314 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003312:	2302      	movs	r3, #2
  }
}
 8003314:	4618      	mov	r0, r3
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr

0800331e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003334:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff ff02 	bl	8003148 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b08c      	sub	sp, #48	; 0x30
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b22      	cmp	r3, #34	; 0x22
 8003360:	f040 80ae 	bne.w	80034c0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800336c:	d117      	bne.n	800339e <UART_Receive_IT+0x50>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d113      	bne.n	800339e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003376:	2300      	movs	r3, #0
 8003378:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	b29b      	uxth	r3, r3
 8003388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800338c:	b29a      	uxth	r2, r3
 800338e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003390:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	1c9a      	adds	r2, r3, #2
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	629a      	str	r2, [r3, #40]	; 0x28
 800339c:	e026      	b.n	80033ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b0:	d007      	beq.n	80033c2 <UART_Receive_IT+0x74>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10a      	bne.n	80033d0 <UART_Receive_IT+0x82>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d106      	bne.n	80033d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033cc:	701a      	strb	r2, [r3, #0]
 80033ce:	e008      	b.n	80033e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	4619      	mov	r1, r3
 80033fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d15d      	bne.n	80034bc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0220 	bic.w	r2, r2, #32
 800340e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800341e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695a      	ldr	r2, [r3, #20]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0201 	bic.w	r2, r2, #1
 800342e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	2b01      	cmp	r3, #1
 8003444:	d135      	bne.n	80034b2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	330c      	adds	r3, #12
 8003452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	e853 3f00 	ldrex	r3, [r3]
 800345a:	613b      	str	r3, [r7, #16]
   return(result);
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f023 0310 	bic.w	r3, r3, #16
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	330c      	adds	r3, #12
 800346a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800346c:	623a      	str	r2, [r7, #32]
 800346e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003470:	69f9      	ldr	r1, [r7, #28]
 8003472:	6a3a      	ldr	r2, [r7, #32]
 8003474:	e841 2300 	strex	r3, r2, [r1]
 8003478:	61bb      	str	r3, [r7, #24]
   return(result);
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1e5      	bne.n	800344c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b10      	cmp	r3, #16
 800348c:	d10a      	bne.n	80034a4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034a8:	4619      	mov	r1, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff fe67 	bl	800317e <HAL_UARTEx_RxEventCallback>
 80034b0:	e002      	b.n	80034b8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff fe51 	bl	800315a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	e002      	b.n	80034c2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	e000      	b.n	80034c2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80034c0:	2302      	movs	r3, #2
  }
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3730      	adds	r7, #48	; 0x30
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003506:	f023 030c 	bic.w	r3, r3, #12
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6812      	ldr	r2, [r2, #0]
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	430b      	orrs	r3, r1
 8003512:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699a      	ldr	r2, [r3, #24]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a2c      	ldr	r2, [pc, #176]	; (80035e0 <UART_SetConfig+0x114>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d103      	bne.n	800353c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003534:	f7ff faf4 	bl	8002b20 <HAL_RCC_GetPCLK2Freq>
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	e002      	b.n	8003542 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800353c:	f7ff fadc 	bl	8002af8 <HAL_RCC_GetPCLK1Freq>
 8003540:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	009a      	lsls	r2, r3, #2
 800354c:	441a      	add	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	fbb2 f3f3 	udiv	r3, r2, r3
 8003558:	4a22      	ldr	r2, [pc, #136]	; (80035e4 <UART_SetConfig+0x118>)
 800355a:	fba2 2303 	umull	r2, r3, r2, r3
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	0119      	lsls	r1, r3, #4
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	009a      	lsls	r2, r3, #2
 800356c:	441a      	add	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	fbb2 f2f3 	udiv	r2, r2, r3
 8003578:	4b1a      	ldr	r3, [pc, #104]	; (80035e4 <UART_SetConfig+0x118>)
 800357a:	fba3 0302 	umull	r0, r3, r3, r2
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	2064      	movs	r0, #100	; 0x64
 8003582:	fb00 f303 	mul.w	r3, r0, r3
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	3332      	adds	r3, #50	; 0x32
 800358c:	4a15      	ldr	r2, [pc, #84]	; (80035e4 <UART_SetConfig+0x118>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003598:	4419      	add	r1, r3
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	009a      	lsls	r2, r3, #2
 80035a4:	441a      	add	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80035b0:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <UART_SetConfig+0x118>)
 80035b2:	fba3 0302 	umull	r0, r3, r3, r2
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	2064      	movs	r0, #100	; 0x64
 80035ba:	fb00 f303 	mul.w	r3, r0, r3
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	3332      	adds	r3, #50	; 0x32
 80035c4:	4a07      	ldr	r2, [pc, #28]	; (80035e4 <UART_SetConfig+0x118>)
 80035c6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	f003 020f 	and.w	r2, r3, #15
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	440a      	add	r2, r1
 80035d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80035d8:	bf00      	nop
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40013800 	.word	0x40013800
 80035e4:	51eb851f 	.word	0x51eb851f

080035e8 <rand>:
 80035e8:	4b16      	ldr	r3, [pc, #88]	; (8003644 <rand+0x5c>)
 80035ea:	b510      	push	{r4, lr}
 80035ec:	681c      	ldr	r4, [r3, #0]
 80035ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80035f0:	b9b3      	cbnz	r3, 8003620 <rand+0x38>
 80035f2:	2018      	movs	r0, #24
 80035f4:	f000 fa1e 	bl	8003a34 <malloc>
 80035f8:	4602      	mov	r2, r0
 80035fa:	6320      	str	r0, [r4, #48]	; 0x30
 80035fc:	b920      	cbnz	r0, 8003608 <rand+0x20>
 80035fe:	2152      	movs	r1, #82	; 0x52
 8003600:	4b11      	ldr	r3, [pc, #68]	; (8003648 <rand+0x60>)
 8003602:	4812      	ldr	r0, [pc, #72]	; (800364c <rand+0x64>)
 8003604:	f000 f9b0 	bl	8003968 <__assert_func>
 8003608:	4911      	ldr	r1, [pc, #68]	; (8003650 <rand+0x68>)
 800360a:	4b12      	ldr	r3, [pc, #72]	; (8003654 <rand+0x6c>)
 800360c:	e9c0 1300 	strd	r1, r3, [r0]
 8003610:	4b11      	ldr	r3, [pc, #68]	; (8003658 <rand+0x70>)
 8003612:	2100      	movs	r1, #0
 8003614:	6083      	str	r3, [r0, #8]
 8003616:	230b      	movs	r3, #11
 8003618:	8183      	strh	r3, [r0, #12]
 800361a:	2001      	movs	r0, #1
 800361c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003620:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003622:	480e      	ldr	r0, [pc, #56]	; (800365c <rand+0x74>)
 8003624:	690b      	ldr	r3, [r1, #16]
 8003626:	694c      	ldr	r4, [r1, #20]
 8003628:	4358      	muls	r0, r3
 800362a:	4a0d      	ldr	r2, [pc, #52]	; (8003660 <rand+0x78>)
 800362c:	fb02 0004 	mla	r0, r2, r4, r0
 8003630:	fba3 3202 	umull	r3, r2, r3, r2
 8003634:	3301      	adds	r3, #1
 8003636:	eb40 0002 	adc.w	r0, r0, r2
 800363a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800363e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003642:	bd10      	pop	{r4, pc}
 8003644:	20000074 	.word	0x20000074
 8003648:	0800460e 	.word	0x0800460e
 800364c:	08004625 	.word	0x08004625
 8003650:	abcd330e 	.word	0xabcd330e
 8003654:	e66d1234 	.word	0xe66d1234
 8003658:	0005deec 	.word	0x0005deec
 800365c:	5851f42d 	.word	0x5851f42d
 8003660:	4c957f2d 	.word	0x4c957f2d

08003664 <std>:
 8003664:	2300      	movs	r3, #0
 8003666:	b510      	push	{r4, lr}
 8003668:	4604      	mov	r4, r0
 800366a:	e9c0 3300 	strd	r3, r3, [r0]
 800366e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003672:	6083      	str	r3, [r0, #8]
 8003674:	8181      	strh	r1, [r0, #12]
 8003676:	6643      	str	r3, [r0, #100]	; 0x64
 8003678:	81c2      	strh	r2, [r0, #14]
 800367a:	6183      	str	r3, [r0, #24]
 800367c:	4619      	mov	r1, r3
 800367e:	2208      	movs	r2, #8
 8003680:	305c      	adds	r0, #92	; 0x5c
 8003682:	f000 f8f4 	bl	800386e <memset>
 8003686:	4b0d      	ldr	r3, [pc, #52]	; (80036bc <std+0x58>)
 8003688:	6224      	str	r4, [r4, #32]
 800368a:	6263      	str	r3, [r4, #36]	; 0x24
 800368c:	4b0c      	ldr	r3, [pc, #48]	; (80036c0 <std+0x5c>)
 800368e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003690:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <std+0x60>)
 8003692:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003694:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <std+0x64>)
 8003696:	6323      	str	r3, [r4, #48]	; 0x30
 8003698:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <std+0x68>)
 800369a:	429c      	cmp	r4, r3
 800369c:	d006      	beq.n	80036ac <std+0x48>
 800369e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80036a2:	4294      	cmp	r4, r2
 80036a4:	d002      	beq.n	80036ac <std+0x48>
 80036a6:	33d0      	adds	r3, #208	; 0xd0
 80036a8:	429c      	cmp	r4, r3
 80036aa:	d105      	bne.n	80036b8 <std+0x54>
 80036ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80036b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036b4:	f000 b954 	b.w	8003960 <__retarget_lock_init_recursive>
 80036b8:	bd10      	pop	{r4, pc}
 80036ba:	bf00      	nop
 80036bc:	080037e9 	.word	0x080037e9
 80036c0:	0800380b 	.word	0x0800380b
 80036c4:	08003843 	.word	0x08003843
 80036c8:	08003867 	.word	0x08003867
 80036cc:	20000194 	.word	0x20000194

080036d0 <stdio_exit_handler>:
 80036d0:	4a02      	ldr	r2, [pc, #8]	; (80036dc <stdio_exit_handler+0xc>)
 80036d2:	4903      	ldr	r1, [pc, #12]	; (80036e0 <stdio_exit_handler+0x10>)
 80036d4:	4803      	ldr	r0, [pc, #12]	; (80036e4 <stdio_exit_handler+0x14>)
 80036d6:	f000 b869 	b.w	80037ac <_fwalk_sglue>
 80036da:	bf00      	nop
 80036dc:	2000001c 	.word	0x2000001c
 80036e0:	08003ca1 	.word	0x08003ca1
 80036e4:	20000028 	.word	0x20000028

080036e8 <cleanup_stdio>:
 80036e8:	6841      	ldr	r1, [r0, #4]
 80036ea:	4b0c      	ldr	r3, [pc, #48]	; (800371c <cleanup_stdio+0x34>)
 80036ec:	b510      	push	{r4, lr}
 80036ee:	4299      	cmp	r1, r3
 80036f0:	4604      	mov	r4, r0
 80036f2:	d001      	beq.n	80036f8 <cleanup_stdio+0x10>
 80036f4:	f000 fad4 	bl	8003ca0 <_fflush_r>
 80036f8:	68a1      	ldr	r1, [r4, #8]
 80036fa:	4b09      	ldr	r3, [pc, #36]	; (8003720 <cleanup_stdio+0x38>)
 80036fc:	4299      	cmp	r1, r3
 80036fe:	d002      	beq.n	8003706 <cleanup_stdio+0x1e>
 8003700:	4620      	mov	r0, r4
 8003702:	f000 facd 	bl	8003ca0 <_fflush_r>
 8003706:	68e1      	ldr	r1, [r4, #12]
 8003708:	4b06      	ldr	r3, [pc, #24]	; (8003724 <cleanup_stdio+0x3c>)
 800370a:	4299      	cmp	r1, r3
 800370c:	d004      	beq.n	8003718 <cleanup_stdio+0x30>
 800370e:	4620      	mov	r0, r4
 8003710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003714:	f000 bac4 	b.w	8003ca0 <_fflush_r>
 8003718:	bd10      	pop	{r4, pc}
 800371a:	bf00      	nop
 800371c:	20000194 	.word	0x20000194
 8003720:	200001fc 	.word	0x200001fc
 8003724:	20000264 	.word	0x20000264

08003728 <global_stdio_init.part.0>:
 8003728:	b510      	push	{r4, lr}
 800372a:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <global_stdio_init.part.0+0x30>)
 800372c:	4c0b      	ldr	r4, [pc, #44]	; (800375c <global_stdio_init.part.0+0x34>)
 800372e:	4a0c      	ldr	r2, [pc, #48]	; (8003760 <global_stdio_init.part.0+0x38>)
 8003730:	4620      	mov	r0, r4
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	2104      	movs	r1, #4
 8003736:	2200      	movs	r2, #0
 8003738:	f7ff ff94 	bl	8003664 <std>
 800373c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003740:	2201      	movs	r2, #1
 8003742:	2109      	movs	r1, #9
 8003744:	f7ff ff8e 	bl	8003664 <std>
 8003748:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800374c:	2202      	movs	r2, #2
 800374e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003752:	2112      	movs	r1, #18
 8003754:	f7ff bf86 	b.w	8003664 <std>
 8003758:	200002cc 	.word	0x200002cc
 800375c:	20000194 	.word	0x20000194
 8003760:	080036d1 	.word	0x080036d1

08003764 <__sfp_lock_acquire>:
 8003764:	4801      	ldr	r0, [pc, #4]	; (800376c <__sfp_lock_acquire+0x8>)
 8003766:	f000 b8fc 	b.w	8003962 <__retarget_lock_acquire_recursive>
 800376a:	bf00      	nop
 800376c:	200002d5 	.word	0x200002d5

08003770 <__sfp_lock_release>:
 8003770:	4801      	ldr	r0, [pc, #4]	; (8003778 <__sfp_lock_release+0x8>)
 8003772:	f000 b8f7 	b.w	8003964 <__retarget_lock_release_recursive>
 8003776:	bf00      	nop
 8003778:	200002d5 	.word	0x200002d5

0800377c <__sinit>:
 800377c:	b510      	push	{r4, lr}
 800377e:	4604      	mov	r4, r0
 8003780:	f7ff fff0 	bl	8003764 <__sfp_lock_acquire>
 8003784:	6a23      	ldr	r3, [r4, #32]
 8003786:	b11b      	cbz	r3, 8003790 <__sinit+0x14>
 8003788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800378c:	f7ff bff0 	b.w	8003770 <__sfp_lock_release>
 8003790:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <__sinit+0x28>)
 8003792:	6223      	str	r3, [r4, #32]
 8003794:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <__sinit+0x2c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1f5      	bne.n	8003788 <__sinit+0xc>
 800379c:	f7ff ffc4 	bl	8003728 <global_stdio_init.part.0>
 80037a0:	e7f2      	b.n	8003788 <__sinit+0xc>
 80037a2:	bf00      	nop
 80037a4:	080036e9 	.word	0x080036e9
 80037a8:	200002cc 	.word	0x200002cc

080037ac <_fwalk_sglue>:
 80037ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037b0:	4607      	mov	r7, r0
 80037b2:	4688      	mov	r8, r1
 80037b4:	4614      	mov	r4, r2
 80037b6:	2600      	movs	r6, #0
 80037b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037bc:	f1b9 0901 	subs.w	r9, r9, #1
 80037c0:	d505      	bpl.n	80037ce <_fwalk_sglue+0x22>
 80037c2:	6824      	ldr	r4, [r4, #0]
 80037c4:	2c00      	cmp	r4, #0
 80037c6:	d1f7      	bne.n	80037b8 <_fwalk_sglue+0xc>
 80037c8:	4630      	mov	r0, r6
 80037ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037ce:	89ab      	ldrh	r3, [r5, #12]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d907      	bls.n	80037e4 <_fwalk_sglue+0x38>
 80037d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037d8:	3301      	adds	r3, #1
 80037da:	d003      	beq.n	80037e4 <_fwalk_sglue+0x38>
 80037dc:	4629      	mov	r1, r5
 80037de:	4638      	mov	r0, r7
 80037e0:	47c0      	blx	r8
 80037e2:	4306      	orrs	r6, r0
 80037e4:	3568      	adds	r5, #104	; 0x68
 80037e6:	e7e9      	b.n	80037bc <_fwalk_sglue+0x10>

080037e8 <__sread>:
 80037e8:	b510      	push	{r4, lr}
 80037ea:	460c      	mov	r4, r1
 80037ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037f0:	f000 f868 	bl	80038c4 <_read_r>
 80037f4:	2800      	cmp	r0, #0
 80037f6:	bfab      	itete	ge
 80037f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80037fa:	89a3      	ldrhlt	r3, [r4, #12]
 80037fc:	181b      	addge	r3, r3, r0
 80037fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003802:	bfac      	ite	ge
 8003804:	6563      	strge	r3, [r4, #84]	; 0x54
 8003806:	81a3      	strhlt	r3, [r4, #12]
 8003808:	bd10      	pop	{r4, pc}

0800380a <__swrite>:
 800380a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800380e:	461f      	mov	r7, r3
 8003810:	898b      	ldrh	r3, [r1, #12]
 8003812:	4605      	mov	r5, r0
 8003814:	05db      	lsls	r3, r3, #23
 8003816:	460c      	mov	r4, r1
 8003818:	4616      	mov	r6, r2
 800381a:	d505      	bpl.n	8003828 <__swrite+0x1e>
 800381c:	2302      	movs	r3, #2
 800381e:	2200      	movs	r2, #0
 8003820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003824:	f000 f83c 	bl	80038a0 <_lseek_r>
 8003828:	89a3      	ldrh	r3, [r4, #12]
 800382a:	4632      	mov	r2, r6
 800382c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003830:	81a3      	strh	r3, [r4, #12]
 8003832:	4628      	mov	r0, r5
 8003834:	463b      	mov	r3, r7
 8003836:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800383a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800383e:	f000 b853 	b.w	80038e8 <_write_r>

08003842 <__sseek>:
 8003842:	b510      	push	{r4, lr}
 8003844:	460c      	mov	r4, r1
 8003846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800384a:	f000 f829 	bl	80038a0 <_lseek_r>
 800384e:	1c43      	adds	r3, r0, #1
 8003850:	89a3      	ldrh	r3, [r4, #12]
 8003852:	bf15      	itete	ne
 8003854:	6560      	strne	r0, [r4, #84]	; 0x54
 8003856:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800385a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800385e:	81a3      	strheq	r3, [r4, #12]
 8003860:	bf18      	it	ne
 8003862:	81a3      	strhne	r3, [r4, #12]
 8003864:	bd10      	pop	{r4, pc}

08003866 <__sclose>:
 8003866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800386a:	f000 b809 	b.w	8003880 <_close_r>

0800386e <memset>:
 800386e:	4603      	mov	r3, r0
 8003870:	4402      	add	r2, r0
 8003872:	4293      	cmp	r3, r2
 8003874:	d100      	bne.n	8003878 <memset+0xa>
 8003876:	4770      	bx	lr
 8003878:	f803 1b01 	strb.w	r1, [r3], #1
 800387c:	e7f9      	b.n	8003872 <memset+0x4>
	...

08003880 <_close_r>:
 8003880:	b538      	push	{r3, r4, r5, lr}
 8003882:	2300      	movs	r3, #0
 8003884:	4d05      	ldr	r5, [pc, #20]	; (800389c <_close_r+0x1c>)
 8003886:	4604      	mov	r4, r0
 8003888:	4608      	mov	r0, r1
 800388a:	602b      	str	r3, [r5, #0]
 800388c:	f7fd face 	bl	8000e2c <_close>
 8003890:	1c43      	adds	r3, r0, #1
 8003892:	d102      	bne.n	800389a <_close_r+0x1a>
 8003894:	682b      	ldr	r3, [r5, #0]
 8003896:	b103      	cbz	r3, 800389a <_close_r+0x1a>
 8003898:	6023      	str	r3, [r4, #0]
 800389a:	bd38      	pop	{r3, r4, r5, pc}
 800389c:	200002d0 	.word	0x200002d0

080038a0 <_lseek_r>:
 80038a0:	b538      	push	{r3, r4, r5, lr}
 80038a2:	4604      	mov	r4, r0
 80038a4:	4608      	mov	r0, r1
 80038a6:	4611      	mov	r1, r2
 80038a8:	2200      	movs	r2, #0
 80038aa:	4d05      	ldr	r5, [pc, #20]	; (80038c0 <_lseek_r+0x20>)
 80038ac:	602a      	str	r2, [r5, #0]
 80038ae:	461a      	mov	r2, r3
 80038b0:	f7fd fae0 	bl	8000e74 <_lseek>
 80038b4:	1c43      	adds	r3, r0, #1
 80038b6:	d102      	bne.n	80038be <_lseek_r+0x1e>
 80038b8:	682b      	ldr	r3, [r5, #0]
 80038ba:	b103      	cbz	r3, 80038be <_lseek_r+0x1e>
 80038bc:	6023      	str	r3, [r4, #0]
 80038be:	bd38      	pop	{r3, r4, r5, pc}
 80038c0:	200002d0 	.word	0x200002d0

080038c4 <_read_r>:
 80038c4:	b538      	push	{r3, r4, r5, lr}
 80038c6:	4604      	mov	r4, r0
 80038c8:	4608      	mov	r0, r1
 80038ca:	4611      	mov	r1, r2
 80038cc:	2200      	movs	r2, #0
 80038ce:	4d05      	ldr	r5, [pc, #20]	; (80038e4 <_read_r+0x20>)
 80038d0:	602a      	str	r2, [r5, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	f7fd fa71 	bl	8000dba <_read>
 80038d8:	1c43      	adds	r3, r0, #1
 80038da:	d102      	bne.n	80038e2 <_read_r+0x1e>
 80038dc:	682b      	ldr	r3, [r5, #0]
 80038de:	b103      	cbz	r3, 80038e2 <_read_r+0x1e>
 80038e0:	6023      	str	r3, [r4, #0]
 80038e2:	bd38      	pop	{r3, r4, r5, pc}
 80038e4:	200002d0 	.word	0x200002d0

080038e8 <_write_r>:
 80038e8:	b538      	push	{r3, r4, r5, lr}
 80038ea:	4604      	mov	r4, r0
 80038ec:	4608      	mov	r0, r1
 80038ee:	4611      	mov	r1, r2
 80038f0:	2200      	movs	r2, #0
 80038f2:	4d05      	ldr	r5, [pc, #20]	; (8003908 <_write_r+0x20>)
 80038f4:	602a      	str	r2, [r5, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	f7fd fa7c 	bl	8000df4 <_write>
 80038fc:	1c43      	adds	r3, r0, #1
 80038fe:	d102      	bne.n	8003906 <_write_r+0x1e>
 8003900:	682b      	ldr	r3, [r5, #0]
 8003902:	b103      	cbz	r3, 8003906 <_write_r+0x1e>
 8003904:	6023      	str	r3, [r4, #0]
 8003906:	bd38      	pop	{r3, r4, r5, pc}
 8003908:	200002d0 	.word	0x200002d0

0800390c <__errno>:
 800390c:	4b01      	ldr	r3, [pc, #4]	; (8003914 <__errno+0x8>)
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	20000074 	.word	0x20000074

08003918 <__libc_init_array>:
 8003918:	b570      	push	{r4, r5, r6, lr}
 800391a:	2600      	movs	r6, #0
 800391c:	4d0c      	ldr	r5, [pc, #48]	; (8003950 <__libc_init_array+0x38>)
 800391e:	4c0d      	ldr	r4, [pc, #52]	; (8003954 <__libc_init_array+0x3c>)
 8003920:	1b64      	subs	r4, r4, r5
 8003922:	10a4      	asrs	r4, r4, #2
 8003924:	42a6      	cmp	r6, r4
 8003926:	d109      	bne.n	800393c <__libc_init_array+0x24>
 8003928:	f000 fe4c 	bl	80045c4 <_init>
 800392c:	2600      	movs	r6, #0
 800392e:	4d0a      	ldr	r5, [pc, #40]	; (8003958 <__libc_init_array+0x40>)
 8003930:	4c0a      	ldr	r4, [pc, #40]	; (800395c <__libc_init_array+0x44>)
 8003932:	1b64      	subs	r4, r4, r5
 8003934:	10a4      	asrs	r4, r4, #2
 8003936:	42a6      	cmp	r6, r4
 8003938:	d105      	bne.n	8003946 <__libc_init_array+0x2e>
 800393a:	bd70      	pop	{r4, r5, r6, pc}
 800393c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003940:	4798      	blx	r3
 8003942:	3601      	adds	r6, #1
 8003944:	e7ee      	b.n	8003924 <__libc_init_array+0xc>
 8003946:	f855 3b04 	ldr.w	r3, [r5], #4
 800394a:	4798      	blx	r3
 800394c:	3601      	adds	r6, #1
 800394e:	e7f2      	b.n	8003936 <__libc_init_array+0x1e>
 8003950:	080046ec 	.word	0x080046ec
 8003954:	080046ec 	.word	0x080046ec
 8003958:	080046ec 	.word	0x080046ec
 800395c:	080046f0 	.word	0x080046f0

08003960 <__retarget_lock_init_recursive>:
 8003960:	4770      	bx	lr

08003962 <__retarget_lock_acquire_recursive>:
 8003962:	4770      	bx	lr

08003964 <__retarget_lock_release_recursive>:
 8003964:	4770      	bx	lr
	...

08003968 <__assert_func>:
 8003968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800396a:	4614      	mov	r4, r2
 800396c:	461a      	mov	r2, r3
 800396e:	4b09      	ldr	r3, [pc, #36]	; (8003994 <__assert_func+0x2c>)
 8003970:	4605      	mov	r5, r0
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68d8      	ldr	r0, [r3, #12]
 8003976:	b14c      	cbz	r4, 800398c <__assert_func+0x24>
 8003978:	4b07      	ldr	r3, [pc, #28]	; (8003998 <__assert_func+0x30>)
 800397a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800397e:	9100      	str	r1, [sp, #0]
 8003980:	462b      	mov	r3, r5
 8003982:	4906      	ldr	r1, [pc, #24]	; (800399c <__assert_func+0x34>)
 8003984:	f000 f9b4 	bl	8003cf0 <fiprintf>
 8003988:	f000 f9d4 	bl	8003d34 <abort>
 800398c:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <__assert_func+0x38>)
 800398e:	461c      	mov	r4, r3
 8003990:	e7f3      	b.n	800397a <__assert_func+0x12>
 8003992:	bf00      	nop
 8003994:	20000074 	.word	0x20000074
 8003998:	0800467d 	.word	0x0800467d
 800399c:	0800468a 	.word	0x0800468a
 80039a0:	080046b8 	.word	0x080046b8

080039a4 <_free_r>:
 80039a4:	b538      	push	{r3, r4, r5, lr}
 80039a6:	4605      	mov	r5, r0
 80039a8:	2900      	cmp	r1, #0
 80039aa:	d040      	beq.n	8003a2e <_free_r+0x8a>
 80039ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039b0:	1f0c      	subs	r4, r1, #4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	bfb8      	it	lt
 80039b6:	18e4      	addlt	r4, r4, r3
 80039b8:	f000 f8e4 	bl	8003b84 <__malloc_lock>
 80039bc:	4a1c      	ldr	r2, [pc, #112]	; (8003a30 <_free_r+0x8c>)
 80039be:	6813      	ldr	r3, [r2, #0]
 80039c0:	b933      	cbnz	r3, 80039d0 <_free_r+0x2c>
 80039c2:	6063      	str	r3, [r4, #4]
 80039c4:	6014      	str	r4, [r2, #0]
 80039c6:	4628      	mov	r0, r5
 80039c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039cc:	f000 b8e0 	b.w	8003b90 <__malloc_unlock>
 80039d0:	42a3      	cmp	r3, r4
 80039d2:	d908      	bls.n	80039e6 <_free_r+0x42>
 80039d4:	6820      	ldr	r0, [r4, #0]
 80039d6:	1821      	adds	r1, r4, r0
 80039d8:	428b      	cmp	r3, r1
 80039da:	bf01      	itttt	eq
 80039dc:	6819      	ldreq	r1, [r3, #0]
 80039de:	685b      	ldreq	r3, [r3, #4]
 80039e0:	1809      	addeq	r1, r1, r0
 80039e2:	6021      	streq	r1, [r4, #0]
 80039e4:	e7ed      	b.n	80039c2 <_free_r+0x1e>
 80039e6:	461a      	mov	r2, r3
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	b10b      	cbz	r3, 80039f0 <_free_r+0x4c>
 80039ec:	42a3      	cmp	r3, r4
 80039ee:	d9fa      	bls.n	80039e6 <_free_r+0x42>
 80039f0:	6811      	ldr	r1, [r2, #0]
 80039f2:	1850      	adds	r0, r2, r1
 80039f4:	42a0      	cmp	r0, r4
 80039f6:	d10b      	bne.n	8003a10 <_free_r+0x6c>
 80039f8:	6820      	ldr	r0, [r4, #0]
 80039fa:	4401      	add	r1, r0
 80039fc:	1850      	adds	r0, r2, r1
 80039fe:	4283      	cmp	r3, r0
 8003a00:	6011      	str	r1, [r2, #0]
 8003a02:	d1e0      	bne.n	80039c6 <_free_r+0x22>
 8003a04:	6818      	ldr	r0, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	4408      	add	r0, r1
 8003a0a:	6010      	str	r0, [r2, #0]
 8003a0c:	6053      	str	r3, [r2, #4]
 8003a0e:	e7da      	b.n	80039c6 <_free_r+0x22>
 8003a10:	d902      	bls.n	8003a18 <_free_r+0x74>
 8003a12:	230c      	movs	r3, #12
 8003a14:	602b      	str	r3, [r5, #0]
 8003a16:	e7d6      	b.n	80039c6 <_free_r+0x22>
 8003a18:	6820      	ldr	r0, [r4, #0]
 8003a1a:	1821      	adds	r1, r4, r0
 8003a1c:	428b      	cmp	r3, r1
 8003a1e:	bf01      	itttt	eq
 8003a20:	6819      	ldreq	r1, [r3, #0]
 8003a22:	685b      	ldreq	r3, [r3, #4]
 8003a24:	1809      	addeq	r1, r1, r0
 8003a26:	6021      	streq	r1, [r4, #0]
 8003a28:	6063      	str	r3, [r4, #4]
 8003a2a:	6054      	str	r4, [r2, #4]
 8003a2c:	e7cb      	b.n	80039c6 <_free_r+0x22>
 8003a2e:	bd38      	pop	{r3, r4, r5, pc}
 8003a30:	200002d8 	.word	0x200002d8

08003a34 <malloc>:
 8003a34:	4b02      	ldr	r3, [pc, #8]	; (8003a40 <malloc+0xc>)
 8003a36:	4601      	mov	r1, r0
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	f000 b823 	b.w	8003a84 <_malloc_r>
 8003a3e:	bf00      	nop
 8003a40:	20000074 	.word	0x20000074

08003a44 <sbrk_aligned>:
 8003a44:	b570      	push	{r4, r5, r6, lr}
 8003a46:	4e0e      	ldr	r6, [pc, #56]	; (8003a80 <sbrk_aligned+0x3c>)
 8003a48:	460c      	mov	r4, r1
 8003a4a:	6831      	ldr	r1, [r6, #0]
 8003a4c:	4605      	mov	r5, r0
 8003a4e:	b911      	cbnz	r1, 8003a56 <sbrk_aligned+0x12>
 8003a50:	f000 f960 	bl	8003d14 <_sbrk_r>
 8003a54:	6030      	str	r0, [r6, #0]
 8003a56:	4621      	mov	r1, r4
 8003a58:	4628      	mov	r0, r5
 8003a5a:	f000 f95b 	bl	8003d14 <_sbrk_r>
 8003a5e:	1c43      	adds	r3, r0, #1
 8003a60:	d00a      	beq.n	8003a78 <sbrk_aligned+0x34>
 8003a62:	1cc4      	adds	r4, r0, #3
 8003a64:	f024 0403 	bic.w	r4, r4, #3
 8003a68:	42a0      	cmp	r0, r4
 8003a6a:	d007      	beq.n	8003a7c <sbrk_aligned+0x38>
 8003a6c:	1a21      	subs	r1, r4, r0
 8003a6e:	4628      	mov	r0, r5
 8003a70:	f000 f950 	bl	8003d14 <_sbrk_r>
 8003a74:	3001      	adds	r0, #1
 8003a76:	d101      	bne.n	8003a7c <sbrk_aligned+0x38>
 8003a78:	f04f 34ff 	mov.w	r4, #4294967295
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	bd70      	pop	{r4, r5, r6, pc}
 8003a80:	200002dc 	.word	0x200002dc

08003a84 <_malloc_r>:
 8003a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a88:	1ccd      	adds	r5, r1, #3
 8003a8a:	f025 0503 	bic.w	r5, r5, #3
 8003a8e:	3508      	adds	r5, #8
 8003a90:	2d0c      	cmp	r5, #12
 8003a92:	bf38      	it	cc
 8003a94:	250c      	movcc	r5, #12
 8003a96:	2d00      	cmp	r5, #0
 8003a98:	4607      	mov	r7, r0
 8003a9a:	db01      	blt.n	8003aa0 <_malloc_r+0x1c>
 8003a9c:	42a9      	cmp	r1, r5
 8003a9e:	d905      	bls.n	8003aac <_malloc_r+0x28>
 8003aa0:	230c      	movs	r3, #12
 8003aa2:	2600      	movs	r6, #0
 8003aa4:	603b      	str	r3, [r7, #0]
 8003aa6:	4630      	mov	r0, r6
 8003aa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003b80 <_malloc_r+0xfc>
 8003ab0:	f000 f868 	bl	8003b84 <__malloc_lock>
 8003ab4:	f8d8 3000 	ldr.w	r3, [r8]
 8003ab8:	461c      	mov	r4, r3
 8003aba:	bb5c      	cbnz	r4, 8003b14 <_malloc_r+0x90>
 8003abc:	4629      	mov	r1, r5
 8003abe:	4638      	mov	r0, r7
 8003ac0:	f7ff ffc0 	bl	8003a44 <sbrk_aligned>
 8003ac4:	1c43      	adds	r3, r0, #1
 8003ac6:	4604      	mov	r4, r0
 8003ac8:	d155      	bne.n	8003b76 <_malloc_r+0xf2>
 8003aca:	f8d8 4000 	ldr.w	r4, [r8]
 8003ace:	4626      	mov	r6, r4
 8003ad0:	2e00      	cmp	r6, #0
 8003ad2:	d145      	bne.n	8003b60 <_malloc_r+0xdc>
 8003ad4:	2c00      	cmp	r4, #0
 8003ad6:	d048      	beq.n	8003b6a <_malloc_r+0xe6>
 8003ad8:	6823      	ldr	r3, [r4, #0]
 8003ada:	4631      	mov	r1, r6
 8003adc:	4638      	mov	r0, r7
 8003ade:	eb04 0903 	add.w	r9, r4, r3
 8003ae2:	f000 f917 	bl	8003d14 <_sbrk_r>
 8003ae6:	4581      	cmp	r9, r0
 8003ae8:	d13f      	bne.n	8003b6a <_malloc_r+0xe6>
 8003aea:	6821      	ldr	r1, [r4, #0]
 8003aec:	4638      	mov	r0, r7
 8003aee:	1a6d      	subs	r5, r5, r1
 8003af0:	4629      	mov	r1, r5
 8003af2:	f7ff ffa7 	bl	8003a44 <sbrk_aligned>
 8003af6:	3001      	adds	r0, #1
 8003af8:	d037      	beq.n	8003b6a <_malloc_r+0xe6>
 8003afa:	6823      	ldr	r3, [r4, #0]
 8003afc:	442b      	add	r3, r5
 8003afe:	6023      	str	r3, [r4, #0]
 8003b00:	f8d8 3000 	ldr.w	r3, [r8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d038      	beq.n	8003b7a <_malloc_r+0xf6>
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	42a2      	cmp	r2, r4
 8003b0c:	d12b      	bne.n	8003b66 <_malloc_r+0xe2>
 8003b0e:	2200      	movs	r2, #0
 8003b10:	605a      	str	r2, [r3, #4]
 8003b12:	e00f      	b.n	8003b34 <_malloc_r+0xb0>
 8003b14:	6822      	ldr	r2, [r4, #0]
 8003b16:	1b52      	subs	r2, r2, r5
 8003b18:	d41f      	bmi.n	8003b5a <_malloc_r+0xd6>
 8003b1a:	2a0b      	cmp	r2, #11
 8003b1c:	d917      	bls.n	8003b4e <_malloc_r+0xca>
 8003b1e:	1961      	adds	r1, r4, r5
 8003b20:	42a3      	cmp	r3, r4
 8003b22:	6025      	str	r5, [r4, #0]
 8003b24:	bf18      	it	ne
 8003b26:	6059      	strne	r1, [r3, #4]
 8003b28:	6863      	ldr	r3, [r4, #4]
 8003b2a:	bf08      	it	eq
 8003b2c:	f8c8 1000 	streq.w	r1, [r8]
 8003b30:	5162      	str	r2, [r4, r5]
 8003b32:	604b      	str	r3, [r1, #4]
 8003b34:	4638      	mov	r0, r7
 8003b36:	f104 060b 	add.w	r6, r4, #11
 8003b3a:	f000 f829 	bl	8003b90 <__malloc_unlock>
 8003b3e:	f026 0607 	bic.w	r6, r6, #7
 8003b42:	1d23      	adds	r3, r4, #4
 8003b44:	1af2      	subs	r2, r6, r3
 8003b46:	d0ae      	beq.n	8003aa6 <_malloc_r+0x22>
 8003b48:	1b9b      	subs	r3, r3, r6
 8003b4a:	50a3      	str	r3, [r4, r2]
 8003b4c:	e7ab      	b.n	8003aa6 <_malloc_r+0x22>
 8003b4e:	42a3      	cmp	r3, r4
 8003b50:	6862      	ldr	r2, [r4, #4]
 8003b52:	d1dd      	bne.n	8003b10 <_malloc_r+0x8c>
 8003b54:	f8c8 2000 	str.w	r2, [r8]
 8003b58:	e7ec      	b.n	8003b34 <_malloc_r+0xb0>
 8003b5a:	4623      	mov	r3, r4
 8003b5c:	6864      	ldr	r4, [r4, #4]
 8003b5e:	e7ac      	b.n	8003aba <_malloc_r+0x36>
 8003b60:	4634      	mov	r4, r6
 8003b62:	6876      	ldr	r6, [r6, #4]
 8003b64:	e7b4      	b.n	8003ad0 <_malloc_r+0x4c>
 8003b66:	4613      	mov	r3, r2
 8003b68:	e7cc      	b.n	8003b04 <_malloc_r+0x80>
 8003b6a:	230c      	movs	r3, #12
 8003b6c:	4638      	mov	r0, r7
 8003b6e:	603b      	str	r3, [r7, #0]
 8003b70:	f000 f80e 	bl	8003b90 <__malloc_unlock>
 8003b74:	e797      	b.n	8003aa6 <_malloc_r+0x22>
 8003b76:	6025      	str	r5, [r4, #0]
 8003b78:	e7dc      	b.n	8003b34 <_malloc_r+0xb0>
 8003b7a:	605b      	str	r3, [r3, #4]
 8003b7c:	deff      	udf	#255	; 0xff
 8003b7e:	bf00      	nop
 8003b80:	200002d8 	.word	0x200002d8

08003b84 <__malloc_lock>:
 8003b84:	4801      	ldr	r0, [pc, #4]	; (8003b8c <__malloc_lock+0x8>)
 8003b86:	f7ff beec 	b.w	8003962 <__retarget_lock_acquire_recursive>
 8003b8a:	bf00      	nop
 8003b8c:	200002d4 	.word	0x200002d4

08003b90 <__malloc_unlock>:
 8003b90:	4801      	ldr	r0, [pc, #4]	; (8003b98 <__malloc_unlock+0x8>)
 8003b92:	f7ff bee7 	b.w	8003964 <__retarget_lock_release_recursive>
 8003b96:	bf00      	nop
 8003b98:	200002d4 	.word	0x200002d4

08003b9c <__sflush_r>:
 8003b9c:	898a      	ldrh	r2, [r1, #12]
 8003b9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba0:	4605      	mov	r5, r0
 8003ba2:	0710      	lsls	r0, r2, #28
 8003ba4:	460c      	mov	r4, r1
 8003ba6:	d457      	bmi.n	8003c58 <__sflush_r+0xbc>
 8003ba8:	684b      	ldr	r3, [r1, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	dc04      	bgt.n	8003bb8 <__sflush_r+0x1c>
 8003bae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	dc01      	bgt.n	8003bb8 <__sflush_r+0x1c>
 8003bb4:	2000      	movs	r0, #0
 8003bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bba:	2e00      	cmp	r6, #0
 8003bbc:	d0fa      	beq.n	8003bb4 <__sflush_r+0x18>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003bc4:	682f      	ldr	r7, [r5, #0]
 8003bc6:	6a21      	ldr	r1, [r4, #32]
 8003bc8:	602b      	str	r3, [r5, #0]
 8003bca:	d032      	beq.n	8003c32 <__sflush_r+0x96>
 8003bcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003bce:	89a3      	ldrh	r3, [r4, #12]
 8003bd0:	075a      	lsls	r2, r3, #29
 8003bd2:	d505      	bpl.n	8003be0 <__sflush_r+0x44>
 8003bd4:	6863      	ldr	r3, [r4, #4]
 8003bd6:	1ac0      	subs	r0, r0, r3
 8003bd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bda:	b10b      	cbz	r3, 8003be0 <__sflush_r+0x44>
 8003bdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bde:	1ac0      	subs	r0, r0, r3
 8003be0:	2300      	movs	r3, #0
 8003be2:	4602      	mov	r2, r0
 8003be4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003be6:	4628      	mov	r0, r5
 8003be8:	6a21      	ldr	r1, [r4, #32]
 8003bea:	47b0      	blx	r6
 8003bec:	1c43      	adds	r3, r0, #1
 8003bee:	89a3      	ldrh	r3, [r4, #12]
 8003bf0:	d106      	bne.n	8003c00 <__sflush_r+0x64>
 8003bf2:	6829      	ldr	r1, [r5, #0]
 8003bf4:	291d      	cmp	r1, #29
 8003bf6:	d82b      	bhi.n	8003c50 <__sflush_r+0xb4>
 8003bf8:	4a28      	ldr	r2, [pc, #160]	; (8003c9c <__sflush_r+0x100>)
 8003bfa:	410a      	asrs	r2, r1
 8003bfc:	07d6      	lsls	r6, r2, #31
 8003bfe:	d427      	bmi.n	8003c50 <__sflush_r+0xb4>
 8003c00:	2200      	movs	r2, #0
 8003c02:	6062      	str	r2, [r4, #4]
 8003c04:	6922      	ldr	r2, [r4, #16]
 8003c06:	04d9      	lsls	r1, r3, #19
 8003c08:	6022      	str	r2, [r4, #0]
 8003c0a:	d504      	bpl.n	8003c16 <__sflush_r+0x7a>
 8003c0c:	1c42      	adds	r2, r0, #1
 8003c0e:	d101      	bne.n	8003c14 <__sflush_r+0x78>
 8003c10:	682b      	ldr	r3, [r5, #0]
 8003c12:	b903      	cbnz	r3, 8003c16 <__sflush_r+0x7a>
 8003c14:	6560      	str	r0, [r4, #84]	; 0x54
 8003c16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c18:	602f      	str	r7, [r5, #0]
 8003c1a:	2900      	cmp	r1, #0
 8003c1c:	d0ca      	beq.n	8003bb4 <__sflush_r+0x18>
 8003c1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c22:	4299      	cmp	r1, r3
 8003c24:	d002      	beq.n	8003c2c <__sflush_r+0x90>
 8003c26:	4628      	mov	r0, r5
 8003c28:	f7ff febc 	bl	80039a4 <_free_r>
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	6360      	str	r0, [r4, #52]	; 0x34
 8003c30:	e7c1      	b.n	8003bb6 <__sflush_r+0x1a>
 8003c32:	2301      	movs	r3, #1
 8003c34:	4628      	mov	r0, r5
 8003c36:	47b0      	blx	r6
 8003c38:	1c41      	adds	r1, r0, #1
 8003c3a:	d1c8      	bne.n	8003bce <__sflush_r+0x32>
 8003c3c:	682b      	ldr	r3, [r5, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0c5      	beq.n	8003bce <__sflush_r+0x32>
 8003c42:	2b1d      	cmp	r3, #29
 8003c44:	d001      	beq.n	8003c4a <__sflush_r+0xae>
 8003c46:	2b16      	cmp	r3, #22
 8003c48:	d101      	bne.n	8003c4e <__sflush_r+0xb2>
 8003c4a:	602f      	str	r7, [r5, #0]
 8003c4c:	e7b2      	b.n	8003bb4 <__sflush_r+0x18>
 8003c4e:	89a3      	ldrh	r3, [r4, #12]
 8003c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c54:	81a3      	strh	r3, [r4, #12]
 8003c56:	e7ae      	b.n	8003bb6 <__sflush_r+0x1a>
 8003c58:	690f      	ldr	r7, [r1, #16]
 8003c5a:	2f00      	cmp	r7, #0
 8003c5c:	d0aa      	beq.n	8003bb4 <__sflush_r+0x18>
 8003c5e:	0793      	lsls	r3, r2, #30
 8003c60:	bf18      	it	ne
 8003c62:	2300      	movne	r3, #0
 8003c64:	680e      	ldr	r6, [r1, #0]
 8003c66:	bf08      	it	eq
 8003c68:	694b      	ldreq	r3, [r1, #20]
 8003c6a:	1bf6      	subs	r6, r6, r7
 8003c6c:	600f      	str	r7, [r1, #0]
 8003c6e:	608b      	str	r3, [r1, #8]
 8003c70:	2e00      	cmp	r6, #0
 8003c72:	dd9f      	ble.n	8003bb4 <__sflush_r+0x18>
 8003c74:	4633      	mov	r3, r6
 8003c76:	463a      	mov	r2, r7
 8003c78:	4628      	mov	r0, r5
 8003c7a:	6a21      	ldr	r1, [r4, #32]
 8003c7c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003c80:	47e0      	blx	ip
 8003c82:	2800      	cmp	r0, #0
 8003c84:	dc06      	bgt.n	8003c94 <__sflush_r+0xf8>
 8003c86:	89a3      	ldrh	r3, [r4, #12]
 8003c88:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c90:	81a3      	strh	r3, [r4, #12]
 8003c92:	e790      	b.n	8003bb6 <__sflush_r+0x1a>
 8003c94:	4407      	add	r7, r0
 8003c96:	1a36      	subs	r6, r6, r0
 8003c98:	e7ea      	b.n	8003c70 <__sflush_r+0xd4>
 8003c9a:	bf00      	nop
 8003c9c:	dfbffffe 	.word	0xdfbffffe

08003ca0 <_fflush_r>:
 8003ca0:	b538      	push	{r3, r4, r5, lr}
 8003ca2:	690b      	ldr	r3, [r1, #16]
 8003ca4:	4605      	mov	r5, r0
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	b913      	cbnz	r3, 8003cb0 <_fflush_r+0x10>
 8003caa:	2500      	movs	r5, #0
 8003cac:	4628      	mov	r0, r5
 8003cae:	bd38      	pop	{r3, r4, r5, pc}
 8003cb0:	b118      	cbz	r0, 8003cba <_fflush_r+0x1a>
 8003cb2:	6a03      	ldr	r3, [r0, #32]
 8003cb4:	b90b      	cbnz	r3, 8003cba <_fflush_r+0x1a>
 8003cb6:	f7ff fd61 	bl	800377c <__sinit>
 8003cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f3      	beq.n	8003caa <_fflush_r+0xa>
 8003cc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003cc4:	07d0      	lsls	r0, r2, #31
 8003cc6:	d404      	bmi.n	8003cd2 <_fflush_r+0x32>
 8003cc8:	0599      	lsls	r1, r3, #22
 8003cca:	d402      	bmi.n	8003cd2 <_fflush_r+0x32>
 8003ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cce:	f7ff fe48 	bl	8003962 <__retarget_lock_acquire_recursive>
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	4621      	mov	r1, r4
 8003cd6:	f7ff ff61 	bl	8003b9c <__sflush_r>
 8003cda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cdc:	4605      	mov	r5, r0
 8003cde:	07da      	lsls	r2, r3, #31
 8003ce0:	d4e4      	bmi.n	8003cac <_fflush_r+0xc>
 8003ce2:	89a3      	ldrh	r3, [r4, #12]
 8003ce4:	059b      	lsls	r3, r3, #22
 8003ce6:	d4e1      	bmi.n	8003cac <_fflush_r+0xc>
 8003ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cea:	f7ff fe3b 	bl	8003964 <__retarget_lock_release_recursive>
 8003cee:	e7dd      	b.n	8003cac <_fflush_r+0xc>

08003cf0 <fiprintf>:
 8003cf0:	b40e      	push	{r1, r2, r3}
 8003cf2:	b503      	push	{r0, r1, lr}
 8003cf4:	4601      	mov	r1, r0
 8003cf6:	ab03      	add	r3, sp, #12
 8003cf8:	4805      	ldr	r0, [pc, #20]	; (8003d10 <fiprintf+0x20>)
 8003cfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cfe:	6800      	ldr	r0, [r0, #0]
 8003d00:	9301      	str	r3, [sp, #4]
 8003d02:	f000 f845 	bl	8003d90 <_vfiprintf_r>
 8003d06:	b002      	add	sp, #8
 8003d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d0c:	b003      	add	sp, #12
 8003d0e:	4770      	bx	lr
 8003d10:	20000074 	.word	0x20000074

08003d14 <_sbrk_r>:
 8003d14:	b538      	push	{r3, r4, r5, lr}
 8003d16:	2300      	movs	r3, #0
 8003d18:	4d05      	ldr	r5, [pc, #20]	; (8003d30 <_sbrk_r+0x1c>)
 8003d1a:	4604      	mov	r4, r0
 8003d1c:	4608      	mov	r0, r1
 8003d1e:	602b      	str	r3, [r5, #0]
 8003d20:	f7fd f8b4 	bl	8000e8c <_sbrk>
 8003d24:	1c43      	adds	r3, r0, #1
 8003d26:	d102      	bne.n	8003d2e <_sbrk_r+0x1a>
 8003d28:	682b      	ldr	r3, [r5, #0]
 8003d2a:	b103      	cbz	r3, 8003d2e <_sbrk_r+0x1a>
 8003d2c:	6023      	str	r3, [r4, #0]
 8003d2e:	bd38      	pop	{r3, r4, r5, pc}
 8003d30:	200002d0 	.word	0x200002d0

08003d34 <abort>:
 8003d34:	2006      	movs	r0, #6
 8003d36:	b508      	push	{r3, lr}
 8003d38:	f000 fb96 	bl	8004468 <raise>
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	f7fd f832 	bl	8000da6 <_exit>

08003d42 <__sfputc_r>:
 8003d42:	6893      	ldr	r3, [r2, #8]
 8003d44:	b410      	push	{r4}
 8003d46:	3b01      	subs	r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	6093      	str	r3, [r2, #8]
 8003d4c:	da07      	bge.n	8003d5e <__sfputc_r+0x1c>
 8003d4e:	6994      	ldr	r4, [r2, #24]
 8003d50:	42a3      	cmp	r3, r4
 8003d52:	db01      	blt.n	8003d58 <__sfputc_r+0x16>
 8003d54:	290a      	cmp	r1, #10
 8003d56:	d102      	bne.n	8003d5e <__sfputc_r+0x1c>
 8003d58:	bc10      	pop	{r4}
 8003d5a:	f000 bac7 	b.w	80042ec <__swbuf_r>
 8003d5e:	6813      	ldr	r3, [r2, #0]
 8003d60:	1c58      	adds	r0, r3, #1
 8003d62:	6010      	str	r0, [r2, #0]
 8003d64:	7019      	strb	r1, [r3, #0]
 8003d66:	4608      	mov	r0, r1
 8003d68:	bc10      	pop	{r4}
 8003d6a:	4770      	bx	lr

08003d6c <__sfputs_r>:
 8003d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6e:	4606      	mov	r6, r0
 8003d70:	460f      	mov	r7, r1
 8003d72:	4614      	mov	r4, r2
 8003d74:	18d5      	adds	r5, r2, r3
 8003d76:	42ac      	cmp	r4, r5
 8003d78:	d101      	bne.n	8003d7e <__sfputs_r+0x12>
 8003d7a:	2000      	movs	r0, #0
 8003d7c:	e007      	b.n	8003d8e <__sfputs_r+0x22>
 8003d7e:	463a      	mov	r2, r7
 8003d80:	4630      	mov	r0, r6
 8003d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d86:	f7ff ffdc 	bl	8003d42 <__sfputc_r>
 8003d8a:	1c43      	adds	r3, r0, #1
 8003d8c:	d1f3      	bne.n	8003d76 <__sfputs_r+0xa>
 8003d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003d90 <_vfiprintf_r>:
 8003d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d94:	460d      	mov	r5, r1
 8003d96:	4614      	mov	r4, r2
 8003d98:	4698      	mov	r8, r3
 8003d9a:	4606      	mov	r6, r0
 8003d9c:	b09d      	sub	sp, #116	; 0x74
 8003d9e:	b118      	cbz	r0, 8003da8 <_vfiprintf_r+0x18>
 8003da0:	6a03      	ldr	r3, [r0, #32]
 8003da2:	b90b      	cbnz	r3, 8003da8 <_vfiprintf_r+0x18>
 8003da4:	f7ff fcea 	bl	800377c <__sinit>
 8003da8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003daa:	07d9      	lsls	r1, r3, #31
 8003dac:	d405      	bmi.n	8003dba <_vfiprintf_r+0x2a>
 8003dae:	89ab      	ldrh	r3, [r5, #12]
 8003db0:	059a      	lsls	r2, r3, #22
 8003db2:	d402      	bmi.n	8003dba <_vfiprintf_r+0x2a>
 8003db4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003db6:	f7ff fdd4 	bl	8003962 <__retarget_lock_acquire_recursive>
 8003dba:	89ab      	ldrh	r3, [r5, #12]
 8003dbc:	071b      	lsls	r3, r3, #28
 8003dbe:	d501      	bpl.n	8003dc4 <_vfiprintf_r+0x34>
 8003dc0:	692b      	ldr	r3, [r5, #16]
 8003dc2:	b99b      	cbnz	r3, 8003dec <_vfiprintf_r+0x5c>
 8003dc4:	4629      	mov	r1, r5
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	f000 face 	bl	8004368 <__swsetup_r>
 8003dcc:	b170      	cbz	r0, 8003dec <_vfiprintf_r+0x5c>
 8003dce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003dd0:	07dc      	lsls	r4, r3, #31
 8003dd2:	d504      	bpl.n	8003dde <_vfiprintf_r+0x4e>
 8003dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd8:	b01d      	add	sp, #116	; 0x74
 8003dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dde:	89ab      	ldrh	r3, [r5, #12]
 8003de0:	0598      	lsls	r0, r3, #22
 8003de2:	d4f7      	bmi.n	8003dd4 <_vfiprintf_r+0x44>
 8003de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003de6:	f7ff fdbd 	bl	8003964 <__retarget_lock_release_recursive>
 8003dea:	e7f3      	b.n	8003dd4 <_vfiprintf_r+0x44>
 8003dec:	2300      	movs	r3, #0
 8003dee:	9309      	str	r3, [sp, #36]	; 0x24
 8003df0:	2320      	movs	r3, #32
 8003df2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003df6:	2330      	movs	r3, #48	; 0x30
 8003df8:	f04f 0901 	mov.w	r9, #1
 8003dfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e00:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003fb0 <_vfiprintf_r+0x220>
 8003e04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e08:	4623      	mov	r3, r4
 8003e0a:	469a      	mov	sl, r3
 8003e0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e10:	b10a      	cbz	r2, 8003e16 <_vfiprintf_r+0x86>
 8003e12:	2a25      	cmp	r2, #37	; 0x25
 8003e14:	d1f9      	bne.n	8003e0a <_vfiprintf_r+0x7a>
 8003e16:	ebba 0b04 	subs.w	fp, sl, r4
 8003e1a:	d00b      	beq.n	8003e34 <_vfiprintf_r+0xa4>
 8003e1c:	465b      	mov	r3, fp
 8003e1e:	4622      	mov	r2, r4
 8003e20:	4629      	mov	r1, r5
 8003e22:	4630      	mov	r0, r6
 8003e24:	f7ff ffa2 	bl	8003d6c <__sfputs_r>
 8003e28:	3001      	adds	r0, #1
 8003e2a:	f000 80a9 	beq.w	8003f80 <_vfiprintf_r+0x1f0>
 8003e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e30:	445a      	add	r2, fp
 8003e32:	9209      	str	r2, [sp, #36]	; 0x24
 8003e34:	f89a 3000 	ldrb.w	r3, [sl]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 80a1 	beq.w	8003f80 <_vfiprintf_r+0x1f0>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	f04f 32ff 	mov.w	r2, #4294967295
 8003e44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e48:	f10a 0a01 	add.w	sl, sl, #1
 8003e4c:	9304      	str	r3, [sp, #16]
 8003e4e:	9307      	str	r3, [sp, #28]
 8003e50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e54:	931a      	str	r3, [sp, #104]	; 0x68
 8003e56:	4654      	mov	r4, sl
 8003e58:	2205      	movs	r2, #5
 8003e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e5e:	4854      	ldr	r0, [pc, #336]	; (8003fb0 <_vfiprintf_r+0x220>)
 8003e60:	f000 fb1e 	bl	80044a0 <memchr>
 8003e64:	9a04      	ldr	r2, [sp, #16]
 8003e66:	b9d8      	cbnz	r0, 8003ea0 <_vfiprintf_r+0x110>
 8003e68:	06d1      	lsls	r1, r2, #27
 8003e6a:	bf44      	itt	mi
 8003e6c:	2320      	movmi	r3, #32
 8003e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e72:	0713      	lsls	r3, r2, #28
 8003e74:	bf44      	itt	mi
 8003e76:	232b      	movmi	r3, #43	; 0x2b
 8003e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8003e80:	2b2a      	cmp	r3, #42	; 0x2a
 8003e82:	d015      	beq.n	8003eb0 <_vfiprintf_r+0x120>
 8003e84:	4654      	mov	r4, sl
 8003e86:	2000      	movs	r0, #0
 8003e88:	f04f 0c0a 	mov.w	ip, #10
 8003e8c:	9a07      	ldr	r2, [sp, #28]
 8003e8e:	4621      	mov	r1, r4
 8003e90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e94:	3b30      	subs	r3, #48	; 0x30
 8003e96:	2b09      	cmp	r3, #9
 8003e98:	d94d      	bls.n	8003f36 <_vfiprintf_r+0x1a6>
 8003e9a:	b1b0      	cbz	r0, 8003eca <_vfiprintf_r+0x13a>
 8003e9c:	9207      	str	r2, [sp, #28]
 8003e9e:	e014      	b.n	8003eca <_vfiprintf_r+0x13a>
 8003ea0:	eba0 0308 	sub.w	r3, r0, r8
 8003ea4:	fa09 f303 	lsl.w	r3, r9, r3
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	46a2      	mov	sl, r4
 8003eac:	9304      	str	r3, [sp, #16]
 8003eae:	e7d2      	b.n	8003e56 <_vfiprintf_r+0xc6>
 8003eb0:	9b03      	ldr	r3, [sp, #12]
 8003eb2:	1d19      	adds	r1, r3, #4
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	9103      	str	r1, [sp, #12]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	bfbb      	ittet	lt
 8003ebc:	425b      	neglt	r3, r3
 8003ebe:	f042 0202 	orrlt.w	r2, r2, #2
 8003ec2:	9307      	strge	r3, [sp, #28]
 8003ec4:	9307      	strlt	r3, [sp, #28]
 8003ec6:	bfb8      	it	lt
 8003ec8:	9204      	strlt	r2, [sp, #16]
 8003eca:	7823      	ldrb	r3, [r4, #0]
 8003ecc:	2b2e      	cmp	r3, #46	; 0x2e
 8003ece:	d10c      	bne.n	8003eea <_vfiprintf_r+0x15a>
 8003ed0:	7863      	ldrb	r3, [r4, #1]
 8003ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ed4:	d134      	bne.n	8003f40 <_vfiprintf_r+0x1b0>
 8003ed6:	9b03      	ldr	r3, [sp, #12]
 8003ed8:	3402      	adds	r4, #2
 8003eda:	1d1a      	adds	r2, r3, #4
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	9203      	str	r2, [sp, #12]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	bfb8      	it	lt
 8003ee4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ee8:	9305      	str	r3, [sp, #20]
 8003eea:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003fb4 <_vfiprintf_r+0x224>
 8003eee:	2203      	movs	r2, #3
 8003ef0:	4650      	mov	r0, sl
 8003ef2:	7821      	ldrb	r1, [r4, #0]
 8003ef4:	f000 fad4 	bl	80044a0 <memchr>
 8003ef8:	b138      	cbz	r0, 8003f0a <_vfiprintf_r+0x17a>
 8003efa:	2240      	movs	r2, #64	; 0x40
 8003efc:	9b04      	ldr	r3, [sp, #16]
 8003efe:	eba0 000a 	sub.w	r0, r0, sl
 8003f02:	4082      	lsls	r2, r0
 8003f04:	4313      	orrs	r3, r2
 8003f06:	3401      	adds	r4, #1
 8003f08:	9304      	str	r3, [sp, #16]
 8003f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f0e:	2206      	movs	r2, #6
 8003f10:	4829      	ldr	r0, [pc, #164]	; (8003fb8 <_vfiprintf_r+0x228>)
 8003f12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f16:	f000 fac3 	bl	80044a0 <memchr>
 8003f1a:	2800      	cmp	r0, #0
 8003f1c:	d03f      	beq.n	8003f9e <_vfiprintf_r+0x20e>
 8003f1e:	4b27      	ldr	r3, [pc, #156]	; (8003fbc <_vfiprintf_r+0x22c>)
 8003f20:	bb1b      	cbnz	r3, 8003f6a <_vfiprintf_r+0x1da>
 8003f22:	9b03      	ldr	r3, [sp, #12]
 8003f24:	3307      	adds	r3, #7
 8003f26:	f023 0307 	bic.w	r3, r3, #7
 8003f2a:	3308      	adds	r3, #8
 8003f2c:	9303      	str	r3, [sp, #12]
 8003f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f30:	443b      	add	r3, r7
 8003f32:	9309      	str	r3, [sp, #36]	; 0x24
 8003f34:	e768      	b.n	8003e08 <_vfiprintf_r+0x78>
 8003f36:	460c      	mov	r4, r1
 8003f38:	2001      	movs	r0, #1
 8003f3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f3e:	e7a6      	b.n	8003e8e <_vfiprintf_r+0xfe>
 8003f40:	2300      	movs	r3, #0
 8003f42:	f04f 0c0a 	mov.w	ip, #10
 8003f46:	4619      	mov	r1, r3
 8003f48:	3401      	adds	r4, #1
 8003f4a:	9305      	str	r3, [sp, #20]
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f52:	3a30      	subs	r2, #48	; 0x30
 8003f54:	2a09      	cmp	r2, #9
 8003f56:	d903      	bls.n	8003f60 <_vfiprintf_r+0x1d0>
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0c6      	beq.n	8003eea <_vfiprintf_r+0x15a>
 8003f5c:	9105      	str	r1, [sp, #20]
 8003f5e:	e7c4      	b.n	8003eea <_vfiprintf_r+0x15a>
 8003f60:	4604      	mov	r4, r0
 8003f62:	2301      	movs	r3, #1
 8003f64:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f68:	e7f0      	b.n	8003f4c <_vfiprintf_r+0x1bc>
 8003f6a:	ab03      	add	r3, sp, #12
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	462a      	mov	r2, r5
 8003f70:	4630      	mov	r0, r6
 8003f72:	4b13      	ldr	r3, [pc, #76]	; (8003fc0 <_vfiprintf_r+0x230>)
 8003f74:	a904      	add	r1, sp, #16
 8003f76:	f3af 8000 	nop.w
 8003f7a:	4607      	mov	r7, r0
 8003f7c:	1c78      	adds	r0, r7, #1
 8003f7e:	d1d6      	bne.n	8003f2e <_vfiprintf_r+0x19e>
 8003f80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f82:	07d9      	lsls	r1, r3, #31
 8003f84:	d405      	bmi.n	8003f92 <_vfiprintf_r+0x202>
 8003f86:	89ab      	ldrh	r3, [r5, #12]
 8003f88:	059a      	lsls	r2, r3, #22
 8003f8a:	d402      	bmi.n	8003f92 <_vfiprintf_r+0x202>
 8003f8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f8e:	f7ff fce9 	bl	8003964 <__retarget_lock_release_recursive>
 8003f92:	89ab      	ldrh	r3, [r5, #12]
 8003f94:	065b      	lsls	r3, r3, #25
 8003f96:	f53f af1d 	bmi.w	8003dd4 <_vfiprintf_r+0x44>
 8003f9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f9c:	e71c      	b.n	8003dd8 <_vfiprintf_r+0x48>
 8003f9e:	ab03      	add	r3, sp, #12
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	462a      	mov	r2, r5
 8003fa4:	4630      	mov	r0, r6
 8003fa6:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <_vfiprintf_r+0x230>)
 8003fa8:	a904      	add	r1, sp, #16
 8003faa:	f000 f87d 	bl	80040a8 <_printf_i>
 8003fae:	e7e4      	b.n	8003f7a <_vfiprintf_r+0x1ea>
 8003fb0:	080046b9 	.word	0x080046b9
 8003fb4:	080046bf 	.word	0x080046bf
 8003fb8:	080046c3 	.word	0x080046c3
 8003fbc:	00000000 	.word	0x00000000
 8003fc0:	08003d6d 	.word	0x08003d6d

08003fc4 <_printf_common>:
 8003fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc8:	4616      	mov	r6, r2
 8003fca:	4699      	mov	r9, r3
 8003fcc:	688a      	ldr	r2, [r1, #8]
 8003fce:	690b      	ldr	r3, [r1, #16]
 8003fd0:	4607      	mov	r7, r0
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	bfb8      	it	lt
 8003fd6:	4613      	movlt	r3, r2
 8003fd8:	6033      	str	r3, [r6, #0]
 8003fda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fde:	460c      	mov	r4, r1
 8003fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fe4:	b10a      	cbz	r2, 8003fea <_printf_common+0x26>
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	6033      	str	r3, [r6, #0]
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	0699      	lsls	r1, r3, #26
 8003fee:	bf42      	ittt	mi
 8003ff0:	6833      	ldrmi	r3, [r6, #0]
 8003ff2:	3302      	addmi	r3, #2
 8003ff4:	6033      	strmi	r3, [r6, #0]
 8003ff6:	6825      	ldr	r5, [r4, #0]
 8003ff8:	f015 0506 	ands.w	r5, r5, #6
 8003ffc:	d106      	bne.n	800400c <_printf_common+0x48>
 8003ffe:	f104 0a19 	add.w	sl, r4, #25
 8004002:	68e3      	ldr	r3, [r4, #12]
 8004004:	6832      	ldr	r2, [r6, #0]
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	42ab      	cmp	r3, r5
 800400a:	dc2b      	bgt.n	8004064 <_printf_common+0xa0>
 800400c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004010:	1e13      	subs	r3, r2, #0
 8004012:	6822      	ldr	r2, [r4, #0]
 8004014:	bf18      	it	ne
 8004016:	2301      	movne	r3, #1
 8004018:	0692      	lsls	r2, r2, #26
 800401a:	d430      	bmi.n	800407e <_printf_common+0xba>
 800401c:	4649      	mov	r1, r9
 800401e:	4638      	mov	r0, r7
 8004020:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004024:	47c0      	blx	r8
 8004026:	3001      	adds	r0, #1
 8004028:	d023      	beq.n	8004072 <_printf_common+0xae>
 800402a:	6823      	ldr	r3, [r4, #0]
 800402c:	6922      	ldr	r2, [r4, #16]
 800402e:	f003 0306 	and.w	r3, r3, #6
 8004032:	2b04      	cmp	r3, #4
 8004034:	bf14      	ite	ne
 8004036:	2500      	movne	r5, #0
 8004038:	6833      	ldreq	r3, [r6, #0]
 800403a:	f04f 0600 	mov.w	r6, #0
 800403e:	bf08      	it	eq
 8004040:	68e5      	ldreq	r5, [r4, #12]
 8004042:	f104 041a 	add.w	r4, r4, #26
 8004046:	bf08      	it	eq
 8004048:	1aed      	subeq	r5, r5, r3
 800404a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800404e:	bf08      	it	eq
 8004050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004054:	4293      	cmp	r3, r2
 8004056:	bfc4      	itt	gt
 8004058:	1a9b      	subgt	r3, r3, r2
 800405a:	18ed      	addgt	r5, r5, r3
 800405c:	42b5      	cmp	r5, r6
 800405e:	d11a      	bne.n	8004096 <_printf_common+0xd2>
 8004060:	2000      	movs	r0, #0
 8004062:	e008      	b.n	8004076 <_printf_common+0xb2>
 8004064:	2301      	movs	r3, #1
 8004066:	4652      	mov	r2, sl
 8004068:	4649      	mov	r1, r9
 800406a:	4638      	mov	r0, r7
 800406c:	47c0      	blx	r8
 800406e:	3001      	adds	r0, #1
 8004070:	d103      	bne.n	800407a <_printf_common+0xb6>
 8004072:	f04f 30ff 	mov.w	r0, #4294967295
 8004076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800407a:	3501      	adds	r5, #1
 800407c:	e7c1      	b.n	8004002 <_printf_common+0x3e>
 800407e:	2030      	movs	r0, #48	; 0x30
 8004080:	18e1      	adds	r1, r4, r3
 8004082:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800408c:	4422      	add	r2, r4
 800408e:	3302      	adds	r3, #2
 8004090:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004094:	e7c2      	b.n	800401c <_printf_common+0x58>
 8004096:	2301      	movs	r3, #1
 8004098:	4622      	mov	r2, r4
 800409a:	4649      	mov	r1, r9
 800409c:	4638      	mov	r0, r7
 800409e:	47c0      	blx	r8
 80040a0:	3001      	adds	r0, #1
 80040a2:	d0e6      	beq.n	8004072 <_printf_common+0xae>
 80040a4:	3601      	adds	r6, #1
 80040a6:	e7d9      	b.n	800405c <_printf_common+0x98>

080040a8 <_printf_i>:
 80040a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040ac:	7e0f      	ldrb	r7, [r1, #24]
 80040ae:	4691      	mov	r9, r2
 80040b0:	2f78      	cmp	r7, #120	; 0x78
 80040b2:	4680      	mov	r8, r0
 80040b4:	460c      	mov	r4, r1
 80040b6:	469a      	mov	sl, r3
 80040b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040be:	d807      	bhi.n	80040d0 <_printf_i+0x28>
 80040c0:	2f62      	cmp	r7, #98	; 0x62
 80040c2:	d80a      	bhi.n	80040da <_printf_i+0x32>
 80040c4:	2f00      	cmp	r7, #0
 80040c6:	f000 80d5 	beq.w	8004274 <_printf_i+0x1cc>
 80040ca:	2f58      	cmp	r7, #88	; 0x58
 80040cc:	f000 80c1 	beq.w	8004252 <_printf_i+0x1aa>
 80040d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040d8:	e03a      	b.n	8004150 <_printf_i+0xa8>
 80040da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040de:	2b15      	cmp	r3, #21
 80040e0:	d8f6      	bhi.n	80040d0 <_printf_i+0x28>
 80040e2:	a101      	add	r1, pc, #4	; (adr r1, 80040e8 <_printf_i+0x40>)
 80040e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040e8:	08004141 	.word	0x08004141
 80040ec:	08004155 	.word	0x08004155
 80040f0:	080040d1 	.word	0x080040d1
 80040f4:	080040d1 	.word	0x080040d1
 80040f8:	080040d1 	.word	0x080040d1
 80040fc:	080040d1 	.word	0x080040d1
 8004100:	08004155 	.word	0x08004155
 8004104:	080040d1 	.word	0x080040d1
 8004108:	080040d1 	.word	0x080040d1
 800410c:	080040d1 	.word	0x080040d1
 8004110:	080040d1 	.word	0x080040d1
 8004114:	0800425b 	.word	0x0800425b
 8004118:	08004181 	.word	0x08004181
 800411c:	08004215 	.word	0x08004215
 8004120:	080040d1 	.word	0x080040d1
 8004124:	080040d1 	.word	0x080040d1
 8004128:	0800427d 	.word	0x0800427d
 800412c:	080040d1 	.word	0x080040d1
 8004130:	08004181 	.word	0x08004181
 8004134:	080040d1 	.word	0x080040d1
 8004138:	080040d1 	.word	0x080040d1
 800413c:	0800421d 	.word	0x0800421d
 8004140:	682b      	ldr	r3, [r5, #0]
 8004142:	1d1a      	adds	r2, r3, #4
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	602a      	str	r2, [r5, #0]
 8004148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800414c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004150:	2301      	movs	r3, #1
 8004152:	e0a0      	b.n	8004296 <_printf_i+0x1ee>
 8004154:	6820      	ldr	r0, [r4, #0]
 8004156:	682b      	ldr	r3, [r5, #0]
 8004158:	0607      	lsls	r7, r0, #24
 800415a:	f103 0104 	add.w	r1, r3, #4
 800415e:	6029      	str	r1, [r5, #0]
 8004160:	d501      	bpl.n	8004166 <_printf_i+0xbe>
 8004162:	681e      	ldr	r6, [r3, #0]
 8004164:	e003      	b.n	800416e <_printf_i+0xc6>
 8004166:	0646      	lsls	r6, r0, #25
 8004168:	d5fb      	bpl.n	8004162 <_printf_i+0xba>
 800416a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800416e:	2e00      	cmp	r6, #0
 8004170:	da03      	bge.n	800417a <_printf_i+0xd2>
 8004172:	232d      	movs	r3, #45	; 0x2d
 8004174:	4276      	negs	r6, r6
 8004176:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800417a:	230a      	movs	r3, #10
 800417c:	4859      	ldr	r0, [pc, #356]	; (80042e4 <_printf_i+0x23c>)
 800417e:	e012      	b.n	80041a6 <_printf_i+0xfe>
 8004180:	682b      	ldr	r3, [r5, #0]
 8004182:	6820      	ldr	r0, [r4, #0]
 8004184:	1d19      	adds	r1, r3, #4
 8004186:	6029      	str	r1, [r5, #0]
 8004188:	0605      	lsls	r5, r0, #24
 800418a:	d501      	bpl.n	8004190 <_printf_i+0xe8>
 800418c:	681e      	ldr	r6, [r3, #0]
 800418e:	e002      	b.n	8004196 <_printf_i+0xee>
 8004190:	0641      	lsls	r1, r0, #25
 8004192:	d5fb      	bpl.n	800418c <_printf_i+0xe4>
 8004194:	881e      	ldrh	r6, [r3, #0]
 8004196:	2f6f      	cmp	r7, #111	; 0x6f
 8004198:	bf0c      	ite	eq
 800419a:	2308      	moveq	r3, #8
 800419c:	230a      	movne	r3, #10
 800419e:	4851      	ldr	r0, [pc, #324]	; (80042e4 <_printf_i+0x23c>)
 80041a0:	2100      	movs	r1, #0
 80041a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041a6:	6865      	ldr	r5, [r4, #4]
 80041a8:	2d00      	cmp	r5, #0
 80041aa:	bfa8      	it	ge
 80041ac:	6821      	ldrge	r1, [r4, #0]
 80041ae:	60a5      	str	r5, [r4, #8]
 80041b0:	bfa4      	itt	ge
 80041b2:	f021 0104 	bicge.w	r1, r1, #4
 80041b6:	6021      	strge	r1, [r4, #0]
 80041b8:	b90e      	cbnz	r6, 80041be <_printf_i+0x116>
 80041ba:	2d00      	cmp	r5, #0
 80041bc:	d04b      	beq.n	8004256 <_printf_i+0x1ae>
 80041be:	4615      	mov	r5, r2
 80041c0:	fbb6 f1f3 	udiv	r1, r6, r3
 80041c4:	fb03 6711 	mls	r7, r3, r1, r6
 80041c8:	5dc7      	ldrb	r7, [r0, r7]
 80041ca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041ce:	4637      	mov	r7, r6
 80041d0:	42bb      	cmp	r3, r7
 80041d2:	460e      	mov	r6, r1
 80041d4:	d9f4      	bls.n	80041c0 <_printf_i+0x118>
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d10b      	bne.n	80041f2 <_printf_i+0x14a>
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	07de      	lsls	r6, r3, #31
 80041de:	d508      	bpl.n	80041f2 <_printf_i+0x14a>
 80041e0:	6923      	ldr	r3, [r4, #16]
 80041e2:	6861      	ldr	r1, [r4, #4]
 80041e4:	4299      	cmp	r1, r3
 80041e6:	bfde      	ittt	le
 80041e8:	2330      	movle	r3, #48	; 0x30
 80041ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041f2:	1b52      	subs	r2, r2, r5
 80041f4:	6122      	str	r2, [r4, #16]
 80041f6:	464b      	mov	r3, r9
 80041f8:	4621      	mov	r1, r4
 80041fa:	4640      	mov	r0, r8
 80041fc:	f8cd a000 	str.w	sl, [sp]
 8004200:	aa03      	add	r2, sp, #12
 8004202:	f7ff fedf 	bl	8003fc4 <_printf_common>
 8004206:	3001      	adds	r0, #1
 8004208:	d14a      	bne.n	80042a0 <_printf_i+0x1f8>
 800420a:	f04f 30ff 	mov.w	r0, #4294967295
 800420e:	b004      	add	sp, #16
 8004210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004214:	6823      	ldr	r3, [r4, #0]
 8004216:	f043 0320 	orr.w	r3, r3, #32
 800421a:	6023      	str	r3, [r4, #0]
 800421c:	2778      	movs	r7, #120	; 0x78
 800421e:	4832      	ldr	r0, [pc, #200]	; (80042e8 <_printf_i+0x240>)
 8004220:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004224:	6823      	ldr	r3, [r4, #0]
 8004226:	6829      	ldr	r1, [r5, #0]
 8004228:	061f      	lsls	r7, r3, #24
 800422a:	f851 6b04 	ldr.w	r6, [r1], #4
 800422e:	d402      	bmi.n	8004236 <_printf_i+0x18e>
 8004230:	065f      	lsls	r7, r3, #25
 8004232:	bf48      	it	mi
 8004234:	b2b6      	uxthmi	r6, r6
 8004236:	07df      	lsls	r7, r3, #31
 8004238:	bf48      	it	mi
 800423a:	f043 0320 	orrmi.w	r3, r3, #32
 800423e:	6029      	str	r1, [r5, #0]
 8004240:	bf48      	it	mi
 8004242:	6023      	strmi	r3, [r4, #0]
 8004244:	b91e      	cbnz	r6, 800424e <_printf_i+0x1a6>
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	f023 0320 	bic.w	r3, r3, #32
 800424c:	6023      	str	r3, [r4, #0]
 800424e:	2310      	movs	r3, #16
 8004250:	e7a6      	b.n	80041a0 <_printf_i+0xf8>
 8004252:	4824      	ldr	r0, [pc, #144]	; (80042e4 <_printf_i+0x23c>)
 8004254:	e7e4      	b.n	8004220 <_printf_i+0x178>
 8004256:	4615      	mov	r5, r2
 8004258:	e7bd      	b.n	80041d6 <_printf_i+0x12e>
 800425a:	682b      	ldr	r3, [r5, #0]
 800425c:	6826      	ldr	r6, [r4, #0]
 800425e:	1d18      	adds	r0, r3, #4
 8004260:	6961      	ldr	r1, [r4, #20]
 8004262:	6028      	str	r0, [r5, #0]
 8004264:	0635      	lsls	r5, r6, #24
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	d501      	bpl.n	800426e <_printf_i+0x1c6>
 800426a:	6019      	str	r1, [r3, #0]
 800426c:	e002      	b.n	8004274 <_printf_i+0x1cc>
 800426e:	0670      	lsls	r0, r6, #25
 8004270:	d5fb      	bpl.n	800426a <_printf_i+0x1c2>
 8004272:	8019      	strh	r1, [r3, #0]
 8004274:	2300      	movs	r3, #0
 8004276:	4615      	mov	r5, r2
 8004278:	6123      	str	r3, [r4, #16]
 800427a:	e7bc      	b.n	80041f6 <_printf_i+0x14e>
 800427c:	682b      	ldr	r3, [r5, #0]
 800427e:	2100      	movs	r1, #0
 8004280:	1d1a      	adds	r2, r3, #4
 8004282:	602a      	str	r2, [r5, #0]
 8004284:	681d      	ldr	r5, [r3, #0]
 8004286:	6862      	ldr	r2, [r4, #4]
 8004288:	4628      	mov	r0, r5
 800428a:	f000 f909 	bl	80044a0 <memchr>
 800428e:	b108      	cbz	r0, 8004294 <_printf_i+0x1ec>
 8004290:	1b40      	subs	r0, r0, r5
 8004292:	6060      	str	r0, [r4, #4]
 8004294:	6863      	ldr	r3, [r4, #4]
 8004296:	6123      	str	r3, [r4, #16]
 8004298:	2300      	movs	r3, #0
 800429a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800429e:	e7aa      	b.n	80041f6 <_printf_i+0x14e>
 80042a0:	462a      	mov	r2, r5
 80042a2:	4649      	mov	r1, r9
 80042a4:	4640      	mov	r0, r8
 80042a6:	6923      	ldr	r3, [r4, #16]
 80042a8:	47d0      	blx	sl
 80042aa:	3001      	adds	r0, #1
 80042ac:	d0ad      	beq.n	800420a <_printf_i+0x162>
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	079b      	lsls	r3, r3, #30
 80042b2:	d413      	bmi.n	80042dc <_printf_i+0x234>
 80042b4:	68e0      	ldr	r0, [r4, #12]
 80042b6:	9b03      	ldr	r3, [sp, #12]
 80042b8:	4298      	cmp	r0, r3
 80042ba:	bfb8      	it	lt
 80042bc:	4618      	movlt	r0, r3
 80042be:	e7a6      	b.n	800420e <_printf_i+0x166>
 80042c0:	2301      	movs	r3, #1
 80042c2:	4632      	mov	r2, r6
 80042c4:	4649      	mov	r1, r9
 80042c6:	4640      	mov	r0, r8
 80042c8:	47d0      	blx	sl
 80042ca:	3001      	adds	r0, #1
 80042cc:	d09d      	beq.n	800420a <_printf_i+0x162>
 80042ce:	3501      	adds	r5, #1
 80042d0:	68e3      	ldr	r3, [r4, #12]
 80042d2:	9903      	ldr	r1, [sp, #12]
 80042d4:	1a5b      	subs	r3, r3, r1
 80042d6:	42ab      	cmp	r3, r5
 80042d8:	dcf2      	bgt.n	80042c0 <_printf_i+0x218>
 80042da:	e7eb      	b.n	80042b4 <_printf_i+0x20c>
 80042dc:	2500      	movs	r5, #0
 80042de:	f104 0619 	add.w	r6, r4, #25
 80042e2:	e7f5      	b.n	80042d0 <_printf_i+0x228>
 80042e4:	080046ca 	.word	0x080046ca
 80042e8:	080046db 	.word	0x080046db

080042ec <__swbuf_r>:
 80042ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ee:	460e      	mov	r6, r1
 80042f0:	4614      	mov	r4, r2
 80042f2:	4605      	mov	r5, r0
 80042f4:	b118      	cbz	r0, 80042fe <__swbuf_r+0x12>
 80042f6:	6a03      	ldr	r3, [r0, #32]
 80042f8:	b90b      	cbnz	r3, 80042fe <__swbuf_r+0x12>
 80042fa:	f7ff fa3f 	bl	800377c <__sinit>
 80042fe:	69a3      	ldr	r3, [r4, #24]
 8004300:	60a3      	str	r3, [r4, #8]
 8004302:	89a3      	ldrh	r3, [r4, #12]
 8004304:	071a      	lsls	r2, r3, #28
 8004306:	d525      	bpl.n	8004354 <__swbuf_r+0x68>
 8004308:	6923      	ldr	r3, [r4, #16]
 800430a:	b31b      	cbz	r3, 8004354 <__swbuf_r+0x68>
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	6922      	ldr	r2, [r4, #16]
 8004310:	b2f6      	uxtb	r6, r6
 8004312:	1a98      	subs	r0, r3, r2
 8004314:	6963      	ldr	r3, [r4, #20]
 8004316:	4637      	mov	r7, r6
 8004318:	4283      	cmp	r3, r0
 800431a:	dc04      	bgt.n	8004326 <__swbuf_r+0x3a>
 800431c:	4621      	mov	r1, r4
 800431e:	4628      	mov	r0, r5
 8004320:	f7ff fcbe 	bl	8003ca0 <_fflush_r>
 8004324:	b9e0      	cbnz	r0, 8004360 <__swbuf_r+0x74>
 8004326:	68a3      	ldr	r3, [r4, #8]
 8004328:	3b01      	subs	r3, #1
 800432a:	60a3      	str	r3, [r4, #8]
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	6022      	str	r2, [r4, #0]
 8004332:	701e      	strb	r6, [r3, #0]
 8004334:	6962      	ldr	r2, [r4, #20]
 8004336:	1c43      	adds	r3, r0, #1
 8004338:	429a      	cmp	r2, r3
 800433a:	d004      	beq.n	8004346 <__swbuf_r+0x5a>
 800433c:	89a3      	ldrh	r3, [r4, #12]
 800433e:	07db      	lsls	r3, r3, #31
 8004340:	d506      	bpl.n	8004350 <__swbuf_r+0x64>
 8004342:	2e0a      	cmp	r6, #10
 8004344:	d104      	bne.n	8004350 <__swbuf_r+0x64>
 8004346:	4621      	mov	r1, r4
 8004348:	4628      	mov	r0, r5
 800434a:	f7ff fca9 	bl	8003ca0 <_fflush_r>
 800434e:	b938      	cbnz	r0, 8004360 <__swbuf_r+0x74>
 8004350:	4638      	mov	r0, r7
 8004352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004354:	4621      	mov	r1, r4
 8004356:	4628      	mov	r0, r5
 8004358:	f000 f806 	bl	8004368 <__swsetup_r>
 800435c:	2800      	cmp	r0, #0
 800435e:	d0d5      	beq.n	800430c <__swbuf_r+0x20>
 8004360:	f04f 37ff 	mov.w	r7, #4294967295
 8004364:	e7f4      	b.n	8004350 <__swbuf_r+0x64>
	...

08004368 <__swsetup_r>:
 8004368:	b538      	push	{r3, r4, r5, lr}
 800436a:	4b2a      	ldr	r3, [pc, #168]	; (8004414 <__swsetup_r+0xac>)
 800436c:	4605      	mov	r5, r0
 800436e:	6818      	ldr	r0, [r3, #0]
 8004370:	460c      	mov	r4, r1
 8004372:	b118      	cbz	r0, 800437c <__swsetup_r+0x14>
 8004374:	6a03      	ldr	r3, [r0, #32]
 8004376:	b90b      	cbnz	r3, 800437c <__swsetup_r+0x14>
 8004378:	f7ff fa00 	bl	800377c <__sinit>
 800437c:	89a3      	ldrh	r3, [r4, #12]
 800437e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004382:	0718      	lsls	r0, r3, #28
 8004384:	d422      	bmi.n	80043cc <__swsetup_r+0x64>
 8004386:	06d9      	lsls	r1, r3, #27
 8004388:	d407      	bmi.n	800439a <__swsetup_r+0x32>
 800438a:	2309      	movs	r3, #9
 800438c:	602b      	str	r3, [r5, #0]
 800438e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004392:	f04f 30ff 	mov.w	r0, #4294967295
 8004396:	81a3      	strh	r3, [r4, #12]
 8004398:	e034      	b.n	8004404 <__swsetup_r+0x9c>
 800439a:	0758      	lsls	r0, r3, #29
 800439c:	d512      	bpl.n	80043c4 <__swsetup_r+0x5c>
 800439e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043a0:	b141      	cbz	r1, 80043b4 <__swsetup_r+0x4c>
 80043a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043a6:	4299      	cmp	r1, r3
 80043a8:	d002      	beq.n	80043b0 <__swsetup_r+0x48>
 80043aa:	4628      	mov	r0, r5
 80043ac:	f7ff fafa 	bl	80039a4 <_free_r>
 80043b0:	2300      	movs	r3, #0
 80043b2:	6363      	str	r3, [r4, #52]	; 0x34
 80043b4:	89a3      	ldrh	r3, [r4, #12]
 80043b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80043ba:	81a3      	strh	r3, [r4, #12]
 80043bc:	2300      	movs	r3, #0
 80043be:	6063      	str	r3, [r4, #4]
 80043c0:	6923      	ldr	r3, [r4, #16]
 80043c2:	6023      	str	r3, [r4, #0]
 80043c4:	89a3      	ldrh	r3, [r4, #12]
 80043c6:	f043 0308 	orr.w	r3, r3, #8
 80043ca:	81a3      	strh	r3, [r4, #12]
 80043cc:	6923      	ldr	r3, [r4, #16]
 80043ce:	b94b      	cbnz	r3, 80043e4 <__swsetup_r+0x7c>
 80043d0:	89a3      	ldrh	r3, [r4, #12]
 80043d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80043d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043da:	d003      	beq.n	80043e4 <__swsetup_r+0x7c>
 80043dc:	4621      	mov	r1, r4
 80043de:	4628      	mov	r0, r5
 80043e0:	f000 f891 	bl	8004506 <__smakebuf_r>
 80043e4:	89a0      	ldrh	r0, [r4, #12]
 80043e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043ea:	f010 0301 	ands.w	r3, r0, #1
 80043ee:	d00a      	beq.n	8004406 <__swsetup_r+0x9e>
 80043f0:	2300      	movs	r3, #0
 80043f2:	60a3      	str	r3, [r4, #8]
 80043f4:	6963      	ldr	r3, [r4, #20]
 80043f6:	425b      	negs	r3, r3
 80043f8:	61a3      	str	r3, [r4, #24]
 80043fa:	6923      	ldr	r3, [r4, #16]
 80043fc:	b943      	cbnz	r3, 8004410 <__swsetup_r+0xa8>
 80043fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004402:	d1c4      	bne.n	800438e <__swsetup_r+0x26>
 8004404:	bd38      	pop	{r3, r4, r5, pc}
 8004406:	0781      	lsls	r1, r0, #30
 8004408:	bf58      	it	pl
 800440a:	6963      	ldrpl	r3, [r4, #20]
 800440c:	60a3      	str	r3, [r4, #8]
 800440e:	e7f4      	b.n	80043fa <__swsetup_r+0x92>
 8004410:	2000      	movs	r0, #0
 8004412:	e7f7      	b.n	8004404 <__swsetup_r+0x9c>
 8004414:	20000074 	.word	0x20000074

08004418 <_raise_r>:
 8004418:	291f      	cmp	r1, #31
 800441a:	b538      	push	{r3, r4, r5, lr}
 800441c:	4604      	mov	r4, r0
 800441e:	460d      	mov	r5, r1
 8004420:	d904      	bls.n	800442c <_raise_r+0x14>
 8004422:	2316      	movs	r3, #22
 8004424:	6003      	str	r3, [r0, #0]
 8004426:	f04f 30ff 	mov.w	r0, #4294967295
 800442a:	bd38      	pop	{r3, r4, r5, pc}
 800442c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800442e:	b112      	cbz	r2, 8004436 <_raise_r+0x1e>
 8004430:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004434:	b94b      	cbnz	r3, 800444a <_raise_r+0x32>
 8004436:	4620      	mov	r0, r4
 8004438:	f000 f830 	bl	800449c <_getpid_r>
 800443c:	462a      	mov	r2, r5
 800443e:	4601      	mov	r1, r0
 8004440:	4620      	mov	r0, r4
 8004442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004446:	f000 b817 	b.w	8004478 <_kill_r>
 800444a:	2b01      	cmp	r3, #1
 800444c:	d00a      	beq.n	8004464 <_raise_r+0x4c>
 800444e:	1c59      	adds	r1, r3, #1
 8004450:	d103      	bne.n	800445a <_raise_r+0x42>
 8004452:	2316      	movs	r3, #22
 8004454:	6003      	str	r3, [r0, #0]
 8004456:	2001      	movs	r0, #1
 8004458:	e7e7      	b.n	800442a <_raise_r+0x12>
 800445a:	2400      	movs	r4, #0
 800445c:	4628      	mov	r0, r5
 800445e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004462:	4798      	blx	r3
 8004464:	2000      	movs	r0, #0
 8004466:	e7e0      	b.n	800442a <_raise_r+0x12>

08004468 <raise>:
 8004468:	4b02      	ldr	r3, [pc, #8]	; (8004474 <raise+0xc>)
 800446a:	4601      	mov	r1, r0
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	f7ff bfd3 	b.w	8004418 <_raise_r>
 8004472:	bf00      	nop
 8004474:	20000074 	.word	0x20000074

08004478 <_kill_r>:
 8004478:	b538      	push	{r3, r4, r5, lr}
 800447a:	2300      	movs	r3, #0
 800447c:	4d06      	ldr	r5, [pc, #24]	; (8004498 <_kill_r+0x20>)
 800447e:	4604      	mov	r4, r0
 8004480:	4608      	mov	r0, r1
 8004482:	4611      	mov	r1, r2
 8004484:	602b      	str	r3, [r5, #0]
 8004486:	f7fc fc7e 	bl	8000d86 <_kill>
 800448a:	1c43      	adds	r3, r0, #1
 800448c:	d102      	bne.n	8004494 <_kill_r+0x1c>
 800448e:	682b      	ldr	r3, [r5, #0]
 8004490:	b103      	cbz	r3, 8004494 <_kill_r+0x1c>
 8004492:	6023      	str	r3, [r4, #0]
 8004494:	bd38      	pop	{r3, r4, r5, pc}
 8004496:	bf00      	nop
 8004498:	200002d0 	.word	0x200002d0

0800449c <_getpid_r>:
 800449c:	f7fc bc6c 	b.w	8000d78 <_getpid>

080044a0 <memchr>:
 80044a0:	4603      	mov	r3, r0
 80044a2:	b510      	push	{r4, lr}
 80044a4:	b2c9      	uxtb	r1, r1
 80044a6:	4402      	add	r2, r0
 80044a8:	4293      	cmp	r3, r2
 80044aa:	4618      	mov	r0, r3
 80044ac:	d101      	bne.n	80044b2 <memchr+0x12>
 80044ae:	2000      	movs	r0, #0
 80044b0:	e003      	b.n	80044ba <memchr+0x1a>
 80044b2:	7804      	ldrb	r4, [r0, #0]
 80044b4:	3301      	adds	r3, #1
 80044b6:	428c      	cmp	r4, r1
 80044b8:	d1f6      	bne.n	80044a8 <memchr+0x8>
 80044ba:	bd10      	pop	{r4, pc}

080044bc <__swhatbuf_r>:
 80044bc:	b570      	push	{r4, r5, r6, lr}
 80044be:	460c      	mov	r4, r1
 80044c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044c4:	4615      	mov	r5, r2
 80044c6:	2900      	cmp	r1, #0
 80044c8:	461e      	mov	r6, r3
 80044ca:	b096      	sub	sp, #88	; 0x58
 80044cc:	da0c      	bge.n	80044e8 <__swhatbuf_r+0x2c>
 80044ce:	89a3      	ldrh	r3, [r4, #12]
 80044d0:	2100      	movs	r1, #0
 80044d2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80044d6:	bf0c      	ite	eq
 80044d8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80044dc:	2340      	movne	r3, #64	; 0x40
 80044de:	2000      	movs	r0, #0
 80044e0:	6031      	str	r1, [r6, #0]
 80044e2:	602b      	str	r3, [r5, #0]
 80044e4:	b016      	add	sp, #88	; 0x58
 80044e6:	bd70      	pop	{r4, r5, r6, pc}
 80044e8:	466a      	mov	r2, sp
 80044ea:	f000 f849 	bl	8004580 <_fstat_r>
 80044ee:	2800      	cmp	r0, #0
 80044f0:	dbed      	blt.n	80044ce <__swhatbuf_r+0x12>
 80044f2:	9901      	ldr	r1, [sp, #4]
 80044f4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80044f8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80044fc:	4259      	negs	r1, r3
 80044fe:	4159      	adcs	r1, r3
 8004500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004504:	e7eb      	b.n	80044de <__swhatbuf_r+0x22>

08004506 <__smakebuf_r>:
 8004506:	898b      	ldrh	r3, [r1, #12]
 8004508:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800450a:	079d      	lsls	r5, r3, #30
 800450c:	4606      	mov	r6, r0
 800450e:	460c      	mov	r4, r1
 8004510:	d507      	bpl.n	8004522 <__smakebuf_r+0x1c>
 8004512:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004516:	6023      	str	r3, [r4, #0]
 8004518:	6123      	str	r3, [r4, #16]
 800451a:	2301      	movs	r3, #1
 800451c:	6163      	str	r3, [r4, #20]
 800451e:	b002      	add	sp, #8
 8004520:	bd70      	pop	{r4, r5, r6, pc}
 8004522:	466a      	mov	r2, sp
 8004524:	ab01      	add	r3, sp, #4
 8004526:	f7ff ffc9 	bl	80044bc <__swhatbuf_r>
 800452a:	9900      	ldr	r1, [sp, #0]
 800452c:	4605      	mov	r5, r0
 800452e:	4630      	mov	r0, r6
 8004530:	f7ff faa8 	bl	8003a84 <_malloc_r>
 8004534:	b948      	cbnz	r0, 800454a <__smakebuf_r+0x44>
 8004536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800453a:	059a      	lsls	r2, r3, #22
 800453c:	d4ef      	bmi.n	800451e <__smakebuf_r+0x18>
 800453e:	f023 0303 	bic.w	r3, r3, #3
 8004542:	f043 0302 	orr.w	r3, r3, #2
 8004546:	81a3      	strh	r3, [r4, #12]
 8004548:	e7e3      	b.n	8004512 <__smakebuf_r+0xc>
 800454a:	89a3      	ldrh	r3, [r4, #12]
 800454c:	6020      	str	r0, [r4, #0]
 800454e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004552:	81a3      	strh	r3, [r4, #12]
 8004554:	9b00      	ldr	r3, [sp, #0]
 8004556:	6120      	str	r0, [r4, #16]
 8004558:	6163      	str	r3, [r4, #20]
 800455a:	9b01      	ldr	r3, [sp, #4]
 800455c:	b15b      	cbz	r3, 8004576 <__smakebuf_r+0x70>
 800455e:	4630      	mov	r0, r6
 8004560:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004564:	f000 f81e 	bl	80045a4 <_isatty_r>
 8004568:	b128      	cbz	r0, 8004576 <__smakebuf_r+0x70>
 800456a:	89a3      	ldrh	r3, [r4, #12]
 800456c:	f023 0303 	bic.w	r3, r3, #3
 8004570:	f043 0301 	orr.w	r3, r3, #1
 8004574:	81a3      	strh	r3, [r4, #12]
 8004576:	89a3      	ldrh	r3, [r4, #12]
 8004578:	431d      	orrs	r5, r3
 800457a:	81a5      	strh	r5, [r4, #12]
 800457c:	e7cf      	b.n	800451e <__smakebuf_r+0x18>
	...

08004580 <_fstat_r>:
 8004580:	b538      	push	{r3, r4, r5, lr}
 8004582:	2300      	movs	r3, #0
 8004584:	4d06      	ldr	r5, [pc, #24]	; (80045a0 <_fstat_r+0x20>)
 8004586:	4604      	mov	r4, r0
 8004588:	4608      	mov	r0, r1
 800458a:	4611      	mov	r1, r2
 800458c:	602b      	str	r3, [r5, #0]
 800458e:	f7fc fc58 	bl	8000e42 <_fstat>
 8004592:	1c43      	adds	r3, r0, #1
 8004594:	d102      	bne.n	800459c <_fstat_r+0x1c>
 8004596:	682b      	ldr	r3, [r5, #0]
 8004598:	b103      	cbz	r3, 800459c <_fstat_r+0x1c>
 800459a:	6023      	str	r3, [r4, #0]
 800459c:	bd38      	pop	{r3, r4, r5, pc}
 800459e:	bf00      	nop
 80045a0:	200002d0 	.word	0x200002d0

080045a4 <_isatty_r>:
 80045a4:	b538      	push	{r3, r4, r5, lr}
 80045a6:	2300      	movs	r3, #0
 80045a8:	4d05      	ldr	r5, [pc, #20]	; (80045c0 <_isatty_r+0x1c>)
 80045aa:	4604      	mov	r4, r0
 80045ac:	4608      	mov	r0, r1
 80045ae:	602b      	str	r3, [r5, #0]
 80045b0:	f7fc fc56 	bl	8000e60 <_isatty>
 80045b4:	1c43      	adds	r3, r0, #1
 80045b6:	d102      	bne.n	80045be <_isatty_r+0x1a>
 80045b8:	682b      	ldr	r3, [r5, #0]
 80045ba:	b103      	cbz	r3, 80045be <_isatty_r+0x1a>
 80045bc:	6023      	str	r3, [r4, #0]
 80045be:	bd38      	pop	{r3, r4, r5, pc}
 80045c0:	200002d0 	.word	0x200002d0

080045c4 <_init>:
 80045c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c6:	bf00      	nop
 80045c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ca:	bc08      	pop	{r3}
 80045cc:	469e      	mov	lr, r3
 80045ce:	4770      	bx	lr

080045d0 <_fini>:
 80045d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d2:	bf00      	nop
 80045d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045d6:	bc08      	pop	{r3}
 80045d8:	469e      	mov	lr, r3
 80045da:	4770      	bx	lr
