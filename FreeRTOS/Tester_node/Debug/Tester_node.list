
Tester_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007544  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08007654  08007654  00017654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007734  08007734  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08007734  08007734  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007734  08007734  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007734  08007734  00017734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007738  08007738  00017738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800773c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c88  20000080  080077bc  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d08  080077bc  00021d08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018311  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000374e  00000000  00000000  000383fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001550  00000000  00000000  0003bb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001094  00000000  00000000  0003d0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019702  00000000  00000000  0003e134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000194ed  00000000  00000000  00057836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009730b  00000000  00000000  00070d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005eac  00000000  00000000  00108030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0010dedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	0800763c 	.word	0x0800763c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	0800763c 	.word	0x0800763c

08000150 <button_release_callback>:
{

}

__weak void button_release_callback(void)
{
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0
	btn1_press_flag = 1;
 8000154:	4b06      	ldr	r3, [pc, #24]	; (8000170 <button_release_callback+0x20>)
 8000156:	2201      	movs	r2, #1
 8000158:	701a      	strb	r2, [r3, #0]
	btn2_press_flag = 1;
 800015a:	4b06      	ldr	r3, [pc, #24]	; (8000174 <button_release_callback+0x24>)
 800015c:	2201      	movs	r2, #1
 800015e:	701a      	strb	r2, [r3, #0]
	test_flag_twicepress = 0;
 8000160:	4b05      	ldr	r3, [pc, #20]	; (8000178 <button_release_callback+0x28>)
 8000162:	2200      	movs	r2, #0
 8000164:	701a      	strb	r2, [r3, #0]
	//lam gi do sau khi 2 nut nhan giu roi tha ra trong nay
	//extended feature when pressing buttons at the same time
	//ý tưởng: Khi nhấn nhiều nút cùng lúc chỉ khi thả nút ra mới thực hiện action
}
 8000166:	bf00      	nop
 8000168:	46bd      	mov	sp, r7
 800016a:	bc80      	pop	{r7}
 800016c:	4770      	bx	lr
 800016e:	bf00      	nop
 8000170:	20000000 	.word	0x20000000
 8000174:	20000001 	.word	0x20000001
 8000178:	2000009d 	.word	0x2000009d

0800017c <button_shortpressing_callback_500ms>:

__weak void button_shortpressing_callback_500ms(Button_Typedef *ButtonX)
{
 800017c:	b480      	push	{r7}
 800017e:	b083      	sub	sp, #12
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]

}
 8000184:	bf00      	nop
 8000186:	370c      	adds	r7, #12
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
	...

08000190 <button_handle>:
}

////them cac ham con lai lien quan den xu ly nut bam vao
////>= 500 ms < 500ms
void button_handle(Button_Typedef *ButtonX)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b084      	sub	sp, #16
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
	uint8_t state =  HAL_GPIO_ReadPin(ButtonX->GPIOx, ButtonX->GPIO_Pin); //get button state
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	691a      	ldr	r2, [r3, #16]
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	8a9b      	ldrh	r3, [r3, #20]
 80001a0:	4619      	mov	r1, r3
 80001a2:	4610      	mov	r0, r2
 80001a4:	f002 fa30 	bl	8002608 <HAL_GPIO_ReadPin>
 80001a8:	4603      	mov	r3, r0
 80001aa:	73fb      	strb	r3, [r7, #15]
	//cau hoi dat ra la bay gio lam sao de xac dinh la co 2 nut bay gio
	//---- Xu ly loc nhieu ----
	if(state != ButtonX->button_filter) //trang thai
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	789b      	ldrb	r3, [r3, #2]
 80001b0:	7bfa      	ldrb	r2, [r7, #15]
 80001b2:	429a      	cmp	r2, r3
 80001b4:	d00a      	beq.n	80001cc <button_handle+0x3c>
	{
		ButtonX->button_filter = state;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	7bfa      	ldrb	r2, [r7, #15]
 80001ba:	709a      	strb	r2, [r3, #2]
		ButtonX->is_debouncing = 1;
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	2201      	movs	r2, #1
 80001c0:	70da      	strb	r2, [r3, #3]
		ButtonX->time_debounce = HAL_GetTick();
 80001c2:	f001 f89d 	bl	8001300 <HAL_GetTick>
 80001c6:	4602      	mov	r2, r0
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	605a      	str	r2, [r3, #4]
	}
	//---- Xac lap tin hieu ----
	if(ButtonX->is_debouncing && (HAL_GetTick() - ButtonX->time_debounce >= 15))
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	78db      	ldrb	r3, [r3, #3]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d00e      	beq.n	80001f2 <button_handle+0x62>
 80001d4:	f001 f894 	bl	8001300 <HAL_GetTick>
 80001d8:	4602      	mov	r2, r0
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	685b      	ldr	r3, [r3, #4]
 80001de:	1ad3      	subs	r3, r2, r3
 80001e0:	2b0e      	cmp	r3, #14
 80001e2:	d906      	bls.n	80001f2 <button_handle+0x62>
	{
		ButtonX->button_current = ButtonX->button_filter;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	789a      	ldrb	r2, [r3, #2]
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	701a      	strb	r2, [r3, #0]
		ButtonX->is_debouncing = 0;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	2200      	movs	r2, #0
 80001f0:	70da      	strb	r2, [r3, #3]
	}
	//---- Xu ly tin hieu nut nhan ----
	if(ButtonX->button_current != ButtonX->button_last) //phat hien tin hieu nut nhat chinh xac sau khi xu ly thay doi
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	781a      	ldrb	r2, [r3, #0]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	785b      	ldrb	r3, [r3, #1]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d02c      	beq.n	8000258 <button_handle+0xc8>
	{
		//nut bam nhan xuong
		if(ButtonX->button_current == 0)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d108      	bne.n	8000218 <button_handle+0x88>
		{
			//button_pressing_callback(ButtonX);
			ButtonX->time_btn_press = HAL_GetTick();
 8000206:	f001 f87b 	bl	8001300 <HAL_GetTick>
 800020a:	4602      	mov	r2, r0
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	609a      	str	r2, [r3, #8]
			ButtonX->is_press_timeout = 1;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2201      	movs	r2, #1
 8000214:	731a      	strb	r2, [r3, #12]
 8000216:	e01b      	b.n	8000250 <button_handle+0xc0>
		}
		else
		{
			if(HAL_GetTick() - ButtonX->time_btn_press < 500) //xu ly nhan nha nhanh < 500ms
 8000218:	f001 f872 	bl	8001300 <HAL_GetTick>
 800021c:	4602      	mov	r2, r0
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	689b      	ldr	r3, [r3, #8]
 8000222:	1ad3      	subs	r3, r2, r3
 8000224:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000228:	d202      	bcs.n	8000230 <button_handle+0xa0>
			{
				button_shortpressing_callback_500ms(ButtonX);
 800022a:	6878      	ldr	r0, [r7, #4]
 800022c:	f7ff ffa6 	bl	800017c <button_shortpressing_callback_500ms>
			}

			ButtonX->is_press_timeout = 0 ;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2200      	movs	r2, #0
 8000234:	731a      	strb	r2, [r3, #12]
			ButtonX->is_long_press = 0 ;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2200      	movs	r2, #0
 800023a:	735a      	strb	r2, [r3, #13]
			long_press_detect = ButtonX->is_long_press;
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	7b5a      	ldrb	r2, [r3, #13]
 8000240:	4b12      	ldr	r3, [pc, #72]	; (800028c <button_handle+0xfc>)
 8000242:	701a      	strb	r2, [r3, #0]
			//reset cac bien nhan 2 nut
			if(test_flag_twicepress == 1)
 8000244:	4b12      	ldr	r3, [pc, #72]	; (8000290 <button_handle+0x100>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	2b01      	cmp	r3, #1
 800024a:	d101      	bne.n	8000250 <button_handle+0xc0>
			{
				button_release_callback();
 800024c:	f7ff ff80 	bl	8000150 <button_release_callback>
			}
		}
			ButtonX->button_last = ButtonX->button_current;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	781a      	ldrb	r2, [r3, #0]
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	705a      	strb	r2, [r3, #1]
	}

	//-------------Xu li nhan giu lau hon 500ms----------------
	if(ButtonX->is_press_timeout == 1 && (HAL_GetTick() - ButtonX->time_btn_press >= 500)){
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	7b1b      	ldrb	r3, [r3, #12]
 800025c:	2b01      	cmp	r3, #1
 800025e:	d111      	bne.n	8000284 <button_handle+0xf4>
 8000260:	f001 f84e 	bl	8001300 <HAL_GetTick>
 8000264:	4602      	mov	r2, r0
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	689b      	ldr	r3, [r3, #8]
 800026a:	1ad3      	subs	r3, r2, r3
 800026c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000270:	d308      	bcc.n	8000284 <button_handle+0xf4>
		ButtonX->is_long_press = 1;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2201      	movs	r2, #1
 8000276:	735a      	strb	r2, [r3, #13]
		button_longpressing_callback_500ms(ButtonX);
 8000278:	6878      	ldr	r0, [r7, #4]
 800027a:	f000 f827 	bl	80002cc <button_longpressing_callback_500ms>
		ButtonX->is_press_timeout = 0;
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2200      	movs	r2, #0
 8000282:	731a      	strb	r2, [r3, #12]

	}
}
 8000284:	bf00      	nop
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	2000009c 	.word	0x2000009c
 8000290:	2000009d 	.word	0x2000009d

08000294 <button_Init>:

//tong cong co bao nhieu ham callback: press_callback, release callback, longpressing, shortpressing


void button_Init(Button_Typedef *ButtonX,GPIO_TypeDef *GPIOx,uint16_t GPIO_Pin)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	60f8      	str	r0, [r7, #12]
 800029c:	60b9      	str	r1, [r7, #8]
 800029e:	4613      	mov	r3, r2
 80002a0:	80fb      	strh	r3, [r7, #6]
	ButtonX->GPIOx = GPIOx;
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	68ba      	ldr	r2, [r7, #8]
 80002a6:	611a      	str	r2, [r3, #16]
	ButtonX->GPIO_Pin = GPIO_Pin;
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	88fa      	ldrh	r2, [r7, #6]
 80002ac:	829a      	strh	r2, [r3, #20]

	ButtonX->button_current = 1;
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	2201      	movs	r2, #1
 80002b2:	701a      	strb	r2, [r3, #0]
	ButtonX->button_last = 1;
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	2201      	movs	r2, #1
 80002b8:	705a      	strb	r2, [r3, #1]
	ButtonX->button_filter = 1;
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	2201      	movs	r2, #1
 80002be:	709a      	strb	r2, [r3, #2]
}
 80002c0:	bf00      	nop
 80002c2:	3714      	adds	r7, #20
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
	...

080002cc <button_longpressing_callback_500ms>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void button_longpressing_callback_500ms(Button_Typedef *ButtonX)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	if(ButtonX == &BTN1){
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a05      	ldr	r2, [pc, #20]	; (80002ec <button_longpressing_callback_500ms+0x20>)
 80002d8:	4293      	cmp	r3, r2
 80002da:	d102      	bne.n	80002e2 <button_longpressing_callback_500ms+0x16>
		button_sig = 1;
 80002dc:	4b04      	ldr	r3, [pc, #16]	; (80002f0 <button_longpressing_callback_500ms+0x24>)
 80002de:	2201      	movs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
	}
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	200001f4 	.word	0x200001f4
 80002f0:	2000020c 	.word	0x2000020c

080002f4 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &Tester_RxHeader, Tester_RxData) != HAL_OK)
 80002fc:	4b0b      	ldr	r3, [pc, #44]	; (800032c <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 80002fe:	4a0c      	ldr	r2, [pc, #48]	; (8000330 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 8000300:	2101      	movs	r1, #1
 8000302:	6878      	ldr	r0, [r7, #4]
 8000304:	f001 fb01 	bl	800190a <HAL_CAN_GetRxMessage>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d003      	beq.n	8000316 <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
	{
		error_flag = 1;
 800030e:	4b09      	ldr	r3, [pc, #36]	; (8000334 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 8000310:	2201      	movs	r2, #1
 8000312:	701a      	strb	r2, [r3, #0]
	else
	{
		flag_read_response = 1;
		error_flag = 0;
	}
}
 8000314:	e005      	b.n	8000322 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e>
		flag_read_response = 1;
 8000316:	4b08      	ldr	r3, [pc, #32]	; (8000338 <HAL_CAN_RxFifo1MsgPendingCallback+0x44>)
 8000318:	2201      	movs	r2, #1
 800031a:	701a      	strb	r2, [r3, #0]
		error_flag = 0;
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 800031e:	2200      	movs	r2, #0
 8000320:	701a      	strb	r2, [r3, #0]
}
 8000322:	bf00      	nop
 8000324:	3708      	adds	r7, #8
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000198 	.word	0x20000198
 8000330:	20000178 	.word	0x20000178
 8000334:	200001eb 	.word	0x200001eb
 8000338:	200001e9 	.word	0x200001e9

0800033c <GetFrameType>:

uint8_t GetFrameType(uint8_t FT_byteString) //Frame type co the dung chung cho SF FF
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	71fb      	strb	r3, [r7, #7]
	uint8_t FT_res;
	switch(FT_byteString)
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	2b03      	cmp	r3, #3
 800034a:	d817      	bhi.n	800037c <GetFrameType+0x40>
 800034c:	a201      	add	r2, pc, #4	; (adr r2, 8000354 <GetFrameType+0x18>)
 800034e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000352:	bf00      	nop
 8000354:	08000365 	.word	0x08000365
 8000358:	0800036b 	.word	0x0800036b
 800035c:	08000371 	.word	0x08000371
 8000360:	08000377 	.word	0x08000377
	{
		case 0x00: //single frame
		{
			FT_res = 0;
 8000364:	2300      	movs	r3, #0
 8000366:	73fb      	strb	r3, [r7, #15]
			break;
 8000368:	e008      	b.n	800037c <GetFrameType+0x40>
		}
		case 0x01: //first frame
		{
			FT_res = 1;
 800036a:	2301      	movs	r3, #1
 800036c:	73fb      	strb	r3, [r7, #15]
			break;
 800036e:	e005      	b.n	800037c <GetFrameType+0x40>
		}
		case 0x02: //consecutive frame
		{
			FT_res = 2;
 8000370:	2302      	movs	r3, #2
 8000372:	73fb      	strb	r3, [r7, #15]
			break;
 8000374:	e002      	b.n	800037c <GetFrameType+0x40>
		}
		case 0x03: //flow control
		{
			FT_res = 3;
 8000376:	2303      	movs	r3, #3
 8000378:	73fb      	strb	r3, [r7, #15]
			break;
 800037a:	bf00      	nop
		}
	}
	return FT_res;
 800037c:	7bfb      	ldrb	r3, [r7, #15]
}
 800037e:	4618      	mov	r0, r3
 8000380:	3714      	adds	r7, #20
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr

08000388 <SF_N_PCI_FrameTypeHandle>:

uint8_t SF_N_PCI_FrameTypeHandle(uint8_t byteString) //SF_PCI: Single Frame Protocol Control Info: FT + DL
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]
	return (byteString >> 4) & 0x03;
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	091b      	lsrs	r3, r3, #4
 8000396:	b2db      	uxtb	r3, r3
 8000398:	f003 0303 	and.w	r3, r3, #3
 800039c:	b2db      	uxtb	r3, r3
}
 800039e:	4618      	mov	r0, r3
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <ReadSingleFrame_handle>:


void ReadSingleFrame_handle(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	//oled debugger - in ra du lieu vua nhan duoc thong qua single frame
	memset(Tx_Buffer,0,sizeof(Tx_Buffer)); //clear buffer before write
 80003ac:	2237      	movs	r2, #55	; 0x37
 80003ae:	2100      	movs	r1, #0
 80003b0:	4809      	ldr	r0, [pc, #36]	; (80003d8 <ReadSingleFrame_handle+0x30>)
 80003b2:	f006 fcb1 	bl	8006d18 <memset>
	sprintf((char*)Tx_Buffer,"%s",Tester_RxData);
 80003b6:	4a09      	ldr	r2, [pc, #36]	; (80003dc <ReadSingleFrame_handle+0x34>)
 80003b8:	4909      	ldr	r1, [pc, #36]	; (80003e0 <ReadSingleFrame_handle+0x38>)
 80003ba:	4807      	ldr	r0, [pc, #28]	; (80003d8 <ReadSingleFrame_handle+0x30>)
 80003bc:	f006 fc8c 	bl	8006cd8 <siprintf>
	HAL_UART_Transmit(&huart1,Tx_Buffer,sizeof(Tx_Buffer), 10);
 80003c0:	230a      	movs	r3, #10
 80003c2:	2237      	movs	r2, #55	; 0x37
 80003c4:	4904      	ldr	r1, [pc, #16]	; (80003d8 <ReadSingleFrame_handle+0x30>)
 80003c6:	4807      	ldr	r0, [pc, #28]	; (80003e4 <ReadSingleFrame_handle+0x3c>)
 80003c8:	f003 f9dc 	bl	8003784 <HAL_UART_Transmit>

	HAL_Delay(200);
 80003cc:	20c8      	movs	r0, #200	; 0xc8
 80003ce:	f000 ffa1 	bl	8001314 <HAL_Delay>
}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	200001b0 	.word	0x200001b0
 80003dc:	20000198 	.word	0x20000198
 80003e0:	08007670 	.word	0x08007670
 80003e4:	20000110 	.word	0x20000110

080003e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b08a      	sub	sp, #40	; 0x28
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ee:	f000 ff5f 	bl	80012b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f2:	f000 f871 	bl	80004d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f6:	f000 f965 	bl	80006c4 <MX_GPIO_Init>
  MX_CAN_Init();
 80003fa:	f000 f8b3 	bl	8000564 <MX_CAN_Init>
  MX_TIM4_Init();
 80003fe:	f000 f8e9 	bl	80005d4 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000402:	f000 f935 	bl	8000670 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Init(&hcan);
 8000406:	4829      	ldr	r0, [pc, #164]	; (80004ac <main+0xc4>)
 8000408:	f000 ffa8 	bl	800135c <HAL_CAN_Init>

  //Send notify signal to recieve message from actuator node
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800040c:	2110      	movs	r1, #16
 800040e:	4827      	ldr	r0, [pc, #156]	; (80004ac <main+0xc4>)
 8000410:	f001 fb9c 	bl	8001b4c <HAL_CAN_ActivateNotification>

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000414:	2301      	movs	r3, #1
 8000416:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 1;  // anything between 0 to SlaveStartFilterBank
 8000418:	2301      	movs	r3, #1
 800041a:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 800041c:	2301      	movs	r3, #1
 800041e:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x7A2 << 5;
 8000420:	f24f 4340 	movw	r3, #62528	; 0xf440
 8000424:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8000426:	2300      	movs	r3, #0
 8000428:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x7A2 << 5;
 800042a:	f24f 4340 	movw	r3, #62528	; 0xf440
 800042e:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000430:	2300      	movs	r3, #0
 8000432:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000434:	2300      	movs	r3, #0
 8000436:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000438:	2301      	movs	r3, #1
 800043a:	61fb      	str	r3, [r7, #28]
   //canfilterconfig.SlaveStartFilterBank = 14;
  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800043c:	463b      	mov	r3, r7
 800043e:	4619      	mov	r1, r3
 8000440:	481a      	ldr	r0, [pc, #104]	; (80004ac <main+0xc4>)
 8000442:	f001 f886 	bl	8001552 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan);
 8000446:	4819      	ldr	r0, [pc, #100]	; (80004ac <main+0xc4>)
 8000448:	f001 f94c 	bl	80016e4 <HAL_CAN_Start>

  //Config CAN header
  Tester_TxHeader.DLC = 8;
 800044c:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <main+0xc8>)
 800044e:	2208      	movs	r2, #8
 8000450:	611a      	str	r2, [r3, #16]
  Tester_TxHeader.ExtId = 0;
 8000452:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <main+0xc8>)
 8000454:	2200      	movs	r2, #0
 8000456:	605a      	str	r2, [r3, #4]
  Tester_TxHeader.IDE = CAN_ID_STD;
 8000458:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <main+0xc8>)
 800045a:	2200      	movs	r2, #0
 800045c:	609a      	str	r2, [r3, #8]
  Tester_TxHeader.RTR = CAN_RTR_DATA;
 800045e:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <main+0xc8>)
 8000460:	2200      	movs	r2, #0
 8000462:	60da      	str	r2, [r3, #12]
  Tester_TxHeader.StdId = 0x712;
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <main+0xc8>)
 8000466:	f240 7212 	movw	r2, #1810	; 0x712
 800046a:	601a      	str	r2, [r3, #0]
  Tester_TxHeader.TransmitGlobalTime = DISABLE;
 800046c:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <main+0xc8>)
 800046e:	2200      	movs	r2, #0
 8000470:	751a      	strb	r2, [r3, #20]

  button_Init(&BTN1, GPIOB, GPIO_PIN_0); //BTN1
 8000472:	2201      	movs	r2, #1
 8000474:	490f      	ldr	r1, [pc, #60]	; (80004b4 <main+0xcc>)
 8000476:	4810      	ldr	r0, [pc, #64]	; (80004b8 <main+0xd0>)
 8000478:	f7ff ff0c 	bl	8000294 <button_Init>
  HAL_TIM_Base_Start_IT(&htim4);
 800047c:	480f      	ldr	r0, [pc, #60]	; (80004bc <main+0xd4>)
 800047e:	f002 fd83 	bl	8002f88 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000482:	f003 ff53 	bl	800432c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Service_ComTask */
  Service_ComTaskHandle = osThreadNew(StartService_ComTask, NULL, &Service_ComTask_attributes);
 8000486:	4a0e      	ldr	r2, [pc, #56]	; (80004c0 <main+0xd8>)
 8000488:	2100      	movs	r1, #0
 800048a:	480e      	ldr	r0, [pc, #56]	; (80004c4 <main+0xdc>)
 800048c:	f003 ffb4 	bl	80043f8 <osThreadNew>
 8000490:	4603      	mov	r3, r0
 8000492:	4a0d      	ldr	r2, [pc, #52]	; (80004c8 <main+0xe0>)
 8000494:	6013      	str	r3, [r2, #0]

  /* creation of ButtonTask */
  ButtonTaskHandle = osThreadNew(StartTaskButton, NULL, &ButtonTask_attributes);
 8000496:	4a0d      	ldr	r2, [pc, #52]	; (80004cc <main+0xe4>)
 8000498:	2100      	movs	r1, #0
 800049a:	480d      	ldr	r0, [pc, #52]	; (80004d0 <main+0xe8>)
 800049c:	f003 ffac 	bl	80043f8 <osThreadNew>
 80004a0:	4603      	mov	r3, r0
 80004a2:	4a0c      	ldr	r2, [pc, #48]	; (80004d4 <main+0xec>)
 80004a4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004a6:	f003 ff73 	bl	8004390 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004aa:	e7fe      	b.n	80004aa <main+0xc2>
 80004ac:	200000a0 	.word	0x200000a0
 80004b0:	20000160 	.word	0x20000160
 80004b4:	40010c00 	.word	0x40010c00
 80004b8:	200001f4 	.word	0x200001f4
 80004bc:	200000c8 	.word	0x200000c8
 80004c0:	0800768c 	.word	0x0800768c
 80004c4:	08000771 	.word	0x08000771
 80004c8:	20000158 	.word	0x20000158
 80004cc:	080076b0 	.word	0x080076b0
 80004d0:	08000dad 	.word	0x08000dad
 80004d4:	2000015c 	.word	0x2000015c

080004d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b090      	sub	sp, #64	; 0x40
 80004dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004de:	f107 0318 	add.w	r3, r7, #24
 80004e2:	2228      	movs	r2, #40	; 0x28
 80004e4:	2100      	movs	r1, #0
 80004e6:	4618      	mov	r0, r3
 80004e8:	f006 fc16 	bl	8006d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]
 80004f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004fa:	2301      	movs	r3, #1
 80004fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000502:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000504:	2300      	movs	r3, #0
 8000506:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000508:	2301      	movs	r3, #1
 800050a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050c:	2302      	movs	r3, #2
 800050e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000514:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000516:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800051a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051c:	f107 0318 	add.w	r3, r7, #24
 8000520:	4618      	mov	r0, r3
 8000522:	f002 f8a1 	bl	8002668 <HAL_RCC_OscConfig>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800052c:	f000 fc8e 	bl	8000e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000530:	230f      	movs	r3, #15
 8000532:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000534:	2302      	movs	r3, #2
 8000536:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800053c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000540:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	2102      	movs	r1, #2
 800054a:	4618      	mov	r0, r3
 800054c:	f002 fb0e 	bl	8002b6c <HAL_RCC_ClockConfig>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000556:	f000 fc79 	bl	8000e4c <Error_Handler>
  }
}
 800055a:	bf00      	nop
 800055c:	3740      	adds	r7, #64	; 0x40
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000568:	4b18      	ldr	r3, [pc, #96]	; (80005cc <MX_CAN_Init+0x68>)
 800056a:	4a19      	ldr	r2, [pc, #100]	; (80005d0 <MX_CAN_Init+0x6c>)
 800056c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800056e:	4b17      	ldr	r3, [pc, #92]	; (80005cc <MX_CAN_Init+0x68>)
 8000570:	2204      	movs	r2, #4
 8000572:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000574:	4b15      	ldr	r3, [pc, #84]	; (80005cc <MX_CAN_Init+0x68>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_CAN_Init+0x68>)
 800057c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000580:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_CAN_Init+0x68>)
 8000584:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000588:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <MX_CAN_Init+0x68>)
 800058c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000590:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MX_CAN_Init+0x68>)
 8000594:	2200      	movs	r2, #0
 8000596:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_CAN_Init+0x68>)
 800059a:	2200      	movs	r2, #0
 800059c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <MX_CAN_Init+0x68>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_CAN_Init+0x68>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <MX_CAN_Init+0x68>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_CAN_Init+0x68>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80005b6:	4805      	ldr	r0, [pc, #20]	; (80005cc <MX_CAN_Init+0x68>)
 80005b8:	f000 fed0 	bl	800135c <HAL_CAN_Init>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80005c2:	f000 fc43 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200000a0 	.word	0x200000a0
 80005d0:	40006400 	.word	0x40006400

080005d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005da:	f107 0308 	add.w	r3, r7, #8
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e8:	463b      	mov	r3, r7
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80005f0:	4b1d      	ldr	r3, [pc, #116]	; (8000668 <MX_TIM4_Init+0x94>)
 80005f2:	4a1e      	ldr	r2, [pc, #120]	; (800066c <MX_TIM4_Init+0x98>)
 80005f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 80005f6:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <MX_TIM4_Init+0x94>)
 80005f8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80005fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005fe:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <MX_TIM4_Init+0x94>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 8000604:	4b18      	ldr	r3, [pc, #96]	; (8000668 <MX_TIM4_Init+0x94>)
 8000606:	2209      	movs	r2, #9
 8000608:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800060a:	4b17      	ldr	r3, [pc, #92]	; (8000668 <MX_TIM4_Init+0x94>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000610:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_TIM4_Init+0x94>)
 8000612:	2280      	movs	r2, #128	; 0x80
 8000614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000616:	4814      	ldr	r0, [pc, #80]	; (8000668 <MX_TIM4_Init+0x94>)
 8000618:	f002 fc66 	bl	8002ee8 <HAL_TIM_Base_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000622:	f000 fc13 	bl	8000e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	4619      	mov	r1, r3
 8000632:	480d      	ldr	r0, [pc, #52]	; (8000668 <MX_TIM4_Init+0x94>)
 8000634:	f002 fe02 	bl	800323c <HAL_TIM_ConfigClockSource>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800063e:	f000 fc05 	bl	8000e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000642:	2300      	movs	r3, #0
 8000644:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800064a:	463b      	mov	r3, r7
 800064c:	4619      	mov	r1, r3
 800064e:	4806      	ldr	r0, [pc, #24]	; (8000668 <MX_TIM4_Init+0x94>)
 8000650:	f002 ffd8 	bl	8003604 <HAL_TIMEx_MasterConfigSynchronization>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800065a:	f000 fbf7 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	3718      	adds	r7, #24
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	200000c8 	.word	0x200000c8
 800066c:	40000800 	.word	0x40000800

08000670 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_USART1_UART_Init+0x4c>)
 8000676:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <MX_USART1_UART_Init+0x50>)
 8000678:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <MX_USART1_UART_Init+0x4c>)
 800067c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000680:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_USART1_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_USART1_UART_Init+0x4c>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <MX_USART1_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_USART1_UART_Init+0x4c>)
 8000696:	220c      	movs	r2, #12
 8000698:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <MX_USART1_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_USART1_UART_Init+0x4c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_USART1_UART_Init+0x4c>)
 80006a8:	f003 f81c 	bl	80036e4 <HAL_UART_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006b2:	f000 fbcb 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000110 	.word	0x20000110
 80006c0:	40013800 	.word	0x40013800

080006c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d8:	4b23      	ldr	r3, [pc, #140]	; (8000768 <MX_GPIO_Init+0xa4>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a22      	ldr	r2, [pc, #136]	; (8000768 <MX_GPIO_Init+0xa4>)
 80006de:	f043 0320 	orr.w	r3, r3, #32
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b20      	ldr	r3, [pc, #128]	; (8000768 <MX_GPIO_Init+0xa4>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0320 	and.w	r3, r3, #32
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f0:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <MX_GPIO_Init+0xa4>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a1c      	ldr	r2, [pc, #112]	; (8000768 <MX_GPIO_Init+0xa4>)
 80006f6:	f043 0308 	orr.w	r3, r3, #8
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_GPIO_Init+0xa4>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0308 	and.w	r3, r3, #8
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_GPIO_Init+0xa4>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a16      	ldr	r2, [pc, #88]	; (8000768 <MX_GPIO_Init+0xa4>)
 800070e:	f043 0304 	orr.w	r3, r3, #4
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_GPIO_Init+0xa4>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f003 0304 	and.w	r3, r3, #4
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Tester_SecA_LED_GPIO_Port, Tester_SecA_LED_Pin, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2108      	movs	r1, #8
 8000724:	4811      	ldr	r0, [pc, #68]	; (800076c <MX_GPIO_Init+0xa8>)
 8000726:	f001 ff86 	bl	8002636 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 800072a:	2301      	movs	r3, #1
 800072c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000732:	2301      	movs	r3, #1
 8000734:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	4619      	mov	r1, r3
 800073c:	480b      	ldr	r0, [pc, #44]	; (800076c <MX_GPIO_Init+0xa8>)
 800073e:	f001 fddf 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pin : Tester_SecA_LED_Pin */
  GPIO_InitStruct.Pin = Tester_SecA_LED_Pin;
 8000742:	2308      	movs	r3, #8
 8000744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800074e:	2303      	movs	r3, #3
 8000750:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Tester_SecA_LED_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	4619      	mov	r1, r3
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_GPIO_Init+0xa8>)
 800075a:	f001 fdd1 	bl	8002300 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800075e:	bf00      	nop
 8000760:	3720      	adds	r7, #32
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000
 800076c:	40010c00 	.word	0x40010c00

08000770 <StartService_ComTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartService_ComTask */
void StartService_ComTask(void *argument)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  switch(tester_state) //change state
 8000778:	4b6e      	ldr	r3, [pc, #440]	; (8000934 <StartService_ComTask+0x1c4>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b03      	cmp	r3, #3
 800077e:	f200 82ee 	bhi.w	8000d5e <StartService_ComTask+0x5ee>
 8000782:	a201      	add	r2, pc, #4	; (adr r2, 8000788 <StartService_ComTask+0x18>)
 8000784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000788:	08000799 	.word	0x08000799
 800078c:	080007c1 	.word	0x080007c1
 8000790:	08000831 	.word	0x08000831
 8000794:	080008e1 	.word	0x080008e1
	  {
	  	  case INIT_STATE:
	  	  {
	  		  //check buton_state
	  		  if(button_sig==0)
 8000798:	4b67      	ldr	r3, [pc, #412]	; (8000938 <StartService_ComTask+0x1c8>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d103      	bne.n	80007a8 <StartService_ComTask+0x38>
	  		  {
	  			  tester_state = REQUEST_READ;
 80007a0:	4b64      	ldr	r3, [pc, #400]	; (8000934 <StartService_ComTask+0x1c4>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	701a      	strb	r2, [r3, #0]
	  		  } else if(button_sig==1)
	  		  {
	  			  tester_state = REQUEST_WRITE;
	  			  button_sig = 0;
	  		  }
	  		  break;
 80007a6:	e2d5      	b.n	8000d54 <StartService_ComTask+0x5e4>
	  		  } else if(button_sig==1)
 80007a8:	4b63      	ldr	r3, [pc, #396]	; (8000938 <StartService_ComTask+0x1c8>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	f040 82d1 	bne.w	8000d54 <StartService_ComTask+0x5e4>
	  			  tester_state = REQUEST_WRITE;
 80007b2:	4b60      	ldr	r3, [pc, #384]	; (8000934 <StartService_ComTask+0x1c4>)
 80007b4:	2202      	movs	r2, #2
 80007b6:	701a      	strb	r2, [r3, #0]
	  			  button_sig = 0;
 80007b8:	4b5f      	ldr	r3, [pc, #380]	; (8000938 <StartService_ComTask+0x1c8>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
	  		  break;
 80007be:	e2c9      	b.n	8000d54 <StartService_ComTask+0x5e4>
	  	  }
	  	  case REQUEST_READ: //send to ECU
	  	  {
	  		  //Gui theo chu ky 1s, tuc la cu 1 giay gui goi tin de doc 1 lan
	  		  HAL_Delay(1000);
 80007c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c4:	f000 fda6 	bl	8001314 <HAL_Delay>

	  		  if (HAL_CAN_AddTxMessage(&hcan, &Tester_TxHeader, ReadRq_TxData, &Tester_TxMailbox) != HAL_OK)
 80007c8:	4b5c      	ldr	r3, [pc, #368]	; (800093c <StartService_ComTask+0x1cc>)
 80007ca:	4a5d      	ldr	r2, [pc, #372]	; (8000940 <StartService_ComTask+0x1d0>)
 80007cc:	495d      	ldr	r1, [pc, #372]	; (8000944 <StartService_ComTask+0x1d4>)
 80007ce:	485e      	ldr	r0, [pc, #376]	; (8000948 <StartService_ComTask+0x1d8>)
 80007d0:	f000 ffcc 	bl	800176c <HAL_CAN_AddTxMessage>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d003      	beq.n	80007e2 <StartService_ComTask+0x72>
	  		  {
	  			  error_flag = 1;
 80007da:	4b5c      	ldr	r3, [pc, #368]	; (800094c <StartService_ComTask+0x1dc>)
 80007dc:	2201      	movs	r2, #1
 80007de:	701a      	strb	r2, [r3, #0]
 80007e0:	e002      	b.n	80007e8 <StartService_ComTask+0x78>
	  		  } else //Transmit oke
	  		  {
	  			  error_flag = 0;
 80007e2:	4b5a      	ldr	r3, [pc, #360]	; (800094c <StartService_ComTask+0x1dc>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
	  		  }

	  		  if(flag_read_response == 1) {
 80007e8:	4b59      	ldr	r3, [pc, #356]	; (8000950 <StartService_ComTask+0x1e0>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	f040 82b3 	bne.w	8000d58 <StartService_ComTask+0x5e8>
	  			  FT_String = SF_N_PCI_FrameTypeHandle(Tester_RxData[3]);
 80007f2:	4b58      	ldr	r3, [pc, #352]	; (8000954 <StartService_ComTask+0x1e4>)
 80007f4:	78db      	ldrb	r3, [r3, #3]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fdc6 	bl	8000388 <SF_N_PCI_FrameTypeHandle>
 80007fc:	4603      	mov	r3, r0
 80007fe:	461a      	mov	r2, r3
 8000800:	4b55      	ldr	r3, [pc, #340]	; (8000958 <StartService_ComTask+0x1e8>)
 8000802:	701a      	strb	r2, [r3, #0]
	  			  FrameType = GetFrameType(FT_String); //check
 8000804:	4b54      	ldr	r3, [pc, #336]	; (8000958 <StartService_ComTask+0x1e8>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fd97 	bl	800033c <GetFrameType>
 800080e:	4603      	mov	r3, r0
 8000810:	461a      	mov	r2, r3
 8000812:	4b52      	ldr	r3, [pc, #328]	; (800095c <StartService_ComTask+0x1ec>)
 8000814:	701a      	strb	r2, [r3, #0]
	  			  if(FrameType == FT_SINGLEFRAME)
 8000816:	4b51      	ldr	r3, [pc, #324]	; (800095c <StartService_ComTask+0x1ec>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d104      	bne.n	8000828 <StartService_ComTask+0xb8>
	  			  {
	  				  ReadSingleFrame_handle();
 800081e:	f7ff fdc3 	bl	80003a8 <ReadSingleFrame_handle>
	  				  tester_state = INIT_STATE;
 8000822:	4b44      	ldr	r3, [pc, #272]	; (8000934 <StartService_ComTask+0x1c4>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  flag_read_response = 0;
 8000828:	4b49      	ldr	r3, [pc, #292]	; (8000950 <StartService_ComTask+0x1e0>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 800082e:	e293      	b.n	8000d58 <StartService_ComTask+0x5e8>
	  	   }
	  	   case REQUEST_WRITE:
	  	   {
	  		   switch(write_state)
 8000830:	4b4b      	ldr	r3, [pc, #300]	; (8000960 <StartService_ComTask+0x1f0>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d002      	beq.n	800083e <StartService_ComTask+0xce>
 8000838:	2b01      	cmp	r3, #1
 800083a:	d020      	beq.n	800087e <StartService_ComTask+0x10e>
	  	 				flag_read_response = 0;
	  	 			  }
	  	 			break;
	  	 		  }
	  	 		}
	  		   break; //BREAK REQUEST WRITE CASE
 800083c:	e28f      	b.n	8000d5e <StartService_ComTask+0x5ee>
	  		   		   if(security_flag == 0)
 800083e:	4b49      	ldr	r3, [pc, #292]	; (8000964 <StartService_ComTask+0x1f4>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d103      	bne.n	800084e <StartService_ComTask+0xde>
	  		   			   tester_state = REQUEST_SECURITY_ACCESS;
 8000846:	4b3b      	ldr	r3, [pc, #236]	; (8000934 <StartService_ComTask+0x1c4>)
 8000848:	2203      	movs	r2, #3
 800084a:	701a      	strb	r2, [r3, #0]
	  	 				break;
 800084c:	e044      	b.n	80008d8 <StartService_ComTask+0x168>
	  		   		   } else if (security_flag == 1)
 800084e:	4b45      	ldr	r3, [pc, #276]	; (8000964 <StartService_ComTask+0x1f4>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d140      	bne.n	80008d8 <StartService_ComTask+0x168>
	  		   			   if(HAL_CAN_AddTxMessage(&hcan,&Tester_TxHeader,WriteRq_TxData,&Tester_TxMailbox)!=HAL_OK)
 8000856:	4b39      	ldr	r3, [pc, #228]	; (800093c <StartService_ComTask+0x1cc>)
 8000858:	4a43      	ldr	r2, [pc, #268]	; (8000968 <StartService_ComTask+0x1f8>)
 800085a:	493a      	ldr	r1, [pc, #232]	; (8000944 <StartService_ComTask+0x1d4>)
 800085c:	483a      	ldr	r0, [pc, #232]	; (8000948 <StartService_ComTask+0x1d8>)
 800085e:	f000 ff85 	bl	800176c <HAL_CAN_AddTxMessage>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d003      	beq.n	8000870 <StartService_ComTask+0x100>
	  		   				   error_flag = 1;
 8000868:	4b38      	ldr	r3, [pc, #224]	; (800094c <StartService_ComTask+0x1dc>)
 800086a:	2201      	movs	r2, #1
 800086c:	701a      	strb	r2, [r3, #0]
	  	 				break;
 800086e:	e033      	b.n	80008d8 <StartService_ComTask+0x168>
	  		   				   error_flag = 0;
 8000870:	4b36      	ldr	r3, [pc, #216]	; (800094c <StartService_ComTask+0x1dc>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
	  		   				   write_state = WRITE_RESPONSE;
 8000876:	4b3a      	ldr	r3, [pc, #232]	; (8000960 <StartService_ComTask+0x1f0>)
 8000878:	2201      	movs	r2, #1
 800087a:	701a      	strb	r2, [r3, #0]
	  	 				break;
 800087c:	e02c      	b.n	80008d8 <StartService_ComTask+0x168>
	  	 			if(flag_read_response == 1)
 800087e:	4b34      	ldr	r3, [pc, #208]	; (8000950 <StartService_ComTask+0x1e0>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d12a      	bne.n	80008dc <StartService_ComTask+0x16c>
	  	 				FT_String = SF_N_PCI_FrameTypeHandle(Tester_RxData[0]);
 8000886:	4b33      	ldr	r3, [pc, #204]	; (8000954 <StartService_ComTask+0x1e4>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fd7c 	bl	8000388 <SF_N_PCI_FrameTypeHandle>
 8000890:	4603      	mov	r3, r0
 8000892:	461a      	mov	r2, r3
 8000894:	4b30      	ldr	r3, [pc, #192]	; (8000958 <StartService_ComTask+0x1e8>)
 8000896:	701a      	strb	r2, [r3, #0]
	  	 				FrameType = GetFrameType(FT_String);
 8000898:	4b2f      	ldr	r3, [pc, #188]	; (8000958 <StartService_ComTask+0x1e8>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fd4d 	bl	800033c <GetFrameType>
 80008a2:	4603      	mov	r3, r0
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b2d      	ldr	r3, [pc, #180]	; (800095c <StartService_ComTask+0x1ec>)
 80008a8:	701a      	strb	r2, [r3, #0]
	  	 				if(FrameType==0)
 80008aa:	4b2c      	ldr	r3, [pc, #176]	; (800095c <StartService_ComTask+0x1ec>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d10e      	bne.n	80008d0 <StartService_ComTask+0x160>
	  	 					switch(Tester_RxData[1])
 80008b2:	4b28      	ldr	r3, [pc, #160]	; (8000954 <StartService_ComTask+0x1e4>)
 80008b4:	785b      	ldrb	r3, [r3, #1]
 80008b6:	2b6e      	cmp	r3, #110	; 0x6e
 80008b8:	d002      	beq.n	80008c0 <StartService_ComTask+0x150>
 80008ba:	2b7f      	cmp	r3, #127	; 0x7f
 80008bc:	d004      	beq.n	80008c8 <StartService_ComTask+0x158>
 80008be:	e007      	b.n	80008d0 <StartService_ComTask+0x160>
	  	 							tester_state = REQUEST_READ; //positive response -> get back to init state
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <StartService_ComTask+0x1c4>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	701a      	strb	r2, [r3, #0]
	  	 							break;
 80008c6:	e003      	b.n	80008d0 <StartService_ComTask+0x160>
	  								tester_state = INIT_STATE;
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <StartService_ComTask+0x1c4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
	  								break;
 80008ce:	bf00      	nop
	  	 				flag_read_response = 0;
 80008d0:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <StartService_ComTask+0x1e0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
	  	 			break;
 80008d6:	e001      	b.n	80008dc <StartService_ComTask+0x16c>
	  	 				break;
 80008d8:	bf00      	nop
 80008da:	e240      	b.n	8000d5e <StartService_ComTask+0x5ee>
	  	 			break;
 80008dc:	bf00      	nop
	  		   break; //BREAK REQUEST WRITE CASE
 80008de:	e23e      	b.n	8000d5e <StartService_ComTask+0x5ee>
	  	 	}
	  	 	case REQUEST_SECURITY_ACCESS:
	  	 	{
	  	 		switch(security_state)
 80008e0:	4b22      	ldr	r3, [pc, #136]	; (800096c <StartService_ComTask+0x1fc>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	f000 81fc 	beq.w	8000ce2 <StartService_ComTask+0x572>
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	f300 8236 	bgt.w	8000d5c <StartService_ComTask+0x5ec>
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d003      	beq.n	80008fc <StartService_ComTask+0x18c>
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	f000 80df 	beq.w	8000ab8 <StartService_ComTask+0x348>

	  	 		//sau khi nhan duoc du lieu accept security access tien hanh
	  	 		//quay ve trang thai write
	  	 		//dong thoi bat den - kich hoat flag o timer
	  	 		//
	  	 		break;
 80008fa:	e22f      	b.n	8000d5c <StartService_ComTask+0x5ec>
	  					switch(request_seedsend_flag)
 80008fc:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <StartService_ComTask+0x200>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d002      	beq.n	800090a <StartService_ComTask+0x19a>
 8000904:	2b01      	cmp	r3, #1
 8000906:	d037      	beq.n	8000978 <StartService_ComTask+0x208>
	  	 				break;
 8000908:	e223      	b.n	8000d52 <StartService_ComTask+0x5e2>
	  							if(HAL_CAN_AddTxMessage(&hcan,&Tester_TxHeader,SecARq_TxData, &Tester_TxMailbox) != HAL_OK)
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <StartService_ComTask+0x1cc>)
 800090c:	4a19      	ldr	r2, [pc, #100]	; (8000974 <StartService_ComTask+0x204>)
 800090e:	490d      	ldr	r1, [pc, #52]	; (8000944 <StartService_ComTask+0x1d4>)
 8000910:	480d      	ldr	r0, [pc, #52]	; (8000948 <StartService_ComTask+0x1d8>)
 8000912:	f000 ff2b 	bl	800176c <HAL_CAN_AddTxMessage>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d003      	beq.n	8000924 <StartService_ComTask+0x1b4>
	  								error_flag = 1;
 800091c:	4b0b      	ldr	r3, [pc, #44]	; (800094c <StartService_ComTask+0x1dc>)
 800091e:	2201      	movs	r2, #1
 8000920:	701a      	strb	r2, [r3, #0]
	  							break;
 8000922:	e0c8      	b.n	8000ab6 <StartService_ComTask+0x346>
	  								error_flag = 0;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <StartService_ComTask+0x1dc>)
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
	  								request_seedsend_flag = 1; // co bao hieu da gui seed request
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <StartService_ComTask+0x200>)
 800092c:	2201      	movs	r2, #1
 800092e:	701a      	strb	r2, [r3, #0]
	  							break;
 8000930:	e0c1      	b.n	8000ab6 <StartService_ComTask+0x346>
 8000932:	bf00      	nop
 8000934:	2000020d 	.word	0x2000020d
 8000938:	2000020c 	.word	0x2000020c
 800093c:	20000194 	.word	0x20000194
 8000940:	20000004 	.word	0x20000004
 8000944:	20000160 	.word	0x20000160
 8000948:	200000a0 	.word	0x200000a0
 800094c:	200001eb 	.word	0x200001eb
 8000950:	200001e9 	.word	0x200001e9
 8000954:	20000198 	.word	0x20000198
 8000958:	200001e7 	.word	0x200001e7
 800095c:	200001e8 	.word	0x200001e8
 8000960:	20000210 	.word	0x20000210
 8000964:	200001ea 	.word	0x200001ea
 8000968:	20000014 	.word	0x20000014
 800096c:	2000020e 	.word	0x2000020e
 8000970:	200001ec 	.word	0x200001ec
 8000974:	2000000c 	.word	0x2000000c
	  							if(flag_read_response)
 8000978:	4b93      	ldr	r3, [pc, #588]	; (8000bc8 <StartService_ComTask+0x458>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	f000 8099 	beq.w	8000ab4 <StartService_ComTask+0x344>
	  				 				seed[0] = Tester_RxData[3];
 8000982:	4b92      	ldr	r3, [pc, #584]	; (8000bcc <StartService_ComTask+0x45c>)
 8000984:	78da      	ldrb	r2, [r3, #3]
 8000986:	4b92      	ldr	r3, [pc, #584]	; (8000bd0 <StartService_ComTask+0x460>)
 8000988:	701a      	strb	r2, [r3, #0]
	  				 				seed[1] = Tester_RxData[4];
 800098a:	4b90      	ldr	r3, [pc, #576]	; (8000bcc <StartService_ComTask+0x45c>)
 800098c:	791a      	ldrb	r2, [r3, #4]
 800098e:	4b90      	ldr	r3, [pc, #576]	; (8000bd0 <StartService_ComTask+0x460>)
 8000990:	705a      	strb	r2, [r3, #1]
	  				 				seed[2] = Tester_RxData[5];
 8000992:	4b8e      	ldr	r3, [pc, #568]	; (8000bcc <StartService_ComTask+0x45c>)
 8000994:	795a      	ldrb	r2, [r3, #5]
 8000996:	4b8e      	ldr	r3, [pc, #568]	; (8000bd0 <StartService_ComTask+0x460>)
 8000998:	709a      	strb	r2, [r3, #2]
	  				 				seed[3] = Tester_RxData[6];
 800099a:	4b8c      	ldr	r3, [pc, #560]	; (8000bcc <StartService_ComTask+0x45c>)
 800099c:	799a      	ldrb	r2, [r3, #6]
 800099e:	4b8c      	ldr	r3, [pc, #560]	; (8000bd0 <StartService_ComTask+0x460>)
 80009a0:	70da      	strb	r2, [r3, #3]
	  				 				key[0] = seed[0] ^ seed[1]; //xor
 80009a2:	4b8b      	ldr	r3, [pc, #556]	; (8000bd0 <StartService_ComTask+0x460>)
 80009a4:	781a      	ldrb	r2, [r3, #0]
 80009a6:	4b8a      	ldr	r3, [pc, #552]	; (8000bd0 <StartService_ComTask+0x460>)
 80009a8:	785b      	ldrb	r3, [r3, #1]
 80009aa:	4053      	eors	r3, r2
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b89      	ldr	r3, [pc, #548]	; (8000bd4 <StartService_ComTask+0x464>)
 80009b0:	701a      	strb	r2, [r3, #0]
	  				 				key[1] = seed[1] + seed[2];
 80009b2:	4b87      	ldr	r3, [pc, #540]	; (8000bd0 <StartService_ComTask+0x460>)
 80009b4:	785a      	ldrb	r2, [r3, #1]
 80009b6:	4b86      	ldr	r3, [pc, #536]	; (8000bd0 <StartService_ComTask+0x460>)
 80009b8:	789b      	ldrb	r3, [r3, #2]
 80009ba:	4413      	add	r3, r2
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4b85      	ldr	r3, [pc, #532]	; (8000bd4 <StartService_ComTask+0x464>)
 80009c0:	705a      	strb	r2, [r3, #1]
	  				 				key[2] = seed[2] ^ seed[3];
 80009c2:	4b83      	ldr	r3, [pc, #524]	; (8000bd0 <StartService_ComTask+0x460>)
 80009c4:	789a      	ldrb	r2, [r3, #2]
 80009c6:	4b82      	ldr	r3, [pc, #520]	; (8000bd0 <StartService_ComTask+0x460>)
 80009c8:	78db      	ldrb	r3, [r3, #3]
 80009ca:	4053      	eors	r3, r2
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4b81      	ldr	r3, [pc, #516]	; (8000bd4 <StartService_ComTask+0x464>)
 80009d0:	709a      	strb	r2, [r3, #2]
	  				 				key[3] = seed[3] + seed[0];
 80009d2:	4b7f      	ldr	r3, [pc, #508]	; (8000bd0 <StartService_ComTask+0x460>)
 80009d4:	78da      	ldrb	r2, [r3, #3]
 80009d6:	4b7e      	ldr	r3, [pc, #504]	; (8000bd0 <StartService_ComTask+0x460>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b7d      	ldr	r3, [pc, #500]	; (8000bd4 <StartService_ComTask+0x464>)
 80009e0:	70da      	strb	r2, [r3, #3]
	  				 				key[4] = seed[0] | seed[1];
 80009e2:	4b7b      	ldr	r3, [pc, #492]	; (8000bd0 <StartService_ComTask+0x460>)
 80009e4:	781a      	ldrb	r2, [r3, #0]
 80009e6:	4b7a      	ldr	r3, [pc, #488]	; (8000bd0 <StartService_ComTask+0x460>)
 80009e8:	785b      	ldrb	r3, [r3, #1]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4b79      	ldr	r3, [pc, #484]	; (8000bd4 <StartService_ComTask+0x464>)
 80009f0:	711a      	strb	r2, [r3, #4]
	  				 				key[5] = seed[1] + seed[2];
 80009f2:	4b77      	ldr	r3, [pc, #476]	; (8000bd0 <StartService_ComTask+0x460>)
 80009f4:	785a      	ldrb	r2, [r3, #1]
 80009f6:	4b76      	ldr	r3, [pc, #472]	; (8000bd0 <StartService_ComTask+0x460>)
 80009f8:	789b      	ldrb	r3, [r3, #2]
 80009fa:	4413      	add	r3, r2
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	4b75      	ldr	r3, [pc, #468]	; (8000bd4 <StartService_ComTask+0x464>)
 8000a00:	715a      	strb	r2, [r3, #5]
	  				 				key[6] = seed[2] | seed[3];
 8000a02:	4b73      	ldr	r3, [pc, #460]	; (8000bd0 <StartService_ComTask+0x460>)
 8000a04:	789a      	ldrb	r2, [r3, #2]
 8000a06:	4b72      	ldr	r3, [pc, #456]	; (8000bd0 <StartService_ComTask+0x460>)
 8000a08:	78db      	ldrb	r3, [r3, #3]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4b71      	ldr	r3, [pc, #452]	; (8000bd4 <StartService_ComTask+0x464>)
 8000a10:	719a      	strb	r2, [r3, #6]
	  				 				key[7] = seed[3] + seed[0];
 8000a12:	4b6f      	ldr	r3, [pc, #444]	; (8000bd0 <StartService_ComTask+0x460>)
 8000a14:	78da      	ldrb	r2, [r3, #3]
 8000a16:	4b6e      	ldr	r3, [pc, #440]	; (8000bd0 <StartService_ComTask+0x460>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4b6d      	ldr	r3, [pc, #436]	; (8000bd4 <StartService_ComTask+0x464>)
 8000a20:	71da      	strb	r2, [r3, #7]
	  				 				key[8] = seed[0] & seed[1];
 8000a22:	4b6b      	ldr	r3, [pc, #428]	; (8000bd0 <StartService_ComTask+0x460>)
 8000a24:	781a      	ldrb	r2, [r3, #0]
 8000a26:	4b6a      	ldr	r3, [pc, #424]	; (8000bd0 <StartService_ComTask+0x460>)
 8000a28:	785b      	ldrb	r3, [r3, #1]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4b69      	ldr	r3, [pc, #420]	; (8000bd4 <StartService_ComTask+0x464>)
 8000a30:	721a      	strb	r2, [r3, #8]
	  				 				key[9] = seed[1] + seed[2];
 8000a32:	4b67      	ldr	r3, [pc, #412]	; (8000bd0 <StartService_ComTask+0x460>)
 8000a34:	785a      	ldrb	r2, [r3, #1]
 8000a36:	4b66      	ldr	r3, [pc, #408]	; (8000bd0 <StartService_ComTask+0x460>)
 8000a38:	789b      	ldrb	r3, [r3, #2]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4b65      	ldr	r3, [pc, #404]	; (8000bd4 <StartService_ComTask+0x464>)
 8000a40:	725a      	strb	r2, [r3, #9]
	  				 				key[10] = seed[2] & seed[3];
 8000a42:	4b63      	ldr	r3, [pc, #396]	; (8000bd0 <StartService_ComTask+0x460>)
 8000a44:	789a      	ldrb	r2, [r3, #2]
 8000a46:	4b62      	ldr	r3, [pc, #392]	; (8000bd0 <StartService_ComTask+0x460>)
 8000a48:	78db      	ldrb	r3, [r3, #3]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4b61      	ldr	r3, [pc, #388]	; (8000bd4 <StartService_ComTask+0x464>)
 8000a50:	729a      	strb	r2, [r3, #10]
	  				 				key[11] = seed[3] + seed[0];
 8000a52:	4b5f      	ldr	r3, [pc, #380]	; (8000bd0 <StartService_ComTask+0x460>)
 8000a54:	78da      	ldrb	r2, [r3, #3]
 8000a56:	4b5e      	ldr	r3, [pc, #376]	; (8000bd0 <StartService_ComTask+0x460>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4b5d      	ldr	r3, [pc, #372]	; (8000bd4 <StartService_ComTask+0x464>)
 8000a60:	72da      	strb	r2, [r3, #11]
	  				 				key[12] = seed[0] - seed[1];
 8000a62:	4b5b      	ldr	r3, [pc, #364]	; (8000bd0 <StartService_ComTask+0x460>)
 8000a64:	781a      	ldrb	r2, [r3, #0]
 8000a66:	4b5a      	ldr	r3, [pc, #360]	; (8000bd0 <StartService_ComTask+0x460>)
 8000a68:	785b      	ldrb	r3, [r3, #1]
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4b59      	ldr	r3, [pc, #356]	; (8000bd4 <StartService_ComTask+0x464>)
 8000a70:	731a      	strb	r2, [r3, #12]
	  				 				key[13] = seed[1] + seed[2];
 8000a72:	4b57      	ldr	r3, [pc, #348]	; (8000bd0 <StartService_ComTask+0x460>)
 8000a74:	785a      	ldrb	r2, [r3, #1]
 8000a76:	4b56      	ldr	r3, [pc, #344]	; (8000bd0 <StartService_ComTask+0x460>)
 8000a78:	789b      	ldrb	r3, [r3, #2]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4b55      	ldr	r3, [pc, #340]	; (8000bd4 <StartService_ComTask+0x464>)
 8000a80:	735a      	strb	r2, [r3, #13]
	  				 				key[14] = seed[2] - seed[3];
 8000a82:	4b53      	ldr	r3, [pc, #332]	; (8000bd0 <StartService_ComTask+0x460>)
 8000a84:	789a      	ldrb	r2, [r3, #2]
 8000a86:	4b52      	ldr	r3, [pc, #328]	; (8000bd0 <StartService_ComTask+0x460>)
 8000a88:	78db      	ldrb	r3, [r3, #3]
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4b51      	ldr	r3, [pc, #324]	; (8000bd4 <StartService_ComTask+0x464>)
 8000a90:	739a      	strb	r2, [r3, #14]
	  				 				key[15] = seed[3] + seed[0];
 8000a92:	4b4f      	ldr	r3, [pc, #316]	; (8000bd0 <StartService_ComTask+0x460>)
 8000a94:	78da      	ldrb	r2, [r3, #3]
 8000a96:	4b4e      	ldr	r3, [pc, #312]	; (8000bd0 <StartService_ComTask+0x460>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4b4d      	ldr	r3, [pc, #308]	; (8000bd4 <StartService_ComTask+0x464>)
 8000aa0:	73da      	strb	r2, [r3, #15]
	  								security_state = SEND_KEY;
 8000aa2:	4b4d      	ldr	r3, [pc, #308]	; (8000bd8 <StartService_ComTask+0x468>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	701a      	strb	r2, [r3, #0]
	  								flag_read_response = 0;
 8000aa8:	4b47      	ldr	r3, [pc, #284]	; (8000bc8 <StartService_ComTask+0x458>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
	  								request_seedsend_flag = 0;
 8000aae:	4b4b      	ldr	r3, [pc, #300]	; (8000bdc <StartService_ComTask+0x46c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]
	  							break;
 8000ab4:	bf00      	nop
	  	 				break;
 8000ab6:	e14c      	b.n	8000d52 <StartService_ComTask+0x5e2>
	  	 				switch(multiflow_state)
 8000ab8:	4b49      	ldr	r3, [pc, #292]	; (8000be0 <StartService_ComTask+0x470>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	f000 80a3 	beq.w	8000c08 <StartService_ComTask+0x498>
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	f300 8142 	bgt.w	8000d4c <StartService_ComTask+0x5dc>
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d002      	beq.n	8000ad2 <StartService_ComTask+0x362>
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d04e      	beq.n	8000b6e <StartService_ComTask+0x3fe>
	  	 				break; //break for SEND KEY
 8000ad0:	e13c      	b.n	8000d4c <StartService_ComTask+0x5dc>
	  	 						switch(send_firstframe_flag)
 8000ad2:	4b44      	ldr	r3, [pc, #272]	; (8000be4 <StartService_ComTask+0x474>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d002      	beq.n	8000ae0 <StartService_ComTask+0x370>
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d038      	beq.n	8000b50 <StartService_ComTask+0x3e0>
	  	 						break;
 8000ade:	e0ff      	b.n	8000ce0 <StartService_ComTask+0x570>
	  	 								UnlockRq_TxData[0] = 0x10;
 8000ae0:	4b41      	ldr	r3, [pc, #260]	; (8000be8 <StartService_ComTask+0x478>)
 8000ae2:	2210      	movs	r2, #16
 8000ae4:	701a      	strb	r2, [r3, #0]
	  	 								UnlockRq_TxData[1] = 0x16; //0-15 KEY DATA
 8000ae6:	4b40      	ldr	r3, [pc, #256]	; (8000be8 <StartService_ComTask+0x478>)
 8000ae8:	2216      	movs	r2, #22
 8000aea:	705a      	strb	r2, [r3, #1]
	  	 								UnlockRq_TxData[2] = 0x27; //securiy SID
 8000aec:	4b3e      	ldr	r3, [pc, #248]	; (8000be8 <StartService_ComTask+0x478>)
 8000aee:	2227      	movs	r2, #39	; 0x27
 8000af0:	709a      	strb	r2, [r3, #2]
	  	 								UnlockRq_TxData[3] = 0x02; //security key - level 1
 8000af2:	4b3d      	ldr	r3, [pc, #244]	; (8000be8 <StartService_ComTask+0x478>)
 8000af4:	2202      	movs	r2, #2
 8000af6:	70da      	strb	r2, [r3, #3]
	  	 								for(index_array=0;index_array<4;index_array++)
 8000af8:	4b3c      	ldr	r3, [pc, #240]	; (8000bec <StartService_ComTask+0x47c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	801a      	strh	r2, [r3, #0]
 8000afe:	e00f      	b.n	8000b20 <StartService_ComTask+0x3b0>
	  	 									UnlockRq_TxData[index_array+4] = key[index_array];
 8000b00:	4b3a      	ldr	r3, [pc, #232]	; (8000bec <StartService_ComTask+0x47c>)
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	4619      	mov	r1, r3
 8000b06:	4b39      	ldr	r3, [pc, #228]	; (8000bec <StartService_ComTask+0x47c>)
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	3304      	adds	r3, #4
 8000b0c:	4a31      	ldr	r2, [pc, #196]	; (8000bd4 <StartService_ComTask+0x464>)
 8000b0e:	5c51      	ldrb	r1, [r2, r1]
 8000b10:	4a35      	ldr	r2, [pc, #212]	; (8000be8 <StartService_ComTask+0x478>)
 8000b12:	54d1      	strb	r1, [r2, r3]
	  	 								for(index_array=0;index_array<4;index_array++)
 8000b14:	4b35      	ldr	r3, [pc, #212]	; (8000bec <StartService_ComTask+0x47c>)
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	4b33      	ldr	r3, [pc, #204]	; (8000bec <StartService_ComTask+0x47c>)
 8000b1e:	801a      	strh	r2, [r3, #0]
 8000b20:	4b32      	ldr	r3, [pc, #200]	; (8000bec <StartService_ComTask+0x47c>)
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	2b03      	cmp	r3, #3
 8000b26:	d9eb      	bls.n	8000b00 <StartService_ComTask+0x390>
	  	 								if(HAL_CAN_AddTxMessage(&hcan,&Tester_TxHeader,UnlockRq_TxData,&Tester_TxMailbox) != HAL_OK)
 8000b28:	4b31      	ldr	r3, [pc, #196]	; (8000bf0 <StartService_ComTask+0x480>)
 8000b2a:	4a2f      	ldr	r2, [pc, #188]	; (8000be8 <StartService_ComTask+0x478>)
 8000b2c:	4931      	ldr	r1, [pc, #196]	; (8000bf4 <StartService_ComTask+0x484>)
 8000b2e:	4832      	ldr	r0, [pc, #200]	; (8000bf8 <StartService_ComTask+0x488>)
 8000b30:	f000 fe1c 	bl	800176c <HAL_CAN_AddTxMessage>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d003      	beq.n	8000b42 <StartService_ComTask+0x3d2>
	  	 									error_flag = 1;
 8000b3a:	4b30      	ldr	r3, [pc, #192]	; (8000bfc <StartService_ComTask+0x48c>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
	  	 								break;
 8000b40:	e014      	b.n	8000b6c <StartService_ComTask+0x3fc>
	  	 									error_flag = 0;
 8000b42:	4b2e      	ldr	r3, [pc, #184]	; (8000bfc <StartService_ComTask+0x48c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
	  	 									send_firstframe_flag = 1; // co bao hieu da gui first frame
 8000b48:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <StartService_ComTask+0x474>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
	  	 								break;
 8000b4e:	e00d      	b.n	8000b6c <StartService_ComTask+0x3fc>
	  	 								if(flag_read_response) //recieve flow control
 8000b50:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <StartService_ComTask+0x458>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d008      	beq.n	8000b6a <StartService_ComTask+0x3fa>
	  	 									multiflow_state = FlOWCONTROL_CHECK;
 8000b58:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <StartService_ComTask+0x470>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]
	  	 									flag_read_response = 0;
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <StartService_ComTask+0x458>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
	  	 									send_firstframe_flag = 0;
 8000b64:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <StartService_ComTask+0x474>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]
	  	 								break;
 8000b6a:	bf00      	nop
	  	 						break;
 8000b6c:	e0b8      	b.n	8000ce0 <StartService_ComTask+0x570>
	  	 						FT_String = SF_N_PCI_FrameTypeHandle(Tester_RxData[0]);
 8000b6e:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <StartService_ComTask+0x45c>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fc08 	bl	8000388 <SF_N_PCI_FrameTypeHandle>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <StartService_ComTask+0x490>)
 8000b7e:	701a      	strb	r2, [r3, #0]
	  	 						FrameType = GetFrameType(FT_String);
 8000b80:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <StartService_ComTask+0x490>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fbd9 	bl	800033c <GetFrameType>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <StartService_ComTask+0x494>)
 8000b90:	701a      	strb	r2, [r3, #0]
	  	 						if(FrameType == 3) //Frametype = 3 -> Frame nhan la Frame flow control tu Tester
 8000b92:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <StartService_ComTask+0x494>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b03      	cmp	r3, #3
 8000b98:	f040 80a1 	bne.w	8000cde <StartService_ComTask+0x56e>
	  	 							switch(Tester_RxData[0] & 0x0f)
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <StartService_ComTask+0x45c>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	f003 030f 	and.w	r3, r3, #15
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d00b      	beq.n	8000bc0 <StartService_ComTask+0x450>
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	f300 8098 	bgt.w	8000cde <StartService_ComTask+0x56e>
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d002      	beq.n	8000bb8 <StartService_ComTask+0x448>
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d006      	beq.n	8000bc4 <StartService_ComTask+0x454>
	  	 						break;
 8000bb6:	e092      	b.n	8000cde <StartService_ComTask+0x56e>
	  	 							 		multiflow_state = CONSECUTIVEFRAME_SEND;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <StartService_ComTask+0x470>)
 8000bba:	2202      	movs	r2, #2
 8000bbc:	701a      	strb	r2, [r3, #0]
	  	 							 	break;
 8000bbe:	e002      	b.n	8000bc6 <StartService_ComTask+0x456>
	  	 							 	break;
 8000bc0:	bf00      	nop
 8000bc2:	e08c      	b.n	8000cde <StartService_ComTask+0x56e>
	  	 							 	break;
 8000bc4:	bf00      	nop
	  	 						break;
 8000bc6:	e08a      	b.n	8000cde <StartService_ComTask+0x56e>
 8000bc8:	200001e9 	.word	0x200001e9
 8000bcc:	20000198 	.word	0x20000198
 8000bd0:	20000224 	.word	0x20000224
 8000bd4:	20000214 	.word	0x20000214
 8000bd8:	2000020e 	.word	0x2000020e
 8000bdc:	200001ec 	.word	0x200001ec
 8000be0:	2000020f 	.word	0x2000020f
 8000be4:	200001ed 	.word	0x200001ed
 8000be8:	200001a0 	.word	0x200001a0
 8000bec:	200001f0 	.word	0x200001f0
 8000bf0:	20000194 	.word	0x20000194
 8000bf4:	20000160 	.word	0x20000160
 8000bf8:	200000a0 	.word	0x200000a0
 8000bfc:	200001eb 	.word	0x200001eb
 8000c00:	200001e7 	.word	0x200001e7
 8000c04:	200001e8 	.word	0x200001e8
	  	 						if(MaxConsecutiveFrame_count < sequence_num) 	//done transmitting - wait for ecu response
 8000c08:	4b57      	ldr	r3, [pc, #348]	; (8000d68 <StartService_ComTask+0x5f8>)
 8000c0a:	781a      	ldrb	r2, [r3, #0]
 8000c0c:	4b57      	ldr	r3, [pc, #348]	; (8000d6c <StartService_ComTask+0x5fc>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d207      	bcs.n	8000c24 <StartService_ComTask+0x4b4>
	  	 							security_state = AUTHENTICATE_RESPONSE;
 8000c14:	4b56      	ldr	r3, [pc, #344]	; (8000d70 <StartService_ComTask+0x600>)
 8000c16:	2202      	movs	r2, #2
 8000c18:	701a      	strb	r2, [r3, #0]
	  	 							sequence_num = 1;
 8000c1a:	4b54      	ldr	r3, [pc, #336]	; (8000d6c <StartService_ComTask+0x5fc>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	701a      	strb	r2, [r3, #0]
	  	 							break;
 8000c20:	bf00      	nop
	  	 						break;
 8000c22:	e05d      	b.n	8000ce0 <StartService_ComTask+0x570>
	  	 						KeySend_TxData[0] = FT_CONSECUTIVEFRAME + sequence_num; //0x20 FT Consecutive Frame
 8000c24:	4b51      	ldr	r3, [pc, #324]	; (8000d6c <StartService_ComTask+0x5fc>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	3320      	adds	r3, #32
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	4b51      	ldr	r3, [pc, #324]	; (8000d74 <StartService_ComTask+0x604>)
 8000c2e:	701a      	strb	r2, [r3, #0]
	  	 						for(index_array = prev_index_array;index_array<prev_index_array+7;index_array++)
 8000c30:	4b51      	ldr	r3, [pc, #324]	; (8000d78 <StartService_ComTask+0x608>)
 8000c32:	881a      	ldrh	r2, [r3, #0]
 8000c34:	4b51      	ldr	r3, [pc, #324]	; (8000d7c <StartService_ComTask+0x60c>)
 8000c36:	801a      	strh	r2, [r3, #0]
 8000c38:	e02b      	b.n	8000c92 <StartService_ComTask+0x522>
	  	 							if(index_array>= 16) {
 8000c3a:	4b50      	ldr	r3, [pc, #320]	; (8000d7c <StartService_ComTask+0x60c>)
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	2b0f      	cmp	r3, #15
 8000c40:	d90f      	bls.n	8000c62 <StartService_ComTask+0x4f2>
	  	 								KeySend_TxData[3] = 0x00;
 8000c42:	4b4c      	ldr	r3, [pc, #304]	; (8000d74 <StartService_ComTask+0x604>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	70da      	strb	r2, [r3, #3]
	  	 								KeySend_TxData[4] = 0x00;
 8000c48:	4b4a      	ldr	r3, [pc, #296]	; (8000d74 <StartService_ComTask+0x604>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	711a      	strb	r2, [r3, #4]
	  	 								KeySend_TxData[5] = 0x00;
 8000c4e:	4b49      	ldr	r3, [pc, #292]	; (8000d74 <StartService_ComTask+0x604>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	715a      	strb	r2, [r3, #5]
	  	 								KeySend_TxData[6] = 0x00;
 8000c54:	4b47      	ldr	r3, [pc, #284]	; (8000d74 <StartService_ComTask+0x604>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	719a      	strb	r2, [r3, #6]
	  	 								KeySend_TxData[7] = 0x00;
 8000c5a:	4b46      	ldr	r3, [pc, #280]	; (8000d74 <StartService_ComTask+0x604>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	71da      	strb	r2, [r3, #7]
	  	 								break;
 8000c60:	e01e      	b.n	8000ca0 <StartService_ComTask+0x530>
	  	 							} else if(index_array<16)
 8000c62:	4b46      	ldr	r3, [pc, #280]	; (8000d7c <StartService_ComTask+0x60c>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	2b0f      	cmp	r3, #15
 8000c68:	d80d      	bhi.n	8000c86 <StartService_ComTask+0x516>
	  	 								KeySend_TxData[(index_array-prev_index_array)+1] = key[index_array];
 8000c6a:	4b44      	ldr	r3, [pc, #272]	; (8000d7c <StartService_ComTask+0x60c>)
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4b42      	ldr	r3, [pc, #264]	; (8000d7c <StartService_ComTask+0x60c>)
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b40      	ldr	r3, [pc, #256]	; (8000d78 <StartService_ComTask+0x608>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	1ad3      	subs	r3, r2, r3
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	4a40      	ldr	r2, [pc, #256]	; (8000d80 <StartService_ComTask+0x610>)
 8000c80:	5c51      	ldrb	r1, [r2, r1]
 8000c82:	4a3c      	ldr	r2, [pc, #240]	; (8000d74 <StartService_ComTask+0x604>)
 8000c84:	54d1      	strb	r1, [r2, r3]
	  	 						for(index_array = prev_index_array;index_array<prev_index_array+7;index_array++)
 8000c86:	4b3d      	ldr	r3, [pc, #244]	; (8000d7c <StartService_ComTask+0x60c>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	4b3b      	ldr	r3, [pc, #236]	; (8000d7c <StartService_ComTask+0x60c>)
 8000c90:	801a      	strh	r2, [r3, #0]
 8000c92:	4b39      	ldr	r3, [pc, #228]	; (8000d78 <StartService_ComTask+0x608>)
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	3306      	adds	r3, #6
 8000c98:	4a38      	ldr	r2, [pc, #224]	; (8000d7c <StartService_ComTask+0x60c>)
 8000c9a:	8812      	ldrh	r2, [r2, #0]
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	dacc      	bge.n	8000c3a <StartService_ComTask+0x4ca>
	  	 						prev_index_array = index_array;
 8000ca0:	4b36      	ldr	r3, [pc, #216]	; (8000d7c <StartService_ComTask+0x60c>)
 8000ca2:	881a      	ldrh	r2, [r3, #0]
 8000ca4:	4b34      	ldr	r3, [pc, #208]	; (8000d78 <StartService_ComTask+0x608>)
 8000ca6:	801a      	strh	r2, [r3, #0]
	  	 						if(HAL_CAN_AddTxMessage(&hcan,&Tester_TxHeader,KeySend_TxData,&Tester_TxMailbox) != HAL_OK)
 8000ca8:	4b36      	ldr	r3, [pc, #216]	; (8000d84 <StartService_ComTask+0x614>)
 8000caa:	4a32      	ldr	r2, [pc, #200]	; (8000d74 <StartService_ComTask+0x604>)
 8000cac:	4936      	ldr	r1, [pc, #216]	; (8000d88 <StartService_ComTask+0x618>)
 8000cae:	4837      	ldr	r0, [pc, #220]	; (8000d8c <StartService_ComTask+0x61c>)
 8000cb0:	f000 fd5c 	bl	800176c <HAL_CAN_AddTxMessage>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <StartService_ComTask+0x552>
	  	 							error_flag = 1;
 8000cba:	4b35      	ldr	r3, [pc, #212]	; (8000d90 <StartService_ComTask+0x620>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	701a      	strb	r2, [r3, #0]
 8000cc0:	e008      	b.n	8000cd4 <StartService_ComTask+0x564>
	  	 								error_flag = 0;
 8000cc2:	4b33      	ldr	r3, [pc, #204]	; (8000d90 <StartService_ComTask+0x620>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
	  	 								sequence_num++;
 8000cc8:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <StartService_ComTask+0x5fc>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <StartService_ComTask+0x5fc>)
 8000cd2:	701a      	strb	r2, [r3, #0]
	  	 						HAL_Delay(1500); //500ms send once CF#n
 8000cd4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000cd8:	f000 fb1c 	bl	8001314 <HAL_Delay>
	  	 						if(MaxConsecutiveFrame_count < sequence_num) 	//done transmitting - wait for ecu response
 8000cdc:	e794      	b.n	8000c08 <StartService_ComTask+0x498>
	  	 						break;
 8000cde:	bf00      	nop
	  	 				break; //break for SEND KEY
 8000ce0:	e034      	b.n	8000d4c <StartService_ComTask+0x5dc>
	  	 				if(flag_read_response==1)
 8000ce2:	4b2c      	ldr	r3, [pc, #176]	; (8000d94 <StartService_ComTask+0x624>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d132      	bne.n	8000d50 <StartService_ComTask+0x5e0>
	  	 					FT_String = SF_N_PCI_FrameTypeHandle(Tester_RxData[0]);
 8000cea:	4b2b      	ldr	r3, [pc, #172]	; (8000d98 <StartService_ComTask+0x628>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fb4a 	bl	8000388 <SF_N_PCI_FrameTypeHandle>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b28      	ldr	r3, [pc, #160]	; (8000d9c <StartService_ComTask+0x62c>)
 8000cfa:	701a      	strb	r2, [r3, #0]
	  	 					FrameType = GetFrameType(FT_String);
 8000cfc:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <StartService_ComTask+0x62c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fb1b 	bl	800033c <GetFrameType>
 8000d06:	4603      	mov	r3, r0
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <StartService_ComTask+0x630>)
 8000d0c:	701a      	strb	r2, [r3, #0]
	  	 					if(FrameType == 0) //normal single frame
 8000d0e:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <StartService_ComTask+0x630>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d114      	bne.n	8000d40 <StartService_ComTask+0x5d0>
	  	 						if(Tester_RxData[1]==(0x27+0x40)) //positive
 8000d16:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <StartService_ComTask+0x628>)
 8000d18:	785b      	ldrb	r3, [r3, #1]
 8000d1a:	2b67      	cmp	r3, #103	; 0x67
 8000d1c:	d106      	bne.n	8000d2c <StartService_ComTask+0x5bc>
	  	 							security_flag = 1;
 8000d1e:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <StartService_ComTask+0x634>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	701a      	strb	r2, [r3, #0]
	  	 							tester_state = REQUEST_WRITE;
 8000d24:	4b20      	ldr	r3, [pc, #128]	; (8000da8 <StartService_ComTask+0x638>)
 8000d26:	2202      	movs	r2, #2
 8000d28:	701a      	strb	r2, [r3, #0]
 8000d2a:	e009      	b.n	8000d40 <StartService_ComTask+0x5d0>
	  	 						} else if(Tester_RxData[1]==0x7F) //negative with invalid key error
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <StartService_ComTask+0x628>)
 8000d2e:	785b      	ldrb	r3, [r3, #1]
 8000d30:	2b7f      	cmp	r3, #127	; 0x7f
 8000d32:	d105      	bne.n	8000d40 <StartService_ComTask+0x5d0>
	  	 							security_flag = 0;
 8000d34:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <StartService_ComTask+0x634>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
	  	 							tester_state = INIT_STATE;
 8000d3a:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <StartService_ComTask+0x638>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
	  	 					ReadSingleFrame_handle(); //for debugging purpose
 8000d40:	f7ff fb32 	bl	80003a8 <ReadSingleFrame_handle>
	  	 					flag_read_response = 0;
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <StartService_ComTask+0x624>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
	  	 				break;
 8000d4a:	e001      	b.n	8000d50 <StartService_ComTask+0x5e0>
	  	 				break; //break for SEND KEY
 8000d4c:	bf00      	nop
 8000d4e:	e005      	b.n	8000d5c <StartService_ComTask+0x5ec>
	  	 				break;
 8000d50:	bf00      	nop
	  	 		break;
 8000d52:	e003      	b.n	8000d5c <StartService_ComTask+0x5ec>
	  		  break;
 8000d54:	bf00      	nop
 8000d56:	e002      	b.n	8000d5e <StartService_ComTask+0x5ee>
	  		  break;
 8000d58:	bf00      	nop
 8000d5a:	e000      	b.n	8000d5e <StartService_ComTask+0x5ee>
	  	 		break;
 8000d5c:	bf00      	nop
	  	 	}
	  	  }
	  osDelay(1);
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f003 fbf4 	bl	800454c <osDelay>
	  switch(tester_state) //change state
 8000d64:	e508      	b.n	8000778 <StartService_ComTask+0x8>
 8000d66:	bf00      	nop
 8000d68:	2000001c 	.word	0x2000001c
 8000d6c:	2000001d 	.word	0x2000001d
 8000d70:	2000020e 	.word	0x2000020e
 8000d74:	200001a8 	.word	0x200001a8
 8000d78:	200001f2 	.word	0x200001f2
 8000d7c:	200001f0 	.word	0x200001f0
 8000d80:	20000214 	.word	0x20000214
 8000d84:	20000194 	.word	0x20000194
 8000d88:	20000160 	.word	0x20000160
 8000d8c:	200000a0 	.word	0x200000a0
 8000d90:	200001eb 	.word	0x200001eb
 8000d94:	200001e9 	.word	0x200001e9
 8000d98:	20000198 	.word	0x20000198
 8000d9c:	200001e7 	.word	0x200001e7
 8000da0:	200001e8 	.word	0x200001e8
 8000da4:	200001ea 	.word	0x200001ea
 8000da8:	2000020d 	.word	0x2000020d

08000dac <StartTaskButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskButton */
void StartTaskButton(void *argument)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskButton */
	//button init
	button_Init(&BTN1, GPIOB, GPIO_PIN_0);
 8000db4:	2201      	movs	r2, #1
 8000db6:	4905      	ldr	r1, [pc, #20]	; (8000dcc <StartTaskButton+0x20>)
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <StartTaskButton+0x24>)
 8000dba:	f7ff fa6b 	bl	8000294 <button_Init>
  /* Infinite loop */
  for(;;)
  {
	button_handle(&BTN1);
 8000dbe:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <StartTaskButton+0x24>)
 8000dc0:	f7ff f9e6 	bl	8000190 <button_handle>
    osDelay(1);
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f003 fbc1 	bl	800454c <osDelay>
	button_handle(&BTN1);
 8000dca:	e7f8      	b.n	8000dbe <StartTaskButton+0x12>
 8000dcc:	40010c00 	.word	0x40010c00
 8000dd0:	200001f4 	.word	0x200001f4

08000dd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim == &htim4) //behavior led function timer
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a16      	ldr	r2, [pc, #88]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d11d      	bne.n	8000e20 <HAL_TIM_PeriodElapsedCallback+0x4c>
	{
		if(security_flag == 1)
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d119      	bne.n	8000e20 <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			//turn on led
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_SET);
 8000dec:	2201      	movs	r2, #1
 8000dee:	2108      	movs	r1, #8
 8000df0:	4813      	ldr	r0, [pc, #76]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000df2:	f001 fc20 	bl	8002636 <HAL_GPIO_WritePin>

			if(timer_cnt++==5000)
 8000df6:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	b291      	uxth	r1, r2
 8000dfe:	4a11      	ldr	r2, [pc, #68]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000e00:	8011      	strh	r1, [r2, #0]
 8000e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d10a      	bne.n	8000e20 <HAL_TIM_PeriodElapsedCallback+0x4c>
			{
				//turn off led
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2108      	movs	r1, #8
 8000e0e:	480c      	ldr	r0, [pc, #48]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000e10:	f001 fc11 	bl	8002636 <HAL_GPIO_WritePin>
				security_flag = 0;
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	701a      	strb	r2, [r3, #0]
				//reset timer
				timer_cnt = 0; //reset timer
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	801a      	strh	r2, [r3, #0]
			}
		}
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d101      	bne.n	8000e2e <HAL_TIM_PeriodElapsedCallback+0x5a>
    HAL_IncTick();
 8000e2a:	f000 fa57 	bl	80012dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200000c8 	.word	0x200000c8
 8000e3c:	200001ea 	.word	0x200001ea
 8000e40:	40010c00 	.word	0x40010c00
 8000e44:	200001ee 	.word	0x200001ee
 8000e48:	40012c00 	.word	0x40012c00

08000e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e50:	b672      	cpsid	i
}
 8000e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <Error_Handler+0x8>
	...

08000e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_MspInit+0x68>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	4a17      	ldr	r2, [pc, #92]	; (8000ec0 <HAL_MspInit+0x68>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6193      	str	r3, [r2, #24]
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_MspInit+0x68>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_MspInit+0x68>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	4a11      	ldr	r2, [pc, #68]	; (8000ec0 <HAL_MspInit+0x68>)
 8000e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e80:	61d3      	str	r3, [r2, #28]
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <HAL_MspInit+0x68>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	210f      	movs	r1, #15
 8000e92:	f06f 0001 	mvn.w	r0, #1
 8000e96:	f001 f956 	bl	8002146 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_MspInit+0x6c>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <HAL_MspInit+0x6c>)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40010000 	.word	0x40010000

08000ec8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a29      	ldr	r2, [pc, #164]	; (8000f88 <HAL_CAN_MspInit+0xc0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d14b      	bne.n	8000f80 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ee8:	4b28      	ldr	r3, [pc, #160]	; (8000f8c <HAL_CAN_MspInit+0xc4>)
 8000eea:	69db      	ldr	r3, [r3, #28]
 8000eec:	4a27      	ldr	r2, [pc, #156]	; (8000f8c <HAL_CAN_MspInit+0xc4>)
 8000eee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ef2:	61d3      	str	r3, [r2, #28]
 8000ef4:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <HAL_CAN_MspInit+0xc4>)
 8000ef6:	69db      	ldr	r3, [r3, #28]
 8000ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f00:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <HAL_CAN_MspInit+0xc4>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a21      	ldr	r2, [pc, #132]	; (8000f8c <HAL_CAN_MspInit+0xc4>)
 8000f06:	f043 0308 	orr.w	r3, r3, #8
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <HAL_CAN_MspInit+0xc4>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0308 	and.w	r3, r3, #8
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4818      	ldr	r0, [pc, #96]	; (8000f90 <HAL_CAN_MspInit+0xc8>)
 8000f2e:	f001 f9e7 	bl	8002300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	4812      	ldr	r0, [pc, #72]	; (8000f90 <HAL_CAN_MspInit+0xc8>)
 8000f48:	f001 f9da 	bl	8002300 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <HAL_CAN_MspInit+0xcc>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <HAL_CAN_MspInit+0xcc>)
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2105      	movs	r1, #5
 8000f74:	2015      	movs	r0, #21
 8000f76:	f001 f8e6 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f7a:	2015      	movs	r0, #21
 8000f7c:	f001 f8ff 	bl	800217e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f80:	bf00      	nop
 8000f82:	3728      	adds	r7, #40	; 0x28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40006400 	.word	0x40006400
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40010c00 	.word	0x40010c00
 8000f94:	40010000 	.word	0x40010000

08000f98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <HAL_TIM_Base_MspInit+0x44>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d113      	bne.n	8000fd2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <HAL_TIM_Base_MspInit+0x48>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	4a0c      	ldr	r2, [pc, #48]	; (8000fe0 <HAL_TIM_Base_MspInit+0x48>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	61d3      	str	r3, [r2, #28]
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_TIM_Base_MspInit+0x48>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2105      	movs	r1, #5
 8000fc6:	201e      	movs	r0, #30
 8000fc8:	f001 f8bd 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000fcc:	201e      	movs	r0, #30
 8000fce:	f001 f8d6 	bl	800217e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40000800 	.word	0x40000800
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a20      	ldr	r2, [pc, #128]	; (8001080 <HAL_UART_MspInit+0x9c>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d139      	bne.n	8001078 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001004:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <HAL_UART_MspInit+0xa0>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a1e      	ldr	r2, [pc, #120]	; (8001084 <HAL_UART_MspInit+0xa0>)
 800100a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <HAL_UART_MspInit+0xa0>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101c:	4b19      	ldr	r3, [pc, #100]	; (8001084 <HAL_UART_MspInit+0xa0>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a18      	ldr	r2, [pc, #96]	; (8001084 <HAL_UART_MspInit+0xa0>)
 8001022:	f043 0304 	orr.w	r3, r3, #4
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b16      	ldr	r3, [pc, #88]	; (8001084 <HAL_UART_MspInit+0xa0>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001034:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001038:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800103e:	2303      	movs	r3, #3
 8001040:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	4619      	mov	r1, r3
 8001048:	480f      	ldr	r0, [pc, #60]	; (8001088 <HAL_UART_MspInit+0xa4>)
 800104a:	f001 f959 	bl	8002300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800104e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001052:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	4619      	mov	r1, r3
 8001062:	4809      	ldr	r0, [pc, #36]	; (8001088 <HAL_UART_MspInit+0xa4>)
 8001064:	f001 f94c 	bl	8002300 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2105      	movs	r1, #5
 800106c:	2025      	movs	r0, #37	; 0x25
 800106e:	f001 f86a 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001072:	2025      	movs	r0, #37	; 0x25
 8001074:	f001 f883 	bl	800217e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001078:	bf00      	nop
 800107a:	3720      	adds	r7, #32
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40013800 	.word	0x40013800
 8001084:	40021000 	.word	0x40021000
 8001088:	40010800 	.word	0x40010800

0800108c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08c      	sub	sp, #48	; 0x30
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001094:	2300      	movs	r3, #0
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80010a2:	4b2e      	ldr	r3, [pc, #184]	; (800115c <HAL_InitTick+0xd0>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	4a2d      	ldr	r2, [pc, #180]	; (800115c <HAL_InitTick+0xd0>)
 80010a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010ac:	6193      	str	r3, [r2, #24]
 80010ae:	4b2b      	ldr	r3, [pc, #172]	; (800115c <HAL_InitTick+0xd0>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010ba:	f107 020c 	add.w	r2, r7, #12
 80010be:	f107 0310 	add.w	r3, r7, #16
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f001 fec1 	bl	8002e4c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010ca:	f001 feab 	bl	8002e24 <HAL_RCC_GetPCLK2Freq>
 80010ce:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d2:	4a23      	ldr	r2, [pc, #140]	; (8001160 <HAL_InitTick+0xd4>)
 80010d4:	fba2 2303 	umull	r2, r3, r2, r3
 80010d8:	0c9b      	lsrs	r3, r3, #18
 80010da:	3b01      	subs	r3, #1
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <HAL_InitTick+0xd8>)
 80010e0:	4a21      	ldr	r2, [pc, #132]	; (8001168 <HAL_InitTick+0xdc>)
 80010e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80010e4:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <HAL_InitTick+0xd8>)
 80010e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010ea:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010ec:	4a1d      	ldr	r2, [pc, #116]	; (8001164 <HAL_InitTick+0xd8>)
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010f2:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <HAL_InitTick+0xd8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <HAL_InitTick+0xd8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <HAL_InitTick+0xd8>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001104:	4817      	ldr	r0, [pc, #92]	; (8001164 <HAL_InitTick+0xd8>)
 8001106:	f001 feef 	bl	8002ee8 <HAL_TIM_Base_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001110:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001114:	2b00      	cmp	r3, #0
 8001116:	d11b      	bne.n	8001150 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001118:	4812      	ldr	r0, [pc, #72]	; (8001164 <HAL_InitTick+0xd8>)
 800111a:	f001 ff35 	bl	8002f88 <HAL_TIM_Base_Start_IT>
 800111e:	4603      	mov	r3, r0
 8001120:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001124:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001128:	2b00      	cmp	r3, #0
 800112a:	d111      	bne.n	8001150 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800112c:	2019      	movs	r0, #25
 800112e:	f001 f826 	bl	800217e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b0f      	cmp	r3, #15
 8001136:	d808      	bhi.n	800114a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001138:	2200      	movs	r2, #0
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	2019      	movs	r0, #25
 800113e:	f001 f802 	bl	8002146 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <HAL_InitTick+0xe0>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	e002      	b.n	8001150 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001150:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001154:	4618      	mov	r0, r3
 8001156:	3730      	adds	r7, #48	; 0x30
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40021000 	.word	0x40021000
 8001160:	431bde83 	.word	0x431bde83
 8001164:	20000228 	.word	0x20000228
 8001168:	40012c00 	.word	0x40012c00
 800116c:	20000024 	.word	0x20000024

08001170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <NMI_Handler+0x4>

08001176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <HardFault_Handler+0x4>

0800117c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <MemManage_Handler+0x4>

08001182 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <UsageFault_Handler+0x4>

0800118e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
	...

0800119c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <CAN1_RX1_IRQHandler+0x10>)
 80011a2:	f000 fcf8 	bl	8001b96 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200000a0 	.word	0x200000a0

080011b0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <TIM1_UP_IRQHandler+0x10>)
 80011b6:	f001 ff39 	bl	800302c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000228 	.word	0x20000228

080011c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <TIM4_IRQHandler+0x10>)
 80011ca:	f001 ff2f 	bl	800302c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200000c8 	.word	0x200000c8

080011d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <USART1_IRQHandler+0x10>)
 80011de:	f002 fb55 	bl	800388c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000110 	.word	0x20000110

080011ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f4:	4a14      	ldr	r2, [pc, #80]	; (8001248 <_sbrk+0x5c>)
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <_sbrk+0x60>)
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001200:	4b13      	ldr	r3, [pc, #76]	; (8001250 <_sbrk+0x64>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d102      	bne.n	800120e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <_sbrk+0x64>)
 800120a:	4a12      	ldr	r2, [pc, #72]	; (8001254 <_sbrk+0x68>)
 800120c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <_sbrk+0x64>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	429a      	cmp	r2, r3
 800121a:	d207      	bcs.n	800122c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800121c:	f005 fd84 	bl	8006d28 <__errno>
 8001220:	4603      	mov	r3, r0
 8001222:	220c      	movs	r2, #12
 8001224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
 800122a:	e009      	b.n	8001240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <_sbrk+0x64>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001232:	4b07      	ldr	r3, [pc, #28]	; (8001250 <_sbrk+0x64>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	4a05      	ldr	r2, [pc, #20]	; (8001250 <_sbrk+0x64>)
 800123c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800123e:	68fb      	ldr	r3, [r7, #12]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20005000 	.word	0x20005000
 800124c:	00000400 	.word	0x00000400
 8001250:	20000270 	.word	0x20000270
 8001254:	20001d08 	.word	0x20001d08

08001258 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001264:	f7ff fff8 	bl	8001258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001268:	480b      	ldr	r0, [pc, #44]	; (8001298 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800126a:	490c      	ldr	r1, [pc, #48]	; (800129c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800126c:	4a0c      	ldr	r2, [pc, #48]	; (80012a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001270:	e002      	b.n	8001278 <LoopCopyDataInit>

08001272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001276:	3304      	adds	r3, #4

08001278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800127c:	d3f9      	bcc.n	8001272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127e:	4a09      	ldr	r2, [pc, #36]	; (80012a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001280:	4c09      	ldr	r4, [pc, #36]	; (80012a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001284:	e001      	b.n	800128a <LoopFillZerobss>

08001286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001288:	3204      	adds	r2, #4

0800128a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800128c:	d3fb      	bcc.n	8001286 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800128e:	f005 fd51 	bl	8006d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001292:	f7ff f8a9 	bl	80003e8 <main>
  bx lr
 8001296:	4770      	bx	lr
  ldr r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800129c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80012a0:	0800773c 	.word	0x0800773c
  ldr r2, =_sbss
 80012a4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80012a8:	20001d08 	.word	0x20001d08

080012ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC1_2_IRQHandler>
	...

080012b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_Init+0x28>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <HAL_Init+0x28>)
 80012ba:	f043 0310 	orr.w	r3, r3, #16
 80012be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f000 ff35 	bl	8002130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c6:	200f      	movs	r0, #15
 80012c8:	f7ff fee0 	bl	800108c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012cc:	f7ff fdc4 	bl	8000e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40022000 	.word	0x40022000

080012dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <HAL_IncTick+0x1c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_IncTick+0x20>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	4a03      	ldr	r2, [pc, #12]	; (80012fc <HAL_IncTick+0x20>)
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	20000028 	.word	0x20000028
 80012fc:	20000274 	.word	0x20000274

08001300 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return uwTick;
 8001304:	4b02      	ldr	r3, [pc, #8]	; (8001310 <HAL_GetTick+0x10>)
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	20000274 	.word	0x20000274

08001314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800131c:	f7ff fff0 	bl	8001300 <HAL_GetTick>
 8001320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132c:	d005      	beq.n	800133a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <HAL_Delay+0x44>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800133a:	bf00      	nop
 800133c:	f7ff ffe0 	bl	8001300 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	429a      	cmp	r2, r3
 800134a:	d8f7      	bhi.n	800133c <HAL_Delay+0x28>
  {
  }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000028 	.word	0x20000028

0800135c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e0ed      	b.n	800154a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d102      	bne.n	8001380 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff fda4 	bl	8000ec8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 0201 	orr.w	r2, r2, #1
 800138e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001390:	f7ff ffb6 	bl	8001300 <HAL_GetTick>
 8001394:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001396:	e012      	b.n	80013be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001398:	f7ff ffb2 	bl	8001300 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b0a      	cmp	r3, #10
 80013a4:	d90b      	bls.n	80013be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2205      	movs	r2, #5
 80013b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e0c5      	b.n	800154a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0e5      	beq.n	8001398 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0202 	bic.w	r2, r2, #2
 80013da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013dc:	f7ff ff90 	bl	8001300 <HAL_GetTick>
 80013e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013e2:	e012      	b.n	800140a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013e4:	f7ff ff8c 	bl	8001300 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b0a      	cmp	r3, #10
 80013f0:	d90b      	bls.n	800140a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2205      	movs	r2, #5
 8001402:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e09f      	b.n	800154a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1e5      	bne.n	80013e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	7e1b      	ldrb	r3, [r3, #24]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d108      	bne.n	8001432 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	e007      	b.n	8001442 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001440:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7e5b      	ldrb	r3, [r3, #25]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d108      	bne.n	800145c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	e007      	b.n	800146c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800146a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7e9b      	ldrb	r3, [r3, #26]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d108      	bne.n	8001486 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0220 	orr.w	r2, r2, #32
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	e007      	b.n	8001496 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0220 	bic.w	r2, r2, #32
 8001494:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	7edb      	ldrb	r3, [r3, #27]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d108      	bne.n	80014b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0210 	bic.w	r2, r2, #16
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	e007      	b.n	80014c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 0210 	orr.w	r2, r2, #16
 80014be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	7f1b      	ldrb	r3, [r3, #28]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d108      	bne.n	80014da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f042 0208 	orr.w	r2, r2, #8
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	e007      	b.n	80014ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0208 	bic.w	r2, r2, #8
 80014e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	7f5b      	ldrb	r3, [r3, #29]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d108      	bne.n	8001504 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f042 0204 	orr.w	r2, r2, #4
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	e007      	b.n	8001514 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0204 	bic.w	r2, r2, #4
 8001512:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	ea42 0103 	orr.w	r1, r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	1e5a      	subs	r2, r3, #1
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	430a      	orrs	r2, r1
 8001538:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001552:	b480      	push	{r7}
 8001554:	b087      	sub	sp, #28
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001568:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800156a:	7cfb      	ldrb	r3, [r7, #19]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d003      	beq.n	8001578 <HAL_CAN_ConfigFilter+0x26>
 8001570:	7cfb      	ldrb	r3, [r7, #19]
 8001572:	2b02      	cmp	r3, #2
 8001574:	f040 80aa 	bne.w	80016cc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800157e:	f043 0201 	orr.w	r2, r3, #1
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	f003 031f 	and.w	r3, r3, #31
 8001590:	2201      	movs	r2, #1
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	401a      	ands	r2, r3
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d123      	bne.n	80015fa <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	401a      	ands	r2, r3
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80015d4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	3248      	adds	r2, #72	; 0x48
 80015da:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015ee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015f0:	6979      	ldr	r1, [r7, #20]
 80015f2:	3348      	adds	r3, #72	; 0x48
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	440b      	add	r3, r1
 80015f8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d122      	bne.n	8001648 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	431a      	orrs	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001622:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	3248      	adds	r2, #72	; 0x48
 8001628:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800163c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800163e:	6979      	ldr	r1, [r7, #20]
 8001640:	3348      	adds	r3, #72	; 0x48
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	440b      	add	r3, r1
 8001646:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d109      	bne.n	8001664 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43db      	mvns	r3, r3
 800165a:	401a      	ands	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001662:	e007      	b.n	8001674 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	431a      	orrs	r2, r3
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d109      	bne.n	8001690 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	43db      	mvns	r3, r3
 8001686:	401a      	ands	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800168e:	e007      	b.n	80016a0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	431a      	orrs	r2, r3
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d107      	bne.n	80016b8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	431a      	orrs	r2, r3
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016be:	f023 0201 	bic.w	r2, r3, #1
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	e006      	b.n	80016da <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
  }
}
 80016da:	4618      	mov	r0, r3
 80016dc:	371c      	adds	r7, #28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d12e      	bne.n	8001756 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2202      	movs	r2, #2
 80016fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0201 	bic.w	r2, r2, #1
 800170e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001710:	f7ff fdf6 	bl	8001300 <HAL_GetTick>
 8001714:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001716:	e012      	b.n	800173e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001718:	f7ff fdf2 	bl	8001300 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b0a      	cmp	r3, #10
 8001724:	d90b      	bls.n	800173e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2205      	movs	r2, #5
 8001736:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e012      	b.n	8001764 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1e5      	bne.n	8001718 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	e006      	b.n	8001764 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
  }
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001780:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800178a:	7ffb      	ldrb	r3, [r7, #31]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d003      	beq.n	8001798 <HAL_CAN_AddTxMessage+0x2c>
 8001790:	7ffb      	ldrb	r3, [r7, #31]
 8001792:	2b02      	cmp	r3, #2
 8001794:	f040 80ad 	bne.w	80018f2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10a      	bne.n	80017b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d105      	bne.n	80017b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 8095 	beq.w	80018e2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	0e1b      	lsrs	r3, r3, #24
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80017c2:	2201      	movs	r2, #1
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	409a      	lsls	r2, r3
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d10d      	bne.n	80017f0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80017de:	68f9      	ldr	r1, [r7, #12]
 80017e0:	6809      	ldr	r1, [r1, #0]
 80017e2:	431a      	orrs	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	3318      	adds	r3, #24
 80017e8:	011b      	lsls	r3, r3, #4
 80017ea:	440b      	add	r3, r1
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	e00f      	b.n	8001810 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017fa:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001800:	68f9      	ldr	r1, [r7, #12]
 8001802:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001804:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	3318      	adds	r3, #24
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	440b      	add	r3, r1
 800180e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6819      	ldr	r1, [r3, #0]
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	691a      	ldr	r2, [r3, #16]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	3318      	adds	r3, #24
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	440b      	add	r3, r1
 8001820:	3304      	adds	r3, #4
 8001822:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	7d1b      	ldrb	r3, [r3, #20]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d111      	bne.n	8001850 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	3318      	adds	r3, #24
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	4413      	add	r3, r2
 8001838:	3304      	adds	r3, #4
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	6811      	ldr	r1, [r2, #0]
 8001840:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3318      	adds	r3, #24
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	440b      	add	r3, r1
 800184c:	3304      	adds	r3, #4
 800184e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3307      	adds	r3, #7
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	061a      	lsls	r2, r3, #24
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3306      	adds	r3, #6
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	041b      	lsls	r3, r3, #16
 8001860:	431a      	orrs	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3305      	adds	r3, #5
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	4313      	orrs	r3, r2
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	3204      	adds	r2, #4
 8001870:	7812      	ldrb	r2, [r2, #0]
 8001872:	4610      	mov	r0, r2
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	6811      	ldr	r1, [r2, #0]
 8001878:	ea43 0200 	orr.w	r2, r3, r0
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	440b      	add	r3, r1
 8001882:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001886:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3303      	adds	r3, #3
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	061a      	lsls	r2, r3, #24
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3302      	adds	r3, #2
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	041b      	lsls	r3, r3, #16
 8001898:	431a      	orrs	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3301      	adds	r3, #1
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	021b      	lsls	r3, r3, #8
 80018a2:	4313      	orrs	r3, r2
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	7812      	ldrb	r2, [r2, #0]
 80018a8:	4610      	mov	r0, r2
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	6811      	ldr	r1, [r2, #0]
 80018ae:	ea43 0200 	orr.w	r2, r3, r0
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	440b      	add	r3, r1
 80018b8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80018bc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3318      	adds	r3, #24
 80018c6:	011b      	lsls	r3, r3, #4
 80018c8:	4413      	add	r3, r2
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	6811      	ldr	r1, [r2, #0]
 80018d0:	f043 0201 	orr.w	r2, r3, #1
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	3318      	adds	r3, #24
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	440b      	add	r3, r1
 80018dc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	e00e      	b.n	8001900 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e006      	b.n	8001900 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
  }
}
 8001900:	4618      	mov	r0, r3
 8001902:	3724      	adds	r7, #36	; 0x24
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr

0800190a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800190a:	b480      	push	{r7}
 800190c:	b087      	sub	sp, #28
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800191e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001920:	7dfb      	ldrb	r3, [r7, #23]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d003      	beq.n	800192e <HAL_CAN_GetRxMessage+0x24>
 8001926:	7dfb      	ldrb	r3, [r7, #23]
 8001928:	2b02      	cmp	r3, #2
 800192a:	f040 8103 	bne.w	8001b34 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d10e      	bne.n	8001952 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d116      	bne.n	8001970 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e0f7      	b.n	8001b42 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d107      	bne.n	8001970 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0e8      	b.n	8001b42 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	331b      	adds	r3, #27
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	4413      	add	r3, r2
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0204 	and.w	r2, r3, #4
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10c      	bne.n	80019a8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	331b      	adds	r3, #27
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	4413      	add	r3, r2
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	0d5b      	lsrs	r3, r3, #21
 800199e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	e00b      	b.n	80019c0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	331b      	adds	r3, #27
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	4413      	add	r3, r2
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	08db      	lsrs	r3, r3, #3
 80019b8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	331b      	adds	r3, #27
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	4413      	add	r3, r2
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0202 	and.w	r2, r3, #2
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	331b      	adds	r3, #27
 80019de:	011b      	lsls	r3, r3, #4
 80019e0:	4413      	add	r3, r2
 80019e2:	3304      	adds	r3, #4
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2208      	movs	r2, #8
 80019f2:	611a      	str	r2, [r3, #16]
 80019f4:	e00b      	b.n	8001a0e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	331b      	adds	r3, #27
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	4413      	add	r3, r2
 8001a02:	3304      	adds	r3, #4
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 020f 	and.w	r2, r3, #15
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	331b      	adds	r3, #27
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	4413      	add	r3, r2
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	0a1b      	lsrs	r3, r3, #8
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	331b      	adds	r3, #27
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	4413      	add	r3, r2
 8001a32:	3304      	adds	r3, #4
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	0c1b      	lsrs	r3, r3, #16
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	4413      	add	r3, r2
 8001a48:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	4413      	add	r3, r2
 8001a5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	0a1a      	lsrs	r2, r3, #8
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	011b      	lsls	r3, r3, #4
 8001a76:	4413      	add	r3, r2
 8001a78:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	0c1a      	lsrs	r2, r3, #16
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	3302      	adds	r3, #2
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	4413      	add	r3, r2
 8001a92:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	0e1a      	lsrs	r2, r3, #24
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	3303      	adds	r3, #3
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	011b      	lsls	r3, r3, #4
 8001aaa:	4413      	add	r3, r2
 8001aac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	011b      	lsls	r3, r3, #4
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	0a1a      	lsrs	r2, r3, #8
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	3305      	adds	r3, #5
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	4413      	add	r3, r2
 8001ade:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0c1a      	lsrs	r2, r3, #16
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	3306      	adds	r3, #6
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	4413      	add	r3, r2
 8001af8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	0e1a      	lsrs	r2, r3, #24
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	3307      	adds	r3, #7
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d108      	bne.n	8001b20 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f042 0220 	orr.w	r2, r2, #32
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	e007      	b.n	8001b30 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691a      	ldr	r2, [r3, #16]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0220 	orr.w	r2, r2, #32
 8001b2e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	e006      	b.n	8001b42 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
  }
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	371c      	adds	r7, #28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b5c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d002      	beq.n	8001b6a <HAL_CAN_ActivateNotification+0x1e>
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d109      	bne.n	8001b7e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6959      	ldr	r1, [r3, #20]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e006      	b.n	8001b8c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
  }
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr

08001b96 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b08a      	sub	sp, #40	; 0x28
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d07c      	beq.n	8001cd6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d023      	beq.n	8001c2e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2201      	movs	r2, #1
 8001bec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f983 	bl	8001f04 <HAL_CAN_TxMailbox0CompleteCallback>
 8001bfe:	e016      	b.n	8001c2e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d004      	beq.n	8001c14 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
 8001c12:	e00c      	b.n	8001c2e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d004      	beq.n	8001c28 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
 8001c26:	e002      	b.n	8001c2e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f986 	bl	8001f3a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d024      	beq.n	8001c82 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f962 	bl	8001f16 <HAL_CAN_TxMailbox1CompleteCallback>
 8001c52:	e016      	b.n	8001c82 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d004      	beq.n	8001c68 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
 8001c66:	e00c      	b.n	8001c82 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d004      	beq.n	8001c7c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
 8001c7a:	e002      	b.n	8001c82 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f965 	bl	8001f4c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d024      	beq.n	8001cd6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f941 	bl	8001f28 <HAL_CAN_TxMailbox2CompleteCallback>
 8001ca6:	e016      	b.n	8001cd6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d004      	beq.n	8001cbc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cba:	e00c      	b.n	8001cd6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d004      	beq.n	8001cd0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cce:	e002      	b.n	8001cd6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f944 	bl	8001f5e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00c      	beq.n	8001cfa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d007      	beq.n	8001cfa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2210      	movs	r2, #16
 8001cf8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00b      	beq.n	8001d1c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d006      	beq.n	8001d1c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2208      	movs	r2, #8
 8001d14:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f933 	bl	8001f82 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d009      	beq.n	8001d3a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f91b 	bl	8001f70 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00c      	beq.n	8001d5e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d007      	beq.n	8001d5e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2210      	movs	r2, #16
 8001d5c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	f003 0320 	and.w	r3, r3, #32
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00b      	beq.n	8001d80 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d006      	beq.n	8001d80 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2208      	movs	r2, #8
 8001d78:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f90a 	bl	8001f94 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	f003 0310 	and.w	r3, r3, #16
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d009      	beq.n	8001d9e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7fe faab 	bl	80002f4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00b      	beq.n	8001dc0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d006      	beq.n	8001dc0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2210      	movs	r2, #16
 8001db8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f8f3 	bl	8001fa6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00b      	beq.n	8001de2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d006      	beq.n	8001de2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2208      	movs	r2, #8
 8001dda:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f8eb 	bl	8001fb8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d07b      	beq.n	8001ee4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d072      	beq.n	8001edc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d008      	beq.n	8001e12 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	f043 0302 	orr.w	r3, r3, #2
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e2e:	6a3b      	ldr	r3, [r7, #32]
 8001e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d008      	beq.n	8001e4a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	f043 0304 	orr.w	r3, r3, #4
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d043      	beq.n	8001edc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d03e      	beq.n	8001edc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e64:	2b60      	cmp	r3, #96	; 0x60
 8001e66:	d02b      	beq.n	8001ec0 <HAL_CAN_IRQHandler+0x32a>
 8001e68:	2b60      	cmp	r3, #96	; 0x60
 8001e6a:	d82e      	bhi.n	8001eca <HAL_CAN_IRQHandler+0x334>
 8001e6c:	2b50      	cmp	r3, #80	; 0x50
 8001e6e:	d022      	beq.n	8001eb6 <HAL_CAN_IRQHandler+0x320>
 8001e70:	2b50      	cmp	r3, #80	; 0x50
 8001e72:	d82a      	bhi.n	8001eca <HAL_CAN_IRQHandler+0x334>
 8001e74:	2b40      	cmp	r3, #64	; 0x40
 8001e76:	d019      	beq.n	8001eac <HAL_CAN_IRQHandler+0x316>
 8001e78:	2b40      	cmp	r3, #64	; 0x40
 8001e7a:	d826      	bhi.n	8001eca <HAL_CAN_IRQHandler+0x334>
 8001e7c:	2b30      	cmp	r3, #48	; 0x30
 8001e7e:	d010      	beq.n	8001ea2 <HAL_CAN_IRQHandler+0x30c>
 8001e80:	2b30      	cmp	r3, #48	; 0x30
 8001e82:	d822      	bhi.n	8001eca <HAL_CAN_IRQHandler+0x334>
 8001e84:	2b10      	cmp	r3, #16
 8001e86:	d002      	beq.n	8001e8e <HAL_CAN_IRQHandler+0x2f8>
 8001e88:	2b20      	cmp	r3, #32
 8001e8a:	d005      	beq.n	8001e98 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e8c:	e01d      	b.n	8001eca <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	f043 0308 	orr.w	r3, r3, #8
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e96:	e019      	b.n	8001ecc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	f043 0310 	orr.w	r3, r3, #16
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ea0:	e014      	b.n	8001ecc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	f043 0320 	orr.w	r3, r3, #32
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001eaa:	e00f      	b.n	8001ecc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001eb4:	e00a      	b.n	8001ecc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ebe:	e005      	b.n	8001ecc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ec8:	e000      	b.n	8001ecc <HAL_CAN_IRQHandler+0x336>
            break;
 8001eca:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699a      	ldr	r2, [r3, #24]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001eda:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d008      	beq.n	8001efc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f867 	bl	8001fca <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001efc:	bf00      	nop
 8001efe:	3728      	adds	r7, #40	; 0x28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr

08001f16 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr

08001f4c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr

08001f5e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr

08001f82 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr

08001f94 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr

08001fca <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800200c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800200e:	4a04      	ldr	r2, [pc, #16]	; (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	60d3      	str	r3, [r2, #12]
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <__NVIC_GetPriorityGrouping+0x18>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	f003 0307 	and.w	r3, r3, #7
}
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	2b00      	cmp	r3, #0
 8002050:	db0b      	blt.n	800206a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	f003 021f 	and.w	r2, r3, #31
 8002058:	4906      	ldr	r1, [pc, #24]	; (8002074 <__NVIC_EnableIRQ+0x34>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	2001      	movs	r0, #1
 8002062:	fa00 f202 	lsl.w	r2, r0, r2
 8002066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	e000e100 	.word	0xe000e100

08002078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	6039      	str	r1, [r7, #0]
 8002082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002088:	2b00      	cmp	r3, #0
 800208a:	db0a      	blt.n	80020a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	b2da      	uxtb	r2, r3
 8002090:	490c      	ldr	r1, [pc, #48]	; (80020c4 <__NVIC_SetPriority+0x4c>)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	0112      	lsls	r2, r2, #4
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	440b      	add	r3, r1
 800209c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a0:	e00a      	b.n	80020b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4908      	ldr	r1, [pc, #32]	; (80020c8 <__NVIC_SetPriority+0x50>)
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	3b04      	subs	r3, #4
 80020b0:	0112      	lsls	r2, r2, #4
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	440b      	add	r3, r1
 80020b6:	761a      	strb	r2, [r3, #24]
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000e100 	.word	0xe000e100
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b089      	sub	sp, #36	; 0x24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f1c3 0307 	rsb	r3, r3, #7
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	bf28      	it	cs
 80020ea:	2304      	movcs	r3, #4
 80020ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3304      	adds	r3, #4
 80020f2:	2b06      	cmp	r3, #6
 80020f4:	d902      	bls.n	80020fc <NVIC_EncodePriority+0x30>
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3b03      	subs	r3, #3
 80020fa:	e000      	b.n	80020fe <NVIC_EncodePriority+0x32>
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002100:	f04f 32ff 	mov.w	r2, #4294967295
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43da      	mvns	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	401a      	ands	r2, r3
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002114:	f04f 31ff 	mov.w	r1, #4294967295
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	fa01 f303 	lsl.w	r3, r1, r3
 800211e:	43d9      	mvns	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002124:	4313      	orrs	r3, r2
         );
}
 8002126:	4618      	mov	r0, r3
 8002128:	3724      	adds	r7, #36	; 0x24
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr

08002130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ff4f 	bl	8001fdc <__NVIC_SetPriorityGrouping>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	4603      	mov	r3, r0
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
 8002152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002158:	f7ff ff64 	bl	8002024 <__NVIC_GetPriorityGrouping>
 800215c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68b9      	ldr	r1, [r7, #8]
 8002162:	6978      	ldr	r0, [r7, #20]
 8002164:	f7ff ffb2 	bl	80020cc <NVIC_EncodePriority>
 8002168:	4602      	mov	r2, r0
 800216a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ff81 	bl	8002078 <__NVIC_SetPriority>
}
 8002176:	bf00      	nop
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	4603      	mov	r3, r0
 8002186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff57 	bl	8002040 <__NVIC_EnableIRQ>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800219a:	b480      	push	{r7}
 800219c:	b085      	sub	sp, #20
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d008      	beq.n	80021c4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2204      	movs	r2, #4
 80021b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e020      	b.n	8002206 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 020e 	bic.w	r2, r2, #14
 80021d2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0201 	bic.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ec:	2101      	movs	r1, #1
 80021ee:	fa01 f202 	lsl.w	r2, r1, r2
 80021f2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002204:	7bfb      	ldrb	r3, [r7, #15]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002218:	2300      	movs	r3, #0
 800221a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d005      	beq.n	8002234 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2204      	movs	r2, #4
 800222c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	73fb      	strb	r3, [r7, #15]
 8002232:	e051      	b.n	80022d8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 020e 	bic.w	r2, r2, #14
 8002242:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0201 	bic.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a22      	ldr	r2, [pc, #136]	; (80022e4 <HAL_DMA_Abort_IT+0xd4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d029      	beq.n	80022b2 <HAL_DMA_Abort_IT+0xa2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a21      	ldr	r2, [pc, #132]	; (80022e8 <HAL_DMA_Abort_IT+0xd8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d022      	beq.n	80022ae <HAL_DMA_Abort_IT+0x9e>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a1f      	ldr	r2, [pc, #124]	; (80022ec <HAL_DMA_Abort_IT+0xdc>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d01a      	beq.n	80022a8 <HAL_DMA_Abort_IT+0x98>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1e      	ldr	r2, [pc, #120]	; (80022f0 <HAL_DMA_Abort_IT+0xe0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d012      	beq.n	80022a2 <HAL_DMA_Abort_IT+0x92>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1c      	ldr	r2, [pc, #112]	; (80022f4 <HAL_DMA_Abort_IT+0xe4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d00a      	beq.n	800229c <HAL_DMA_Abort_IT+0x8c>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a1b      	ldr	r2, [pc, #108]	; (80022f8 <HAL_DMA_Abort_IT+0xe8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d102      	bne.n	8002296 <HAL_DMA_Abort_IT+0x86>
 8002290:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002294:	e00e      	b.n	80022b4 <HAL_DMA_Abort_IT+0xa4>
 8002296:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800229a:	e00b      	b.n	80022b4 <HAL_DMA_Abort_IT+0xa4>
 800229c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022a0:	e008      	b.n	80022b4 <HAL_DMA_Abort_IT+0xa4>
 80022a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022a6:	e005      	b.n	80022b4 <HAL_DMA_Abort_IT+0xa4>
 80022a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ac:	e002      	b.n	80022b4 <HAL_DMA_Abort_IT+0xa4>
 80022ae:	2310      	movs	r3, #16
 80022b0:	e000      	b.n	80022b4 <HAL_DMA_Abort_IT+0xa4>
 80022b2:	2301      	movs	r3, #1
 80022b4:	4a11      	ldr	r2, [pc, #68]	; (80022fc <HAL_DMA_Abort_IT+0xec>)
 80022b6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	4798      	blx	r3
    } 
  }
  return status;
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40020008 	.word	0x40020008
 80022e8:	4002001c 	.word	0x4002001c
 80022ec:	40020030 	.word	0x40020030
 80022f0:	40020044 	.word	0x40020044
 80022f4:	40020058 	.word	0x40020058
 80022f8:	4002006c 	.word	0x4002006c
 80022fc:	40020000 	.word	0x40020000

08002300 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002300:	b480      	push	{r7}
 8002302:	b08b      	sub	sp, #44	; 0x2c
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800230a:	2300      	movs	r3, #0
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800230e:	2300      	movs	r3, #0
 8002310:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002312:	e169      	b.n	80025e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002314:	2201      	movs	r2, #1
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	69fa      	ldr	r2, [r7, #28]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	429a      	cmp	r2, r3
 800232e:	f040 8158 	bne.w	80025e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4a9a      	ldr	r2, [pc, #616]	; (80025a0 <HAL_GPIO_Init+0x2a0>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d05e      	beq.n	80023fa <HAL_GPIO_Init+0xfa>
 800233c:	4a98      	ldr	r2, [pc, #608]	; (80025a0 <HAL_GPIO_Init+0x2a0>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d875      	bhi.n	800242e <HAL_GPIO_Init+0x12e>
 8002342:	4a98      	ldr	r2, [pc, #608]	; (80025a4 <HAL_GPIO_Init+0x2a4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d058      	beq.n	80023fa <HAL_GPIO_Init+0xfa>
 8002348:	4a96      	ldr	r2, [pc, #600]	; (80025a4 <HAL_GPIO_Init+0x2a4>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d86f      	bhi.n	800242e <HAL_GPIO_Init+0x12e>
 800234e:	4a96      	ldr	r2, [pc, #600]	; (80025a8 <HAL_GPIO_Init+0x2a8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d052      	beq.n	80023fa <HAL_GPIO_Init+0xfa>
 8002354:	4a94      	ldr	r2, [pc, #592]	; (80025a8 <HAL_GPIO_Init+0x2a8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d869      	bhi.n	800242e <HAL_GPIO_Init+0x12e>
 800235a:	4a94      	ldr	r2, [pc, #592]	; (80025ac <HAL_GPIO_Init+0x2ac>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d04c      	beq.n	80023fa <HAL_GPIO_Init+0xfa>
 8002360:	4a92      	ldr	r2, [pc, #584]	; (80025ac <HAL_GPIO_Init+0x2ac>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d863      	bhi.n	800242e <HAL_GPIO_Init+0x12e>
 8002366:	4a92      	ldr	r2, [pc, #584]	; (80025b0 <HAL_GPIO_Init+0x2b0>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d046      	beq.n	80023fa <HAL_GPIO_Init+0xfa>
 800236c:	4a90      	ldr	r2, [pc, #576]	; (80025b0 <HAL_GPIO_Init+0x2b0>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d85d      	bhi.n	800242e <HAL_GPIO_Init+0x12e>
 8002372:	2b12      	cmp	r3, #18
 8002374:	d82a      	bhi.n	80023cc <HAL_GPIO_Init+0xcc>
 8002376:	2b12      	cmp	r3, #18
 8002378:	d859      	bhi.n	800242e <HAL_GPIO_Init+0x12e>
 800237a:	a201      	add	r2, pc, #4	; (adr r2, 8002380 <HAL_GPIO_Init+0x80>)
 800237c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002380:	080023fb 	.word	0x080023fb
 8002384:	080023d5 	.word	0x080023d5
 8002388:	080023e7 	.word	0x080023e7
 800238c:	08002429 	.word	0x08002429
 8002390:	0800242f 	.word	0x0800242f
 8002394:	0800242f 	.word	0x0800242f
 8002398:	0800242f 	.word	0x0800242f
 800239c:	0800242f 	.word	0x0800242f
 80023a0:	0800242f 	.word	0x0800242f
 80023a4:	0800242f 	.word	0x0800242f
 80023a8:	0800242f 	.word	0x0800242f
 80023ac:	0800242f 	.word	0x0800242f
 80023b0:	0800242f 	.word	0x0800242f
 80023b4:	0800242f 	.word	0x0800242f
 80023b8:	0800242f 	.word	0x0800242f
 80023bc:	0800242f 	.word	0x0800242f
 80023c0:	0800242f 	.word	0x0800242f
 80023c4:	080023dd 	.word	0x080023dd
 80023c8:	080023f1 	.word	0x080023f1
 80023cc:	4a79      	ldr	r2, [pc, #484]	; (80025b4 <HAL_GPIO_Init+0x2b4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d013      	beq.n	80023fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023d2:	e02c      	b.n	800242e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	623b      	str	r3, [r7, #32]
          break;
 80023da:	e029      	b.n	8002430 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	3304      	adds	r3, #4
 80023e2:	623b      	str	r3, [r7, #32]
          break;
 80023e4:	e024      	b.n	8002430 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	3308      	adds	r3, #8
 80023ec:	623b      	str	r3, [r7, #32]
          break;
 80023ee:	e01f      	b.n	8002430 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	330c      	adds	r3, #12
 80023f6:	623b      	str	r3, [r7, #32]
          break;
 80023f8:	e01a      	b.n	8002430 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d102      	bne.n	8002408 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002402:	2304      	movs	r3, #4
 8002404:	623b      	str	r3, [r7, #32]
          break;
 8002406:	e013      	b.n	8002430 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d105      	bne.n	800241c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002410:	2308      	movs	r3, #8
 8002412:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69fa      	ldr	r2, [r7, #28]
 8002418:	611a      	str	r2, [r3, #16]
          break;
 800241a:	e009      	b.n	8002430 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800241c:	2308      	movs	r3, #8
 800241e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69fa      	ldr	r2, [r7, #28]
 8002424:	615a      	str	r2, [r3, #20]
          break;
 8002426:	e003      	b.n	8002430 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002428:	2300      	movs	r3, #0
 800242a:	623b      	str	r3, [r7, #32]
          break;
 800242c:	e000      	b.n	8002430 <HAL_GPIO_Init+0x130>
          break;
 800242e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2bff      	cmp	r3, #255	; 0xff
 8002434:	d801      	bhi.n	800243a <HAL_GPIO_Init+0x13a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	e001      	b.n	800243e <HAL_GPIO_Init+0x13e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3304      	adds	r3, #4
 800243e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	2bff      	cmp	r3, #255	; 0xff
 8002444:	d802      	bhi.n	800244c <HAL_GPIO_Init+0x14c>
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	e002      	b.n	8002452 <HAL_GPIO_Init+0x152>
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	3b08      	subs	r3, #8
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	210f      	movs	r1, #15
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	fa01 f303 	lsl.w	r3, r1, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	401a      	ands	r2, r3
 8002464:	6a39      	ldr	r1, [r7, #32]
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	fa01 f303 	lsl.w	r3, r1, r3
 800246c:	431a      	orrs	r2, r3
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 80b1 	beq.w	80025e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002480:	4b4d      	ldr	r3, [pc, #308]	; (80025b8 <HAL_GPIO_Init+0x2b8>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	4a4c      	ldr	r2, [pc, #304]	; (80025b8 <HAL_GPIO_Init+0x2b8>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6193      	str	r3, [r2, #24]
 800248c:	4b4a      	ldr	r3, [pc, #296]	; (80025b8 <HAL_GPIO_Init+0x2b8>)
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002498:	4a48      	ldr	r2, [pc, #288]	; (80025bc <HAL_GPIO_Init+0x2bc>)
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	089b      	lsrs	r3, r3, #2
 800249e:	3302      	adds	r3, #2
 80024a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	220f      	movs	r2, #15
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4013      	ands	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a40      	ldr	r2, [pc, #256]	; (80025c0 <HAL_GPIO_Init+0x2c0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d013      	beq.n	80024ec <HAL_GPIO_Init+0x1ec>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a3f      	ldr	r2, [pc, #252]	; (80025c4 <HAL_GPIO_Init+0x2c4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d00d      	beq.n	80024e8 <HAL_GPIO_Init+0x1e8>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a3e      	ldr	r2, [pc, #248]	; (80025c8 <HAL_GPIO_Init+0x2c8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d007      	beq.n	80024e4 <HAL_GPIO_Init+0x1e4>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a3d      	ldr	r2, [pc, #244]	; (80025cc <HAL_GPIO_Init+0x2cc>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d101      	bne.n	80024e0 <HAL_GPIO_Init+0x1e0>
 80024dc:	2303      	movs	r3, #3
 80024de:	e006      	b.n	80024ee <HAL_GPIO_Init+0x1ee>
 80024e0:	2304      	movs	r3, #4
 80024e2:	e004      	b.n	80024ee <HAL_GPIO_Init+0x1ee>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e002      	b.n	80024ee <HAL_GPIO_Init+0x1ee>
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <HAL_GPIO_Init+0x1ee>
 80024ec:	2300      	movs	r3, #0
 80024ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f0:	f002 0203 	and.w	r2, r2, #3
 80024f4:	0092      	lsls	r2, r2, #2
 80024f6:	4093      	lsls	r3, r2
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024fe:	492f      	ldr	r1, [pc, #188]	; (80025bc <HAL_GPIO_Init+0x2bc>)
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	089b      	lsrs	r3, r3, #2
 8002504:	3302      	adds	r3, #2
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d006      	beq.n	8002526 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002518:	4b2d      	ldr	r3, [pc, #180]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	492c      	ldr	r1, [pc, #176]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	608b      	str	r3, [r1, #8]
 8002524:	e006      	b.n	8002534 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002526:	4b2a      	ldr	r3, [pc, #168]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	43db      	mvns	r3, r3
 800252e:	4928      	ldr	r1, [pc, #160]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 8002530:	4013      	ands	r3, r2
 8002532:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d006      	beq.n	800254e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002540:	4b23      	ldr	r3, [pc, #140]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	4922      	ldr	r1, [pc, #136]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	60cb      	str	r3, [r1, #12]
 800254c:	e006      	b.n	800255c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800254e:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	43db      	mvns	r3, r3
 8002556:	491e      	ldr	r1, [pc, #120]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 8002558:	4013      	ands	r3, r2
 800255a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d006      	beq.n	8002576 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002568:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	4918      	ldr	r1, [pc, #96]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	4313      	orrs	r3, r2
 8002572:	604b      	str	r3, [r1, #4]
 8002574:	e006      	b.n	8002584 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002576:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	43db      	mvns	r3, r3
 800257e:	4914      	ldr	r1, [pc, #80]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 8002580:	4013      	ands	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d021      	beq.n	80025d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002590:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	490e      	ldr	r1, [pc, #56]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	4313      	orrs	r3, r2
 800259a:	600b      	str	r3, [r1, #0]
 800259c:	e021      	b.n	80025e2 <HAL_GPIO_Init+0x2e2>
 800259e:	bf00      	nop
 80025a0:	10320000 	.word	0x10320000
 80025a4:	10310000 	.word	0x10310000
 80025a8:	10220000 	.word	0x10220000
 80025ac:	10210000 	.word	0x10210000
 80025b0:	10120000 	.word	0x10120000
 80025b4:	10110000 	.word	0x10110000
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40010000 	.word	0x40010000
 80025c0:	40010800 	.word	0x40010800
 80025c4:	40010c00 	.word	0x40010c00
 80025c8:	40011000 	.word	0x40011000
 80025cc:	40011400 	.word	0x40011400
 80025d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_GPIO_Init+0x304>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	43db      	mvns	r3, r3
 80025dc:	4909      	ldr	r1, [pc, #36]	; (8002604 <HAL_GPIO_Init+0x304>)
 80025de:	4013      	ands	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	3301      	adds	r3, #1
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	fa22 f303 	lsr.w	r3, r2, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f47f ae8e 	bne.w	8002314 <HAL_GPIO_Init+0x14>
  }
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	372c      	adds	r7, #44	; 0x2c
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr
 8002604:	40010400 	.word	0x40010400

08002608 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	887b      	ldrh	r3, [r7, #2]
 800261a:	4013      	ands	r3, r2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d002      	beq.n	8002626 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
 8002624:	e001      	b.n	800262a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002626:	2300      	movs	r3, #0
 8002628:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800262a:	7bfb      	ldrb	r3, [r7, #15]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr

08002636 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	460b      	mov	r3, r1
 8002640:	807b      	strh	r3, [r7, #2]
 8002642:	4613      	mov	r3, r2
 8002644:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002646:	787b      	ldrb	r3, [r7, #1]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800264c:	887a      	ldrh	r2, [r7, #2]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002652:	e003      	b.n	800265c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002654:	887b      	ldrh	r3, [r7, #2]
 8002656:	041a      	lsls	r2, r3, #16
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	611a      	str	r2, [r3, #16]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
	...

08002668 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e272      	b.n	8002b60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 8087 	beq.w	8002796 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002688:	4b92      	ldr	r3, [pc, #584]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 030c 	and.w	r3, r3, #12
 8002690:	2b04      	cmp	r3, #4
 8002692:	d00c      	beq.n	80026ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002694:	4b8f      	ldr	r3, [pc, #572]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 030c 	and.w	r3, r3, #12
 800269c:	2b08      	cmp	r3, #8
 800269e:	d112      	bne.n	80026c6 <HAL_RCC_OscConfig+0x5e>
 80026a0:	4b8c      	ldr	r3, [pc, #560]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ac:	d10b      	bne.n	80026c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ae:	4b89      	ldr	r3, [pc, #548]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d06c      	beq.n	8002794 <HAL_RCC_OscConfig+0x12c>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d168      	bne.n	8002794 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e24c      	b.n	8002b60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ce:	d106      	bne.n	80026de <HAL_RCC_OscConfig+0x76>
 80026d0:	4b80      	ldr	r3, [pc, #512]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a7f      	ldr	r2, [pc, #508]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80026d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	e02e      	b.n	800273c <HAL_RCC_OscConfig+0xd4>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10c      	bne.n	8002700 <HAL_RCC_OscConfig+0x98>
 80026e6:	4b7b      	ldr	r3, [pc, #492]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a7a      	ldr	r2, [pc, #488]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	4b78      	ldr	r3, [pc, #480]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a77      	ldr	r2, [pc, #476]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80026f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e01d      	b.n	800273c <HAL_RCC_OscConfig+0xd4>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0xbc>
 800270a:	4b72      	ldr	r3, [pc, #456]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a71      	ldr	r2, [pc, #452]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 8002710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	4b6f      	ldr	r3, [pc, #444]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a6e      	ldr	r2, [pc, #440]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 800271c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	e00b      	b.n	800273c <HAL_RCC_OscConfig+0xd4>
 8002724:	4b6b      	ldr	r3, [pc, #428]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a6a      	ldr	r2, [pc, #424]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 800272a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	4b68      	ldr	r3, [pc, #416]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a67      	ldr	r2, [pc, #412]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 8002736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800273a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d013      	beq.n	800276c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002744:	f7fe fddc 	bl	8001300 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800274c:	f7fe fdd8 	bl	8001300 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b64      	cmp	r3, #100	; 0x64
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e200      	b.n	8002b60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	4b5d      	ldr	r3, [pc, #372]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0xe4>
 800276a:	e014      	b.n	8002796 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7fe fdc8 	bl	8001300 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002774:	f7fe fdc4 	bl	8001300 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	; 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e1ec      	b.n	8002b60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002786:	4b53      	ldr	r3, [pc, #332]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0x10c>
 8002792:	e000      	b.n	8002796 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d063      	beq.n	800286a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027a2:	4b4c      	ldr	r3, [pc, #304]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00b      	beq.n	80027c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027ae:	4b49      	ldr	r3, [pc, #292]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 030c 	and.w	r3, r3, #12
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d11c      	bne.n	80027f4 <HAL_RCC_OscConfig+0x18c>
 80027ba:	4b46      	ldr	r3, [pc, #280]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d116      	bne.n	80027f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c6:	4b43      	ldr	r3, [pc, #268]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <HAL_RCC_OscConfig+0x176>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d001      	beq.n	80027de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e1c0      	b.n	8002b60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027de:	4b3d      	ldr	r3, [pc, #244]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4939      	ldr	r1, [pc, #228]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f2:	e03a      	b.n	800286a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d020      	beq.n	800283e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027fc:	4b36      	ldr	r3, [pc, #216]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 80027fe:	2201      	movs	r2, #1
 8002800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002802:	f7fe fd7d 	bl	8001300 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800280a:	f7fe fd79 	bl	8001300 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e1a1      	b.n	8002b60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281c:	4b2d      	ldr	r3, [pc, #180]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002828:	4b2a      	ldr	r3, [pc, #168]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4927      	ldr	r1, [pc, #156]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 8002838:	4313      	orrs	r3, r2
 800283a:	600b      	str	r3, [r1, #0]
 800283c:	e015      	b.n	800286a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800283e:	4b26      	ldr	r3, [pc, #152]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7fe fd5c 	bl	8001300 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800284c:	f7fe fd58 	bl	8001300 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e180      	b.n	8002b60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285e:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d03a      	beq.n	80028ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d019      	beq.n	80028b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800287e:	4b17      	ldr	r3, [pc, #92]	; (80028dc <HAL_RCC_OscConfig+0x274>)
 8002880:	2201      	movs	r2, #1
 8002882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002884:	f7fe fd3c 	bl	8001300 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800288c:	f7fe fd38 	bl	8001300 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e160      	b.n	8002b60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289e:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028aa:	2001      	movs	r0, #1
 80028ac:	f000 fafe 	bl	8002eac <RCC_Delay>
 80028b0:	e01c      	b.n	80028ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028b2:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <HAL_RCC_OscConfig+0x274>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b8:	f7fe fd22 	bl	8001300 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028be:	e00f      	b.n	80028e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c0:	f7fe fd1e 	bl	8001300 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d908      	bls.n	80028e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e146      	b.n	8002b60 <HAL_RCC_OscConfig+0x4f8>
 80028d2:	bf00      	nop
 80028d4:	40021000 	.word	0x40021000
 80028d8:	42420000 	.word	0x42420000
 80028dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e0:	4b92      	ldr	r3, [pc, #584]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1e9      	bne.n	80028c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 80a6 	beq.w	8002a46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028fa:	2300      	movs	r3, #0
 80028fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028fe:	4b8b      	ldr	r3, [pc, #556]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10d      	bne.n	8002926 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800290a:	4b88      	ldr	r3, [pc, #544]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	4a87      	ldr	r2, [pc, #540]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 8002910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002914:	61d3      	str	r3, [r2, #28]
 8002916:	4b85      	ldr	r3, [pc, #532]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002922:	2301      	movs	r3, #1
 8002924:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002926:	4b82      	ldr	r3, [pc, #520]	; (8002b30 <HAL_RCC_OscConfig+0x4c8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292e:	2b00      	cmp	r3, #0
 8002930:	d118      	bne.n	8002964 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002932:	4b7f      	ldr	r3, [pc, #508]	; (8002b30 <HAL_RCC_OscConfig+0x4c8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a7e      	ldr	r2, [pc, #504]	; (8002b30 <HAL_RCC_OscConfig+0x4c8>)
 8002938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800293c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800293e:	f7fe fcdf 	bl	8001300 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002946:	f7fe fcdb 	bl	8001300 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b64      	cmp	r3, #100	; 0x64
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e103      	b.n	8002b60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002958:	4b75      	ldr	r3, [pc, #468]	; (8002b30 <HAL_RCC_OscConfig+0x4c8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d106      	bne.n	800297a <HAL_RCC_OscConfig+0x312>
 800296c:	4b6f      	ldr	r3, [pc, #444]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	4a6e      	ldr	r2, [pc, #440]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	6213      	str	r3, [r2, #32]
 8002978:	e02d      	b.n	80029d6 <HAL_RCC_OscConfig+0x36e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10c      	bne.n	800299c <HAL_RCC_OscConfig+0x334>
 8002982:	4b6a      	ldr	r3, [pc, #424]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	4a69      	ldr	r2, [pc, #420]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 8002988:	f023 0301 	bic.w	r3, r3, #1
 800298c:	6213      	str	r3, [r2, #32]
 800298e:	4b67      	ldr	r3, [pc, #412]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	4a66      	ldr	r2, [pc, #408]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 8002994:	f023 0304 	bic.w	r3, r3, #4
 8002998:	6213      	str	r3, [r2, #32]
 800299a:	e01c      	b.n	80029d6 <HAL_RCC_OscConfig+0x36e>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2b05      	cmp	r3, #5
 80029a2:	d10c      	bne.n	80029be <HAL_RCC_OscConfig+0x356>
 80029a4:	4b61      	ldr	r3, [pc, #388]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	4a60      	ldr	r2, [pc, #384]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 80029aa:	f043 0304 	orr.w	r3, r3, #4
 80029ae:	6213      	str	r3, [r2, #32]
 80029b0:	4b5e      	ldr	r3, [pc, #376]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	4a5d      	ldr	r2, [pc, #372]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	6213      	str	r3, [r2, #32]
 80029bc:	e00b      	b.n	80029d6 <HAL_RCC_OscConfig+0x36e>
 80029be:	4b5b      	ldr	r3, [pc, #364]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	4a5a      	ldr	r2, [pc, #360]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 80029c4:	f023 0301 	bic.w	r3, r3, #1
 80029c8:	6213      	str	r3, [r2, #32]
 80029ca:	4b58      	ldr	r3, [pc, #352]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	4a57      	ldr	r2, [pc, #348]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 80029d0:	f023 0304 	bic.w	r3, r3, #4
 80029d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d015      	beq.n	8002a0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029de:	f7fe fc8f 	bl	8001300 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e4:	e00a      	b.n	80029fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e6:	f7fe fc8b 	bl	8001300 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e0b1      	b.n	8002b60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fc:	4b4b      	ldr	r3, [pc, #300]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0ee      	beq.n	80029e6 <HAL_RCC_OscConfig+0x37e>
 8002a08:	e014      	b.n	8002a34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0a:	f7fe fc79 	bl	8001300 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a10:	e00a      	b.n	8002a28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a12:	f7fe fc75 	bl	8001300 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e09b      	b.n	8002b60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a28:	4b40      	ldr	r3, [pc, #256]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1ee      	bne.n	8002a12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a34:	7dfb      	ldrb	r3, [r7, #23]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d105      	bne.n	8002a46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a3a:	4b3c      	ldr	r3, [pc, #240]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	4a3b      	ldr	r2, [pc, #236]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 8002a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 8087 	beq.w	8002b5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a50:	4b36      	ldr	r3, [pc, #216]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 030c 	and.w	r3, r3, #12
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d061      	beq.n	8002b20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d146      	bne.n	8002af2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a64:	4b33      	ldr	r3, [pc, #204]	; (8002b34 <HAL_RCC_OscConfig+0x4cc>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6a:	f7fe fc49 	bl	8001300 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a72:	f7fe fc45 	bl	8001300 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e06d      	b.n	8002b60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a84:	4b29      	ldr	r3, [pc, #164]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f0      	bne.n	8002a72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a98:	d108      	bne.n	8002aac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a9a:	4b24      	ldr	r3, [pc, #144]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	4921      	ldr	r1, [pc, #132]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aac:	4b1f      	ldr	r3, [pc, #124]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a19      	ldr	r1, [r3, #32]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	430b      	orrs	r3, r1
 8002abe:	491b      	ldr	r1, [pc, #108]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac4:	4b1b      	ldr	r3, [pc, #108]	; (8002b34 <HAL_RCC_OscConfig+0x4cc>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aca:	f7fe fc19 	bl	8001300 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad2:	f7fe fc15 	bl	8001300 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e03d      	b.n	8002b60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ae4:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0f0      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x46a>
 8002af0:	e035      	b.n	8002b5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af2:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <HAL_RCC_OscConfig+0x4cc>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af8:	f7fe fc02 	bl	8001300 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b00:	f7fe fbfe 	bl	8001300 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e026      	b.n	8002b60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b12:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x498>
 8002b1e:	e01e      	b.n	8002b5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d107      	bne.n	8002b38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e019      	b.n	8002b60 <HAL_RCC_OscConfig+0x4f8>
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40007000 	.word	0x40007000
 8002b34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b38:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <HAL_RCC_OscConfig+0x500>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d106      	bne.n	8002b5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d001      	beq.n	8002b5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40021000 	.word	0x40021000

08002b6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0d0      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b80:	4b6a      	ldr	r3, [pc, #424]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d910      	bls.n	8002bb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	4b67      	ldr	r3, [pc, #412]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 0207 	bic.w	r2, r3, #7
 8002b96:	4965      	ldr	r1, [pc, #404]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9e:	4b63      	ldr	r3, [pc, #396]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0b8      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d020      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bc8:	4b59      	ldr	r3, [pc, #356]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4a58      	ldr	r2, [pc, #352]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002bce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002be0:	4b53      	ldr	r3, [pc, #332]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	4a52      	ldr	r2, [pc, #328]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002be6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bec:	4b50      	ldr	r3, [pc, #320]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	494d      	ldr	r1, [pc, #308]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d040      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d107      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	4b47      	ldr	r3, [pc, #284]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d115      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e07f      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d107      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2a:	4b41      	ldr	r3, [pc, #260]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d109      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e073      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3a:	4b3d      	ldr	r3, [pc, #244]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e06b      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c4a:	4b39      	ldr	r3, [pc, #228]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f023 0203 	bic.w	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4936      	ldr	r1, [pc, #216]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c5c:	f7fe fb50 	bl	8001300 <HAL_GetTick>
 8002c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c62:	e00a      	b.n	8002c7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c64:	f7fe fb4c 	bl	8001300 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e053      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7a:	4b2d      	ldr	r3, [pc, #180]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 020c 	and.w	r2, r3, #12
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d1eb      	bne.n	8002c64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c8c:	4b27      	ldr	r3, [pc, #156]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d210      	bcs.n	8002cbc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9a:	4b24      	ldr	r3, [pc, #144]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 0207 	bic.w	r2, r3, #7
 8002ca2:	4922      	ldr	r1, [pc, #136]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002caa:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e032      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc8:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4916      	ldr	r1, [pc, #88]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ce6:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	490e      	ldr	r1, [pc, #56]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cfa:	f000 f821 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	490a      	ldr	r1, [pc, #40]	; (8002d34 <HAL_RCC_ClockConfig+0x1c8>)
 8002d0c:	5ccb      	ldrb	r3, [r1, r3]
 8002d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d12:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <HAL_RCC_ClockConfig+0x1cc>)
 8002d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d16:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <HAL_RCC_ClockConfig+0x1d0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe f9b6 	bl	800108c <HAL_InitTick>

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40022000 	.word	0x40022000
 8002d30:	40021000 	.word	0x40021000
 8002d34:	080076d4 	.word	0x080076d4
 8002d38:	20000020 	.word	0x20000020
 8002d3c:	20000024 	.word	0x20000024

08002d40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	2300      	movs	r3, #0
 8002d54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d5a:	4b1e      	ldr	r3, [pc, #120]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d002      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0x30>
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d003      	beq.n	8002d76 <HAL_RCC_GetSysClockFreq+0x36>
 8002d6e:	e027      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d70:	4b19      	ldr	r3, [pc, #100]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d72:	613b      	str	r3, [r7, #16]
      break;
 8002d74:	e027      	b.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	0c9b      	lsrs	r3, r3, #18
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	4a17      	ldr	r2, [pc, #92]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d80:	5cd3      	ldrb	r3, [r2, r3]
 8002d82:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d010      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d8e:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	0c5b      	lsrs	r3, r3, #17
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	4a11      	ldr	r2, [pc, #68]	; (8002de0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d9a:	5cd3      	ldrb	r3, [r2, r3]
 8002d9c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a0d      	ldr	r2, [pc, #52]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002da2:	fb03 f202 	mul.w	r2, r3, r2
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	e004      	b.n	8002dba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a0c      	ldr	r2, [pc, #48]	; (8002de4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002db4:	fb02 f303 	mul.w	r3, r2, r3
 8002db8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	613b      	str	r3, [r7, #16]
      break;
 8002dbe:	e002      	b.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dc2:	613b      	str	r3, [r7, #16]
      break;
 8002dc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dc6:	693b      	ldr	r3, [r7, #16]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	371c      	adds	r7, #28
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	007a1200 	.word	0x007a1200
 8002ddc:	080076ec 	.word	0x080076ec
 8002de0:	080076fc 	.word	0x080076fc
 8002de4:	003d0900 	.word	0x003d0900

08002de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dec:	4b02      	ldr	r3, [pc, #8]	; (8002df8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dee:	681b      	ldr	r3, [r3, #0]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr
 8002df8:	20000020 	.word	0x20000020

08002dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e00:	f7ff fff2 	bl	8002de8 <HAL_RCC_GetHCLKFreq>
 8002e04:	4602      	mov	r2, r0
 8002e06:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	0a1b      	lsrs	r3, r3, #8
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	4903      	ldr	r1, [pc, #12]	; (8002e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e12:	5ccb      	ldrb	r3, [r1, r3]
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	080076e4 	.word	0x080076e4

08002e24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e28:	f7ff ffde 	bl	8002de8 <HAL_RCC_GetHCLKFreq>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	0adb      	lsrs	r3, r3, #11
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	4903      	ldr	r1, [pc, #12]	; (8002e48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e3a:	5ccb      	ldrb	r3, [r1, r3]
 8002e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40021000 	.word	0x40021000
 8002e48:	080076e4 	.word	0x080076e4

08002e4c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	220f      	movs	r2, #15
 8002e5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e5c:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <HAL_RCC_GetClockConfig+0x58>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 0203 	and.w	r2, r3, #3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e68:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <HAL_RCC_GetClockConfig+0x58>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <HAL_RCC_GetClockConfig+0x58>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002e80:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <HAL_RCC_GetClockConfig+0x58>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	08db      	lsrs	r3, r3, #3
 8002e86:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e8e:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0207 	and.w	r2, r3, #7
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40022000 	.word	0x40022000

08002eac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002eb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <RCC_Delay+0x34>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a0a      	ldr	r2, [pc, #40]	; (8002ee4 <RCC_Delay+0x38>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	0a5b      	lsrs	r3, r3, #9
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	fb02 f303 	mul.w	r3, r2, r3
 8002ec6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ec8:	bf00      	nop
  }
  while (Delay --);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1e5a      	subs	r2, r3, #1
 8002ece:	60fa      	str	r2, [r7, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1f9      	bne.n	8002ec8 <RCC_Delay+0x1c>
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr
 8002ee0:	20000020 	.word	0x20000020
 8002ee4:	10624dd3 	.word	0x10624dd3

08002ee8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e041      	b.n	8002f7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7fe f842 	bl	8000f98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3304      	adds	r3, #4
 8002f24:	4619      	mov	r1, r3
 8002f26:	4610      	mov	r0, r2
 8002f28:	f000 fa74 	bl	8003414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d001      	beq.n	8002fa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e03a      	b.n	8003016 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0201 	orr.w	r2, r2, #1
 8002fb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a18      	ldr	r2, [pc, #96]	; (8003020 <HAL_TIM_Base_Start_IT+0x98>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00e      	beq.n	8002fe0 <HAL_TIM_Base_Start_IT+0x58>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fca:	d009      	beq.n	8002fe0 <HAL_TIM_Base_Start_IT+0x58>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a14      	ldr	r2, [pc, #80]	; (8003024 <HAL_TIM_Base_Start_IT+0x9c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d004      	beq.n	8002fe0 <HAL_TIM_Base_Start_IT+0x58>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a13      	ldr	r2, [pc, #76]	; (8003028 <HAL_TIM_Base_Start_IT+0xa0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d111      	bne.n	8003004 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b06      	cmp	r3, #6
 8002ff0:	d010      	beq.n	8003014 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 0201 	orr.w	r2, r2, #1
 8003000:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003002:	e007      	b.n	8003014 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr
 8003020:	40012c00 	.word	0x40012c00
 8003024:	40000400 	.word	0x40000400
 8003028:	40000800 	.word	0x40000800

0800302c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b02      	cmp	r3, #2
 8003040:	d122      	bne.n	8003088 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b02      	cmp	r3, #2
 800304e:	d11b      	bne.n	8003088 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f06f 0202 	mvn.w	r2, #2
 8003058:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f9b4 	bl	80033dc <HAL_TIM_IC_CaptureCallback>
 8003074:	e005      	b.n	8003082 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f9a7 	bl	80033ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f9b6 	bl	80033ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2b04      	cmp	r3, #4
 8003094:	d122      	bne.n	80030dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d11b      	bne.n	80030dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0204 	mvn.w	r2, #4
 80030ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2202      	movs	r2, #2
 80030b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f98a 	bl	80033dc <HAL_TIM_IC_CaptureCallback>
 80030c8:	e005      	b.n	80030d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f97d 	bl	80033ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f98c 	bl	80033ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d122      	bne.n	8003130 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d11b      	bne.n	8003130 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f06f 0208 	mvn.w	r2, #8
 8003100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2204      	movs	r2, #4
 8003106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f960 	bl	80033dc <HAL_TIM_IC_CaptureCallback>
 800311c:	e005      	b.n	800312a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f953 	bl	80033ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f962 	bl	80033ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	2b10      	cmp	r3, #16
 800313c:	d122      	bne.n	8003184 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f003 0310 	and.w	r3, r3, #16
 8003148:	2b10      	cmp	r3, #16
 800314a:	d11b      	bne.n	8003184 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0210 	mvn.w	r2, #16
 8003154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2208      	movs	r2, #8
 800315a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f936 	bl	80033dc <HAL_TIM_IC_CaptureCallback>
 8003170:	e005      	b.n	800317e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f929 	bl	80033ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f938 	bl	80033ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b01      	cmp	r3, #1
 8003190:	d10e      	bne.n	80031b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b01      	cmp	r3, #1
 800319e:	d107      	bne.n	80031b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0201 	mvn.w	r2, #1
 80031a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7fd fe12 	bl	8000dd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ba:	2b80      	cmp	r3, #128	; 0x80
 80031bc:	d10e      	bne.n	80031dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c8:	2b80      	cmp	r3, #128	; 0x80
 80031ca:	d107      	bne.n	80031dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fa7b 	bl	80036d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e6:	2b40      	cmp	r3, #64	; 0x40
 80031e8:	d10e      	bne.n	8003208 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f4:	2b40      	cmp	r3, #64	; 0x40
 80031f6:	d107      	bne.n	8003208 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f8fc 	bl	8003400 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b20      	cmp	r3, #32
 8003214:	d10e      	bne.n	8003234 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b20      	cmp	r3, #32
 8003222:	d107      	bne.n	8003234 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0220 	mvn.w	r2, #32
 800322c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 fa46 	bl	80036c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003234:	bf00      	nop
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_TIM_ConfigClockSource+0x1c>
 8003254:	2302      	movs	r3, #2
 8003256:	e0b4      	b.n	80033c2 <HAL_TIM_ConfigClockSource+0x186>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800327e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003290:	d03e      	beq.n	8003310 <HAL_TIM_ConfigClockSource+0xd4>
 8003292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003296:	f200 8087 	bhi.w	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
 800329a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800329e:	f000 8086 	beq.w	80033ae <HAL_TIM_ConfigClockSource+0x172>
 80032a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a6:	d87f      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
 80032a8:	2b70      	cmp	r3, #112	; 0x70
 80032aa:	d01a      	beq.n	80032e2 <HAL_TIM_ConfigClockSource+0xa6>
 80032ac:	2b70      	cmp	r3, #112	; 0x70
 80032ae:	d87b      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
 80032b0:	2b60      	cmp	r3, #96	; 0x60
 80032b2:	d050      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0x11a>
 80032b4:	2b60      	cmp	r3, #96	; 0x60
 80032b6:	d877      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
 80032b8:	2b50      	cmp	r3, #80	; 0x50
 80032ba:	d03c      	beq.n	8003336 <HAL_TIM_ConfigClockSource+0xfa>
 80032bc:	2b50      	cmp	r3, #80	; 0x50
 80032be:	d873      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
 80032c0:	2b40      	cmp	r3, #64	; 0x40
 80032c2:	d058      	beq.n	8003376 <HAL_TIM_ConfigClockSource+0x13a>
 80032c4:	2b40      	cmp	r3, #64	; 0x40
 80032c6:	d86f      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
 80032c8:	2b30      	cmp	r3, #48	; 0x30
 80032ca:	d064      	beq.n	8003396 <HAL_TIM_ConfigClockSource+0x15a>
 80032cc:	2b30      	cmp	r3, #48	; 0x30
 80032ce:	d86b      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d060      	beq.n	8003396 <HAL_TIM_ConfigClockSource+0x15a>
 80032d4:	2b20      	cmp	r3, #32
 80032d6:	d867      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d05c      	beq.n	8003396 <HAL_TIM_ConfigClockSource+0x15a>
 80032dc:	2b10      	cmp	r3, #16
 80032de:	d05a      	beq.n	8003396 <HAL_TIM_ConfigClockSource+0x15a>
 80032e0:	e062      	b.n	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032f2:	f000 f968 	bl	80035c6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003304:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	609a      	str	r2, [r3, #8]
      break;
 800330e:	e04f      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003320:	f000 f951 	bl	80035c6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003332:	609a      	str	r2, [r3, #8]
      break;
 8003334:	e03c      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003342:	461a      	mov	r2, r3
 8003344:	f000 f8c8 	bl	80034d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2150      	movs	r1, #80	; 0x50
 800334e:	4618      	mov	r0, r3
 8003350:	f000 f91f 	bl	8003592 <TIM_ITRx_SetConfig>
      break;
 8003354:	e02c      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003362:	461a      	mov	r2, r3
 8003364:	f000 f8e6 	bl	8003534 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2160      	movs	r1, #96	; 0x60
 800336e:	4618      	mov	r0, r3
 8003370:	f000 f90f 	bl	8003592 <TIM_ITRx_SetConfig>
      break;
 8003374:	e01c      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003382:	461a      	mov	r2, r3
 8003384:	f000 f8a8 	bl	80034d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2140      	movs	r1, #64	; 0x40
 800338e:	4618      	mov	r0, r3
 8003390:	f000 f8ff 	bl	8003592 <TIM_ITRx_SetConfig>
      break;
 8003394:	e00c      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4619      	mov	r1, r3
 80033a0:	4610      	mov	r0, r2
 80033a2:	f000 f8f6 	bl	8003592 <TIM_ITRx_SetConfig>
      break;
 80033a6:	e003      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
      break;
 80033ac:	e000      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr

080033dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr

080033ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bc80      	pop	{r7}
 80033fe:	4770      	bx	lr

08003400 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr
	...

08003414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a29      	ldr	r2, [pc, #164]	; (80034cc <TIM_Base_SetConfig+0xb8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d00b      	beq.n	8003444 <TIM_Base_SetConfig+0x30>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003432:	d007      	beq.n	8003444 <TIM_Base_SetConfig+0x30>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a26      	ldr	r2, [pc, #152]	; (80034d0 <TIM_Base_SetConfig+0xbc>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d003      	beq.n	8003444 <TIM_Base_SetConfig+0x30>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a25      	ldr	r2, [pc, #148]	; (80034d4 <TIM_Base_SetConfig+0xc0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d108      	bne.n	8003456 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a1c      	ldr	r2, [pc, #112]	; (80034cc <TIM_Base_SetConfig+0xb8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00b      	beq.n	8003476 <TIM_Base_SetConfig+0x62>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003464:	d007      	beq.n	8003476 <TIM_Base_SetConfig+0x62>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a19      	ldr	r2, [pc, #100]	; (80034d0 <TIM_Base_SetConfig+0xbc>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d003      	beq.n	8003476 <TIM_Base_SetConfig+0x62>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a18      	ldr	r2, [pc, #96]	; (80034d4 <TIM_Base_SetConfig+0xc0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d108      	bne.n	8003488 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800347c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	4313      	orrs	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a07      	ldr	r2, [pc, #28]	; (80034cc <TIM_Base_SetConfig+0xb8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d103      	bne.n	80034bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	615a      	str	r2, [r3, #20]
}
 80034c2:	bf00      	nop
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr
 80034cc:	40012c00 	.word	0x40012c00
 80034d0:	40000400 	.word	0x40000400
 80034d4:	40000800 	.word	0x40000800

080034d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	f023 0201 	bic.w	r2, r3, #1
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f023 030a 	bic.w	r3, r3, #10
 8003514:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	621a      	str	r2, [r3, #32]
}
 800352a:	bf00      	nop
 800352c:	371c      	adds	r7, #28
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr

08003534 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	f023 0210 	bic.w	r2, r3, #16
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800355e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	031b      	lsls	r3, r3, #12
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003570:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	621a      	str	r2, [r3, #32]
}
 8003588:	bf00      	nop
 800358a:	371c      	adds	r7, #28
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr

08003592 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003592:	b480      	push	{r7}
 8003594:	b085      	sub	sp, #20
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f043 0307 	orr.w	r3, r3, #7
 80035b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	609a      	str	r2, [r3, #8]
}
 80035bc:	bf00      	nop
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr

080035c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b087      	sub	sp, #28
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	021a      	lsls	r2, r3, #8
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	431a      	orrs	r2, r3
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	609a      	str	r2, [r3, #8]
}
 80035fa:	bf00      	nop
 80035fc:	371c      	adds	r7, #28
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr

08003604 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003618:	2302      	movs	r3, #2
 800361a:	e046      	b.n	80036aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003642:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a16      	ldr	r2, [pc, #88]	; (80036b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d00e      	beq.n	800367e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003668:	d009      	beq.n	800367e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a12      	ldr	r2, [pc, #72]	; (80036b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d004      	beq.n	800367e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a10      	ldr	r2, [pc, #64]	; (80036bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d10c      	bne.n	8003698 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003684:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	4313      	orrs	r3, r2
 800368e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr
 80036b4:	40012c00 	.word	0x40012c00
 80036b8:	40000400 	.word	0x40000400
 80036bc:	40000800 	.word	0x40000800

080036c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bc80      	pop	{r7}
 80036d0:	4770      	bx	lr

080036d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr

080036e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e042      	b.n	800377c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d106      	bne.n	8003710 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7fd fc6a 	bl	8000fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2224      	movs	r2, #36	; 0x24
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003726:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 fd71 	bl	8004210 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691a      	ldr	r2, [r3, #16]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800373c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695a      	ldr	r2, [r3, #20]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800374c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800375c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08a      	sub	sp, #40	; 0x28
 8003788:	af02      	add	r7, sp, #8
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	4613      	mov	r3, r2
 8003792:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	d16d      	bne.n	8003880 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d002      	beq.n	80037b0 <HAL_UART_Transmit+0x2c>
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e066      	b.n	8003882 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2221      	movs	r2, #33	; 0x21
 80037be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037c2:	f7fd fd9d 	bl	8001300 <HAL_GetTick>
 80037c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	88fa      	ldrh	r2, [r7, #6]
 80037cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	88fa      	ldrh	r2, [r7, #6]
 80037d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037dc:	d108      	bne.n	80037f0 <HAL_UART_Transmit+0x6c>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d104      	bne.n	80037f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	e003      	b.n	80037f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037f8:	e02a      	b.n	8003850 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2200      	movs	r2, #0
 8003802:	2180      	movs	r1, #128	; 0x80
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 faf9 	bl	8003dfc <UART_WaitOnFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e036      	b.n	8003882 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10b      	bne.n	8003832 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003828:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	3302      	adds	r3, #2
 800382e:	61bb      	str	r3, [r7, #24]
 8003830:	e007      	b.n	8003842 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	781a      	ldrb	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	3301      	adds	r3, #1
 8003840:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003854:	b29b      	uxth	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1cf      	bne.n	80037fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2200      	movs	r2, #0
 8003862:	2140      	movs	r1, #64	; 0x40
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fac9 	bl	8003dfc <UART_WaitOnFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e006      	b.n	8003882 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	e000      	b.n	8003882 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003880:	2302      	movs	r3, #2
  }
}
 8003882:	4618      	mov	r0, r3
 8003884:	3720      	adds	r7, #32
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b0ba      	sub	sp, #232	; 0xe8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80038ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10f      	bne.n	80038f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d009      	beq.n	80038f2 <HAL_UART_IRQHandler+0x66>
 80038de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 fbd1 	bl	8004092 <UART_Receive_IT>
      return;
 80038f0:	e25b      	b.n	8003daa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 80de 	beq.w	8003ab8 <HAL_UART_IRQHandler+0x22c>
 80038fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d106      	bne.n	8003916 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800390c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 80d1 	beq.w	8003ab8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00b      	beq.n	800393a <HAL_UART_IRQHandler+0xae>
 8003922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392a:	2b00      	cmp	r3, #0
 800392c:	d005      	beq.n	800393a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003932:	f043 0201 	orr.w	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800393a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00b      	beq.n	800395e <HAL_UART_IRQHandler+0xd2>
 8003946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003956:	f043 0202 	orr.w	r2, r3, #2
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800395e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00b      	beq.n	8003982 <HAL_UART_IRQHandler+0xf6>
 800396a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d005      	beq.n	8003982 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	f043 0204 	orr.w	r2, r3, #4
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d011      	beq.n	80039b2 <HAL_UART_IRQHandler+0x126>
 800398e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d105      	bne.n	80039a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800399a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d005      	beq.n	80039b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039aa:	f043 0208 	orr.w	r2, r3, #8
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 81f2 	beq.w	8003da0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <HAL_UART_IRQHandler+0x14e>
 80039c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039cc:	f003 0320 	and.w	r3, r3, #32
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 fb5c 	bl	8004092 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	bf14      	ite	ne
 80039e8:	2301      	movne	r3, #1
 80039ea:	2300      	moveq	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d103      	bne.n	8003a06 <HAL_UART_IRQHandler+0x17a>
 80039fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d04f      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fa66 	bl	8003ed8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d041      	beq.n	8003a9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3314      	adds	r3, #20
 8003a20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a28:	e853 3f00 	ldrex	r3, [r3]
 8003a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3314      	adds	r3, #20
 8003a42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a56:	e841 2300 	strex	r3, r2, [r1]
 8003a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1d9      	bne.n	8003a1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d013      	beq.n	8003a96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a72:	4a7e      	ldr	r2, [pc, #504]	; (8003c6c <HAL_UART_IRQHandler+0x3e0>)
 8003a74:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fe fbc8 	bl	8002210 <HAL_DMA_Abort_IT>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d016      	beq.n	8003ab4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a90:	4610      	mov	r0, r2
 8003a92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a94:	e00e      	b.n	8003ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f99c 	bl	8003dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9c:	e00a      	b.n	8003ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f998 	bl	8003dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa4:	e006      	b.n	8003ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f994 	bl	8003dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003ab2:	e175      	b.n	8003da0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab4:	bf00      	nop
    return;
 8003ab6:	e173      	b.n	8003da0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	f040 814f 	bne.w	8003d60 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac6:	f003 0310 	and.w	r3, r3, #16
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 8148 	beq.w	8003d60 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad4:	f003 0310 	and.w	r3, r3, #16
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 8141 	beq.w	8003d60 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 80b6 	beq.w	8003c70 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8145 	beq.w	8003da4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b22:	429a      	cmp	r2, r3
 8003b24:	f080 813e 	bcs.w	8003da4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b20      	cmp	r3, #32
 8003b38:	f000 8088 	beq.w	8003c4c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	330c      	adds	r3, #12
 8003b42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b4a:	e853 3f00 	ldrex	r3, [r3]
 8003b4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	330c      	adds	r3, #12
 8003b64:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b68:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b70:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b74:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b78:	e841 2300 	strex	r3, r2, [r1]
 8003b7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1d9      	bne.n	8003b3c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	3314      	adds	r3, #20
 8003b8e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b92:	e853 3f00 	ldrex	r3, [r3]
 8003b96:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b9a:	f023 0301 	bic.w	r3, r3, #1
 8003b9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	3314      	adds	r3, #20
 8003ba8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003bb0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003bb4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bb8:	e841 2300 	strex	r3, r2, [r1]
 8003bbc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003bbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1e1      	bne.n	8003b88 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3314      	adds	r3, #20
 8003bca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bce:	e853 3f00 	ldrex	r3, [r3]
 8003bd2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3314      	adds	r3, #20
 8003be4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003be8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003bea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003bee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bf0:	e841 2300 	strex	r3, r2, [r1]
 8003bf4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003bf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1e3      	bne.n	8003bc4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	330c      	adds	r3, #12
 8003c10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c1c:	f023 0310 	bic.w	r3, r3, #16
 8003c20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	330c      	adds	r3, #12
 8003c2a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c2e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c30:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e3      	bne.n	8003c0a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fe faa7 	bl	800219a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	4619      	mov	r1, r3
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f8bf 	bl	8003de6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c68:	e09c      	b.n	8003da4 <HAL_UART_IRQHandler+0x518>
 8003c6a:	bf00      	nop
 8003c6c:	08003f9d 	.word	0x08003f9d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 808e 	beq.w	8003da8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003c8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 8089 	beq.w	8003da8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	330c      	adds	r3, #12
 8003c9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca0:	e853 3f00 	ldrex	r3, [r3]
 8003ca4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	330c      	adds	r3, #12
 8003cb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003cba:	647a      	str	r2, [r7, #68]	; 0x44
 8003cbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cc2:	e841 2300 	strex	r3, r2, [r1]
 8003cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1e3      	bne.n	8003c96 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	3314      	adds	r3, #20
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	e853 3f00 	ldrex	r3, [r3]
 8003cdc:	623b      	str	r3, [r7, #32]
   return(result);
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	f023 0301 	bic.w	r3, r3, #1
 8003ce4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3314      	adds	r3, #20
 8003cee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003cf2:	633a      	str	r2, [r7, #48]	; 0x30
 8003cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cfa:	e841 2300 	strex	r3, r2, [r1]
 8003cfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1e3      	bne.n	8003cce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	330c      	adds	r3, #12
 8003d1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	e853 3f00 	ldrex	r3, [r3]
 8003d22:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0310 	bic.w	r3, r3, #16
 8003d2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	330c      	adds	r3, #12
 8003d34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d38:	61fa      	str	r2, [r7, #28]
 8003d3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3c:	69b9      	ldr	r1, [r7, #24]
 8003d3e:	69fa      	ldr	r2, [r7, #28]
 8003d40:	e841 2300 	strex	r3, r2, [r1]
 8003d44:	617b      	str	r3, [r7, #20]
   return(result);
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e3      	bne.n	8003d14 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d56:	4619      	mov	r1, r3
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f844 	bl	8003de6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d5e:	e023      	b.n	8003da8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d009      	beq.n	8003d80 <HAL_UART_IRQHandler+0x4f4>
 8003d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f923 	bl	8003fc4 <UART_Transmit_IT>
    return;
 8003d7e:	e014      	b.n	8003daa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00e      	beq.n	8003daa <HAL_UART_IRQHandler+0x51e>
 8003d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d008      	beq.n	8003daa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f962 	bl	8004062 <UART_EndTransmit_IT>
    return;
 8003d9e:	e004      	b.n	8003daa <HAL_UART_IRQHandler+0x51e>
    return;
 8003da0:	bf00      	nop
 8003da2:	e002      	b.n	8003daa <HAL_UART_IRQHandler+0x51e>
      return;
 8003da4:	bf00      	nop
 8003da6:	e000      	b.n	8003daa <HAL_UART_IRQHandler+0x51e>
      return;
 8003da8:	bf00      	nop
  }
}
 8003daa:	37e8      	adds	r7, #232	; 0xe8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bc80      	pop	{r7}
 8003dc0:	4770      	bx	lr

08003dc2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr

08003de6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	460b      	mov	r3, r1
 8003df0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bc80      	pop	{r7}
 8003dfa:	4770      	bx	lr

08003dfc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b090      	sub	sp, #64	; 0x40
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e0c:	e050      	b.n	8003eb0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e14:	d04c      	beq.n	8003eb0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d007      	beq.n	8003e2c <UART_WaitOnFlagUntilTimeout+0x30>
 8003e1c:	f7fd fa70 	bl	8001300 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d241      	bcs.n	8003eb0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	330c      	adds	r3, #12
 8003e32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e36:	e853 3f00 	ldrex	r3, [r3]
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	330c      	adds	r3, #12
 8003e4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e4c:	637a      	str	r2, [r7, #52]	; 0x34
 8003e4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e54:	e841 2300 	strex	r3, r2, [r1]
 8003e58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1e5      	bne.n	8003e2c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3314      	adds	r3, #20
 8003e66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	e853 3f00 	ldrex	r3, [r3]
 8003e6e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f023 0301 	bic.w	r3, r3, #1
 8003e76:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3314      	adds	r3, #20
 8003e7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e80:	623a      	str	r2, [r7, #32]
 8003e82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e84:	69f9      	ldr	r1, [r7, #28]
 8003e86:	6a3a      	ldr	r2, [r7, #32]
 8003e88:	e841 2300 	strex	r3, r2, [r1]
 8003e8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e5      	bne.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e00f      	b.n	8003ed0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	bf0c      	ite	eq
 8003ec0:	2301      	moveq	r3, #1
 8003ec2:	2300      	movne	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	79fb      	ldrb	r3, [r7, #7]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d09f      	beq.n	8003e0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3740      	adds	r7, #64	; 0x40
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b095      	sub	sp, #84	; 0x54
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	330c      	adds	r3, #12
 8003ee6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eea:	e853 3f00 	ldrex	r3, [r3]
 8003eee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	330c      	adds	r3, #12
 8003efe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f00:	643a      	str	r2, [r7, #64]	; 0x40
 8003f02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f08:	e841 2300 	strex	r3, r2, [r1]
 8003f0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1e5      	bne.n	8003ee0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3314      	adds	r3, #20
 8003f1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	e853 3f00 	ldrex	r3, [r3]
 8003f22:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	f023 0301 	bic.w	r3, r3, #1
 8003f2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	3314      	adds	r3, #20
 8003f32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f3c:	e841 2300 	strex	r3, r2, [r1]
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1e5      	bne.n	8003f14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d119      	bne.n	8003f84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	330c      	adds	r3, #12
 8003f56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	e853 3f00 	ldrex	r3, [r3]
 8003f5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f023 0310 	bic.w	r3, r3, #16
 8003f66:	647b      	str	r3, [r7, #68]	; 0x44
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	330c      	adds	r3, #12
 8003f6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f70:	61ba      	str	r2, [r7, #24]
 8003f72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f74:	6979      	ldr	r1, [r7, #20]
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	e841 2300 	strex	r3, r2, [r1]
 8003f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e5      	bne.n	8003f50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f92:	bf00      	nop
 8003f94:	3754      	adds	r7, #84	; 0x54
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr

08003f9c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f7ff ff0c 	bl	8003dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fbc:	bf00      	nop
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b21      	cmp	r3, #33	; 0x21
 8003fd6:	d13e      	bne.n	8004056 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe0:	d114      	bne.n	800400c <UART_Transmit_IT+0x48>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d110      	bne.n	800400c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	881b      	ldrh	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ffe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	1c9a      	adds	r2, r3, #2
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	621a      	str	r2, [r3, #32]
 800400a:	e008      	b.n	800401e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	1c59      	adds	r1, r3, #1
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6211      	str	r1, [r2, #32]
 8004016:	781a      	ldrb	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29b      	uxth	r3, r3
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	4619      	mov	r1, r3
 800402c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10f      	bne.n	8004052 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004040:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004050:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	e000      	b.n	8004058 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004056:	2302      	movs	r3, #2
  }
}
 8004058:	4618      	mov	r0, r3
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr

08004062 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b082      	sub	sp, #8
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004078:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff fe94 	bl	8003db0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b08c      	sub	sp, #48	; 0x30
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b22      	cmp	r3, #34	; 0x22
 80040a4:	f040 80ae 	bne.w	8004204 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b0:	d117      	bne.n	80040e2 <UART_Receive_IT+0x50>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d113      	bne.n	80040e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040da:	1c9a      	adds	r2, r3, #2
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	629a      	str	r2, [r3, #40]	; 0x28
 80040e0:	e026      	b.n	8004130 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f4:	d007      	beq.n	8004106 <UART_Receive_IT+0x74>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10a      	bne.n	8004114 <UART_Receive_IT+0x82>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d106      	bne.n	8004114 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	b2da      	uxtb	r2, r3
 800410e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004110:	701a      	strb	r2, [r3, #0]
 8004112:	e008      	b.n	8004126 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	b2db      	uxtb	r3, r3
 800411c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004120:	b2da      	uxtb	r2, r3
 8004122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004124:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004134:	b29b      	uxth	r3, r3
 8004136:	3b01      	subs	r3, #1
 8004138:	b29b      	uxth	r3, r3
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	4619      	mov	r1, r3
 800413e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004140:	2b00      	cmp	r3, #0
 8004142:	d15d      	bne.n	8004200 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0220 	bic.w	r2, r2, #32
 8004152:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004162:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695a      	ldr	r2, [r3, #20]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0201 	bic.w	r2, r2, #1
 8004172:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004186:	2b01      	cmp	r3, #1
 8004188:	d135      	bne.n	80041f6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	330c      	adds	r3, #12
 8004196:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	e853 3f00 	ldrex	r3, [r3]
 800419e:	613b      	str	r3, [r7, #16]
   return(result);
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f023 0310 	bic.w	r3, r3, #16
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	330c      	adds	r3, #12
 80041ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b0:	623a      	str	r2, [r7, #32]
 80041b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	69f9      	ldr	r1, [r7, #28]
 80041b6:	6a3a      	ldr	r2, [r7, #32]
 80041b8:	e841 2300 	strex	r3, r2, [r1]
 80041bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e5      	bne.n	8004190 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	2b10      	cmp	r3, #16
 80041d0:	d10a      	bne.n	80041e8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041d2:	2300      	movs	r3, #0
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041ec:	4619      	mov	r1, r3
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff fdf9 	bl	8003de6 <HAL_UARTEx_RxEventCallback>
 80041f4:	e002      	b.n	80041fc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7ff fde3 	bl	8003dc2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	e002      	b.n	8004206 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	e000      	b.n	8004206 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004204:	2302      	movs	r3, #2
  }
}
 8004206:	4618      	mov	r0, r3
 8004208:	3730      	adds	r7, #48	; 0x30
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800424a:	f023 030c 	bic.w	r3, r3, #12
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6812      	ldr	r2, [r2, #0]
 8004252:	68b9      	ldr	r1, [r7, #8]
 8004254:	430b      	orrs	r3, r1
 8004256:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699a      	ldr	r2, [r3, #24]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a2c      	ldr	r2, [pc, #176]	; (8004324 <UART_SetConfig+0x114>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d103      	bne.n	8004280 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004278:	f7fe fdd4 	bl	8002e24 <HAL_RCC_GetPCLK2Freq>
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	e002      	b.n	8004286 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004280:	f7fe fdbc 	bl	8002dfc <HAL_RCC_GetPCLK1Freq>
 8004284:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	009a      	lsls	r2, r3, #2
 8004290:	441a      	add	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	fbb2 f3f3 	udiv	r3, r2, r3
 800429c:	4a22      	ldr	r2, [pc, #136]	; (8004328 <UART_SetConfig+0x118>)
 800429e:	fba2 2303 	umull	r2, r3, r2, r3
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	0119      	lsls	r1, r3, #4
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4613      	mov	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	009a      	lsls	r2, r3, #2
 80042b0:	441a      	add	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80042bc:	4b1a      	ldr	r3, [pc, #104]	; (8004328 <UART_SetConfig+0x118>)
 80042be:	fba3 0302 	umull	r0, r3, r3, r2
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	2064      	movs	r0, #100	; 0x64
 80042c6:	fb00 f303 	mul.w	r3, r0, r3
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	3332      	adds	r3, #50	; 0x32
 80042d0:	4a15      	ldr	r2, [pc, #84]	; (8004328 <UART_SetConfig+0x118>)
 80042d2:	fba2 2303 	umull	r2, r3, r2, r3
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042dc:	4419      	add	r1, r3
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	4613      	mov	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	009a      	lsls	r2, r3, #2
 80042e8:	441a      	add	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80042f4:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <UART_SetConfig+0x118>)
 80042f6:	fba3 0302 	umull	r0, r3, r3, r2
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	2064      	movs	r0, #100	; 0x64
 80042fe:	fb00 f303 	mul.w	r3, r0, r3
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	3332      	adds	r3, #50	; 0x32
 8004308:	4a07      	ldr	r2, [pc, #28]	; (8004328 <UART_SetConfig+0x118>)
 800430a:	fba2 2303 	umull	r2, r3, r2, r3
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	f003 020f 	and.w	r2, r3, #15
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	440a      	add	r2, r1
 800431a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800431c:	bf00      	nop
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40013800 	.word	0x40013800
 8004328:	51eb851f 	.word	0x51eb851f

0800432c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004332:	f3ef 8305 	mrs	r3, IPSR
 8004336:	60bb      	str	r3, [r7, #8]
  return(result);
 8004338:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10f      	bne.n	800435e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800433e:	f3ef 8310 	mrs	r3, PRIMASK
 8004342:	607b      	str	r3, [r7, #4]
  return(result);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d109      	bne.n	800435e <osKernelInitialize+0x32>
 800434a:	4b10      	ldr	r3, [pc, #64]	; (800438c <osKernelInitialize+0x60>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b02      	cmp	r3, #2
 8004350:	d109      	bne.n	8004366 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004352:	f3ef 8311 	mrs	r3, BASEPRI
 8004356:	603b      	str	r3, [r7, #0]
  return(result);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800435e:	f06f 0305 	mvn.w	r3, #5
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	e00c      	b.n	8004380 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004366:	4b09      	ldr	r3, [pc, #36]	; (800438c <osKernelInitialize+0x60>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d105      	bne.n	800437a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800436e:	4b07      	ldr	r3, [pc, #28]	; (800438c <osKernelInitialize+0x60>)
 8004370:	2201      	movs	r2, #1
 8004372:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004374:	2300      	movs	r3, #0
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	e002      	b.n	8004380 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800437a:	f04f 33ff 	mov.w	r3, #4294967295
 800437e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004380:	68fb      	ldr	r3, [r7, #12]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr
 800438c:	20000278 	.word	0x20000278

08004390 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004396:	f3ef 8305 	mrs	r3, IPSR
 800439a:	60bb      	str	r3, [r7, #8]
  return(result);
 800439c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10f      	bne.n	80043c2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043a2:	f3ef 8310 	mrs	r3, PRIMASK
 80043a6:	607b      	str	r3, [r7, #4]
  return(result);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d109      	bne.n	80043c2 <osKernelStart+0x32>
 80043ae:	4b11      	ldr	r3, [pc, #68]	; (80043f4 <osKernelStart+0x64>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d109      	bne.n	80043ca <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043b6:	f3ef 8311 	mrs	r3, BASEPRI
 80043ba:	603b      	str	r3, [r7, #0]
  return(result);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <osKernelStart+0x3a>
    stat = osErrorISR;
 80043c2:	f06f 0305 	mvn.w	r3, #5
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	e00e      	b.n	80043e8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80043ca:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <osKernelStart+0x64>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d107      	bne.n	80043e2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80043d2:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <osKernelStart+0x64>)
 80043d4:	2202      	movs	r2, #2
 80043d6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80043d8:	f001 fc40 	bl	8005c5c <vTaskStartScheduler>
      stat = osOK;
 80043dc:	2300      	movs	r3, #0
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	e002      	b.n	80043e8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80043e2:	f04f 33ff 	mov.w	r3, #4294967295
 80043e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80043e8:	68fb      	ldr	r3, [r7, #12]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	20000278 	.word	0x20000278

080043f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b092      	sub	sp, #72	; 0x48
 80043fc:	af04      	add	r7, sp, #16
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004408:	f3ef 8305 	mrs	r3, IPSR
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004410:	2b00      	cmp	r3, #0
 8004412:	f040 8094 	bne.w	800453e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004416:	f3ef 8310 	mrs	r3, PRIMASK
 800441a:	623b      	str	r3, [r7, #32]
  return(result);
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	2b00      	cmp	r3, #0
 8004420:	f040 808d 	bne.w	800453e <osThreadNew+0x146>
 8004424:	4b48      	ldr	r3, [pc, #288]	; (8004548 <osThreadNew+0x150>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b02      	cmp	r3, #2
 800442a:	d106      	bne.n	800443a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800442c:	f3ef 8311 	mrs	r3, BASEPRI
 8004430:	61fb      	str	r3, [r7, #28]
  return(result);
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	2b00      	cmp	r3, #0
 8004436:	f040 8082 	bne.w	800453e <osThreadNew+0x146>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d07e      	beq.n	800453e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004440:	2380      	movs	r3, #128	; 0x80
 8004442:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004444:	2318      	movs	r3, #24
 8004446:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004448:	2300      	movs	r3, #0
 800444a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800444c:	f107 031b 	add.w	r3, r7, #27
 8004450:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004452:	f04f 33ff 	mov.w	r3, #4294967295
 8004456:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d045      	beq.n	80044ea <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <osThreadNew+0x74>
        name = attr->name;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800447a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <osThreadNew+0x9a>
 8004480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004482:	2b38      	cmp	r3, #56	; 0x38
 8004484:	d805      	bhi.n	8004492 <osThreadNew+0x9a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <osThreadNew+0x9e>
        return (NULL);
 8004492:	2300      	movs	r3, #0
 8004494:	e054      	b.n	8004540 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	089b      	lsrs	r3, r3, #2
 80044a4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00e      	beq.n	80044cc <osThreadNew+0xd4>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2b5b      	cmp	r3, #91	; 0x5b
 80044b4:	d90a      	bls.n	80044cc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d006      	beq.n	80044cc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <osThreadNew+0xd4>
        mem = 1;
 80044c6:	2301      	movs	r3, #1
 80044c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ca:	e010      	b.n	80044ee <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10c      	bne.n	80044ee <osThreadNew+0xf6>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d108      	bne.n	80044ee <osThreadNew+0xf6>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d104      	bne.n	80044ee <osThreadNew+0xf6>
          mem = 0;
 80044e4:	2300      	movs	r3, #0
 80044e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80044e8:	e001      	b.n	80044ee <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80044ea:	2300      	movs	r3, #0
 80044ec:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80044ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d110      	bne.n	8004516 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044fc:	9202      	str	r2, [sp, #8]
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004508:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f001 f9da 	bl	80058c4 <xTaskCreateStatic>
 8004510:	4603      	mov	r3, r0
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	e013      	b.n	800453e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004518:	2b00      	cmp	r3, #0
 800451a:	d110      	bne.n	800453e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451e:	b29a      	uxth	r2, r3
 8004520:	f107 0314 	add.w	r3, r7, #20
 8004524:	9301      	str	r3, [sp, #4]
 8004526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f001 fa24 	bl	800597c <xTaskCreate>
 8004534:	4603      	mov	r3, r0
 8004536:	2b01      	cmp	r3, #1
 8004538:	d001      	beq.n	800453e <osThreadNew+0x146>
          hTask = NULL;
 800453a:	2300      	movs	r3, #0
 800453c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800453e:	697b      	ldr	r3, [r7, #20]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3738      	adds	r7, #56	; 0x38
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	20000278 	.word	0x20000278

0800454c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004554:	f3ef 8305 	mrs	r3, IPSR
 8004558:	613b      	str	r3, [r7, #16]
  return(result);
 800455a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10f      	bne.n	8004580 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004560:	f3ef 8310 	mrs	r3, PRIMASK
 8004564:	60fb      	str	r3, [r7, #12]
  return(result);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d109      	bne.n	8004580 <osDelay+0x34>
 800456c:	4b0d      	ldr	r3, [pc, #52]	; (80045a4 <osDelay+0x58>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b02      	cmp	r3, #2
 8004572:	d109      	bne.n	8004588 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004574:	f3ef 8311 	mrs	r3, BASEPRI
 8004578:	60bb      	str	r3, [r7, #8]
  return(result);
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <osDelay+0x3c>
    stat = osErrorISR;
 8004580:	f06f 0305 	mvn.w	r3, #5
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	e007      	b.n	8004598 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004588:	2300      	movs	r3, #0
 800458a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d002      	beq.n	8004598 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f001 fb2e 	bl	8005bf4 <vTaskDelay>
    }
  }

  return (stat);
 8004598:	697b      	ldr	r3, [r7, #20]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20000278 	.word	0x20000278

080045a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4a06      	ldr	r2, [pc, #24]	; (80045d0 <vApplicationGetIdleTaskMemory+0x28>)
 80045b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	4a05      	ldr	r2, [pc, #20]	; (80045d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80045be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2280      	movs	r2, #128	; 0x80
 80045c4:	601a      	str	r2, [r3, #0]
}
 80045c6:	bf00      	nop
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr
 80045d0:	2000027c 	.word	0x2000027c
 80045d4:	200002d8 	.word	0x200002d8

080045d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4a07      	ldr	r2, [pc, #28]	; (8004604 <vApplicationGetTimerTaskMemory+0x2c>)
 80045e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	4a06      	ldr	r2, [pc, #24]	; (8004608 <vApplicationGetTimerTaskMemory+0x30>)
 80045ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045f6:	601a      	str	r2, [r3, #0]
}
 80045f8:	bf00      	nop
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	200004d8 	.word	0x200004d8
 8004608:	20000534 	.word	0x20000534

0800460c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08a      	sub	sp, #40	; 0x28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004614:	2300      	movs	r3, #0
 8004616:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004618:	f001 fb86 	bl	8005d28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800461c:	4b58      	ldr	r3, [pc, #352]	; (8004780 <pvPortMalloc+0x174>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004624:	f000 f910 	bl	8004848 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004628:	4b56      	ldr	r3, [pc, #344]	; (8004784 <pvPortMalloc+0x178>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4013      	ands	r3, r2
 8004630:	2b00      	cmp	r3, #0
 8004632:	f040 808e 	bne.w	8004752 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d01d      	beq.n	8004678 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800463c:	2208      	movs	r2, #8
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4413      	add	r3, r2
 8004642:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	2b00      	cmp	r3, #0
 800464c:	d014      	beq.n	8004678 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f023 0307 	bic.w	r3, r3, #7
 8004654:	3308      	adds	r3, #8
 8004656:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004674:	bf00      	nop
 8004676:	e7fe      	b.n	8004676 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d069      	beq.n	8004752 <pvPortMalloc+0x146>
 800467e:	4b42      	ldr	r3, [pc, #264]	; (8004788 <pvPortMalloc+0x17c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	429a      	cmp	r2, r3
 8004686:	d864      	bhi.n	8004752 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004688:	4b40      	ldr	r3, [pc, #256]	; (800478c <pvPortMalloc+0x180>)
 800468a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800468c:	4b3f      	ldr	r3, [pc, #252]	; (800478c <pvPortMalloc+0x180>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004692:	e004      	b.n	800469e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d903      	bls.n	80046b0 <pvPortMalloc+0xa4>
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1f1      	bne.n	8004694 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80046b0:	4b33      	ldr	r3, [pc, #204]	; (8004780 <pvPortMalloc+0x174>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d04b      	beq.n	8004752 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2208      	movs	r2, #8
 80046c0:	4413      	add	r3, r2
 80046c2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	1ad2      	subs	r2, r2, r3
 80046d4:	2308      	movs	r3, #8
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	429a      	cmp	r2, r3
 80046da:	d91f      	bls.n	800471c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4413      	add	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	f003 0307 	and.w	r3, r3, #7
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <pvPortMalloc+0xf8>
	__asm volatile
 80046ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	613b      	str	r3, [r7, #16]
}
 8004700:	bf00      	nop
 8004702:	e7fe      	b.n	8004702 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	1ad2      	subs	r2, r2, r3
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004716:	69b8      	ldr	r0, [r7, #24]
 8004718:	f000 f8f8 	bl	800490c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800471c:	4b1a      	ldr	r3, [pc, #104]	; (8004788 <pvPortMalloc+0x17c>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	4a18      	ldr	r2, [pc, #96]	; (8004788 <pvPortMalloc+0x17c>)
 8004728:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800472a:	4b17      	ldr	r3, [pc, #92]	; (8004788 <pvPortMalloc+0x17c>)
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	4b18      	ldr	r3, [pc, #96]	; (8004790 <pvPortMalloc+0x184>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d203      	bcs.n	800473e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004736:	4b14      	ldr	r3, [pc, #80]	; (8004788 <pvPortMalloc+0x17c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a15      	ldr	r2, [pc, #84]	; (8004790 <pvPortMalloc+0x184>)
 800473c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	4b10      	ldr	r3, [pc, #64]	; (8004784 <pvPortMalloc+0x178>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	431a      	orrs	r2, r3
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004752:	f001 faf7 	bl	8005d44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <pvPortMalloc+0x16a>
	__asm volatile
 8004760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	60fb      	str	r3, [r7, #12]
}
 8004772:	bf00      	nop
 8004774:	e7fe      	b.n	8004774 <pvPortMalloc+0x168>
	return pvReturn;
 8004776:	69fb      	ldr	r3, [r7, #28]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3728      	adds	r7, #40	; 0x28
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	2000153c 	.word	0x2000153c
 8004784:	20001548 	.word	0x20001548
 8004788:	20001540 	.word	0x20001540
 800478c:	20001534 	.word	0x20001534
 8004790:	20001544 	.word	0x20001544

08004794 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d048      	beq.n	8004838 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80047a6:	2308      	movs	r3, #8
 80047a8:	425b      	negs	r3, r3
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4413      	add	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	4b21      	ldr	r3, [pc, #132]	; (8004840 <vPortFree+0xac>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4013      	ands	r3, r2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10a      	bne.n	80047d8 <vPortFree+0x44>
	__asm volatile
 80047c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	60fb      	str	r3, [r7, #12]
}
 80047d4:	bf00      	nop
 80047d6:	e7fe      	b.n	80047d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <vPortFree+0x62>
	__asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	60bb      	str	r3, [r7, #8]
}
 80047f2:	bf00      	nop
 80047f4:	e7fe      	b.n	80047f4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	4b11      	ldr	r3, [pc, #68]	; (8004840 <vPortFree+0xac>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4013      	ands	r3, r2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d019      	beq.n	8004838 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d115      	bne.n	8004838 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <vPortFree+0xac>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	43db      	mvns	r3, r3
 8004816:	401a      	ands	r2, r3
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800481c:	f001 fa84 	bl	8005d28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	4b07      	ldr	r3, [pc, #28]	; (8004844 <vPortFree+0xb0>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4413      	add	r3, r2
 800482a:	4a06      	ldr	r2, [pc, #24]	; (8004844 <vPortFree+0xb0>)
 800482c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800482e:	6938      	ldr	r0, [r7, #16]
 8004830:	f000 f86c 	bl	800490c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004834:	f001 fa86 	bl	8005d44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004838:	bf00      	nop
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	20001548 	.word	0x20001548
 8004844:	20001540 	.word	0x20001540

08004848 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800484e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004852:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004854:	4b27      	ldr	r3, [pc, #156]	; (80048f4 <prvHeapInit+0xac>)
 8004856:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00c      	beq.n	800487c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	3307      	adds	r3, #7
 8004866:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0307 	bic.w	r3, r3, #7
 800486e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	4a1f      	ldr	r2, [pc, #124]	; (80048f4 <prvHeapInit+0xac>)
 8004878:	4413      	add	r3, r2
 800487a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004880:	4a1d      	ldr	r2, [pc, #116]	; (80048f8 <prvHeapInit+0xb0>)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004886:	4b1c      	ldr	r3, [pc, #112]	; (80048f8 <prvHeapInit+0xb0>)
 8004888:	2200      	movs	r2, #0
 800488a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	4413      	add	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004894:	2208      	movs	r2, #8
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	1a9b      	subs	r3, r3, r2
 800489a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f023 0307 	bic.w	r3, r3, #7
 80048a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4a15      	ldr	r2, [pc, #84]	; (80048fc <prvHeapInit+0xb4>)
 80048a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80048aa:	4b14      	ldr	r3, [pc, #80]	; (80048fc <prvHeapInit+0xb4>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2200      	movs	r2, #0
 80048b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80048b2:	4b12      	ldr	r3, [pc, #72]	; (80048fc <prvHeapInit+0xb4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	1ad2      	subs	r2, r2, r3
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048c8:	4b0c      	ldr	r3, [pc, #48]	; (80048fc <prvHeapInit+0xb4>)
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	4a0a      	ldr	r2, [pc, #40]	; (8004900 <prvHeapInit+0xb8>)
 80048d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	4a09      	ldr	r2, [pc, #36]	; (8004904 <prvHeapInit+0xbc>)
 80048de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048e0:	4b09      	ldr	r3, [pc, #36]	; (8004908 <prvHeapInit+0xc0>)
 80048e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048e6:	601a      	str	r2, [r3, #0]
}
 80048e8:	bf00      	nop
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc80      	pop	{r7}
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	20000934 	.word	0x20000934
 80048f8:	20001534 	.word	0x20001534
 80048fc:	2000153c 	.word	0x2000153c
 8004900:	20001544 	.word	0x20001544
 8004904:	20001540 	.word	0x20001540
 8004908:	20001548 	.word	0x20001548

0800490c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004914:	4b27      	ldr	r3, [pc, #156]	; (80049b4 <prvInsertBlockIntoFreeList+0xa8>)
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	e002      	b.n	8004920 <prvInsertBlockIntoFreeList+0x14>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	429a      	cmp	r2, r3
 8004928:	d8f7      	bhi.n	800491a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	4413      	add	r3, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	429a      	cmp	r2, r3
 800493a:	d108      	bne.n	800494e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	441a      	add	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	441a      	add	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	429a      	cmp	r2, r3
 8004960:	d118      	bne.n	8004994 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	4b14      	ldr	r3, [pc, #80]	; (80049b8 <prvInsertBlockIntoFreeList+0xac>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d00d      	beq.n	800498a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	441a      	add	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	e008      	b.n	800499c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800498a:	4b0b      	ldr	r3, [pc, #44]	; (80049b8 <prvInsertBlockIntoFreeList+0xac>)
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	e003      	b.n	800499c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d002      	beq.n	80049aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049aa:	bf00      	nop
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bc80      	pop	{r7}
 80049b2:	4770      	bx	lr
 80049b4:	20001534 	.word	0x20001534
 80049b8:	2000153c 	.word	0x2000153c

080049bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f103 0208 	add.w	r2, r3, #8
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f04f 32ff 	mov.w	r2, #4294967295
 80049d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f103 0208 	add.w	r2, r3, #8
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f103 0208 	add.w	r2, r3, #8
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc80      	pop	{r7}
 80049f8:	4770      	bx	lr

080049fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bc80      	pop	{r7}
 8004a10:	4770      	bx	lr

08004a12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a12:	b480      	push	{r7}
 8004a14:	b085      	sub	sp, #20
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	601a      	str	r2, [r3, #0]
}
 8004a4e:	bf00      	nop
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bc80      	pop	{r7}
 8004a56:	4770      	bx	lr

08004a58 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6e:	d103      	bne.n	8004a78 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	e00c      	b.n	8004a92 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3308      	adds	r3, #8
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	e002      	b.n	8004a86 <vListInsert+0x2e>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d2f6      	bcs.n	8004a80 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	601a      	str	r2, [r3, #0]
}
 8004abe:	bf00      	nop
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr

08004ac8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6892      	ldr	r2, [r2, #8]
 8004ade:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6852      	ldr	r2, [r2, #4]
 8004ae8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d103      	bne.n	8004afc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	1e5a      	subs	r2, r3, #1
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bc80      	pop	{r7}
 8004b18:	4770      	bx	lr
	...

08004b1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	3b04      	subs	r3, #4
 8004b2c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3b04      	subs	r3, #4
 8004b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f023 0201 	bic.w	r2, r3, #1
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3b04      	subs	r3, #4
 8004b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b4c:	4a08      	ldr	r2, [pc, #32]	; (8004b70 <pxPortInitialiseStack+0x54>)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3b14      	subs	r3, #20
 8004b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	3b20      	subs	r3, #32
 8004b62:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b64:	68fb      	ldr	r3, [r7, #12]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr
 8004b70:	08004b75 	.word	0x08004b75

08004b74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b7e:	4b12      	ldr	r3, [pc, #72]	; (8004bc8 <prvTaskExitError+0x54>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b86:	d00a      	beq.n	8004b9e <prvTaskExitError+0x2a>
	__asm volatile
 8004b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	60fb      	str	r3, [r7, #12]
}
 8004b9a:	bf00      	nop
 8004b9c:	e7fe      	b.n	8004b9c <prvTaskExitError+0x28>
	__asm volatile
 8004b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	60bb      	str	r3, [r7, #8]
}
 8004bb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bb2:	bf00      	nop
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0fc      	beq.n	8004bb4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004bba:	bf00      	nop
 8004bbc:	bf00      	nop
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bc80      	pop	{r7}
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	2000002c 	.word	0x2000002c
 8004bcc:	00000000 	.word	0x00000000

08004bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004bd0:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <pxCurrentTCBConst2>)
 8004bd2:	6819      	ldr	r1, [r3, #0]
 8004bd4:	6808      	ldr	r0, [r1, #0]
 8004bd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004bda:	f380 8809 	msr	PSP, r0
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f04f 0000 	mov.w	r0, #0
 8004be6:	f380 8811 	msr	BASEPRI, r0
 8004bea:	f04e 0e0d 	orr.w	lr, lr, #13
 8004bee:	4770      	bx	lr

08004bf0 <pxCurrentTCBConst2>:
 8004bf0:	20001594 	.word	0x20001594
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004bf4:	bf00      	nop
 8004bf6:	bf00      	nop

08004bf8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004bf8:	4806      	ldr	r0, [pc, #24]	; (8004c14 <prvPortStartFirstTask+0x1c>)
 8004bfa:	6800      	ldr	r0, [r0, #0]
 8004bfc:	6800      	ldr	r0, [r0, #0]
 8004bfe:	f380 8808 	msr	MSP, r0
 8004c02:	b662      	cpsie	i
 8004c04:	b661      	cpsie	f
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	df00      	svc	0
 8004c10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c12:	bf00      	nop
 8004c14:	e000ed08 	.word	0xe000ed08

08004c18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c1e:	4b32      	ldr	r3, [pc, #200]	; (8004ce8 <xPortStartScheduler+0xd0>)
 8004c20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	22ff      	movs	r2, #255	; 0xff
 8004c2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c38:	78fb      	ldrb	r3, [r7, #3]
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	4b2a      	ldr	r3, [pc, #168]	; (8004cec <xPortStartScheduler+0xd4>)
 8004c44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c46:	4b2a      	ldr	r3, [pc, #168]	; (8004cf0 <xPortStartScheduler+0xd8>)
 8004c48:	2207      	movs	r2, #7
 8004c4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c4c:	e009      	b.n	8004c62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004c4e:	4b28      	ldr	r3, [pc, #160]	; (8004cf0 <xPortStartScheduler+0xd8>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	4a26      	ldr	r2, [pc, #152]	; (8004cf0 <xPortStartScheduler+0xd8>)
 8004c56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c58:	78fb      	ldrb	r3, [r7, #3]
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c62:	78fb      	ldrb	r3, [r7, #3]
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6a:	2b80      	cmp	r3, #128	; 0x80
 8004c6c:	d0ef      	beq.n	8004c4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c6e:	4b20      	ldr	r3, [pc, #128]	; (8004cf0 <xPortStartScheduler+0xd8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f1c3 0307 	rsb	r3, r3, #7
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d00a      	beq.n	8004c90 <xPortStartScheduler+0x78>
	__asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	60bb      	str	r3, [r7, #8]
}
 8004c8c:	bf00      	nop
 8004c8e:	e7fe      	b.n	8004c8e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c90:	4b17      	ldr	r3, [pc, #92]	; (8004cf0 <xPortStartScheduler+0xd8>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	021b      	lsls	r3, r3, #8
 8004c96:	4a16      	ldr	r2, [pc, #88]	; (8004cf0 <xPortStartScheduler+0xd8>)
 8004c98:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c9a:	4b15      	ldr	r3, [pc, #84]	; (8004cf0 <xPortStartScheduler+0xd8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ca2:	4a13      	ldr	r2, [pc, #76]	; (8004cf0 <xPortStartScheduler+0xd8>)
 8004ca4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004cae:	4b11      	ldr	r3, [pc, #68]	; (8004cf4 <xPortStartScheduler+0xdc>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a10      	ldr	r2, [pc, #64]	; (8004cf4 <xPortStartScheduler+0xdc>)
 8004cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004cba:	4b0e      	ldr	r3, [pc, #56]	; (8004cf4 <xPortStartScheduler+0xdc>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a0d      	ldr	r2, [pc, #52]	; (8004cf4 <xPortStartScheduler+0xdc>)
 8004cc0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004cc4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004cc6:	f000 f8b9 	bl	8004e3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004cca:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <xPortStartScheduler+0xe0>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004cd0:	f7ff ff92 	bl	8004bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004cd4:	f001 f9a0 	bl	8006018 <vTaskSwitchContext>
	prvTaskExitError();
 8004cd8:	f7ff ff4c 	bl	8004b74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	e000e400 	.word	0xe000e400
 8004cec:	2000154c 	.word	0x2000154c
 8004cf0:	20001550 	.word	0x20001550
 8004cf4:	e000ed20 	.word	0xe000ed20
 8004cf8:	2000002c 	.word	0x2000002c

08004cfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	607b      	str	r3, [r7, #4]
}
 8004d14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d16:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <vPortEnterCritical+0x58>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	4a0d      	ldr	r2, [pc, #52]	; (8004d54 <vPortEnterCritical+0x58>)
 8004d1e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d20:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <vPortEnterCritical+0x58>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d10f      	bne.n	8004d48 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d28:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <vPortEnterCritical+0x5c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <vPortEnterCritical+0x4c>
	__asm volatile
 8004d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	603b      	str	r3, [r7, #0]
}
 8004d44:	bf00      	nop
 8004d46:	e7fe      	b.n	8004d46 <vPortEnterCritical+0x4a>
	}
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bc80      	pop	{r7}
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	2000002c 	.word	0x2000002c
 8004d58:	e000ed04 	.word	0xe000ed04

08004d5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d62:	4b11      	ldr	r3, [pc, #68]	; (8004da8 <vPortExitCritical+0x4c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10a      	bne.n	8004d80 <vPortExitCritical+0x24>
	__asm volatile
 8004d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	607b      	str	r3, [r7, #4]
}
 8004d7c:	bf00      	nop
 8004d7e:	e7fe      	b.n	8004d7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d80:	4b09      	ldr	r3, [pc, #36]	; (8004da8 <vPortExitCritical+0x4c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3b01      	subs	r3, #1
 8004d86:	4a08      	ldr	r2, [pc, #32]	; (8004da8 <vPortExitCritical+0x4c>)
 8004d88:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d8a:	4b07      	ldr	r3, [pc, #28]	; (8004da8 <vPortExitCritical+0x4c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d105      	bne.n	8004d9e <vPortExitCritical+0x42>
 8004d92:	2300      	movs	r3, #0
 8004d94:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d9c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bc80      	pop	{r7}
 8004da6:	4770      	bx	lr
 8004da8:	2000002c 	.word	0x2000002c
 8004dac:	00000000 	.word	0x00000000

08004db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004db0:	f3ef 8009 	mrs	r0, PSP
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	4b0d      	ldr	r3, [pc, #52]	; (8004df0 <pxCurrentTCBConst>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004dc0:	6010      	str	r0, [r2, #0]
 8004dc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004dc6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004dca:	f380 8811 	msr	BASEPRI, r0
 8004dce:	f001 f923 	bl	8006018 <vTaskSwitchContext>
 8004dd2:	f04f 0000 	mov.w	r0, #0
 8004dd6:	f380 8811 	msr	BASEPRI, r0
 8004dda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004dde:	6819      	ldr	r1, [r3, #0]
 8004de0:	6808      	ldr	r0, [r1, #0]
 8004de2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004de6:	f380 8809 	msr	PSP, r0
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	4770      	bx	lr

08004df0 <pxCurrentTCBConst>:
 8004df0:	20001594 	.word	0x20001594
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004df4:	bf00      	nop
 8004df6:	bf00      	nop

08004df8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	607b      	str	r3, [r7, #4]
}
 8004e10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e12:	f001 f843 	bl	8005e9c <xTaskIncrementTick>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e1c:	4b06      	ldr	r3, [pc, #24]	; (8004e38 <SysTick_Handler+0x40>)
 8004e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	2300      	movs	r3, #0
 8004e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	f383 8811 	msr	BASEPRI, r3
}
 8004e2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e30:	bf00      	nop
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	e000ed04 	.word	0xe000ed04

08004e3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e40:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <vPortSetupTimerInterrupt+0x30>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e46:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <vPortSetupTimerInterrupt+0x34>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e4c:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <vPortSetupTimerInterrupt+0x38>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a09      	ldr	r2, [pc, #36]	; (8004e78 <vPortSetupTimerInterrupt+0x3c>)
 8004e52:	fba2 2303 	umull	r2, r3, r2, r3
 8004e56:	099b      	lsrs	r3, r3, #6
 8004e58:	4a08      	ldr	r2, [pc, #32]	; (8004e7c <vPortSetupTimerInterrupt+0x40>)
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e5e:	4b03      	ldr	r3, [pc, #12]	; (8004e6c <vPortSetupTimerInterrupt+0x30>)
 8004e60:	2207      	movs	r2, #7
 8004e62:	601a      	str	r2, [r3, #0]
}
 8004e64:	bf00      	nop
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bc80      	pop	{r7}
 8004e6a:	4770      	bx	lr
 8004e6c:	e000e010 	.word	0xe000e010
 8004e70:	e000e018 	.word	0xe000e018
 8004e74:	20000020 	.word	0x20000020
 8004e78:	10624dd3 	.word	0x10624dd3
 8004e7c:	e000e014 	.word	0xe000e014

08004e80 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e86:	f3ef 8305 	mrs	r3, IPSR
 8004e8a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b0f      	cmp	r3, #15
 8004e90:	d914      	bls.n	8004ebc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e92:	4a16      	ldr	r2, [pc, #88]	; (8004eec <vPortValidateInterruptPriority+0x6c>)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4413      	add	r3, r2
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e9c:	4b14      	ldr	r3, [pc, #80]	; (8004ef0 <vPortValidateInterruptPriority+0x70>)
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	7afa      	ldrb	r2, [r7, #11]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d20a      	bcs.n	8004ebc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eaa:	f383 8811 	msr	BASEPRI, r3
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f3bf 8f4f 	dsb	sy
 8004eb6:	607b      	str	r3, [r7, #4]
}
 8004eb8:	bf00      	nop
 8004eba:	e7fe      	b.n	8004eba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ebc:	4b0d      	ldr	r3, [pc, #52]	; (8004ef4 <vPortValidateInterruptPriority+0x74>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ec4:	4b0c      	ldr	r3, [pc, #48]	; (8004ef8 <vPortValidateInterruptPriority+0x78>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d90a      	bls.n	8004ee2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	603b      	str	r3, [r7, #0]
}
 8004ede:	bf00      	nop
 8004ee0:	e7fe      	b.n	8004ee0 <vPortValidateInterruptPriority+0x60>
	}
 8004ee2:	bf00      	nop
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bc80      	pop	{r7}
 8004eea:	4770      	bx	lr
 8004eec:	e000e3f0 	.word	0xe000e3f0
 8004ef0:	2000154c 	.word	0x2000154c
 8004ef4:	e000ed0c 	.word	0xe000ed0c
 8004ef8:	20001550 	.word	0x20001550

08004efc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10a      	bne.n	8004f26 <xQueueGenericReset+0x2a>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	60bb      	str	r3, [r7, #8]
}
 8004f22:	bf00      	nop
 8004f24:	e7fe      	b.n	8004f24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004f26:	f7ff fee9 	bl	8004cfc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f32:	68f9      	ldr	r1, [r7, #12]
 8004f34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004f36:	fb01 f303 	mul.w	r3, r1, r3
 8004f3a:	441a      	add	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f56:	3b01      	subs	r3, #1
 8004f58:	68f9      	ldr	r1, [r7, #12]
 8004f5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004f5c:	fb01 f303 	mul.w	r3, r1, r3
 8004f60:	441a      	add	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	22ff      	movs	r2, #255	; 0xff
 8004f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	22ff      	movs	r2, #255	; 0xff
 8004f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d114      	bne.n	8004fa6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d01a      	beq.n	8004fba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	3310      	adds	r3, #16
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f001 f8f1 	bl	8006170 <xTaskRemoveFromEventList>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d012      	beq.n	8004fba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004f94:	4b0c      	ldr	r3, [pc, #48]	; (8004fc8 <xQueueGenericReset+0xcc>)
 8004f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f9a:	601a      	str	r2, [r3, #0]
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	e009      	b.n	8004fba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3310      	adds	r3, #16
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7ff fd06 	bl	80049bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	3324      	adds	r3, #36	; 0x24
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7ff fd01 	bl	80049bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004fba:	f7ff fecf 	bl	8004d5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004fbe:	2301      	movs	r3, #1
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	e000ed04 	.word	0xe000ed04

08004fcc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08e      	sub	sp, #56	; 0x38
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10a      	bne.n	8004ff6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ff2:	bf00      	nop
 8004ff4:	e7fe      	b.n	8004ff4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10a      	bne.n	8005012 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800500e:	bf00      	nop
 8005010:	e7fe      	b.n	8005010 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <xQueueGenericCreateStatic+0x52>
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <xQueueGenericCreateStatic+0x56>
 800501e:	2301      	movs	r3, #1
 8005020:	e000      	b.n	8005024 <xQueueGenericCreateStatic+0x58>
 8005022:	2300      	movs	r3, #0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10a      	bne.n	800503e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502c:	f383 8811 	msr	BASEPRI, r3
 8005030:	f3bf 8f6f 	isb	sy
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	623b      	str	r3, [r7, #32]
}
 800503a:	bf00      	nop
 800503c:	e7fe      	b.n	800503c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d102      	bne.n	800504a <xQueueGenericCreateStatic+0x7e>
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <xQueueGenericCreateStatic+0x82>
 800504a:	2301      	movs	r3, #1
 800504c:	e000      	b.n	8005050 <xQueueGenericCreateStatic+0x84>
 800504e:	2300      	movs	r3, #0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10a      	bne.n	800506a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005058:	f383 8811 	msr	BASEPRI, r3
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	61fb      	str	r3, [r7, #28]
}
 8005066:	bf00      	nop
 8005068:	e7fe      	b.n	8005068 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800506a:	2350      	movs	r3, #80	; 0x50
 800506c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2b50      	cmp	r3, #80	; 0x50
 8005072:	d00a      	beq.n	800508a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	61bb      	str	r3, [r7, #24]
}
 8005086:	bf00      	nop
 8005088:	e7fe      	b.n	8005088 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800508e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00d      	beq.n	80050b0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800509c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80050a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	4613      	mov	r3, r2
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 f805 	bl	80050ba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80050b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3730      	adds	r7, #48	; 0x30
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b084      	sub	sp, #16
 80050be:	af00      	add	r7, sp, #0
 80050c0:	60f8      	str	r0, [r7, #12]
 80050c2:	60b9      	str	r1, [r7, #8]
 80050c4:	607a      	str	r2, [r7, #4]
 80050c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d103      	bne.n	80050d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	e002      	b.n	80050dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80050e8:	2101      	movs	r1, #1
 80050ea:	69b8      	ldr	r0, [r7, #24]
 80050ec:	f7ff ff06 	bl	8004efc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	78fa      	ldrb	r2, [r7, #3]
 80050f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80050f8:	bf00      	nop
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b08e      	sub	sp, #56	; 0x38
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800510e:	2300      	movs	r3, #0
 8005110:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10a      	bne.n	8005132 <xQueueGenericSend+0x32>
	__asm volatile
 800511c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800512e:	bf00      	nop
 8005130:	e7fe      	b.n	8005130 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d103      	bne.n	8005140 <xQueueGenericSend+0x40>
 8005138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <xQueueGenericSend+0x44>
 8005140:	2301      	movs	r3, #1
 8005142:	e000      	b.n	8005146 <xQueueGenericSend+0x46>
 8005144:	2300      	movs	r3, #0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10a      	bne.n	8005160 <xQueueGenericSend+0x60>
	__asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800515c:	bf00      	nop
 800515e:	e7fe      	b.n	800515e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	2b02      	cmp	r3, #2
 8005164:	d103      	bne.n	800516e <xQueueGenericSend+0x6e>
 8005166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516a:	2b01      	cmp	r3, #1
 800516c:	d101      	bne.n	8005172 <xQueueGenericSend+0x72>
 800516e:	2301      	movs	r3, #1
 8005170:	e000      	b.n	8005174 <xQueueGenericSend+0x74>
 8005172:	2300      	movs	r3, #0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10a      	bne.n	800518e <xQueueGenericSend+0x8e>
	__asm volatile
 8005178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	623b      	str	r3, [r7, #32]
}
 800518a:	bf00      	nop
 800518c:	e7fe      	b.n	800518c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800518e:	f001 f9b1 	bl	80064f4 <xTaskGetSchedulerState>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d102      	bne.n	800519e <xQueueGenericSend+0x9e>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <xQueueGenericSend+0xa2>
 800519e:	2301      	movs	r3, #1
 80051a0:	e000      	b.n	80051a4 <xQueueGenericSend+0xa4>
 80051a2:	2300      	movs	r3, #0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10a      	bne.n	80051be <xQueueGenericSend+0xbe>
	__asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	61fb      	str	r3, [r7, #28]
}
 80051ba:	bf00      	nop
 80051bc:	e7fe      	b.n	80051bc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051be:	f7ff fd9d 	bl	8004cfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d302      	bcc.n	80051d4 <xQueueGenericSend+0xd4>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d129      	bne.n	8005228 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	68b9      	ldr	r1, [r7, #8]
 80051d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051da:	f000 fa07 	bl	80055ec <prvCopyDataToQueue>
 80051de:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d010      	beq.n	800520a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ea:	3324      	adds	r3, #36	; 0x24
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 ffbf 	bl	8006170 <xTaskRemoveFromEventList>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d013      	beq.n	8005220 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80051f8:	4b3f      	ldr	r3, [pc, #252]	; (80052f8 <xQueueGenericSend+0x1f8>)
 80051fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	e00a      	b.n	8005220 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800520a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520c:	2b00      	cmp	r3, #0
 800520e:	d007      	beq.n	8005220 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005210:	4b39      	ldr	r3, [pc, #228]	; (80052f8 <xQueueGenericSend+0x1f8>)
 8005212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005220:	f7ff fd9c 	bl	8004d5c <vPortExitCritical>
				return pdPASS;
 8005224:	2301      	movs	r3, #1
 8005226:	e063      	b.n	80052f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d103      	bne.n	8005236 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800522e:	f7ff fd95 	bl	8004d5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005232:	2300      	movs	r3, #0
 8005234:	e05c      	b.n	80052f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005238:	2b00      	cmp	r3, #0
 800523a:	d106      	bne.n	800524a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800523c:	f107 0314 	add.w	r3, r7, #20
 8005240:	4618      	mov	r0, r3
 8005242:	f000 fff9 	bl	8006238 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005246:	2301      	movs	r3, #1
 8005248:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800524a:	f7ff fd87 	bl	8004d5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800524e:	f000 fd6b 	bl	8005d28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005252:	f7ff fd53 	bl	8004cfc <vPortEnterCritical>
 8005256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005258:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800525c:	b25b      	sxtb	r3, r3
 800525e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005262:	d103      	bne.n	800526c <xQueueGenericSend+0x16c>
 8005264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005266:	2200      	movs	r2, #0
 8005268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005272:	b25b      	sxtb	r3, r3
 8005274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005278:	d103      	bne.n	8005282 <xQueueGenericSend+0x182>
 800527a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005282:	f7ff fd6b 	bl	8004d5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005286:	1d3a      	adds	r2, r7, #4
 8005288:	f107 0314 	add.w	r3, r7, #20
 800528c:	4611      	mov	r1, r2
 800528e:	4618      	mov	r0, r3
 8005290:	f000 ffe8 	bl	8006264 <xTaskCheckForTimeOut>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d124      	bne.n	80052e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800529a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800529c:	f000 fa9e 	bl	80057dc <prvIsQueueFull>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d018      	beq.n	80052d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	3310      	adds	r3, #16
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	4611      	mov	r1, r2
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 ff0e 	bl	80060d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80052b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052b6:	f000 fa29 	bl	800570c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80052ba:	f000 fd43 	bl	8005d44 <xTaskResumeAll>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f47f af7c 	bne.w	80051be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80052c6:	4b0c      	ldr	r3, [pc, #48]	; (80052f8 <xQueueGenericSend+0x1f8>)
 80052c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	e772      	b.n	80051be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80052d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052da:	f000 fa17 	bl	800570c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052de:	f000 fd31 	bl	8005d44 <xTaskResumeAll>
 80052e2:	e76c      	b.n	80051be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80052e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052e6:	f000 fa11 	bl	800570c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052ea:	f000 fd2b 	bl	8005d44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80052ee:	2300      	movs	r3, #0
		}
	}
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3738      	adds	r7, #56	; 0x38
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	e000ed04 	.word	0xe000ed04

080052fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b08e      	sub	sp, #56	; 0x38
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800530e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10a      	bne.n	800532a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005326:	bf00      	nop
 8005328:	e7fe      	b.n	8005328 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d103      	bne.n	8005338 <xQueueGenericSendFromISR+0x3c>
 8005330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <xQueueGenericSendFromISR+0x40>
 8005338:	2301      	movs	r3, #1
 800533a:	e000      	b.n	800533e <xQueueGenericSendFromISR+0x42>
 800533c:	2300      	movs	r3, #0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10a      	bne.n	8005358 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	623b      	str	r3, [r7, #32]
}
 8005354:	bf00      	nop
 8005356:	e7fe      	b.n	8005356 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2b02      	cmp	r3, #2
 800535c:	d103      	bne.n	8005366 <xQueueGenericSendFromISR+0x6a>
 800535e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005362:	2b01      	cmp	r3, #1
 8005364:	d101      	bne.n	800536a <xQueueGenericSendFromISR+0x6e>
 8005366:	2301      	movs	r3, #1
 8005368:	e000      	b.n	800536c <xQueueGenericSendFromISR+0x70>
 800536a:	2300      	movs	r3, #0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10a      	bne.n	8005386 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	61fb      	str	r3, [r7, #28]
}
 8005382:	bf00      	nop
 8005384:	e7fe      	b.n	8005384 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005386:	f7ff fd7b 	bl	8004e80 <vPortValidateInterruptPriority>
	__asm volatile
 800538a:	f3ef 8211 	mrs	r2, BASEPRI
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	61ba      	str	r2, [r7, #24]
 80053a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80053a2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80053a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d302      	bcc.n	80053b8 <xQueueGenericSendFromISR+0xbc>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d12c      	bne.n	8005412 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80053b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	68b9      	ldr	r1, [r7, #8]
 80053c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053c8:	f000 f910 	bl	80055ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80053cc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80053d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d4:	d112      	bne.n	80053fc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d016      	beq.n	800540c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	3324      	adds	r3, #36	; 0x24
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fec4 	bl	8006170 <xTaskRemoveFromEventList>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00e      	beq.n	800540c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00b      	beq.n	800540c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	e007      	b.n	800540c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80053fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005400:	3301      	adds	r3, #1
 8005402:	b2db      	uxtb	r3, r3
 8005404:	b25a      	sxtb	r2, r3
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800540c:	2301      	movs	r3, #1
 800540e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005410:	e001      	b.n	8005416 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005412:	2300      	movs	r3, #0
 8005414:	637b      	str	r3, [r7, #52]	; 0x34
 8005416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005418:	613b      	str	r3, [r7, #16]
	__asm volatile
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f383 8811 	msr	BASEPRI, r3
}
 8005420:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005424:	4618      	mov	r0, r3
 8005426:	3738      	adds	r7, #56	; 0x38
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08c      	sub	sp, #48	; 0x30
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005438:	2300      	movs	r3, #0
 800543a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10a      	bne.n	800545c <xQueueReceive+0x30>
	__asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	623b      	str	r3, [r7, #32]
}
 8005458:	bf00      	nop
 800545a:	e7fe      	b.n	800545a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d103      	bne.n	800546a <xQueueReceive+0x3e>
 8005462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <xQueueReceive+0x42>
 800546a:	2301      	movs	r3, #1
 800546c:	e000      	b.n	8005470 <xQueueReceive+0x44>
 800546e:	2300      	movs	r3, #0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10a      	bne.n	800548a <xQueueReceive+0x5e>
	__asm volatile
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	61fb      	str	r3, [r7, #28]
}
 8005486:	bf00      	nop
 8005488:	e7fe      	b.n	8005488 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800548a:	f001 f833 	bl	80064f4 <xTaskGetSchedulerState>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d102      	bne.n	800549a <xQueueReceive+0x6e>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <xQueueReceive+0x72>
 800549a:	2301      	movs	r3, #1
 800549c:	e000      	b.n	80054a0 <xQueueReceive+0x74>
 800549e:	2300      	movs	r3, #0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10a      	bne.n	80054ba <xQueueReceive+0x8e>
	__asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	61bb      	str	r3, [r7, #24]
}
 80054b6:	bf00      	nop
 80054b8:	e7fe      	b.n	80054b8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80054ba:	f7ff fc1f 	bl	8004cfc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d01f      	beq.n	800550a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80054ca:	68b9      	ldr	r1, [r7, #8]
 80054cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054ce:	f000 f8f7 	bl	80056c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	1e5a      	subs	r2, r3, #1
 80054d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00f      	beq.n	8005502 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e4:	3310      	adds	r3, #16
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fe42 	bl	8006170 <xTaskRemoveFromEventList>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d007      	beq.n	8005502 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80054f2:	4b3d      	ldr	r3, [pc, #244]	; (80055e8 <xQueueReceive+0x1bc>)
 80054f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005502:	f7ff fc2b 	bl	8004d5c <vPortExitCritical>
				return pdPASS;
 8005506:	2301      	movs	r3, #1
 8005508:	e069      	b.n	80055de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d103      	bne.n	8005518 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005510:	f7ff fc24 	bl	8004d5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005514:	2300      	movs	r3, #0
 8005516:	e062      	b.n	80055de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551a:	2b00      	cmp	r3, #0
 800551c:	d106      	bne.n	800552c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800551e:	f107 0310 	add.w	r3, r7, #16
 8005522:	4618      	mov	r0, r3
 8005524:	f000 fe88 	bl	8006238 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005528:	2301      	movs	r3, #1
 800552a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800552c:	f7ff fc16 	bl	8004d5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005530:	f000 fbfa 	bl	8005d28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005534:	f7ff fbe2 	bl	8004cfc <vPortEnterCritical>
 8005538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800553e:	b25b      	sxtb	r3, r3
 8005540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005544:	d103      	bne.n	800554e <xQueueReceive+0x122>
 8005546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800554e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005550:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005554:	b25b      	sxtb	r3, r3
 8005556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555a:	d103      	bne.n	8005564 <xQueueReceive+0x138>
 800555c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005564:	f7ff fbfa 	bl	8004d5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005568:	1d3a      	adds	r2, r7, #4
 800556a:	f107 0310 	add.w	r3, r7, #16
 800556e:	4611      	mov	r1, r2
 8005570:	4618      	mov	r0, r3
 8005572:	f000 fe77 	bl	8006264 <xTaskCheckForTimeOut>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d123      	bne.n	80055c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800557c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800557e:	f000 f917 	bl	80057b0 <prvIsQueueEmpty>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d017      	beq.n	80055b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558a:	3324      	adds	r3, #36	; 0x24
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	4611      	mov	r1, r2
 8005590:	4618      	mov	r0, r3
 8005592:	f000 fd9d 	bl	80060d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005596:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005598:	f000 f8b8 	bl	800570c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800559c:	f000 fbd2 	bl	8005d44 <xTaskResumeAll>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d189      	bne.n	80054ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80055a6:	4b10      	ldr	r3, [pc, #64]	; (80055e8 <xQueueReceive+0x1bc>)
 80055a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	e780      	b.n	80054ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80055b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055ba:	f000 f8a7 	bl	800570c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055be:	f000 fbc1 	bl	8005d44 <xTaskResumeAll>
 80055c2:	e77a      	b.n	80054ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80055c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055c6:	f000 f8a1 	bl	800570c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055ca:	f000 fbbb 	bl	8005d44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055d0:	f000 f8ee 	bl	80057b0 <prvIsQueueEmpty>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f43f af6f 	beq.w	80054ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80055dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3730      	adds	r7, #48	; 0x30
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	e000ed04 	.word	0xe000ed04

080055ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80055f8:	2300      	movs	r3, #0
 80055fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005600:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10d      	bne.n	8005626 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d14d      	bne.n	80056ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	4618      	mov	r0, r3
 8005618:	f000 ff8a 	bl	8006530 <xTaskPriorityDisinherit>
 800561c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	605a      	str	r2, [r3, #4]
 8005624:	e043      	b.n	80056ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d119      	bne.n	8005660 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6898      	ldr	r0, [r3, #8]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005634:	461a      	mov	r2, r3
 8005636:	68b9      	ldr	r1, [r7, #8]
 8005638:	f001 fba2 	bl	8006d80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005644:	441a      	add	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	429a      	cmp	r2, r3
 8005654:	d32b      	bcc.n	80056ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	609a      	str	r2, [r3, #8]
 800565e:	e026      	b.n	80056ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	68d8      	ldr	r0, [r3, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	461a      	mov	r2, r3
 800566a:	68b9      	ldr	r1, [r7, #8]
 800566c:	f001 fb88 	bl	8006d80 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	68da      	ldr	r2, [r3, #12]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005678:	425b      	negs	r3, r3
 800567a:	441a      	add	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	68da      	ldr	r2, [r3, #12]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	429a      	cmp	r2, r3
 800568a:	d207      	bcs.n	800569c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005694:	425b      	negs	r3, r3
 8005696:	441a      	add	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d105      	bne.n	80056ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80056b6:	697b      	ldr	r3, [r7, #20]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d018      	beq.n	8005704 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	441a      	add	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68da      	ldr	r2, [r3, #12]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d303      	bcc.n	80056f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68d9      	ldr	r1, [r3, #12]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fc:	461a      	mov	r2, r3
 80056fe:	6838      	ldr	r0, [r7, #0]
 8005700:	f001 fb3e 	bl	8006d80 <memcpy>
	}
}
 8005704:	bf00      	nop
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005714:	f7ff faf2 	bl	8004cfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800571e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005720:	e011      	b.n	8005746 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	2b00      	cmp	r3, #0
 8005728:	d012      	beq.n	8005750 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	3324      	adds	r3, #36	; 0x24
 800572e:	4618      	mov	r0, r3
 8005730:	f000 fd1e 	bl	8006170 <xTaskRemoveFromEventList>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d001      	beq.n	800573e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800573a:	f000 fdf5 	bl	8006328 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800573e:	7bfb      	ldrb	r3, [r7, #15]
 8005740:	3b01      	subs	r3, #1
 8005742:	b2db      	uxtb	r3, r3
 8005744:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800574a:	2b00      	cmp	r3, #0
 800574c:	dce9      	bgt.n	8005722 <prvUnlockQueue+0x16>
 800574e:	e000      	b.n	8005752 <prvUnlockQueue+0x46>
					break;
 8005750:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	22ff      	movs	r2, #255	; 0xff
 8005756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800575a:	f7ff faff 	bl	8004d5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800575e:	f7ff facd 	bl	8004cfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005768:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800576a:	e011      	b.n	8005790 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d012      	beq.n	800579a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	3310      	adds	r3, #16
 8005778:	4618      	mov	r0, r3
 800577a:	f000 fcf9 	bl	8006170 <xTaskRemoveFromEventList>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005784:	f000 fdd0 	bl	8006328 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005788:	7bbb      	ldrb	r3, [r7, #14]
 800578a:	3b01      	subs	r3, #1
 800578c:	b2db      	uxtb	r3, r3
 800578e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005790:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005794:	2b00      	cmp	r3, #0
 8005796:	dce9      	bgt.n	800576c <prvUnlockQueue+0x60>
 8005798:	e000      	b.n	800579c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800579a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	22ff      	movs	r2, #255	; 0xff
 80057a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80057a4:	f7ff fada 	bl	8004d5c <vPortExitCritical>
}
 80057a8:	bf00      	nop
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057b8:	f7ff faa0 	bl	8004cfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d102      	bne.n	80057ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80057c4:	2301      	movs	r3, #1
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	e001      	b.n	80057ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80057ca:	2300      	movs	r3, #0
 80057cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057ce:	f7ff fac5 	bl	8004d5c <vPortExitCritical>

	return xReturn;
 80057d2:	68fb      	ldr	r3, [r7, #12]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057e4:	f7ff fa8a 	bl	8004cfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d102      	bne.n	80057fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80057f4:	2301      	movs	r3, #1
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	e001      	b.n	80057fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80057fa:	2300      	movs	r3, #0
 80057fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057fe:	f7ff faad 	bl	8004d5c <vPortExitCritical>

	return xReturn;
 8005802:	68fb      	ldr	r3, [r7, #12]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005816:	2300      	movs	r3, #0
 8005818:	60fb      	str	r3, [r7, #12]
 800581a:	e014      	b.n	8005846 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800581c:	4a0e      	ldr	r2, [pc, #56]	; (8005858 <vQueueAddToRegistry+0x4c>)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10b      	bne.n	8005840 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005828:	490b      	ldr	r1, [pc, #44]	; (8005858 <vQueueAddToRegistry+0x4c>)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005832:	4a09      	ldr	r2, [pc, #36]	; (8005858 <vQueueAddToRegistry+0x4c>)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	4413      	add	r3, r2
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800583e:	e006      	b.n	800584e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	3301      	adds	r3, #1
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2b07      	cmp	r3, #7
 800584a:	d9e7      	bls.n	800581c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800584c:	bf00      	nop
 800584e:	bf00      	nop
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	bc80      	pop	{r7}
 8005856:	4770      	bx	lr
 8005858:	20001554 	.word	0x20001554

0800585c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800586c:	f7ff fa46 	bl	8004cfc <vPortEnterCritical>
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005876:	b25b      	sxtb	r3, r3
 8005878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587c:	d103      	bne.n	8005886 <vQueueWaitForMessageRestricted+0x2a>
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800588c:	b25b      	sxtb	r3, r3
 800588e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005892:	d103      	bne.n	800589c <vQueueWaitForMessageRestricted+0x40>
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800589c:	f7ff fa5e 	bl	8004d5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d106      	bne.n	80058b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	3324      	adds	r3, #36	; 0x24
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	68b9      	ldr	r1, [r7, #8]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 fc31 	bl	8006118 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80058b6:	6978      	ldr	r0, [r7, #20]
 80058b8:	f7ff ff28 	bl	800570c <prvUnlockQueue>
	}
 80058bc:	bf00      	nop
 80058be:	3718      	adds	r7, #24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08e      	sub	sp, #56	; 0x38
 80058c8:	af04      	add	r7, sp, #16
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
 80058d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80058d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10a      	bne.n	80058ee <xTaskCreateStatic+0x2a>
	__asm volatile
 80058d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	623b      	str	r3, [r7, #32]
}
 80058ea:	bf00      	nop
 80058ec:	e7fe      	b.n	80058ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80058ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10a      	bne.n	800590a <xTaskCreateStatic+0x46>
	__asm volatile
 80058f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	61fb      	str	r3, [r7, #28]
}
 8005906:	bf00      	nop
 8005908:	e7fe      	b.n	8005908 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800590a:	235c      	movs	r3, #92	; 0x5c
 800590c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	2b5c      	cmp	r3, #92	; 0x5c
 8005912:	d00a      	beq.n	800592a <xTaskCreateStatic+0x66>
	__asm volatile
 8005914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	61bb      	str	r3, [r7, #24]
}
 8005926:	bf00      	nop
 8005928:	e7fe      	b.n	8005928 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800592a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01e      	beq.n	800596e <xTaskCreateStatic+0xaa>
 8005930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005932:	2b00      	cmp	r3, #0
 8005934:	d01b      	beq.n	800596e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005938:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800593e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	2202      	movs	r2, #2
 8005944:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005948:	2300      	movs	r3, #0
 800594a:	9303      	str	r3, [sp, #12]
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	9302      	str	r3, [sp, #8]
 8005950:	f107 0314 	add.w	r3, r7, #20
 8005954:	9301      	str	r3, [sp, #4]
 8005956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	68b9      	ldr	r1, [r7, #8]
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 f850 	bl	8005a06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005966:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005968:	f000 f8d4 	bl	8005b14 <prvAddNewTaskToReadyList>
 800596c:	e001      	b.n	8005972 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800596e:	2300      	movs	r3, #0
 8005970:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005972:	697b      	ldr	r3, [r7, #20]
	}
 8005974:	4618      	mov	r0, r3
 8005976:	3728      	adds	r7, #40	; 0x28
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800597c:	b580      	push	{r7, lr}
 800597e:	b08c      	sub	sp, #48	; 0x30
 8005980:	af04      	add	r7, sp, #16
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	603b      	str	r3, [r7, #0]
 8005988:	4613      	mov	r3, r2
 800598a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800598c:	88fb      	ldrh	r3, [r7, #6]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4618      	mov	r0, r3
 8005992:	f7fe fe3b 	bl	800460c <pvPortMalloc>
 8005996:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00e      	beq.n	80059bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800599e:	205c      	movs	r0, #92	; 0x5c
 80059a0:	f7fe fe34 	bl	800460c <pvPortMalloc>
 80059a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	631a      	str	r2, [r3, #48]	; 0x30
 80059b2:	e005      	b.n	80059c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80059b4:	6978      	ldr	r0, [r7, #20]
 80059b6:	f7fe feed 	bl	8004794 <vPortFree>
 80059ba:	e001      	b.n	80059c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80059bc:	2300      	movs	r3, #0
 80059be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d017      	beq.n	80059f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80059ce:	88fa      	ldrh	r2, [r7, #6]
 80059d0:	2300      	movs	r3, #0
 80059d2:	9303      	str	r3, [sp, #12]
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	9302      	str	r3, [sp, #8]
 80059d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059da:	9301      	str	r3, [sp, #4]
 80059dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	68b9      	ldr	r1, [r7, #8]
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 f80e 	bl	8005a06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059ea:	69f8      	ldr	r0, [r7, #28]
 80059ec:	f000 f892 	bl	8005b14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80059f0:	2301      	movs	r3, #1
 80059f2:	61bb      	str	r3, [r7, #24]
 80059f4:	e002      	b.n	80059fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059f6:	f04f 33ff 	mov.w	r3, #4294967295
 80059fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80059fc:	69bb      	ldr	r3, [r7, #24]
	}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3720      	adds	r7, #32
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b088      	sub	sp, #32
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	60f8      	str	r0, [r7, #12]
 8005a0e:	60b9      	str	r1, [r7, #8]
 8005a10:	607a      	str	r2, [r7, #4]
 8005a12:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a16:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	21a5      	movs	r1, #165	; 0xa5
 8005a20:	f001 f97a 	bl	8006d18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	f023 0307 	bic.w	r3, r3, #7
 8005a3c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00a      	beq.n	8005a5e <prvInitialiseNewTask+0x58>
	__asm volatile
 8005a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4c:	f383 8811 	msr	BASEPRI, r3
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	617b      	str	r3, [r7, #20]
}
 8005a5a:	bf00      	nop
 8005a5c:	e7fe      	b.n	8005a5c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a5e:	2300      	movs	r3, #0
 8005a60:	61fb      	str	r3, [r7, #28]
 8005a62:	e012      	b.n	8005a8a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	4413      	add	r3, r2
 8005a6a:	7819      	ldrb	r1, [r3, #0]
 8005a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	4413      	add	r3, r2
 8005a72:	3334      	adds	r3, #52	; 0x34
 8005a74:	460a      	mov	r2, r1
 8005a76:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d006      	beq.n	8005a92 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	3301      	adds	r3, #1
 8005a88:	61fb      	str	r3, [r7, #28]
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	2b0f      	cmp	r3, #15
 8005a8e:	d9e9      	bls.n	8005a64 <prvInitialiseNewTask+0x5e>
 8005a90:	e000      	b.n	8005a94 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005a92:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9e:	2b37      	cmp	r3, #55	; 0x37
 8005aa0:	d901      	bls.n	8005aa6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005aa2:	2337      	movs	r3, #55	; 0x37
 8005aa4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aaa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ab0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	3304      	adds	r3, #4
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fe ff9c 	bl	80049fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac4:	3318      	adds	r3, #24
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fe ff97 	bl	80049fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ad0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ada:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ae0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	68f9      	ldr	r1, [r7, #12]
 8005af4:	69b8      	ldr	r0, [r7, #24]
 8005af6:	f7ff f811 	bl	8004b1c <pxPortInitialiseStack>
 8005afa:	4602      	mov	r2, r0
 8005afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b0a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b0c:	bf00      	nop
 8005b0e:	3720      	adds	r7, #32
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b1c:	f7ff f8ee 	bl	8004cfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b20:	4b2d      	ldr	r3, [pc, #180]	; (8005bd8 <prvAddNewTaskToReadyList+0xc4>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	3301      	adds	r3, #1
 8005b26:	4a2c      	ldr	r2, [pc, #176]	; (8005bd8 <prvAddNewTaskToReadyList+0xc4>)
 8005b28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b2a:	4b2c      	ldr	r3, [pc, #176]	; (8005bdc <prvAddNewTaskToReadyList+0xc8>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d109      	bne.n	8005b46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b32:	4a2a      	ldr	r2, [pc, #168]	; (8005bdc <prvAddNewTaskToReadyList+0xc8>)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b38:	4b27      	ldr	r3, [pc, #156]	; (8005bd8 <prvAddNewTaskToReadyList+0xc4>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d110      	bne.n	8005b62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b40:	f000 fc16 	bl	8006370 <prvInitialiseTaskLists>
 8005b44:	e00d      	b.n	8005b62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b46:	4b26      	ldr	r3, [pc, #152]	; (8005be0 <prvAddNewTaskToReadyList+0xcc>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d109      	bne.n	8005b62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b4e:	4b23      	ldr	r3, [pc, #140]	; (8005bdc <prvAddNewTaskToReadyList+0xc8>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d802      	bhi.n	8005b62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b5c:	4a1f      	ldr	r2, [pc, #124]	; (8005bdc <prvAddNewTaskToReadyList+0xc8>)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b62:	4b20      	ldr	r3, [pc, #128]	; (8005be4 <prvAddNewTaskToReadyList+0xd0>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3301      	adds	r3, #1
 8005b68:	4a1e      	ldr	r2, [pc, #120]	; (8005be4 <prvAddNewTaskToReadyList+0xd0>)
 8005b6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b6c:	4b1d      	ldr	r3, [pc, #116]	; (8005be4 <prvAddNewTaskToReadyList+0xd0>)
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b78:	4b1b      	ldr	r3, [pc, #108]	; (8005be8 <prvAddNewTaskToReadyList+0xd4>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d903      	bls.n	8005b88 <prvAddNewTaskToReadyList+0x74>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b84:	4a18      	ldr	r2, [pc, #96]	; (8005be8 <prvAddNewTaskToReadyList+0xd4>)
 8005b86:	6013      	str	r3, [r2, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4a15      	ldr	r2, [pc, #84]	; (8005bec <prvAddNewTaskToReadyList+0xd8>)
 8005b96:	441a      	add	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	4610      	mov	r0, r2
 8005ba0:	f7fe ff37 	bl	8004a12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ba4:	f7ff f8da 	bl	8004d5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ba8:	4b0d      	ldr	r3, [pc, #52]	; (8005be0 <prvAddNewTaskToReadyList+0xcc>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00e      	beq.n	8005bce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005bb0:	4b0a      	ldr	r3, [pc, #40]	; (8005bdc <prvAddNewTaskToReadyList+0xc8>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d207      	bcs.n	8005bce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005bbe:	4b0c      	ldr	r3, [pc, #48]	; (8005bf0 <prvAddNewTaskToReadyList+0xdc>)
 8005bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bce:	bf00      	nop
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20001a68 	.word	0x20001a68
 8005bdc:	20001594 	.word	0x20001594
 8005be0:	20001a74 	.word	0x20001a74
 8005be4:	20001a84 	.word	0x20001a84
 8005be8:	20001a70 	.word	0x20001a70
 8005bec:	20001598 	.word	0x20001598
 8005bf0:	e000ed04 	.word	0xe000ed04

08005bf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d017      	beq.n	8005c36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005c06:	4b13      	ldr	r3, [pc, #76]	; (8005c54 <vTaskDelay+0x60>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00a      	beq.n	8005c24 <vTaskDelay+0x30>
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	60bb      	str	r3, [r7, #8]
}
 8005c20:	bf00      	nop
 8005c22:	e7fe      	b.n	8005c22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005c24:	f000 f880 	bl	8005d28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c28:	2100      	movs	r1, #0
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fcee 	bl	800660c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c30:	f000 f888 	bl	8005d44 <xTaskResumeAll>
 8005c34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d107      	bne.n	8005c4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005c3c:	4b06      	ldr	r3, [pc, #24]	; (8005c58 <vTaskDelay+0x64>)
 8005c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c4c:	bf00      	nop
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	20001a90 	.word	0x20001a90
 8005c58:	e000ed04 	.word	0xe000ed04

08005c5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b08a      	sub	sp, #40	; 0x28
 8005c60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c62:	2300      	movs	r3, #0
 8005c64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c66:	2300      	movs	r3, #0
 8005c68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c6a:	463a      	mov	r2, r7
 8005c6c:	1d39      	adds	r1, r7, #4
 8005c6e:	f107 0308 	add.w	r3, r7, #8
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7fe fc98 	bl	80045a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c78:	6839      	ldr	r1, [r7, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	9202      	str	r2, [sp, #8]
 8005c80:	9301      	str	r3, [sp, #4]
 8005c82:	2300      	movs	r3, #0
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	2300      	movs	r3, #0
 8005c88:	460a      	mov	r2, r1
 8005c8a:	4921      	ldr	r1, [pc, #132]	; (8005d10 <vTaskStartScheduler+0xb4>)
 8005c8c:	4821      	ldr	r0, [pc, #132]	; (8005d14 <vTaskStartScheduler+0xb8>)
 8005c8e:	f7ff fe19 	bl	80058c4 <xTaskCreateStatic>
 8005c92:	4603      	mov	r3, r0
 8005c94:	4a20      	ldr	r2, [pc, #128]	; (8005d18 <vTaskStartScheduler+0xbc>)
 8005c96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c98:	4b1f      	ldr	r3, [pc, #124]	; (8005d18 <vTaskStartScheduler+0xbc>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	617b      	str	r3, [r7, #20]
 8005ca4:	e001      	b.n	8005caa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d102      	bne.n	8005cb6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005cb0:	f000 fd00 	bl	80066b4 <xTimerCreateTimerTask>
 8005cb4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d116      	bne.n	8005cea <vTaskStartScheduler+0x8e>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	613b      	str	r3, [r7, #16]
}
 8005cce:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005cd0:	4b12      	ldr	r3, [pc, #72]	; (8005d1c <vTaskStartScheduler+0xc0>)
 8005cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005cd8:	4b11      	ldr	r3, [pc, #68]	; (8005d20 <vTaskStartScheduler+0xc4>)
 8005cda:	2201      	movs	r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005cde:	4b11      	ldr	r3, [pc, #68]	; (8005d24 <vTaskStartScheduler+0xc8>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ce4:	f7fe ff98 	bl	8004c18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ce8:	e00e      	b.n	8005d08 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf0:	d10a      	bne.n	8005d08 <vTaskStartScheduler+0xac>
	__asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	60fb      	str	r3, [r7, #12]
}
 8005d04:	bf00      	nop
 8005d06:	e7fe      	b.n	8005d06 <vTaskStartScheduler+0xaa>
}
 8005d08:	bf00      	nop
 8005d0a:	3718      	adds	r7, #24
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	08007674 	.word	0x08007674
 8005d14:	08006341 	.word	0x08006341
 8005d18:	20001a8c 	.word	0x20001a8c
 8005d1c:	20001a88 	.word	0x20001a88
 8005d20:	20001a74 	.word	0x20001a74
 8005d24:	20001a6c 	.word	0x20001a6c

08005d28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d28:	b480      	push	{r7}
 8005d2a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005d2c:	4b04      	ldr	r3, [pc, #16]	; (8005d40 <vTaskSuspendAll+0x18>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3301      	adds	r3, #1
 8005d32:	4a03      	ldr	r2, [pc, #12]	; (8005d40 <vTaskSuspendAll+0x18>)
 8005d34:	6013      	str	r3, [r2, #0]
}
 8005d36:	bf00      	nop
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bc80      	pop	{r7}
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	20001a90 	.word	0x20001a90

08005d44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d52:	4b42      	ldr	r3, [pc, #264]	; (8005e5c <xTaskResumeAll+0x118>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10a      	bne.n	8005d70 <xTaskResumeAll+0x2c>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	603b      	str	r3, [r7, #0]
}
 8005d6c:	bf00      	nop
 8005d6e:	e7fe      	b.n	8005d6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d70:	f7fe ffc4 	bl	8004cfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d74:	4b39      	ldr	r3, [pc, #228]	; (8005e5c <xTaskResumeAll+0x118>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	4a38      	ldr	r2, [pc, #224]	; (8005e5c <xTaskResumeAll+0x118>)
 8005d7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d7e:	4b37      	ldr	r3, [pc, #220]	; (8005e5c <xTaskResumeAll+0x118>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d162      	bne.n	8005e4c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d86:	4b36      	ldr	r3, [pc, #216]	; (8005e60 <xTaskResumeAll+0x11c>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d05e      	beq.n	8005e4c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d8e:	e02f      	b.n	8005df0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005d90:	4b34      	ldr	r3, [pc, #208]	; (8005e64 <xTaskResumeAll+0x120>)
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	3318      	adds	r3, #24
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7fe fe93 	bl	8004ac8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	3304      	adds	r3, #4
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fe fe8e 	bl	8004ac8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db0:	4b2d      	ldr	r3, [pc, #180]	; (8005e68 <xTaskResumeAll+0x124>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d903      	bls.n	8005dc0 <xTaskResumeAll+0x7c>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dbc:	4a2a      	ldr	r2, [pc, #168]	; (8005e68 <xTaskResumeAll+0x124>)
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4a27      	ldr	r2, [pc, #156]	; (8005e6c <xTaskResumeAll+0x128>)
 8005dce:	441a      	add	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4610      	mov	r0, r2
 8005dd8:	f7fe fe1b 	bl	8004a12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de0:	4b23      	ldr	r3, [pc, #140]	; (8005e70 <xTaskResumeAll+0x12c>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d302      	bcc.n	8005df0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005dea:	4b22      	ldr	r3, [pc, #136]	; (8005e74 <xTaskResumeAll+0x130>)
 8005dec:	2201      	movs	r2, #1
 8005dee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005df0:	4b1c      	ldr	r3, [pc, #112]	; (8005e64 <xTaskResumeAll+0x120>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1cb      	bne.n	8005d90 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005dfe:	f000 fb55 	bl	80064ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005e02:	4b1d      	ldr	r3, [pc, #116]	; (8005e78 <xTaskResumeAll+0x134>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d010      	beq.n	8005e30 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e0e:	f000 f845 	bl	8005e9c <xTaskIncrementTick>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005e18:	4b16      	ldr	r3, [pc, #88]	; (8005e74 <xTaskResumeAll+0x130>)
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	3b01      	subs	r3, #1
 8005e22:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1f1      	bne.n	8005e0e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005e2a:	4b13      	ldr	r3, [pc, #76]	; (8005e78 <xTaskResumeAll+0x134>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e30:	4b10      	ldr	r3, [pc, #64]	; (8005e74 <xTaskResumeAll+0x130>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d009      	beq.n	8005e4c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e3c:	4b0f      	ldr	r3, [pc, #60]	; (8005e7c <xTaskResumeAll+0x138>)
 8005e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e4c:	f7fe ff86 	bl	8004d5c <vPortExitCritical>

	return xAlreadyYielded;
 8005e50:	68bb      	ldr	r3, [r7, #8]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20001a90 	.word	0x20001a90
 8005e60:	20001a68 	.word	0x20001a68
 8005e64:	20001a28 	.word	0x20001a28
 8005e68:	20001a70 	.word	0x20001a70
 8005e6c:	20001598 	.word	0x20001598
 8005e70:	20001594 	.word	0x20001594
 8005e74:	20001a7c 	.word	0x20001a7c
 8005e78:	20001a78 	.word	0x20001a78
 8005e7c:	e000ed04 	.word	0xe000ed04

08005e80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e86:	4b04      	ldr	r3, [pc, #16]	; (8005e98 <xTaskGetTickCount+0x18>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e8c:	687b      	ldr	r3, [r7, #4]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr
 8005e98:	20001a6c 	.word	0x20001a6c

08005e9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ea6:	4b51      	ldr	r3, [pc, #324]	; (8005fec <xTaskIncrementTick+0x150>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f040 808e 	bne.w	8005fcc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005eb0:	4b4f      	ldr	r3, [pc, #316]	; (8005ff0 <xTaskIncrementTick+0x154>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005eb8:	4a4d      	ldr	r2, [pc, #308]	; (8005ff0 <xTaskIncrementTick+0x154>)
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d120      	bne.n	8005f06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ec4:	4b4b      	ldr	r3, [pc, #300]	; (8005ff4 <xTaskIncrementTick+0x158>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00a      	beq.n	8005ee4 <xTaskIncrementTick+0x48>
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	603b      	str	r3, [r7, #0]
}
 8005ee0:	bf00      	nop
 8005ee2:	e7fe      	b.n	8005ee2 <xTaskIncrementTick+0x46>
 8005ee4:	4b43      	ldr	r3, [pc, #268]	; (8005ff4 <xTaskIncrementTick+0x158>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	60fb      	str	r3, [r7, #12]
 8005eea:	4b43      	ldr	r3, [pc, #268]	; (8005ff8 <xTaskIncrementTick+0x15c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a41      	ldr	r2, [pc, #260]	; (8005ff4 <xTaskIncrementTick+0x158>)
 8005ef0:	6013      	str	r3, [r2, #0]
 8005ef2:	4a41      	ldr	r2, [pc, #260]	; (8005ff8 <xTaskIncrementTick+0x15c>)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6013      	str	r3, [r2, #0]
 8005ef8:	4b40      	ldr	r3, [pc, #256]	; (8005ffc <xTaskIncrementTick+0x160>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3301      	adds	r3, #1
 8005efe:	4a3f      	ldr	r2, [pc, #252]	; (8005ffc <xTaskIncrementTick+0x160>)
 8005f00:	6013      	str	r3, [r2, #0]
 8005f02:	f000 fad3 	bl	80064ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f06:	4b3e      	ldr	r3, [pc, #248]	; (8006000 <xTaskIncrementTick+0x164>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d34e      	bcc.n	8005fae <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f10:	4b38      	ldr	r3, [pc, #224]	; (8005ff4 <xTaskIncrementTick+0x158>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <xTaskIncrementTick+0x82>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e000      	b.n	8005f20 <xTaskIncrementTick+0x84>
 8005f1e:	2300      	movs	r3, #0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d004      	beq.n	8005f2e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f24:	4b36      	ldr	r3, [pc, #216]	; (8006000 <xTaskIncrementTick+0x164>)
 8005f26:	f04f 32ff 	mov.w	r2, #4294967295
 8005f2a:	601a      	str	r2, [r3, #0]
					break;
 8005f2c:	e03f      	b.n	8005fae <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f2e:	4b31      	ldr	r3, [pc, #196]	; (8005ff4 <xTaskIncrementTick+0x158>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d203      	bcs.n	8005f4e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f46:	4a2e      	ldr	r2, [pc, #184]	; (8006000 <xTaskIncrementTick+0x164>)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6013      	str	r3, [r2, #0]
						break;
 8005f4c:	e02f      	b.n	8005fae <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	3304      	adds	r3, #4
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fe fdb8 	bl	8004ac8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d004      	beq.n	8005f6a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	3318      	adds	r3, #24
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7fe fdaf 	bl	8004ac8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6e:	4b25      	ldr	r3, [pc, #148]	; (8006004 <xTaskIncrementTick+0x168>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d903      	bls.n	8005f7e <xTaskIncrementTick+0xe2>
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7a:	4a22      	ldr	r2, [pc, #136]	; (8006004 <xTaskIncrementTick+0x168>)
 8005f7c:	6013      	str	r3, [r2, #0]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f82:	4613      	mov	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4a1f      	ldr	r2, [pc, #124]	; (8006008 <xTaskIncrementTick+0x16c>)
 8005f8c:	441a      	add	r2, r3
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	3304      	adds	r3, #4
 8005f92:	4619      	mov	r1, r3
 8005f94:	4610      	mov	r0, r2
 8005f96:	f7fe fd3c 	bl	8004a12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9e:	4b1b      	ldr	r3, [pc, #108]	; (800600c <xTaskIncrementTick+0x170>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d3b3      	bcc.n	8005f10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fac:	e7b0      	b.n	8005f10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005fae:	4b17      	ldr	r3, [pc, #92]	; (800600c <xTaskIncrementTick+0x170>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb4:	4914      	ldr	r1, [pc, #80]	; (8006008 <xTaskIncrementTick+0x16c>)
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	440b      	add	r3, r1
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d907      	bls.n	8005fd6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	617b      	str	r3, [r7, #20]
 8005fca:	e004      	b.n	8005fd6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005fcc:	4b10      	ldr	r3, [pc, #64]	; (8006010 <xTaskIncrementTick+0x174>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	4a0f      	ldr	r2, [pc, #60]	; (8006010 <xTaskIncrementTick+0x174>)
 8005fd4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005fd6:	4b0f      	ldr	r3, [pc, #60]	; (8006014 <xTaskIncrementTick+0x178>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005fe2:	697b      	ldr	r3, [r7, #20]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3718      	adds	r7, #24
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	20001a90 	.word	0x20001a90
 8005ff0:	20001a6c 	.word	0x20001a6c
 8005ff4:	20001a20 	.word	0x20001a20
 8005ff8:	20001a24 	.word	0x20001a24
 8005ffc:	20001a80 	.word	0x20001a80
 8006000:	20001a88 	.word	0x20001a88
 8006004:	20001a70 	.word	0x20001a70
 8006008:	20001598 	.word	0x20001598
 800600c:	20001594 	.word	0x20001594
 8006010:	20001a78 	.word	0x20001a78
 8006014:	20001a7c 	.word	0x20001a7c

08006018 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800601e:	4b27      	ldr	r3, [pc, #156]	; (80060bc <vTaskSwitchContext+0xa4>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006026:	4b26      	ldr	r3, [pc, #152]	; (80060c0 <vTaskSwitchContext+0xa8>)
 8006028:	2201      	movs	r2, #1
 800602a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800602c:	e041      	b.n	80060b2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800602e:	4b24      	ldr	r3, [pc, #144]	; (80060c0 <vTaskSwitchContext+0xa8>)
 8006030:	2200      	movs	r2, #0
 8006032:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006034:	4b23      	ldr	r3, [pc, #140]	; (80060c4 <vTaskSwitchContext+0xac>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	e010      	b.n	800605e <vTaskSwitchContext+0x46>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10a      	bne.n	8006058 <vTaskSwitchContext+0x40>
	__asm volatile
 8006042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	607b      	str	r3, [r7, #4]
}
 8006054:	bf00      	nop
 8006056:	e7fe      	b.n	8006056 <vTaskSwitchContext+0x3e>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	3b01      	subs	r3, #1
 800605c:	60fb      	str	r3, [r7, #12]
 800605e:	491a      	ldr	r1, [pc, #104]	; (80060c8 <vTaskSwitchContext+0xb0>)
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	4613      	mov	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	440b      	add	r3, r1
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d0e4      	beq.n	800603c <vTaskSwitchContext+0x24>
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	4613      	mov	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4a12      	ldr	r2, [pc, #72]	; (80060c8 <vTaskSwitchContext+0xb0>)
 800607e:	4413      	add	r3, r2
 8006080:	60bb      	str	r3, [r7, #8]
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	605a      	str	r2, [r3, #4]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	3308      	adds	r3, #8
 8006094:	429a      	cmp	r2, r3
 8006096:	d104      	bne.n	80060a2 <vTaskSwitchContext+0x8a>
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	605a      	str	r2, [r3, #4]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	4a08      	ldr	r2, [pc, #32]	; (80060cc <vTaskSwitchContext+0xb4>)
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	4a05      	ldr	r2, [pc, #20]	; (80060c4 <vTaskSwitchContext+0xac>)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6013      	str	r3, [r2, #0]
}
 80060b2:	bf00      	nop
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bc80      	pop	{r7}
 80060ba:	4770      	bx	lr
 80060bc:	20001a90 	.word	0x20001a90
 80060c0:	20001a7c 	.word	0x20001a7c
 80060c4:	20001a70 	.word	0x20001a70
 80060c8:	20001598 	.word	0x20001598
 80060cc:	20001594 	.word	0x20001594

080060d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	60fb      	str	r3, [r7, #12]
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060f6:	4b07      	ldr	r3, [pc, #28]	; (8006114 <vTaskPlaceOnEventList+0x44>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3318      	adds	r3, #24
 80060fc:	4619      	mov	r1, r3
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7fe fcaa 	bl	8004a58 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006104:	2101      	movs	r1, #1
 8006106:	6838      	ldr	r0, [r7, #0]
 8006108:	f000 fa80 	bl	800660c <prvAddCurrentTaskToDelayedList>
}
 800610c:	bf00      	nop
 800610e:	3710      	adds	r7, #16
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	20001594 	.word	0x20001594

08006118 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10a      	bne.n	8006140 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800612a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612e:	f383 8811 	msr	BASEPRI, r3
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	617b      	str	r3, [r7, #20]
}
 800613c:	bf00      	nop
 800613e:	e7fe      	b.n	800613e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006140:	4b0a      	ldr	r3, [pc, #40]	; (800616c <vTaskPlaceOnEventListRestricted+0x54>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3318      	adds	r3, #24
 8006146:	4619      	mov	r1, r3
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f7fe fc62 	bl	8004a12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006154:	f04f 33ff 	mov.w	r3, #4294967295
 8006158:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800615a:	6879      	ldr	r1, [r7, #4]
 800615c:	68b8      	ldr	r0, [r7, #8]
 800615e:	f000 fa55 	bl	800660c <prvAddCurrentTaskToDelayedList>
	}
 8006162:	bf00      	nop
 8006164:	3718      	adds	r7, #24
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20001594 	.word	0x20001594

08006170 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10a      	bne.n	800619c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618a:	f383 8811 	msr	BASEPRI, r3
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f3bf 8f4f 	dsb	sy
 8006196:	60fb      	str	r3, [r7, #12]
}
 8006198:	bf00      	nop
 800619a:	e7fe      	b.n	800619a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	3318      	adds	r3, #24
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fe fc91 	bl	8004ac8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061a6:	4b1e      	ldr	r3, [pc, #120]	; (8006220 <xTaskRemoveFromEventList+0xb0>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d11d      	bne.n	80061ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	3304      	adds	r3, #4
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fe fc88 	bl	8004ac8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061bc:	4b19      	ldr	r3, [pc, #100]	; (8006224 <xTaskRemoveFromEventList+0xb4>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d903      	bls.n	80061cc <xTaskRemoveFromEventList+0x5c>
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c8:	4a16      	ldr	r2, [pc, #88]	; (8006224 <xTaskRemoveFromEventList+0xb4>)
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d0:	4613      	mov	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4a13      	ldr	r2, [pc, #76]	; (8006228 <xTaskRemoveFromEventList+0xb8>)
 80061da:	441a      	add	r2, r3
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	3304      	adds	r3, #4
 80061e0:	4619      	mov	r1, r3
 80061e2:	4610      	mov	r0, r2
 80061e4:	f7fe fc15 	bl	8004a12 <vListInsertEnd>
 80061e8:	e005      	b.n	80061f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	3318      	adds	r3, #24
 80061ee:	4619      	mov	r1, r3
 80061f0:	480e      	ldr	r0, [pc, #56]	; (800622c <xTaskRemoveFromEventList+0xbc>)
 80061f2:	f7fe fc0e 	bl	8004a12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061fa:	4b0d      	ldr	r3, [pc, #52]	; (8006230 <xTaskRemoveFromEventList+0xc0>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006200:	429a      	cmp	r2, r3
 8006202:	d905      	bls.n	8006210 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006204:	2301      	movs	r3, #1
 8006206:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006208:	4b0a      	ldr	r3, [pc, #40]	; (8006234 <xTaskRemoveFromEventList+0xc4>)
 800620a:	2201      	movs	r2, #1
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	e001      	b.n	8006214 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006210:	2300      	movs	r3, #0
 8006212:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006214:	697b      	ldr	r3, [r7, #20]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3718      	adds	r7, #24
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20001a90 	.word	0x20001a90
 8006224:	20001a70 	.word	0x20001a70
 8006228:	20001598 	.word	0x20001598
 800622c:	20001a28 	.word	0x20001a28
 8006230:	20001594 	.word	0x20001594
 8006234:	20001a7c 	.word	0x20001a7c

08006238 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006240:	4b06      	ldr	r3, [pc, #24]	; (800625c <vTaskInternalSetTimeOutState+0x24>)
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006248:	4b05      	ldr	r3, [pc, #20]	; (8006260 <vTaskInternalSetTimeOutState+0x28>)
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	605a      	str	r2, [r3, #4]
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	bc80      	pop	{r7}
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	20001a80 	.word	0x20001a80
 8006260:	20001a6c 	.word	0x20001a6c

08006264 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d10a      	bne.n	800628a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006278:	f383 8811 	msr	BASEPRI, r3
 800627c:	f3bf 8f6f 	isb	sy
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	613b      	str	r3, [r7, #16]
}
 8006286:	bf00      	nop
 8006288:	e7fe      	b.n	8006288 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10a      	bne.n	80062a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006294:	f383 8811 	msr	BASEPRI, r3
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	60fb      	str	r3, [r7, #12]
}
 80062a2:	bf00      	nop
 80062a4:	e7fe      	b.n	80062a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80062a6:	f7fe fd29 	bl	8004cfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80062aa:	4b1d      	ldr	r3, [pc, #116]	; (8006320 <xTaskCheckForTimeOut+0xbc>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c2:	d102      	bne.n	80062ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80062c4:	2300      	movs	r3, #0
 80062c6:	61fb      	str	r3, [r7, #28]
 80062c8:	e023      	b.n	8006312 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	4b15      	ldr	r3, [pc, #84]	; (8006324 <xTaskCheckForTimeOut+0xc0>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d007      	beq.n	80062e6 <xTaskCheckForTimeOut+0x82>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d302      	bcc.n	80062e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80062e0:	2301      	movs	r3, #1
 80062e2:	61fb      	str	r3, [r7, #28]
 80062e4:	e015      	b.n	8006312 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d20b      	bcs.n	8006308 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	1ad2      	subs	r2, r2, r3
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff ff9b 	bl	8006238 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006302:	2300      	movs	r3, #0
 8006304:	61fb      	str	r3, [r7, #28]
 8006306:	e004      	b.n	8006312 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2200      	movs	r2, #0
 800630c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800630e:	2301      	movs	r3, #1
 8006310:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006312:	f7fe fd23 	bl	8004d5c <vPortExitCritical>

	return xReturn;
 8006316:	69fb      	ldr	r3, [r7, #28]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3720      	adds	r7, #32
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	20001a6c 	.word	0x20001a6c
 8006324:	20001a80 	.word	0x20001a80

08006328 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800632c:	4b03      	ldr	r3, [pc, #12]	; (800633c <vTaskMissedYield+0x14>)
 800632e:	2201      	movs	r2, #1
 8006330:	601a      	str	r2, [r3, #0]
}
 8006332:	bf00      	nop
 8006334:	46bd      	mov	sp, r7
 8006336:	bc80      	pop	{r7}
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	20001a7c 	.word	0x20001a7c

08006340 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006348:	f000 f852 	bl	80063f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800634c:	4b06      	ldr	r3, [pc, #24]	; (8006368 <prvIdleTask+0x28>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d9f9      	bls.n	8006348 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006354:	4b05      	ldr	r3, [pc, #20]	; (800636c <prvIdleTask+0x2c>)
 8006356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006364:	e7f0      	b.n	8006348 <prvIdleTask+0x8>
 8006366:	bf00      	nop
 8006368:	20001598 	.word	0x20001598
 800636c:	e000ed04 	.word	0xe000ed04

08006370 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006376:	2300      	movs	r3, #0
 8006378:	607b      	str	r3, [r7, #4]
 800637a:	e00c      	b.n	8006396 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	4613      	mov	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4a12      	ldr	r2, [pc, #72]	; (80063d0 <prvInitialiseTaskLists+0x60>)
 8006388:	4413      	add	r3, r2
 800638a:	4618      	mov	r0, r3
 800638c:	f7fe fb16 	bl	80049bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	3301      	adds	r3, #1
 8006394:	607b      	str	r3, [r7, #4]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b37      	cmp	r3, #55	; 0x37
 800639a:	d9ef      	bls.n	800637c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800639c:	480d      	ldr	r0, [pc, #52]	; (80063d4 <prvInitialiseTaskLists+0x64>)
 800639e:	f7fe fb0d 	bl	80049bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80063a2:	480d      	ldr	r0, [pc, #52]	; (80063d8 <prvInitialiseTaskLists+0x68>)
 80063a4:	f7fe fb0a 	bl	80049bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80063a8:	480c      	ldr	r0, [pc, #48]	; (80063dc <prvInitialiseTaskLists+0x6c>)
 80063aa:	f7fe fb07 	bl	80049bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80063ae:	480c      	ldr	r0, [pc, #48]	; (80063e0 <prvInitialiseTaskLists+0x70>)
 80063b0:	f7fe fb04 	bl	80049bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063b4:	480b      	ldr	r0, [pc, #44]	; (80063e4 <prvInitialiseTaskLists+0x74>)
 80063b6:	f7fe fb01 	bl	80049bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063ba:	4b0b      	ldr	r3, [pc, #44]	; (80063e8 <prvInitialiseTaskLists+0x78>)
 80063bc:	4a05      	ldr	r2, [pc, #20]	; (80063d4 <prvInitialiseTaskLists+0x64>)
 80063be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80063c0:	4b0a      	ldr	r3, [pc, #40]	; (80063ec <prvInitialiseTaskLists+0x7c>)
 80063c2:	4a05      	ldr	r2, [pc, #20]	; (80063d8 <prvInitialiseTaskLists+0x68>)
 80063c4:	601a      	str	r2, [r3, #0]
}
 80063c6:	bf00      	nop
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20001598 	.word	0x20001598
 80063d4:	200019f8 	.word	0x200019f8
 80063d8:	20001a0c 	.word	0x20001a0c
 80063dc:	20001a28 	.word	0x20001a28
 80063e0:	20001a3c 	.word	0x20001a3c
 80063e4:	20001a54 	.word	0x20001a54
 80063e8:	20001a20 	.word	0x20001a20
 80063ec:	20001a24 	.word	0x20001a24

080063f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063f6:	e019      	b.n	800642c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80063f8:	f7fe fc80 	bl	8004cfc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80063fc:	4b10      	ldr	r3, [pc, #64]	; (8006440 <prvCheckTasksWaitingTermination+0x50>)
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	3304      	adds	r3, #4
 8006408:	4618      	mov	r0, r3
 800640a:	f7fe fb5d 	bl	8004ac8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800640e:	4b0d      	ldr	r3, [pc, #52]	; (8006444 <prvCheckTasksWaitingTermination+0x54>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3b01      	subs	r3, #1
 8006414:	4a0b      	ldr	r2, [pc, #44]	; (8006444 <prvCheckTasksWaitingTermination+0x54>)
 8006416:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006418:	4b0b      	ldr	r3, [pc, #44]	; (8006448 <prvCheckTasksWaitingTermination+0x58>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3b01      	subs	r3, #1
 800641e:	4a0a      	ldr	r2, [pc, #40]	; (8006448 <prvCheckTasksWaitingTermination+0x58>)
 8006420:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006422:	f7fe fc9b 	bl	8004d5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f810 	bl	800644c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800642c:	4b06      	ldr	r3, [pc, #24]	; (8006448 <prvCheckTasksWaitingTermination+0x58>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1e1      	bne.n	80063f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006434:	bf00      	nop
 8006436:	bf00      	nop
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	20001a3c 	.word	0x20001a3c
 8006444:	20001a68 	.word	0x20001a68
 8006448:	20001a50 	.word	0x20001a50

0800644c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800645a:	2b00      	cmp	r3, #0
 800645c:	d108      	bne.n	8006470 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006462:	4618      	mov	r0, r3
 8006464:	f7fe f996 	bl	8004794 <vPortFree>
				vPortFree( pxTCB );
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7fe f993 	bl	8004794 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800646e:	e018      	b.n	80064a2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006476:	2b01      	cmp	r3, #1
 8006478:	d103      	bne.n	8006482 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7fe f98a 	bl	8004794 <vPortFree>
	}
 8006480:	e00f      	b.n	80064a2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006488:	2b02      	cmp	r3, #2
 800648a:	d00a      	beq.n	80064a2 <prvDeleteTCB+0x56>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	60fb      	str	r3, [r7, #12]
}
 800649e:	bf00      	nop
 80064a0:	e7fe      	b.n	80064a0 <prvDeleteTCB+0x54>
	}
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
	...

080064ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064b2:	4b0e      	ldr	r3, [pc, #56]	; (80064ec <prvResetNextTaskUnblockTime+0x40>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <prvResetNextTaskUnblockTime+0x14>
 80064bc:	2301      	movs	r3, #1
 80064be:	e000      	b.n	80064c2 <prvResetNextTaskUnblockTime+0x16>
 80064c0:	2300      	movs	r3, #0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d004      	beq.n	80064d0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064c6:	4b0a      	ldr	r3, [pc, #40]	; (80064f0 <prvResetNextTaskUnblockTime+0x44>)
 80064c8:	f04f 32ff 	mov.w	r2, #4294967295
 80064cc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80064ce:	e008      	b.n	80064e2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80064d0:	4b06      	ldr	r3, [pc, #24]	; (80064ec <prvResetNextTaskUnblockTime+0x40>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	4a04      	ldr	r2, [pc, #16]	; (80064f0 <prvResetNextTaskUnblockTime+0x44>)
 80064e0:	6013      	str	r3, [r2, #0]
}
 80064e2:	bf00      	nop
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bc80      	pop	{r7}
 80064ea:	4770      	bx	lr
 80064ec:	20001a20 	.word	0x20001a20
 80064f0:	20001a88 	.word	0x20001a88

080064f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80064fa:	4b0b      	ldr	r3, [pc, #44]	; (8006528 <xTaskGetSchedulerState+0x34>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d102      	bne.n	8006508 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006502:	2301      	movs	r3, #1
 8006504:	607b      	str	r3, [r7, #4]
 8006506:	e008      	b.n	800651a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006508:	4b08      	ldr	r3, [pc, #32]	; (800652c <xTaskGetSchedulerState+0x38>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d102      	bne.n	8006516 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006510:	2302      	movs	r3, #2
 8006512:	607b      	str	r3, [r7, #4]
 8006514:	e001      	b.n	800651a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006516:	2300      	movs	r3, #0
 8006518:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800651a:	687b      	ldr	r3, [r7, #4]
	}
 800651c:	4618      	mov	r0, r3
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	bc80      	pop	{r7}
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	20001a74 	.word	0x20001a74
 800652c:	20001a90 	.word	0x20001a90

08006530 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800653c:	2300      	movs	r3, #0
 800653e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d056      	beq.n	80065f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006546:	4b2e      	ldr	r3, [pc, #184]	; (8006600 <xTaskPriorityDisinherit+0xd0>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	429a      	cmp	r2, r3
 800654e:	d00a      	beq.n	8006566 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	60fb      	str	r3, [r7, #12]
}
 8006562:	bf00      	nop
 8006564:	e7fe      	b.n	8006564 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10a      	bne.n	8006584 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	60bb      	str	r3, [r7, #8]
}
 8006580:	bf00      	nop
 8006582:	e7fe      	b.n	8006582 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006588:	1e5a      	subs	r2, r3, #1
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006596:	429a      	cmp	r2, r3
 8006598:	d02c      	beq.n	80065f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d128      	bne.n	80065f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	3304      	adds	r3, #4
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7fe fa8e 	bl	8004ac8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c4:	4b0f      	ldr	r3, [pc, #60]	; (8006604 <xTaskPriorityDisinherit+0xd4>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d903      	bls.n	80065d4 <xTaskPriorityDisinherit+0xa4>
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d0:	4a0c      	ldr	r2, [pc, #48]	; (8006604 <xTaskPriorityDisinherit+0xd4>)
 80065d2:	6013      	str	r3, [r2, #0]
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d8:	4613      	mov	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4a09      	ldr	r2, [pc, #36]	; (8006608 <xTaskPriorityDisinherit+0xd8>)
 80065e2:	441a      	add	r2, r3
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	3304      	adds	r3, #4
 80065e8:	4619      	mov	r1, r3
 80065ea:	4610      	mov	r0, r2
 80065ec:	f7fe fa11 	bl	8004a12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80065f0:	2301      	movs	r3, #1
 80065f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80065f4:	697b      	ldr	r3, [r7, #20]
	}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	20001594 	.word	0x20001594
 8006604:	20001a70 	.word	0x20001a70
 8006608:	20001598 	.word	0x20001598

0800660c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006616:	4b21      	ldr	r3, [pc, #132]	; (800669c <prvAddCurrentTaskToDelayedList+0x90>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800661c:	4b20      	ldr	r3, [pc, #128]	; (80066a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	3304      	adds	r3, #4
 8006622:	4618      	mov	r0, r3
 8006624:	f7fe fa50 	bl	8004ac8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662e:	d10a      	bne.n	8006646 <prvAddCurrentTaskToDelayedList+0x3a>
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d007      	beq.n	8006646 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006636:	4b1a      	ldr	r3, [pc, #104]	; (80066a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3304      	adds	r3, #4
 800663c:	4619      	mov	r1, r3
 800663e:	4819      	ldr	r0, [pc, #100]	; (80066a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006640:	f7fe f9e7 	bl	8004a12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006644:	e026      	b.n	8006694 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4413      	add	r3, r2
 800664c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800664e:	4b14      	ldr	r3, [pc, #80]	; (80066a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	429a      	cmp	r2, r3
 800665c:	d209      	bcs.n	8006672 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800665e:	4b12      	ldr	r3, [pc, #72]	; (80066a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	4b0f      	ldr	r3, [pc, #60]	; (80066a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3304      	adds	r3, #4
 8006668:	4619      	mov	r1, r3
 800666a:	4610      	mov	r0, r2
 800666c:	f7fe f9f4 	bl	8004a58 <vListInsert>
}
 8006670:	e010      	b.n	8006694 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006672:	4b0e      	ldr	r3, [pc, #56]	; (80066ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	4b0a      	ldr	r3, [pc, #40]	; (80066a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3304      	adds	r3, #4
 800667c:	4619      	mov	r1, r3
 800667e:	4610      	mov	r0, r2
 8006680:	f7fe f9ea 	bl	8004a58 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006684:	4b0a      	ldr	r3, [pc, #40]	; (80066b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	429a      	cmp	r2, r3
 800668c:	d202      	bcs.n	8006694 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800668e:	4a08      	ldr	r2, [pc, #32]	; (80066b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	6013      	str	r3, [r2, #0]
}
 8006694:	bf00      	nop
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	20001a6c 	.word	0x20001a6c
 80066a0:	20001594 	.word	0x20001594
 80066a4:	20001a54 	.word	0x20001a54
 80066a8:	20001a24 	.word	0x20001a24
 80066ac:	20001a20 	.word	0x20001a20
 80066b0:	20001a88 	.word	0x20001a88

080066b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b08a      	sub	sp, #40	; 0x28
 80066b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80066be:	f000 facb 	bl	8006c58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80066c2:	4b1c      	ldr	r3, [pc, #112]	; (8006734 <xTimerCreateTimerTask+0x80>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d021      	beq.n	800670e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80066ca:	2300      	movs	r3, #0
 80066cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80066ce:	2300      	movs	r3, #0
 80066d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80066d2:	1d3a      	adds	r2, r7, #4
 80066d4:	f107 0108 	add.w	r1, r7, #8
 80066d8:	f107 030c 	add.w	r3, r7, #12
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fd ff7b 	bl	80045d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80066e2:	6879      	ldr	r1, [r7, #4]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	9202      	str	r2, [sp, #8]
 80066ea:	9301      	str	r3, [sp, #4]
 80066ec:	2302      	movs	r3, #2
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	2300      	movs	r3, #0
 80066f2:	460a      	mov	r2, r1
 80066f4:	4910      	ldr	r1, [pc, #64]	; (8006738 <xTimerCreateTimerTask+0x84>)
 80066f6:	4811      	ldr	r0, [pc, #68]	; (800673c <xTimerCreateTimerTask+0x88>)
 80066f8:	f7ff f8e4 	bl	80058c4 <xTaskCreateStatic>
 80066fc:	4603      	mov	r3, r0
 80066fe:	4a10      	ldr	r2, [pc, #64]	; (8006740 <xTimerCreateTimerTask+0x8c>)
 8006700:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006702:	4b0f      	ldr	r3, [pc, #60]	; (8006740 <xTimerCreateTimerTask+0x8c>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800670a:	2301      	movs	r3, #1
 800670c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10a      	bne.n	800672a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006718:	f383 8811 	msr	BASEPRI, r3
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	613b      	str	r3, [r7, #16]
}
 8006726:	bf00      	nop
 8006728:	e7fe      	b.n	8006728 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800672a:	697b      	ldr	r3, [r7, #20]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3718      	adds	r7, #24
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	20001ac4 	.word	0x20001ac4
 8006738:	0800767c 	.word	0x0800767c
 800673c:	08006861 	.word	0x08006861
 8006740:	20001ac8 	.word	0x20001ac8

08006744 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b08a      	sub	sp, #40	; 0x28
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
 8006750:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006752:	2300      	movs	r3, #0
 8006754:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10a      	bne.n	8006772 <xTimerGenericCommand+0x2e>
	__asm volatile
 800675c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006760:	f383 8811 	msr	BASEPRI, r3
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	623b      	str	r3, [r7, #32]
}
 800676e:	bf00      	nop
 8006770:	e7fe      	b.n	8006770 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006772:	4b1a      	ldr	r3, [pc, #104]	; (80067dc <xTimerGenericCommand+0x98>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d02a      	beq.n	80067d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	2b05      	cmp	r3, #5
 800678a:	dc18      	bgt.n	80067be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800678c:	f7ff feb2 	bl	80064f4 <xTaskGetSchedulerState>
 8006790:	4603      	mov	r3, r0
 8006792:	2b02      	cmp	r3, #2
 8006794:	d109      	bne.n	80067aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006796:	4b11      	ldr	r3, [pc, #68]	; (80067dc <xTimerGenericCommand+0x98>)
 8006798:	6818      	ldr	r0, [r3, #0]
 800679a:	f107 0110 	add.w	r1, r7, #16
 800679e:	2300      	movs	r3, #0
 80067a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067a2:	f7fe fcad 	bl	8005100 <xQueueGenericSend>
 80067a6:	6278      	str	r0, [r7, #36]	; 0x24
 80067a8:	e012      	b.n	80067d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80067aa:	4b0c      	ldr	r3, [pc, #48]	; (80067dc <xTimerGenericCommand+0x98>)
 80067ac:	6818      	ldr	r0, [r3, #0]
 80067ae:	f107 0110 	add.w	r1, r7, #16
 80067b2:	2300      	movs	r3, #0
 80067b4:	2200      	movs	r2, #0
 80067b6:	f7fe fca3 	bl	8005100 <xQueueGenericSend>
 80067ba:	6278      	str	r0, [r7, #36]	; 0x24
 80067bc:	e008      	b.n	80067d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80067be:	4b07      	ldr	r3, [pc, #28]	; (80067dc <xTimerGenericCommand+0x98>)
 80067c0:	6818      	ldr	r0, [r3, #0]
 80067c2:	f107 0110 	add.w	r1, r7, #16
 80067c6:	2300      	movs	r3, #0
 80067c8:	683a      	ldr	r2, [r7, #0]
 80067ca:	f7fe fd97 	bl	80052fc <xQueueGenericSendFromISR>
 80067ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3728      	adds	r7, #40	; 0x28
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20001ac4 	.word	0x20001ac4

080067e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b088      	sub	sp, #32
 80067e4:	af02      	add	r7, sp, #8
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067ea:	4b1c      	ldr	r3, [pc, #112]	; (800685c <prvProcessExpiredTimer+0x7c>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	3304      	adds	r3, #4
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7fe f965 	bl	8004ac8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	69db      	ldr	r3, [r3, #28]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d122      	bne.n	800684c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	699a      	ldr	r2, [r3, #24]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	18d1      	adds	r1, r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	683a      	ldr	r2, [r7, #0]
 8006812:	6978      	ldr	r0, [r7, #20]
 8006814:	f000 f8c8 	bl	80069a8 <prvInsertTimerInActiveList>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d016      	beq.n	800684c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800681e:	2300      	movs	r3, #0
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	2300      	movs	r3, #0
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	2100      	movs	r1, #0
 8006828:	6978      	ldr	r0, [r7, #20]
 800682a:	f7ff ff8b 	bl	8006744 <xTimerGenericCommand>
 800682e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10a      	bne.n	800684c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	60fb      	str	r3, [r7, #12]
}
 8006848:	bf00      	nop
 800684a:	e7fe      	b.n	800684a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	6978      	ldr	r0, [r7, #20]
 8006852:	4798      	blx	r3
}
 8006854:	bf00      	nop
 8006856:	3718      	adds	r7, #24
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	20001abc 	.word	0x20001abc

08006860 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006868:	f107 0308 	add.w	r3, r7, #8
 800686c:	4618      	mov	r0, r3
 800686e:	f000 f857 	bl	8006920 <prvGetNextExpireTime>
 8006872:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	4619      	mov	r1, r3
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 f803 	bl	8006884 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800687e:	f000 f8d5 	bl	8006a2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006882:	e7f1      	b.n	8006868 <prvTimerTask+0x8>

08006884 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800688e:	f7ff fa4b 	bl	8005d28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006892:	f107 0308 	add.w	r3, r7, #8
 8006896:	4618      	mov	r0, r3
 8006898:	f000 f866 	bl	8006968 <prvSampleTimeNow>
 800689c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d130      	bne.n	8006906 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10a      	bne.n	80068c0 <prvProcessTimerOrBlockTask+0x3c>
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d806      	bhi.n	80068c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80068b2:	f7ff fa47 	bl	8005d44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80068b6:	68f9      	ldr	r1, [r7, #12]
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7ff ff91 	bl	80067e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80068be:	e024      	b.n	800690a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d008      	beq.n	80068d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80068c6:	4b13      	ldr	r3, [pc, #76]	; (8006914 <prvProcessTimerOrBlockTask+0x90>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	bf0c      	ite	eq
 80068d0:	2301      	moveq	r3, #1
 80068d2:	2300      	movne	r3, #0
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80068d8:	4b0f      	ldr	r3, [pc, #60]	; (8006918 <prvProcessTimerOrBlockTask+0x94>)
 80068da:	6818      	ldr	r0, [r3, #0]
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	683a      	ldr	r2, [r7, #0]
 80068e4:	4619      	mov	r1, r3
 80068e6:	f7fe ffb9 	bl	800585c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80068ea:	f7ff fa2b 	bl	8005d44 <xTaskResumeAll>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10a      	bne.n	800690a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80068f4:	4b09      	ldr	r3, [pc, #36]	; (800691c <prvProcessTimerOrBlockTask+0x98>)
 80068f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068fa:	601a      	str	r2, [r3, #0]
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	f3bf 8f6f 	isb	sy
}
 8006904:	e001      	b.n	800690a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006906:	f7ff fa1d 	bl	8005d44 <xTaskResumeAll>
}
 800690a:	bf00      	nop
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	20001ac0 	.word	0x20001ac0
 8006918:	20001ac4 	.word	0x20001ac4
 800691c:	e000ed04 	.word	0xe000ed04

08006920 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006928:	4b0e      	ldr	r3, [pc, #56]	; (8006964 <prvGetNextExpireTime+0x44>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	bf0c      	ite	eq
 8006932:	2301      	moveq	r3, #1
 8006934:	2300      	movne	r3, #0
 8006936:	b2db      	uxtb	r3, r3
 8006938:	461a      	mov	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d105      	bne.n	8006952 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006946:	4b07      	ldr	r3, [pc, #28]	; (8006964 <prvGetNextExpireTime+0x44>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	e001      	b.n	8006956 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006952:	2300      	movs	r3, #0
 8006954:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006956:	68fb      	ldr	r3, [r7, #12]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	bc80      	pop	{r7}
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	20001abc 	.word	0x20001abc

08006968 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006970:	f7ff fa86 	bl	8005e80 <xTaskGetTickCount>
 8006974:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006976:	4b0b      	ldr	r3, [pc, #44]	; (80069a4 <prvSampleTimeNow+0x3c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	429a      	cmp	r2, r3
 800697e:	d205      	bcs.n	800698c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006980:	f000 f908 	bl	8006b94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	e002      	b.n	8006992 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006992:	4a04      	ldr	r2, [pc, #16]	; (80069a4 <prvSampleTimeNow+0x3c>)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006998:	68fb      	ldr	r3, [r7, #12]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	20001acc 	.word	0x20001acc

080069a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
 80069b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80069b6:	2300      	movs	r3, #0
 80069b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d812      	bhi.n	80069f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	1ad2      	subs	r2, r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d302      	bcc.n	80069e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80069dc:	2301      	movs	r3, #1
 80069de:	617b      	str	r3, [r7, #20]
 80069e0:	e01b      	b.n	8006a1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80069e2:	4b10      	ldr	r3, [pc, #64]	; (8006a24 <prvInsertTimerInActiveList+0x7c>)
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	3304      	adds	r3, #4
 80069ea:	4619      	mov	r1, r3
 80069ec:	4610      	mov	r0, r2
 80069ee:	f7fe f833 	bl	8004a58 <vListInsert>
 80069f2:	e012      	b.n	8006a1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d206      	bcs.n	8006a0a <prvInsertTimerInActiveList+0x62>
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d302      	bcc.n	8006a0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006a04:	2301      	movs	r3, #1
 8006a06:	617b      	str	r3, [r7, #20]
 8006a08:	e007      	b.n	8006a1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a0a:	4b07      	ldr	r3, [pc, #28]	; (8006a28 <prvInsertTimerInActiveList+0x80>)
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	3304      	adds	r3, #4
 8006a12:	4619      	mov	r1, r3
 8006a14:	4610      	mov	r0, r2
 8006a16:	f7fe f81f 	bl	8004a58 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006a1a:	697b      	ldr	r3, [r7, #20]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3718      	adds	r7, #24
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	20001ac0 	.word	0x20001ac0
 8006a28:	20001abc 	.word	0x20001abc

08006a2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b08e      	sub	sp, #56	; 0x38
 8006a30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a32:	e09d      	b.n	8006b70 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	da18      	bge.n	8006a6c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006a3a:	1d3b      	adds	r3, r7, #4
 8006a3c:	3304      	adds	r3, #4
 8006a3e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10a      	bne.n	8006a5c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4a:	f383 8811 	msr	BASEPRI, r3
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	61fb      	str	r3, [r7, #28]
}
 8006a58:	bf00      	nop
 8006a5a:	e7fe      	b.n	8006a5a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a62:	6850      	ldr	r0, [r2, #4]
 8006a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a66:	6892      	ldr	r2, [r2, #8]
 8006a68:	4611      	mov	r1, r2
 8006a6a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	db7e      	blt.n	8006b70 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d004      	beq.n	8006a88 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a80:	3304      	adds	r3, #4
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fe f820 	bl	8004ac8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a88:	463b      	mov	r3, r7
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7ff ff6c 	bl	8006968 <prvSampleTimeNow>
 8006a90:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2b09      	cmp	r3, #9
 8006a96:	d86a      	bhi.n	8006b6e <prvProcessReceivedCommands+0x142>
 8006a98:	a201      	add	r2, pc, #4	; (adr r2, 8006aa0 <prvProcessReceivedCommands+0x74>)
 8006a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9e:	bf00      	nop
 8006aa0:	08006ac9 	.word	0x08006ac9
 8006aa4:	08006ac9 	.word	0x08006ac9
 8006aa8:	08006ac9 	.word	0x08006ac9
 8006aac:	08006b71 	.word	0x08006b71
 8006ab0:	08006b25 	.word	0x08006b25
 8006ab4:	08006b5d 	.word	0x08006b5d
 8006ab8:	08006ac9 	.word	0x08006ac9
 8006abc:	08006ac9 	.word	0x08006ac9
 8006ac0:	08006b71 	.word	0x08006b71
 8006ac4:	08006b25 	.word	0x08006b25
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	18d1      	adds	r1, r2, r3
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ad6:	f7ff ff67 	bl	80069a8 <prvInsertTimerInActiveList>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d047      	beq.n	8006b70 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ae6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aea:	69db      	ldr	r3, [r3, #28]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d13f      	bne.n	8006b70 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	441a      	add	r2, r3
 8006af8:	2300      	movs	r3, #0
 8006afa:	9300      	str	r3, [sp, #0]
 8006afc:	2300      	movs	r3, #0
 8006afe:	2100      	movs	r1, #0
 8006b00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b02:	f7ff fe1f 	bl	8006744 <xTimerGenericCommand>
 8006b06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d130      	bne.n	8006b70 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	61bb      	str	r3, [r7, #24]
}
 8006b20:	bf00      	nop
 8006b22:	e7fe      	b.n	8006b22 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b28:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10a      	bne.n	8006b48 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	617b      	str	r3, [r7, #20]
}
 8006b44:	bf00      	nop
 8006b46:	e7fe      	b.n	8006b46 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4a:	699a      	ldr	r2, [r3, #24]
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	18d1      	adds	r1, r2, r3
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b56:	f7ff ff27 	bl	80069a8 <prvInsertTimerInActiveList>
					break;
 8006b5a:	e009      	b.n	8006b70 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d104      	bne.n	8006b70 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006b66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b68:	f7fd fe14 	bl	8004794 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b6c:	e000      	b.n	8006b70 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8006b6e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b70:	4b07      	ldr	r3, [pc, #28]	; (8006b90 <prvProcessReceivedCommands+0x164>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	1d39      	adds	r1, r7, #4
 8006b76:	2200      	movs	r2, #0
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7fe fc57 	bl	800542c <xQueueReceive>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f47f af57 	bne.w	8006a34 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006b86:	bf00      	nop
 8006b88:	bf00      	nop
 8006b8a:	3730      	adds	r7, #48	; 0x30
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	20001ac4 	.word	0x20001ac4

08006b94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b088      	sub	sp, #32
 8006b98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b9a:	e045      	b.n	8006c28 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b9c:	4b2c      	ldr	r3, [pc, #176]	; (8006c50 <prvSwitchTimerLists+0xbc>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ba6:	4b2a      	ldr	r3, [pc, #168]	; (8006c50 <prvSwitchTimerLists+0xbc>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fd ff87 	bl	8004ac8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d12e      	bne.n	8006c28 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d90e      	bls.n	8006bfa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006be8:	4b19      	ldr	r3, [pc, #100]	; (8006c50 <prvSwitchTimerLists+0xbc>)
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	3304      	adds	r3, #4
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4610      	mov	r0, r2
 8006bf4:	f7fd ff30 	bl	8004a58 <vListInsert>
 8006bf8:	e016      	b.n	8006c28 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	2300      	movs	r3, #0
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	2100      	movs	r1, #0
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f7ff fd9d 	bl	8006744 <xTimerGenericCommand>
 8006c0a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10a      	bne.n	8006c28 <prvSwitchTimerLists+0x94>
	__asm volatile
 8006c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c16:	f383 8811 	msr	BASEPRI, r3
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	603b      	str	r3, [r7, #0]
}
 8006c24:	bf00      	nop
 8006c26:	e7fe      	b.n	8006c26 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c28:	4b09      	ldr	r3, [pc, #36]	; (8006c50 <prvSwitchTimerLists+0xbc>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1b4      	bne.n	8006b9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006c32:	4b07      	ldr	r3, [pc, #28]	; (8006c50 <prvSwitchTimerLists+0xbc>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006c38:	4b06      	ldr	r3, [pc, #24]	; (8006c54 <prvSwitchTimerLists+0xc0>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a04      	ldr	r2, [pc, #16]	; (8006c50 <prvSwitchTimerLists+0xbc>)
 8006c3e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006c40:	4a04      	ldr	r2, [pc, #16]	; (8006c54 <prvSwitchTimerLists+0xc0>)
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	6013      	str	r3, [r2, #0]
}
 8006c46:	bf00      	nop
 8006c48:	3718      	adds	r7, #24
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	20001abc 	.word	0x20001abc
 8006c54:	20001ac0 	.word	0x20001ac0

08006c58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006c5e:	f7fe f84d 	bl	8004cfc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006c62:	4b15      	ldr	r3, [pc, #84]	; (8006cb8 <prvCheckForValidListAndQueue+0x60>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d120      	bne.n	8006cac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006c6a:	4814      	ldr	r0, [pc, #80]	; (8006cbc <prvCheckForValidListAndQueue+0x64>)
 8006c6c:	f7fd fea6 	bl	80049bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c70:	4813      	ldr	r0, [pc, #76]	; (8006cc0 <prvCheckForValidListAndQueue+0x68>)
 8006c72:	f7fd fea3 	bl	80049bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006c76:	4b13      	ldr	r3, [pc, #76]	; (8006cc4 <prvCheckForValidListAndQueue+0x6c>)
 8006c78:	4a10      	ldr	r2, [pc, #64]	; (8006cbc <prvCheckForValidListAndQueue+0x64>)
 8006c7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006c7c:	4b12      	ldr	r3, [pc, #72]	; (8006cc8 <prvCheckForValidListAndQueue+0x70>)
 8006c7e:	4a10      	ldr	r2, [pc, #64]	; (8006cc0 <prvCheckForValidListAndQueue+0x68>)
 8006c80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c82:	2300      	movs	r3, #0
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	4b11      	ldr	r3, [pc, #68]	; (8006ccc <prvCheckForValidListAndQueue+0x74>)
 8006c88:	4a11      	ldr	r2, [pc, #68]	; (8006cd0 <prvCheckForValidListAndQueue+0x78>)
 8006c8a:	2110      	movs	r1, #16
 8006c8c:	200a      	movs	r0, #10
 8006c8e:	f7fe f99d 	bl	8004fcc <xQueueGenericCreateStatic>
 8006c92:	4603      	mov	r3, r0
 8006c94:	4a08      	ldr	r2, [pc, #32]	; (8006cb8 <prvCheckForValidListAndQueue+0x60>)
 8006c96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006c98:	4b07      	ldr	r3, [pc, #28]	; (8006cb8 <prvCheckForValidListAndQueue+0x60>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d005      	beq.n	8006cac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ca0:	4b05      	ldr	r3, [pc, #20]	; (8006cb8 <prvCheckForValidListAndQueue+0x60>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	490b      	ldr	r1, [pc, #44]	; (8006cd4 <prvCheckForValidListAndQueue+0x7c>)
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fe fdb0 	bl	800580c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cac:	f7fe f856 	bl	8004d5c <vPortExitCritical>
}
 8006cb0:	bf00      	nop
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	20001ac4 	.word	0x20001ac4
 8006cbc:	20001a94 	.word	0x20001a94
 8006cc0:	20001aa8 	.word	0x20001aa8
 8006cc4:	20001abc 	.word	0x20001abc
 8006cc8:	20001ac0 	.word	0x20001ac0
 8006ccc:	20001b70 	.word	0x20001b70
 8006cd0:	20001ad0 	.word	0x20001ad0
 8006cd4:	08007684 	.word	0x08007684

08006cd8 <siprintf>:
 8006cd8:	b40e      	push	{r1, r2, r3}
 8006cda:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006cde:	b500      	push	{lr}
 8006ce0:	b09c      	sub	sp, #112	; 0x70
 8006ce2:	ab1d      	add	r3, sp, #116	; 0x74
 8006ce4:	9002      	str	r0, [sp, #8]
 8006ce6:	9006      	str	r0, [sp, #24]
 8006ce8:	9107      	str	r1, [sp, #28]
 8006cea:	9104      	str	r1, [sp, #16]
 8006cec:	4808      	ldr	r0, [pc, #32]	; (8006d10 <siprintf+0x38>)
 8006cee:	4909      	ldr	r1, [pc, #36]	; (8006d14 <siprintf+0x3c>)
 8006cf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cf4:	9105      	str	r1, [sp, #20]
 8006cf6:	6800      	ldr	r0, [r0, #0]
 8006cf8:	a902      	add	r1, sp, #8
 8006cfa:	9301      	str	r3, [sp, #4]
 8006cfc:	f000 f99c 	bl	8007038 <_svfiprintf_r>
 8006d00:	2200      	movs	r2, #0
 8006d02:	9b02      	ldr	r3, [sp, #8]
 8006d04:	701a      	strb	r2, [r3, #0]
 8006d06:	b01c      	add	sp, #112	; 0x70
 8006d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d0c:	b003      	add	sp, #12
 8006d0e:	4770      	bx	lr
 8006d10:	2000007c 	.word	0x2000007c
 8006d14:	ffff0208 	.word	0xffff0208

08006d18 <memset>:
 8006d18:	4603      	mov	r3, r0
 8006d1a:	4402      	add	r2, r0
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d100      	bne.n	8006d22 <memset+0xa>
 8006d20:	4770      	bx	lr
 8006d22:	f803 1b01 	strb.w	r1, [r3], #1
 8006d26:	e7f9      	b.n	8006d1c <memset+0x4>

08006d28 <__errno>:
 8006d28:	4b01      	ldr	r3, [pc, #4]	; (8006d30 <__errno+0x8>)
 8006d2a:	6818      	ldr	r0, [r3, #0]
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	2000007c 	.word	0x2000007c

08006d34 <__libc_init_array>:
 8006d34:	b570      	push	{r4, r5, r6, lr}
 8006d36:	2600      	movs	r6, #0
 8006d38:	4d0c      	ldr	r5, [pc, #48]	; (8006d6c <__libc_init_array+0x38>)
 8006d3a:	4c0d      	ldr	r4, [pc, #52]	; (8006d70 <__libc_init_array+0x3c>)
 8006d3c:	1b64      	subs	r4, r4, r5
 8006d3e:	10a4      	asrs	r4, r4, #2
 8006d40:	42a6      	cmp	r6, r4
 8006d42:	d109      	bne.n	8006d58 <__libc_init_array+0x24>
 8006d44:	f000 fc7a 	bl	800763c <_init>
 8006d48:	2600      	movs	r6, #0
 8006d4a:	4d0a      	ldr	r5, [pc, #40]	; (8006d74 <__libc_init_array+0x40>)
 8006d4c:	4c0a      	ldr	r4, [pc, #40]	; (8006d78 <__libc_init_array+0x44>)
 8006d4e:	1b64      	subs	r4, r4, r5
 8006d50:	10a4      	asrs	r4, r4, #2
 8006d52:	42a6      	cmp	r6, r4
 8006d54:	d105      	bne.n	8006d62 <__libc_init_array+0x2e>
 8006d56:	bd70      	pop	{r4, r5, r6, pc}
 8006d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d5c:	4798      	blx	r3
 8006d5e:	3601      	adds	r6, #1
 8006d60:	e7ee      	b.n	8006d40 <__libc_init_array+0xc>
 8006d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d66:	4798      	blx	r3
 8006d68:	3601      	adds	r6, #1
 8006d6a:	e7f2      	b.n	8006d52 <__libc_init_array+0x1e>
 8006d6c:	08007734 	.word	0x08007734
 8006d70:	08007734 	.word	0x08007734
 8006d74:	08007734 	.word	0x08007734
 8006d78:	08007738 	.word	0x08007738

08006d7c <__retarget_lock_acquire_recursive>:
 8006d7c:	4770      	bx	lr

08006d7e <__retarget_lock_release_recursive>:
 8006d7e:	4770      	bx	lr

08006d80 <memcpy>:
 8006d80:	440a      	add	r2, r1
 8006d82:	4291      	cmp	r1, r2
 8006d84:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d88:	d100      	bne.n	8006d8c <memcpy+0xc>
 8006d8a:	4770      	bx	lr
 8006d8c:	b510      	push	{r4, lr}
 8006d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d92:	4291      	cmp	r1, r2
 8006d94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d98:	d1f9      	bne.n	8006d8e <memcpy+0xe>
 8006d9a:	bd10      	pop	{r4, pc}

08006d9c <_free_r>:
 8006d9c:	b538      	push	{r3, r4, r5, lr}
 8006d9e:	4605      	mov	r5, r0
 8006da0:	2900      	cmp	r1, #0
 8006da2:	d040      	beq.n	8006e26 <_free_r+0x8a>
 8006da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006da8:	1f0c      	subs	r4, r1, #4
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	bfb8      	it	lt
 8006dae:	18e4      	addlt	r4, r4, r3
 8006db0:	f000 f8dc 	bl	8006f6c <__malloc_lock>
 8006db4:	4a1c      	ldr	r2, [pc, #112]	; (8006e28 <_free_r+0x8c>)
 8006db6:	6813      	ldr	r3, [r2, #0]
 8006db8:	b933      	cbnz	r3, 8006dc8 <_free_r+0x2c>
 8006dba:	6063      	str	r3, [r4, #4]
 8006dbc:	6014      	str	r4, [r2, #0]
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dc4:	f000 b8d8 	b.w	8006f78 <__malloc_unlock>
 8006dc8:	42a3      	cmp	r3, r4
 8006dca:	d908      	bls.n	8006dde <_free_r+0x42>
 8006dcc:	6820      	ldr	r0, [r4, #0]
 8006dce:	1821      	adds	r1, r4, r0
 8006dd0:	428b      	cmp	r3, r1
 8006dd2:	bf01      	itttt	eq
 8006dd4:	6819      	ldreq	r1, [r3, #0]
 8006dd6:	685b      	ldreq	r3, [r3, #4]
 8006dd8:	1809      	addeq	r1, r1, r0
 8006dda:	6021      	streq	r1, [r4, #0]
 8006ddc:	e7ed      	b.n	8006dba <_free_r+0x1e>
 8006dde:	461a      	mov	r2, r3
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	b10b      	cbz	r3, 8006de8 <_free_r+0x4c>
 8006de4:	42a3      	cmp	r3, r4
 8006de6:	d9fa      	bls.n	8006dde <_free_r+0x42>
 8006de8:	6811      	ldr	r1, [r2, #0]
 8006dea:	1850      	adds	r0, r2, r1
 8006dec:	42a0      	cmp	r0, r4
 8006dee:	d10b      	bne.n	8006e08 <_free_r+0x6c>
 8006df0:	6820      	ldr	r0, [r4, #0]
 8006df2:	4401      	add	r1, r0
 8006df4:	1850      	adds	r0, r2, r1
 8006df6:	4283      	cmp	r3, r0
 8006df8:	6011      	str	r1, [r2, #0]
 8006dfa:	d1e0      	bne.n	8006dbe <_free_r+0x22>
 8006dfc:	6818      	ldr	r0, [r3, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	4408      	add	r0, r1
 8006e02:	6010      	str	r0, [r2, #0]
 8006e04:	6053      	str	r3, [r2, #4]
 8006e06:	e7da      	b.n	8006dbe <_free_r+0x22>
 8006e08:	d902      	bls.n	8006e10 <_free_r+0x74>
 8006e0a:	230c      	movs	r3, #12
 8006e0c:	602b      	str	r3, [r5, #0]
 8006e0e:	e7d6      	b.n	8006dbe <_free_r+0x22>
 8006e10:	6820      	ldr	r0, [r4, #0]
 8006e12:	1821      	adds	r1, r4, r0
 8006e14:	428b      	cmp	r3, r1
 8006e16:	bf01      	itttt	eq
 8006e18:	6819      	ldreq	r1, [r3, #0]
 8006e1a:	685b      	ldreq	r3, [r3, #4]
 8006e1c:	1809      	addeq	r1, r1, r0
 8006e1e:	6021      	streq	r1, [r4, #0]
 8006e20:	6063      	str	r3, [r4, #4]
 8006e22:	6054      	str	r4, [r2, #4]
 8006e24:	e7cb      	b.n	8006dbe <_free_r+0x22>
 8006e26:	bd38      	pop	{r3, r4, r5, pc}
 8006e28:	20001d00 	.word	0x20001d00

08006e2c <sbrk_aligned>:
 8006e2c:	b570      	push	{r4, r5, r6, lr}
 8006e2e:	4e0e      	ldr	r6, [pc, #56]	; (8006e68 <sbrk_aligned+0x3c>)
 8006e30:	460c      	mov	r4, r1
 8006e32:	6831      	ldr	r1, [r6, #0]
 8006e34:	4605      	mov	r5, r0
 8006e36:	b911      	cbnz	r1, 8006e3e <sbrk_aligned+0x12>
 8006e38:	f000 fbaa 	bl	8007590 <_sbrk_r>
 8006e3c:	6030      	str	r0, [r6, #0]
 8006e3e:	4621      	mov	r1, r4
 8006e40:	4628      	mov	r0, r5
 8006e42:	f000 fba5 	bl	8007590 <_sbrk_r>
 8006e46:	1c43      	adds	r3, r0, #1
 8006e48:	d00a      	beq.n	8006e60 <sbrk_aligned+0x34>
 8006e4a:	1cc4      	adds	r4, r0, #3
 8006e4c:	f024 0403 	bic.w	r4, r4, #3
 8006e50:	42a0      	cmp	r0, r4
 8006e52:	d007      	beq.n	8006e64 <sbrk_aligned+0x38>
 8006e54:	1a21      	subs	r1, r4, r0
 8006e56:	4628      	mov	r0, r5
 8006e58:	f000 fb9a 	bl	8007590 <_sbrk_r>
 8006e5c:	3001      	adds	r0, #1
 8006e5e:	d101      	bne.n	8006e64 <sbrk_aligned+0x38>
 8006e60:	f04f 34ff 	mov.w	r4, #4294967295
 8006e64:	4620      	mov	r0, r4
 8006e66:	bd70      	pop	{r4, r5, r6, pc}
 8006e68:	20001d04 	.word	0x20001d04

08006e6c <_malloc_r>:
 8006e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e70:	1ccd      	adds	r5, r1, #3
 8006e72:	f025 0503 	bic.w	r5, r5, #3
 8006e76:	3508      	adds	r5, #8
 8006e78:	2d0c      	cmp	r5, #12
 8006e7a:	bf38      	it	cc
 8006e7c:	250c      	movcc	r5, #12
 8006e7e:	2d00      	cmp	r5, #0
 8006e80:	4607      	mov	r7, r0
 8006e82:	db01      	blt.n	8006e88 <_malloc_r+0x1c>
 8006e84:	42a9      	cmp	r1, r5
 8006e86:	d905      	bls.n	8006e94 <_malloc_r+0x28>
 8006e88:	230c      	movs	r3, #12
 8006e8a:	2600      	movs	r6, #0
 8006e8c:	603b      	str	r3, [r7, #0]
 8006e8e:	4630      	mov	r0, r6
 8006e90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006f68 <_malloc_r+0xfc>
 8006e98:	f000 f868 	bl	8006f6c <__malloc_lock>
 8006e9c:	f8d8 3000 	ldr.w	r3, [r8]
 8006ea0:	461c      	mov	r4, r3
 8006ea2:	bb5c      	cbnz	r4, 8006efc <_malloc_r+0x90>
 8006ea4:	4629      	mov	r1, r5
 8006ea6:	4638      	mov	r0, r7
 8006ea8:	f7ff ffc0 	bl	8006e2c <sbrk_aligned>
 8006eac:	1c43      	adds	r3, r0, #1
 8006eae:	4604      	mov	r4, r0
 8006eb0:	d155      	bne.n	8006f5e <_malloc_r+0xf2>
 8006eb2:	f8d8 4000 	ldr.w	r4, [r8]
 8006eb6:	4626      	mov	r6, r4
 8006eb8:	2e00      	cmp	r6, #0
 8006eba:	d145      	bne.n	8006f48 <_malloc_r+0xdc>
 8006ebc:	2c00      	cmp	r4, #0
 8006ebe:	d048      	beq.n	8006f52 <_malloc_r+0xe6>
 8006ec0:	6823      	ldr	r3, [r4, #0]
 8006ec2:	4631      	mov	r1, r6
 8006ec4:	4638      	mov	r0, r7
 8006ec6:	eb04 0903 	add.w	r9, r4, r3
 8006eca:	f000 fb61 	bl	8007590 <_sbrk_r>
 8006ece:	4581      	cmp	r9, r0
 8006ed0:	d13f      	bne.n	8006f52 <_malloc_r+0xe6>
 8006ed2:	6821      	ldr	r1, [r4, #0]
 8006ed4:	4638      	mov	r0, r7
 8006ed6:	1a6d      	subs	r5, r5, r1
 8006ed8:	4629      	mov	r1, r5
 8006eda:	f7ff ffa7 	bl	8006e2c <sbrk_aligned>
 8006ede:	3001      	adds	r0, #1
 8006ee0:	d037      	beq.n	8006f52 <_malloc_r+0xe6>
 8006ee2:	6823      	ldr	r3, [r4, #0]
 8006ee4:	442b      	add	r3, r5
 8006ee6:	6023      	str	r3, [r4, #0]
 8006ee8:	f8d8 3000 	ldr.w	r3, [r8]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d038      	beq.n	8006f62 <_malloc_r+0xf6>
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	42a2      	cmp	r2, r4
 8006ef4:	d12b      	bne.n	8006f4e <_malloc_r+0xe2>
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	605a      	str	r2, [r3, #4]
 8006efa:	e00f      	b.n	8006f1c <_malloc_r+0xb0>
 8006efc:	6822      	ldr	r2, [r4, #0]
 8006efe:	1b52      	subs	r2, r2, r5
 8006f00:	d41f      	bmi.n	8006f42 <_malloc_r+0xd6>
 8006f02:	2a0b      	cmp	r2, #11
 8006f04:	d917      	bls.n	8006f36 <_malloc_r+0xca>
 8006f06:	1961      	adds	r1, r4, r5
 8006f08:	42a3      	cmp	r3, r4
 8006f0a:	6025      	str	r5, [r4, #0]
 8006f0c:	bf18      	it	ne
 8006f0e:	6059      	strne	r1, [r3, #4]
 8006f10:	6863      	ldr	r3, [r4, #4]
 8006f12:	bf08      	it	eq
 8006f14:	f8c8 1000 	streq.w	r1, [r8]
 8006f18:	5162      	str	r2, [r4, r5]
 8006f1a:	604b      	str	r3, [r1, #4]
 8006f1c:	4638      	mov	r0, r7
 8006f1e:	f104 060b 	add.w	r6, r4, #11
 8006f22:	f000 f829 	bl	8006f78 <__malloc_unlock>
 8006f26:	f026 0607 	bic.w	r6, r6, #7
 8006f2a:	1d23      	adds	r3, r4, #4
 8006f2c:	1af2      	subs	r2, r6, r3
 8006f2e:	d0ae      	beq.n	8006e8e <_malloc_r+0x22>
 8006f30:	1b9b      	subs	r3, r3, r6
 8006f32:	50a3      	str	r3, [r4, r2]
 8006f34:	e7ab      	b.n	8006e8e <_malloc_r+0x22>
 8006f36:	42a3      	cmp	r3, r4
 8006f38:	6862      	ldr	r2, [r4, #4]
 8006f3a:	d1dd      	bne.n	8006ef8 <_malloc_r+0x8c>
 8006f3c:	f8c8 2000 	str.w	r2, [r8]
 8006f40:	e7ec      	b.n	8006f1c <_malloc_r+0xb0>
 8006f42:	4623      	mov	r3, r4
 8006f44:	6864      	ldr	r4, [r4, #4]
 8006f46:	e7ac      	b.n	8006ea2 <_malloc_r+0x36>
 8006f48:	4634      	mov	r4, r6
 8006f4a:	6876      	ldr	r6, [r6, #4]
 8006f4c:	e7b4      	b.n	8006eb8 <_malloc_r+0x4c>
 8006f4e:	4613      	mov	r3, r2
 8006f50:	e7cc      	b.n	8006eec <_malloc_r+0x80>
 8006f52:	230c      	movs	r3, #12
 8006f54:	4638      	mov	r0, r7
 8006f56:	603b      	str	r3, [r7, #0]
 8006f58:	f000 f80e 	bl	8006f78 <__malloc_unlock>
 8006f5c:	e797      	b.n	8006e8e <_malloc_r+0x22>
 8006f5e:	6025      	str	r5, [r4, #0]
 8006f60:	e7dc      	b.n	8006f1c <_malloc_r+0xb0>
 8006f62:	605b      	str	r3, [r3, #4]
 8006f64:	deff      	udf	#255	; 0xff
 8006f66:	bf00      	nop
 8006f68:	20001d00 	.word	0x20001d00

08006f6c <__malloc_lock>:
 8006f6c:	4801      	ldr	r0, [pc, #4]	; (8006f74 <__malloc_lock+0x8>)
 8006f6e:	f7ff bf05 	b.w	8006d7c <__retarget_lock_acquire_recursive>
 8006f72:	bf00      	nop
 8006f74:	20001cfc 	.word	0x20001cfc

08006f78 <__malloc_unlock>:
 8006f78:	4801      	ldr	r0, [pc, #4]	; (8006f80 <__malloc_unlock+0x8>)
 8006f7a:	f7ff bf00 	b.w	8006d7e <__retarget_lock_release_recursive>
 8006f7e:	bf00      	nop
 8006f80:	20001cfc 	.word	0x20001cfc

08006f84 <__ssputs_r>:
 8006f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f88:	461f      	mov	r7, r3
 8006f8a:	688e      	ldr	r6, [r1, #8]
 8006f8c:	4682      	mov	sl, r0
 8006f8e:	42be      	cmp	r6, r7
 8006f90:	460c      	mov	r4, r1
 8006f92:	4690      	mov	r8, r2
 8006f94:	680b      	ldr	r3, [r1, #0]
 8006f96:	d82c      	bhi.n	8006ff2 <__ssputs_r+0x6e>
 8006f98:	898a      	ldrh	r2, [r1, #12]
 8006f9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f9e:	d026      	beq.n	8006fee <__ssputs_r+0x6a>
 8006fa0:	6965      	ldr	r5, [r4, #20]
 8006fa2:	6909      	ldr	r1, [r1, #16]
 8006fa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fa8:	eba3 0901 	sub.w	r9, r3, r1
 8006fac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fb0:	1c7b      	adds	r3, r7, #1
 8006fb2:	444b      	add	r3, r9
 8006fb4:	106d      	asrs	r5, r5, #1
 8006fb6:	429d      	cmp	r5, r3
 8006fb8:	bf38      	it	cc
 8006fba:	461d      	movcc	r5, r3
 8006fbc:	0553      	lsls	r3, r2, #21
 8006fbe:	d527      	bpl.n	8007010 <__ssputs_r+0x8c>
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	f7ff ff53 	bl	8006e6c <_malloc_r>
 8006fc6:	4606      	mov	r6, r0
 8006fc8:	b360      	cbz	r0, 8007024 <__ssputs_r+0xa0>
 8006fca:	464a      	mov	r2, r9
 8006fcc:	6921      	ldr	r1, [r4, #16]
 8006fce:	f7ff fed7 	bl	8006d80 <memcpy>
 8006fd2:	89a3      	ldrh	r3, [r4, #12]
 8006fd4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fdc:	81a3      	strh	r3, [r4, #12]
 8006fde:	6126      	str	r6, [r4, #16]
 8006fe0:	444e      	add	r6, r9
 8006fe2:	6026      	str	r6, [r4, #0]
 8006fe4:	463e      	mov	r6, r7
 8006fe6:	6165      	str	r5, [r4, #20]
 8006fe8:	eba5 0509 	sub.w	r5, r5, r9
 8006fec:	60a5      	str	r5, [r4, #8]
 8006fee:	42be      	cmp	r6, r7
 8006ff0:	d900      	bls.n	8006ff4 <__ssputs_r+0x70>
 8006ff2:	463e      	mov	r6, r7
 8006ff4:	4632      	mov	r2, r6
 8006ff6:	4641      	mov	r1, r8
 8006ff8:	6820      	ldr	r0, [r4, #0]
 8006ffa:	f000 faaf 	bl	800755c <memmove>
 8006ffe:	2000      	movs	r0, #0
 8007000:	68a3      	ldr	r3, [r4, #8]
 8007002:	1b9b      	subs	r3, r3, r6
 8007004:	60a3      	str	r3, [r4, #8]
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	4433      	add	r3, r6
 800700a:	6023      	str	r3, [r4, #0]
 800700c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007010:	462a      	mov	r2, r5
 8007012:	f000 fadb 	bl	80075cc <_realloc_r>
 8007016:	4606      	mov	r6, r0
 8007018:	2800      	cmp	r0, #0
 800701a:	d1e0      	bne.n	8006fde <__ssputs_r+0x5a>
 800701c:	4650      	mov	r0, sl
 800701e:	6921      	ldr	r1, [r4, #16]
 8007020:	f7ff febc 	bl	8006d9c <_free_r>
 8007024:	230c      	movs	r3, #12
 8007026:	f8ca 3000 	str.w	r3, [sl]
 800702a:	89a3      	ldrh	r3, [r4, #12]
 800702c:	f04f 30ff 	mov.w	r0, #4294967295
 8007030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007034:	81a3      	strh	r3, [r4, #12]
 8007036:	e7e9      	b.n	800700c <__ssputs_r+0x88>

08007038 <_svfiprintf_r>:
 8007038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800703c:	4698      	mov	r8, r3
 800703e:	898b      	ldrh	r3, [r1, #12]
 8007040:	4607      	mov	r7, r0
 8007042:	061b      	lsls	r3, r3, #24
 8007044:	460d      	mov	r5, r1
 8007046:	4614      	mov	r4, r2
 8007048:	b09d      	sub	sp, #116	; 0x74
 800704a:	d50e      	bpl.n	800706a <_svfiprintf_r+0x32>
 800704c:	690b      	ldr	r3, [r1, #16]
 800704e:	b963      	cbnz	r3, 800706a <_svfiprintf_r+0x32>
 8007050:	2140      	movs	r1, #64	; 0x40
 8007052:	f7ff ff0b 	bl	8006e6c <_malloc_r>
 8007056:	6028      	str	r0, [r5, #0]
 8007058:	6128      	str	r0, [r5, #16]
 800705a:	b920      	cbnz	r0, 8007066 <_svfiprintf_r+0x2e>
 800705c:	230c      	movs	r3, #12
 800705e:	603b      	str	r3, [r7, #0]
 8007060:	f04f 30ff 	mov.w	r0, #4294967295
 8007064:	e0d0      	b.n	8007208 <_svfiprintf_r+0x1d0>
 8007066:	2340      	movs	r3, #64	; 0x40
 8007068:	616b      	str	r3, [r5, #20]
 800706a:	2300      	movs	r3, #0
 800706c:	9309      	str	r3, [sp, #36]	; 0x24
 800706e:	2320      	movs	r3, #32
 8007070:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007074:	2330      	movs	r3, #48	; 0x30
 8007076:	f04f 0901 	mov.w	r9, #1
 800707a:	f8cd 800c 	str.w	r8, [sp, #12]
 800707e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007220 <_svfiprintf_r+0x1e8>
 8007082:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007086:	4623      	mov	r3, r4
 8007088:	469a      	mov	sl, r3
 800708a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800708e:	b10a      	cbz	r2, 8007094 <_svfiprintf_r+0x5c>
 8007090:	2a25      	cmp	r2, #37	; 0x25
 8007092:	d1f9      	bne.n	8007088 <_svfiprintf_r+0x50>
 8007094:	ebba 0b04 	subs.w	fp, sl, r4
 8007098:	d00b      	beq.n	80070b2 <_svfiprintf_r+0x7a>
 800709a:	465b      	mov	r3, fp
 800709c:	4622      	mov	r2, r4
 800709e:	4629      	mov	r1, r5
 80070a0:	4638      	mov	r0, r7
 80070a2:	f7ff ff6f 	bl	8006f84 <__ssputs_r>
 80070a6:	3001      	adds	r0, #1
 80070a8:	f000 80a9 	beq.w	80071fe <_svfiprintf_r+0x1c6>
 80070ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070ae:	445a      	add	r2, fp
 80070b0:	9209      	str	r2, [sp, #36]	; 0x24
 80070b2:	f89a 3000 	ldrb.w	r3, [sl]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f000 80a1 	beq.w	80071fe <_svfiprintf_r+0x1c6>
 80070bc:	2300      	movs	r3, #0
 80070be:	f04f 32ff 	mov.w	r2, #4294967295
 80070c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070c6:	f10a 0a01 	add.w	sl, sl, #1
 80070ca:	9304      	str	r3, [sp, #16]
 80070cc:	9307      	str	r3, [sp, #28]
 80070ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070d2:	931a      	str	r3, [sp, #104]	; 0x68
 80070d4:	4654      	mov	r4, sl
 80070d6:	2205      	movs	r2, #5
 80070d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070dc:	4850      	ldr	r0, [pc, #320]	; (8007220 <_svfiprintf_r+0x1e8>)
 80070de:	f000 fa67 	bl	80075b0 <memchr>
 80070e2:	9a04      	ldr	r2, [sp, #16]
 80070e4:	b9d8      	cbnz	r0, 800711e <_svfiprintf_r+0xe6>
 80070e6:	06d0      	lsls	r0, r2, #27
 80070e8:	bf44      	itt	mi
 80070ea:	2320      	movmi	r3, #32
 80070ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070f0:	0711      	lsls	r1, r2, #28
 80070f2:	bf44      	itt	mi
 80070f4:	232b      	movmi	r3, #43	; 0x2b
 80070f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070fa:	f89a 3000 	ldrb.w	r3, [sl]
 80070fe:	2b2a      	cmp	r3, #42	; 0x2a
 8007100:	d015      	beq.n	800712e <_svfiprintf_r+0xf6>
 8007102:	4654      	mov	r4, sl
 8007104:	2000      	movs	r0, #0
 8007106:	f04f 0c0a 	mov.w	ip, #10
 800710a:	9a07      	ldr	r2, [sp, #28]
 800710c:	4621      	mov	r1, r4
 800710e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007112:	3b30      	subs	r3, #48	; 0x30
 8007114:	2b09      	cmp	r3, #9
 8007116:	d94d      	bls.n	80071b4 <_svfiprintf_r+0x17c>
 8007118:	b1b0      	cbz	r0, 8007148 <_svfiprintf_r+0x110>
 800711a:	9207      	str	r2, [sp, #28]
 800711c:	e014      	b.n	8007148 <_svfiprintf_r+0x110>
 800711e:	eba0 0308 	sub.w	r3, r0, r8
 8007122:	fa09 f303 	lsl.w	r3, r9, r3
 8007126:	4313      	orrs	r3, r2
 8007128:	46a2      	mov	sl, r4
 800712a:	9304      	str	r3, [sp, #16]
 800712c:	e7d2      	b.n	80070d4 <_svfiprintf_r+0x9c>
 800712e:	9b03      	ldr	r3, [sp, #12]
 8007130:	1d19      	adds	r1, r3, #4
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	9103      	str	r1, [sp, #12]
 8007136:	2b00      	cmp	r3, #0
 8007138:	bfbb      	ittet	lt
 800713a:	425b      	neglt	r3, r3
 800713c:	f042 0202 	orrlt.w	r2, r2, #2
 8007140:	9307      	strge	r3, [sp, #28]
 8007142:	9307      	strlt	r3, [sp, #28]
 8007144:	bfb8      	it	lt
 8007146:	9204      	strlt	r2, [sp, #16]
 8007148:	7823      	ldrb	r3, [r4, #0]
 800714a:	2b2e      	cmp	r3, #46	; 0x2e
 800714c:	d10c      	bne.n	8007168 <_svfiprintf_r+0x130>
 800714e:	7863      	ldrb	r3, [r4, #1]
 8007150:	2b2a      	cmp	r3, #42	; 0x2a
 8007152:	d134      	bne.n	80071be <_svfiprintf_r+0x186>
 8007154:	9b03      	ldr	r3, [sp, #12]
 8007156:	3402      	adds	r4, #2
 8007158:	1d1a      	adds	r2, r3, #4
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	9203      	str	r2, [sp, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	bfb8      	it	lt
 8007162:	f04f 33ff 	movlt.w	r3, #4294967295
 8007166:	9305      	str	r3, [sp, #20]
 8007168:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007224 <_svfiprintf_r+0x1ec>
 800716c:	2203      	movs	r2, #3
 800716e:	4650      	mov	r0, sl
 8007170:	7821      	ldrb	r1, [r4, #0]
 8007172:	f000 fa1d 	bl	80075b0 <memchr>
 8007176:	b138      	cbz	r0, 8007188 <_svfiprintf_r+0x150>
 8007178:	2240      	movs	r2, #64	; 0x40
 800717a:	9b04      	ldr	r3, [sp, #16]
 800717c:	eba0 000a 	sub.w	r0, r0, sl
 8007180:	4082      	lsls	r2, r0
 8007182:	4313      	orrs	r3, r2
 8007184:	3401      	adds	r4, #1
 8007186:	9304      	str	r3, [sp, #16]
 8007188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800718c:	2206      	movs	r2, #6
 800718e:	4826      	ldr	r0, [pc, #152]	; (8007228 <_svfiprintf_r+0x1f0>)
 8007190:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007194:	f000 fa0c 	bl	80075b0 <memchr>
 8007198:	2800      	cmp	r0, #0
 800719a:	d038      	beq.n	800720e <_svfiprintf_r+0x1d6>
 800719c:	4b23      	ldr	r3, [pc, #140]	; (800722c <_svfiprintf_r+0x1f4>)
 800719e:	bb1b      	cbnz	r3, 80071e8 <_svfiprintf_r+0x1b0>
 80071a0:	9b03      	ldr	r3, [sp, #12]
 80071a2:	3307      	adds	r3, #7
 80071a4:	f023 0307 	bic.w	r3, r3, #7
 80071a8:	3308      	adds	r3, #8
 80071aa:	9303      	str	r3, [sp, #12]
 80071ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ae:	4433      	add	r3, r6
 80071b0:	9309      	str	r3, [sp, #36]	; 0x24
 80071b2:	e768      	b.n	8007086 <_svfiprintf_r+0x4e>
 80071b4:	460c      	mov	r4, r1
 80071b6:	2001      	movs	r0, #1
 80071b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80071bc:	e7a6      	b.n	800710c <_svfiprintf_r+0xd4>
 80071be:	2300      	movs	r3, #0
 80071c0:	f04f 0c0a 	mov.w	ip, #10
 80071c4:	4619      	mov	r1, r3
 80071c6:	3401      	adds	r4, #1
 80071c8:	9305      	str	r3, [sp, #20]
 80071ca:	4620      	mov	r0, r4
 80071cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071d0:	3a30      	subs	r2, #48	; 0x30
 80071d2:	2a09      	cmp	r2, #9
 80071d4:	d903      	bls.n	80071de <_svfiprintf_r+0x1a6>
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d0c6      	beq.n	8007168 <_svfiprintf_r+0x130>
 80071da:	9105      	str	r1, [sp, #20]
 80071dc:	e7c4      	b.n	8007168 <_svfiprintf_r+0x130>
 80071de:	4604      	mov	r4, r0
 80071e0:	2301      	movs	r3, #1
 80071e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80071e6:	e7f0      	b.n	80071ca <_svfiprintf_r+0x192>
 80071e8:	ab03      	add	r3, sp, #12
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	462a      	mov	r2, r5
 80071ee:	4638      	mov	r0, r7
 80071f0:	4b0f      	ldr	r3, [pc, #60]	; (8007230 <_svfiprintf_r+0x1f8>)
 80071f2:	a904      	add	r1, sp, #16
 80071f4:	f3af 8000 	nop.w
 80071f8:	1c42      	adds	r2, r0, #1
 80071fa:	4606      	mov	r6, r0
 80071fc:	d1d6      	bne.n	80071ac <_svfiprintf_r+0x174>
 80071fe:	89ab      	ldrh	r3, [r5, #12]
 8007200:	065b      	lsls	r3, r3, #25
 8007202:	f53f af2d 	bmi.w	8007060 <_svfiprintf_r+0x28>
 8007206:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007208:	b01d      	add	sp, #116	; 0x74
 800720a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720e:	ab03      	add	r3, sp, #12
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	462a      	mov	r2, r5
 8007214:	4638      	mov	r0, r7
 8007216:	4b06      	ldr	r3, [pc, #24]	; (8007230 <_svfiprintf_r+0x1f8>)
 8007218:	a904      	add	r1, sp, #16
 800721a:	f000 f87d 	bl	8007318 <_printf_i>
 800721e:	e7eb      	b.n	80071f8 <_svfiprintf_r+0x1c0>
 8007220:	080076fe 	.word	0x080076fe
 8007224:	08007704 	.word	0x08007704
 8007228:	08007708 	.word	0x08007708
 800722c:	00000000 	.word	0x00000000
 8007230:	08006f85 	.word	0x08006f85

08007234 <_printf_common>:
 8007234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007238:	4616      	mov	r6, r2
 800723a:	4699      	mov	r9, r3
 800723c:	688a      	ldr	r2, [r1, #8]
 800723e:	690b      	ldr	r3, [r1, #16]
 8007240:	4607      	mov	r7, r0
 8007242:	4293      	cmp	r3, r2
 8007244:	bfb8      	it	lt
 8007246:	4613      	movlt	r3, r2
 8007248:	6033      	str	r3, [r6, #0]
 800724a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800724e:	460c      	mov	r4, r1
 8007250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007254:	b10a      	cbz	r2, 800725a <_printf_common+0x26>
 8007256:	3301      	adds	r3, #1
 8007258:	6033      	str	r3, [r6, #0]
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	0699      	lsls	r1, r3, #26
 800725e:	bf42      	ittt	mi
 8007260:	6833      	ldrmi	r3, [r6, #0]
 8007262:	3302      	addmi	r3, #2
 8007264:	6033      	strmi	r3, [r6, #0]
 8007266:	6825      	ldr	r5, [r4, #0]
 8007268:	f015 0506 	ands.w	r5, r5, #6
 800726c:	d106      	bne.n	800727c <_printf_common+0x48>
 800726e:	f104 0a19 	add.w	sl, r4, #25
 8007272:	68e3      	ldr	r3, [r4, #12]
 8007274:	6832      	ldr	r2, [r6, #0]
 8007276:	1a9b      	subs	r3, r3, r2
 8007278:	42ab      	cmp	r3, r5
 800727a:	dc2b      	bgt.n	80072d4 <_printf_common+0xa0>
 800727c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007280:	1e13      	subs	r3, r2, #0
 8007282:	6822      	ldr	r2, [r4, #0]
 8007284:	bf18      	it	ne
 8007286:	2301      	movne	r3, #1
 8007288:	0692      	lsls	r2, r2, #26
 800728a:	d430      	bmi.n	80072ee <_printf_common+0xba>
 800728c:	4649      	mov	r1, r9
 800728e:	4638      	mov	r0, r7
 8007290:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007294:	47c0      	blx	r8
 8007296:	3001      	adds	r0, #1
 8007298:	d023      	beq.n	80072e2 <_printf_common+0xae>
 800729a:	6823      	ldr	r3, [r4, #0]
 800729c:	6922      	ldr	r2, [r4, #16]
 800729e:	f003 0306 	and.w	r3, r3, #6
 80072a2:	2b04      	cmp	r3, #4
 80072a4:	bf14      	ite	ne
 80072a6:	2500      	movne	r5, #0
 80072a8:	6833      	ldreq	r3, [r6, #0]
 80072aa:	f04f 0600 	mov.w	r6, #0
 80072ae:	bf08      	it	eq
 80072b0:	68e5      	ldreq	r5, [r4, #12]
 80072b2:	f104 041a 	add.w	r4, r4, #26
 80072b6:	bf08      	it	eq
 80072b8:	1aed      	subeq	r5, r5, r3
 80072ba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80072be:	bf08      	it	eq
 80072c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072c4:	4293      	cmp	r3, r2
 80072c6:	bfc4      	itt	gt
 80072c8:	1a9b      	subgt	r3, r3, r2
 80072ca:	18ed      	addgt	r5, r5, r3
 80072cc:	42b5      	cmp	r5, r6
 80072ce:	d11a      	bne.n	8007306 <_printf_common+0xd2>
 80072d0:	2000      	movs	r0, #0
 80072d2:	e008      	b.n	80072e6 <_printf_common+0xb2>
 80072d4:	2301      	movs	r3, #1
 80072d6:	4652      	mov	r2, sl
 80072d8:	4649      	mov	r1, r9
 80072da:	4638      	mov	r0, r7
 80072dc:	47c0      	blx	r8
 80072de:	3001      	adds	r0, #1
 80072e0:	d103      	bne.n	80072ea <_printf_common+0xb6>
 80072e2:	f04f 30ff 	mov.w	r0, #4294967295
 80072e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ea:	3501      	adds	r5, #1
 80072ec:	e7c1      	b.n	8007272 <_printf_common+0x3e>
 80072ee:	2030      	movs	r0, #48	; 0x30
 80072f0:	18e1      	adds	r1, r4, r3
 80072f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072fc:	4422      	add	r2, r4
 80072fe:	3302      	adds	r3, #2
 8007300:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007304:	e7c2      	b.n	800728c <_printf_common+0x58>
 8007306:	2301      	movs	r3, #1
 8007308:	4622      	mov	r2, r4
 800730a:	4649      	mov	r1, r9
 800730c:	4638      	mov	r0, r7
 800730e:	47c0      	blx	r8
 8007310:	3001      	adds	r0, #1
 8007312:	d0e6      	beq.n	80072e2 <_printf_common+0xae>
 8007314:	3601      	adds	r6, #1
 8007316:	e7d9      	b.n	80072cc <_printf_common+0x98>

08007318 <_printf_i>:
 8007318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800731c:	7e0f      	ldrb	r7, [r1, #24]
 800731e:	4691      	mov	r9, r2
 8007320:	2f78      	cmp	r7, #120	; 0x78
 8007322:	4680      	mov	r8, r0
 8007324:	460c      	mov	r4, r1
 8007326:	469a      	mov	sl, r3
 8007328:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800732a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800732e:	d807      	bhi.n	8007340 <_printf_i+0x28>
 8007330:	2f62      	cmp	r7, #98	; 0x62
 8007332:	d80a      	bhi.n	800734a <_printf_i+0x32>
 8007334:	2f00      	cmp	r7, #0
 8007336:	f000 80d5 	beq.w	80074e4 <_printf_i+0x1cc>
 800733a:	2f58      	cmp	r7, #88	; 0x58
 800733c:	f000 80c1 	beq.w	80074c2 <_printf_i+0x1aa>
 8007340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007344:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007348:	e03a      	b.n	80073c0 <_printf_i+0xa8>
 800734a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800734e:	2b15      	cmp	r3, #21
 8007350:	d8f6      	bhi.n	8007340 <_printf_i+0x28>
 8007352:	a101      	add	r1, pc, #4	; (adr r1, 8007358 <_printf_i+0x40>)
 8007354:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007358:	080073b1 	.word	0x080073b1
 800735c:	080073c5 	.word	0x080073c5
 8007360:	08007341 	.word	0x08007341
 8007364:	08007341 	.word	0x08007341
 8007368:	08007341 	.word	0x08007341
 800736c:	08007341 	.word	0x08007341
 8007370:	080073c5 	.word	0x080073c5
 8007374:	08007341 	.word	0x08007341
 8007378:	08007341 	.word	0x08007341
 800737c:	08007341 	.word	0x08007341
 8007380:	08007341 	.word	0x08007341
 8007384:	080074cb 	.word	0x080074cb
 8007388:	080073f1 	.word	0x080073f1
 800738c:	08007485 	.word	0x08007485
 8007390:	08007341 	.word	0x08007341
 8007394:	08007341 	.word	0x08007341
 8007398:	080074ed 	.word	0x080074ed
 800739c:	08007341 	.word	0x08007341
 80073a0:	080073f1 	.word	0x080073f1
 80073a4:	08007341 	.word	0x08007341
 80073a8:	08007341 	.word	0x08007341
 80073ac:	0800748d 	.word	0x0800748d
 80073b0:	682b      	ldr	r3, [r5, #0]
 80073b2:	1d1a      	adds	r2, r3, #4
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	602a      	str	r2, [r5, #0]
 80073b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073c0:	2301      	movs	r3, #1
 80073c2:	e0a0      	b.n	8007506 <_printf_i+0x1ee>
 80073c4:	6820      	ldr	r0, [r4, #0]
 80073c6:	682b      	ldr	r3, [r5, #0]
 80073c8:	0607      	lsls	r7, r0, #24
 80073ca:	f103 0104 	add.w	r1, r3, #4
 80073ce:	6029      	str	r1, [r5, #0]
 80073d0:	d501      	bpl.n	80073d6 <_printf_i+0xbe>
 80073d2:	681e      	ldr	r6, [r3, #0]
 80073d4:	e003      	b.n	80073de <_printf_i+0xc6>
 80073d6:	0646      	lsls	r6, r0, #25
 80073d8:	d5fb      	bpl.n	80073d2 <_printf_i+0xba>
 80073da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80073de:	2e00      	cmp	r6, #0
 80073e0:	da03      	bge.n	80073ea <_printf_i+0xd2>
 80073e2:	232d      	movs	r3, #45	; 0x2d
 80073e4:	4276      	negs	r6, r6
 80073e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073ea:	230a      	movs	r3, #10
 80073ec:	4859      	ldr	r0, [pc, #356]	; (8007554 <_printf_i+0x23c>)
 80073ee:	e012      	b.n	8007416 <_printf_i+0xfe>
 80073f0:	682b      	ldr	r3, [r5, #0]
 80073f2:	6820      	ldr	r0, [r4, #0]
 80073f4:	1d19      	adds	r1, r3, #4
 80073f6:	6029      	str	r1, [r5, #0]
 80073f8:	0605      	lsls	r5, r0, #24
 80073fa:	d501      	bpl.n	8007400 <_printf_i+0xe8>
 80073fc:	681e      	ldr	r6, [r3, #0]
 80073fe:	e002      	b.n	8007406 <_printf_i+0xee>
 8007400:	0641      	lsls	r1, r0, #25
 8007402:	d5fb      	bpl.n	80073fc <_printf_i+0xe4>
 8007404:	881e      	ldrh	r6, [r3, #0]
 8007406:	2f6f      	cmp	r7, #111	; 0x6f
 8007408:	bf0c      	ite	eq
 800740a:	2308      	moveq	r3, #8
 800740c:	230a      	movne	r3, #10
 800740e:	4851      	ldr	r0, [pc, #324]	; (8007554 <_printf_i+0x23c>)
 8007410:	2100      	movs	r1, #0
 8007412:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007416:	6865      	ldr	r5, [r4, #4]
 8007418:	2d00      	cmp	r5, #0
 800741a:	bfa8      	it	ge
 800741c:	6821      	ldrge	r1, [r4, #0]
 800741e:	60a5      	str	r5, [r4, #8]
 8007420:	bfa4      	itt	ge
 8007422:	f021 0104 	bicge.w	r1, r1, #4
 8007426:	6021      	strge	r1, [r4, #0]
 8007428:	b90e      	cbnz	r6, 800742e <_printf_i+0x116>
 800742a:	2d00      	cmp	r5, #0
 800742c:	d04b      	beq.n	80074c6 <_printf_i+0x1ae>
 800742e:	4615      	mov	r5, r2
 8007430:	fbb6 f1f3 	udiv	r1, r6, r3
 8007434:	fb03 6711 	mls	r7, r3, r1, r6
 8007438:	5dc7      	ldrb	r7, [r0, r7]
 800743a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800743e:	4637      	mov	r7, r6
 8007440:	42bb      	cmp	r3, r7
 8007442:	460e      	mov	r6, r1
 8007444:	d9f4      	bls.n	8007430 <_printf_i+0x118>
 8007446:	2b08      	cmp	r3, #8
 8007448:	d10b      	bne.n	8007462 <_printf_i+0x14a>
 800744a:	6823      	ldr	r3, [r4, #0]
 800744c:	07de      	lsls	r6, r3, #31
 800744e:	d508      	bpl.n	8007462 <_printf_i+0x14a>
 8007450:	6923      	ldr	r3, [r4, #16]
 8007452:	6861      	ldr	r1, [r4, #4]
 8007454:	4299      	cmp	r1, r3
 8007456:	bfde      	ittt	le
 8007458:	2330      	movle	r3, #48	; 0x30
 800745a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800745e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007462:	1b52      	subs	r2, r2, r5
 8007464:	6122      	str	r2, [r4, #16]
 8007466:	464b      	mov	r3, r9
 8007468:	4621      	mov	r1, r4
 800746a:	4640      	mov	r0, r8
 800746c:	f8cd a000 	str.w	sl, [sp]
 8007470:	aa03      	add	r2, sp, #12
 8007472:	f7ff fedf 	bl	8007234 <_printf_common>
 8007476:	3001      	adds	r0, #1
 8007478:	d14a      	bne.n	8007510 <_printf_i+0x1f8>
 800747a:	f04f 30ff 	mov.w	r0, #4294967295
 800747e:	b004      	add	sp, #16
 8007480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007484:	6823      	ldr	r3, [r4, #0]
 8007486:	f043 0320 	orr.w	r3, r3, #32
 800748a:	6023      	str	r3, [r4, #0]
 800748c:	2778      	movs	r7, #120	; 0x78
 800748e:	4832      	ldr	r0, [pc, #200]	; (8007558 <_printf_i+0x240>)
 8007490:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	6829      	ldr	r1, [r5, #0]
 8007498:	061f      	lsls	r7, r3, #24
 800749a:	f851 6b04 	ldr.w	r6, [r1], #4
 800749e:	d402      	bmi.n	80074a6 <_printf_i+0x18e>
 80074a0:	065f      	lsls	r7, r3, #25
 80074a2:	bf48      	it	mi
 80074a4:	b2b6      	uxthmi	r6, r6
 80074a6:	07df      	lsls	r7, r3, #31
 80074a8:	bf48      	it	mi
 80074aa:	f043 0320 	orrmi.w	r3, r3, #32
 80074ae:	6029      	str	r1, [r5, #0]
 80074b0:	bf48      	it	mi
 80074b2:	6023      	strmi	r3, [r4, #0]
 80074b4:	b91e      	cbnz	r6, 80074be <_printf_i+0x1a6>
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	f023 0320 	bic.w	r3, r3, #32
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	2310      	movs	r3, #16
 80074c0:	e7a6      	b.n	8007410 <_printf_i+0xf8>
 80074c2:	4824      	ldr	r0, [pc, #144]	; (8007554 <_printf_i+0x23c>)
 80074c4:	e7e4      	b.n	8007490 <_printf_i+0x178>
 80074c6:	4615      	mov	r5, r2
 80074c8:	e7bd      	b.n	8007446 <_printf_i+0x12e>
 80074ca:	682b      	ldr	r3, [r5, #0]
 80074cc:	6826      	ldr	r6, [r4, #0]
 80074ce:	1d18      	adds	r0, r3, #4
 80074d0:	6961      	ldr	r1, [r4, #20]
 80074d2:	6028      	str	r0, [r5, #0]
 80074d4:	0635      	lsls	r5, r6, #24
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	d501      	bpl.n	80074de <_printf_i+0x1c6>
 80074da:	6019      	str	r1, [r3, #0]
 80074dc:	e002      	b.n	80074e4 <_printf_i+0x1cc>
 80074de:	0670      	lsls	r0, r6, #25
 80074e0:	d5fb      	bpl.n	80074da <_printf_i+0x1c2>
 80074e2:	8019      	strh	r1, [r3, #0]
 80074e4:	2300      	movs	r3, #0
 80074e6:	4615      	mov	r5, r2
 80074e8:	6123      	str	r3, [r4, #16]
 80074ea:	e7bc      	b.n	8007466 <_printf_i+0x14e>
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	2100      	movs	r1, #0
 80074f0:	1d1a      	adds	r2, r3, #4
 80074f2:	602a      	str	r2, [r5, #0]
 80074f4:	681d      	ldr	r5, [r3, #0]
 80074f6:	6862      	ldr	r2, [r4, #4]
 80074f8:	4628      	mov	r0, r5
 80074fa:	f000 f859 	bl	80075b0 <memchr>
 80074fe:	b108      	cbz	r0, 8007504 <_printf_i+0x1ec>
 8007500:	1b40      	subs	r0, r0, r5
 8007502:	6060      	str	r0, [r4, #4]
 8007504:	6863      	ldr	r3, [r4, #4]
 8007506:	6123      	str	r3, [r4, #16]
 8007508:	2300      	movs	r3, #0
 800750a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800750e:	e7aa      	b.n	8007466 <_printf_i+0x14e>
 8007510:	462a      	mov	r2, r5
 8007512:	4649      	mov	r1, r9
 8007514:	4640      	mov	r0, r8
 8007516:	6923      	ldr	r3, [r4, #16]
 8007518:	47d0      	blx	sl
 800751a:	3001      	adds	r0, #1
 800751c:	d0ad      	beq.n	800747a <_printf_i+0x162>
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	079b      	lsls	r3, r3, #30
 8007522:	d413      	bmi.n	800754c <_printf_i+0x234>
 8007524:	68e0      	ldr	r0, [r4, #12]
 8007526:	9b03      	ldr	r3, [sp, #12]
 8007528:	4298      	cmp	r0, r3
 800752a:	bfb8      	it	lt
 800752c:	4618      	movlt	r0, r3
 800752e:	e7a6      	b.n	800747e <_printf_i+0x166>
 8007530:	2301      	movs	r3, #1
 8007532:	4632      	mov	r2, r6
 8007534:	4649      	mov	r1, r9
 8007536:	4640      	mov	r0, r8
 8007538:	47d0      	blx	sl
 800753a:	3001      	adds	r0, #1
 800753c:	d09d      	beq.n	800747a <_printf_i+0x162>
 800753e:	3501      	adds	r5, #1
 8007540:	68e3      	ldr	r3, [r4, #12]
 8007542:	9903      	ldr	r1, [sp, #12]
 8007544:	1a5b      	subs	r3, r3, r1
 8007546:	42ab      	cmp	r3, r5
 8007548:	dcf2      	bgt.n	8007530 <_printf_i+0x218>
 800754a:	e7eb      	b.n	8007524 <_printf_i+0x20c>
 800754c:	2500      	movs	r5, #0
 800754e:	f104 0619 	add.w	r6, r4, #25
 8007552:	e7f5      	b.n	8007540 <_printf_i+0x228>
 8007554:	0800770f 	.word	0x0800770f
 8007558:	08007720 	.word	0x08007720

0800755c <memmove>:
 800755c:	4288      	cmp	r0, r1
 800755e:	b510      	push	{r4, lr}
 8007560:	eb01 0402 	add.w	r4, r1, r2
 8007564:	d902      	bls.n	800756c <memmove+0x10>
 8007566:	4284      	cmp	r4, r0
 8007568:	4623      	mov	r3, r4
 800756a:	d807      	bhi.n	800757c <memmove+0x20>
 800756c:	1e43      	subs	r3, r0, #1
 800756e:	42a1      	cmp	r1, r4
 8007570:	d008      	beq.n	8007584 <memmove+0x28>
 8007572:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007576:	f803 2f01 	strb.w	r2, [r3, #1]!
 800757a:	e7f8      	b.n	800756e <memmove+0x12>
 800757c:	4601      	mov	r1, r0
 800757e:	4402      	add	r2, r0
 8007580:	428a      	cmp	r2, r1
 8007582:	d100      	bne.n	8007586 <memmove+0x2a>
 8007584:	bd10      	pop	{r4, pc}
 8007586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800758a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800758e:	e7f7      	b.n	8007580 <memmove+0x24>

08007590 <_sbrk_r>:
 8007590:	b538      	push	{r3, r4, r5, lr}
 8007592:	2300      	movs	r3, #0
 8007594:	4d05      	ldr	r5, [pc, #20]	; (80075ac <_sbrk_r+0x1c>)
 8007596:	4604      	mov	r4, r0
 8007598:	4608      	mov	r0, r1
 800759a:	602b      	str	r3, [r5, #0]
 800759c:	f7f9 fe26 	bl	80011ec <_sbrk>
 80075a0:	1c43      	adds	r3, r0, #1
 80075a2:	d102      	bne.n	80075aa <_sbrk_r+0x1a>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	b103      	cbz	r3, 80075aa <_sbrk_r+0x1a>
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	bd38      	pop	{r3, r4, r5, pc}
 80075ac:	20001cf8 	.word	0x20001cf8

080075b0 <memchr>:
 80075b0:	4603      	mov	r3, r0
 80075b2:	b510      	push	{r4, lr}
 80075b4:	b2c9      	uxtb	r1, r1
 80075b6:	4402      	add	r2, r0
 80075b8:	4293      	cmp	r3, r2
 80075ba:	4618      	mov	r0, r3
 80075bc:	d101      	bne.n	80075c2 <memchr+0x12>
 80075be:	2000      	movs	r0, #0
 80075c0:	e003      	b.n	80075ca <memchr+0x1a>
 80075c2:	7804      	ldrb	r4, [r0, #0]
 80075c4:	3301      	adds	r3, #1
 80075c6:	428c      	cmp	r4, r1
 80075c8:	d1f6      	bne.n	80075b8 <memchr+0x8>
 80075ca:	bd10      	pop	{r4, pc}

080075cc <_realloc_r>:
 80075cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d0:	4680      	mov	r8, r0
 80075d2:	4614      	mov	r4, r2
 80075d4:	460e      	mov	r6, r1
 80075d6:	b921      	cbnz	r1, 80075e2 <_realloc_r+0x16>
 80075d8:	4611      	mov	r1, r2
 80075da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075de:	f7ff bc45 	b.w	8006e6c <_malloc_r>
 80075e2:	b92a      	cbnz	r2, 80075f0 <_realloc_r+0x24>
 80075e4:	f7ff fbda 	bl	8006d9c <_free_r>
 80075e8:	4625      	mov	r5, r4
 80075ea:	4628      	mov	r0, r5
 80075ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075f0:	f000 f81b 	bl	800762a <_malloc_usable_size_r>
 80075f4:	4284      	cmp	r4, r0
 80075f6:	4607      	mov	r7, r0
 80075f8:	d802      	bhi.n	8007600 <_realloc_r+0x34>
 80075fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075fe:	d812      	bhi.n	8007626 <_realloc_r+0x5a>
 8007600:	4621      	mov	r1, r4
 8007602:	4640      	mov	r0, r8
 8007604:	f7ff fc32 	bl	8006e6c <_malloc_r>
 8007608:	4605      	mov	r5, r0
 800760a:	2800      	cmp	r0, #0
 800760c:	d0ed      	beq.n	80075ea <_realloc_r+0x1e>
 800760e:	42bc      	cmp	r4, r7
 8007610:	4622      	mov	r2, r4
 8007612:	4631      	mov	r1, r6
 8007614:	bf28      	it	cs
 8007616:	463a      	movcs	r2, r7
 8007618:	f7ff fbb2 	bl	8006d80 <memcpy>
 800761c:	4631      	mov	r1, r6
 800761e:	4640      	mov	r0, r8
 8007620:	f7ff fbbc 	bl	8006d9c <_free_r>
 8007624:	e7e1      	b.n	80075ea <_realloc_r+0x1e>
 8007626:	4635      	mov	r5, r6
 8007628:	e7df      	b.n	80075ea <_realloc_r+0x1e>

0800762a <_malloc_usable_size_r>:
 800762a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800762e:	1f18      	subs	r0, r3, #4
 8007630:	2b00      	cmp	r3, #0
 8007632:	bfbc      	itt	lt
 8007634:	580b      	ldrlt	r3, [r1, r0]
 8007636:	18c0      	addlt	r0, r0, r3
 8007638:	4770      	bx	lr
	...

0800763c <_init>:
 800763c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763e:	bf00      	nop
 8007640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007642:	bc08      	pop	{r3}
 8007644:	469e      	mov	lr, r3
 8007646:	4770      	bx	lr

08007648 <_fini>:
 8007648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764a:	bf00      	nop
 800764c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800764e:	bc08      	pop	{r3}
 8007650:	469e      	mov	lr, r3
 8007652:	4770      	bx	lr
