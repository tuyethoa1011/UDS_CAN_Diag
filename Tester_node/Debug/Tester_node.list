
Tester_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080049e8  080049e8  000149e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a4c  08004a4c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004a4c  08004a4c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a4c  08004a4c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a4c  08004a4c  00014a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a50  08004a50  00014a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000070  08004ac4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08004ac4  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e1f4  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002127  00000000  00000000  0002e2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc0  00000000  00000000  000303f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000abb  00000000  00000000  000311b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001821e  00000000  00000000  00031c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010620  00000000  00000000  00049e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d43e  00000000  00000000  0005a4b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003efc  00000000  00000000  000e78f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000eb7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080049d0 	.word	0x080049d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080049d0 	.word	0x080049d0

0800014c <button_Init>:

//tong cong co bao nhieu ham callback: press_callback, release callback, longpressing, shortpressing


void button_Init(Button_Typedef *ButtonX,GPIO_TypeDef *GPIOx,uint16_t GPIO_Pin)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	4613      	mov	r3, r2
 8000158:	80fb      	strh	r3, [r7, #6]
	ButtonX->GPIOx = GPIOx;
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	68ba      	ldr	r2, [r7, #8]
 800015e:	611a      	str	r2, [r3, #16]
	ButtonX->GPIO_Pin = GPIO_Pin;
 8000160:	68fb      	ldr	r3, [r7, #12]
 8000162:	88fa      	ldrh	r2, [r7, #6]
 8000164:	829a      	strh	r2, [r3, #20]

	ButtonX->button_current = 1;
 8000166:	68fb      	ldr	r3, [r7, #12]
 8000168:	2201      	movs	r2, #1
 800016a:	701a      	strb	r2, [r3, #0]
	ButtonX->button_last = 1;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	2201      	movs	r2, #1
 8000170:	705a      	strb	r2, [r3, #1]
	ButtonX->button_filter = 1;
 8000172:	68fb      	ldr	r3, [r7, #12]
 8000174:	2201      	movs	r2, #1
 8000176:	709a      	strb	r2, [r3, #2]
}
 8000178:	bf00      	nop
 800017a:	3714      	adds	r7, #20
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
	...

08000184 <HAL_CAN_RxFifo1MsgPendingCallback>:
		button_sig = 1;
	}
}

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &Tester_RxHeader, Tester_RxData) != HAL_OK)
 800018c:	4b0b      	ldr	r3, [pc, #44]	; (80001bc <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 800018e:	4a0c      	ldr	r2, [pc, #48]	; (80001c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 8000190:	2101      	movs	r1, #1
 8000192:	6878      	ldr	r0, [r7, #4]
 8000194:	f001 fa73 	bl	800167e <HAL_CAN_GetRxMessage>
 8000198:	4603      	mov	r3, r0
 800019a:	2b00      	cmp	r3, #0
 800019c:	d003      	beq.n	80001a6 <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
	{
		error_flag = 1;
 800019e:	4b09      	ldr	r3, [pc, #36]	; (80001c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 80001a0:	2201      	movs	r2, #1
 80001a2:	701a      	strb	r2, [r3, #0]
	else
	{
		flag_read_response = 1;
		error_flag = 0;
	}
}
 80001a4:	e005      	b.n	80001b2 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e>
		flag_read_response = 1;
 80001a6:	4b08      	ldr	r3, [pc, #32]	; (80001c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x44>)
 80001a8:	2201      	movs	r2, #1
 80001aa:	701a      	strb	r2, [r3, #0]
		error_flag = 0;
 80001ac:	4b05      	ldr	r3, [pc, #20]	; (80001c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	701a      	strb	r2, [r3, #0]
}
 80001b2:	bf00      	nop
 80001b4:	3708      	adds	r7, #8
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	2000017c 	.word	0x2000017c
 80001c0:	2000015c 	.word	0x2000015c
 80001c4:	200001cf 	.word	0x200001cf
 80001c8:	200001cd 	.word	0x200001cd

080001cc <GetFrameType>:

uint8_t GetFrameType(uint8_t FT_byteString) //Frame type co the dung chung cho SF FF
{
 80001cc:	b480      	push	{r7}
 80001ce:	b085      	sub	sp, #20
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]
	uint8_t FT_res;
	switch(FT_byteString)
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	2b03      	cmp	r3, #3
 80001da:	d817      	bhi.n	800020c <GetFrameType+0x40>
 80001dc:	a201      	add	r2, pc, #4	; (adr r2, 80001e4 <GetFrameType+0x18>)
 80001de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001e2:	bf00      	nop
 80001e4:	080001f5 	.word	0x080001f5
 80001e8:	080001fb 	.word	0x080001fb
 80001ec:	08000201 	.word	0x08000201
 80001f0:	08000207 	.word	0x08000207
	{
		case 0x00: //single frame
		{
			FT_res = 0;
 80001f4:	2300      	movs	r3, #0
 80001f6:	73fb      	strb	r3, [r7, #15]
			break;
 80001f8:	e008      	b.n	800020c <GetFrameType+0x40>
		}
		case 0x01: //first frame
		{
			FT_res = 1;
 80001fa:	2301      	movs	r3, #1
 80001fc:	73fb      	strb	r3, [r7, #15]
			break;
 80001fe:	e005      	b.n	800020c <GetFrameType+0x40>
		}
		case 0x02: //consecutive frame
		{
			FT_res = 2;
 8000200:	2302      	movs	r3, #2
 8000202:	73fb      	strb	r3, [r7, #15]
			break;
 8000204:	e002      	b.n	800020c <GetFrameType+0x40>
		}
		case 0x03: //flow control
		{
			FT_res = 3;
 8000206:	2303      	movs	r3, #3
 8000208:	73fb      	strb	r3, [r7, #15]
			break;
 800020a:	bf00      	nop
		}
	}
	return FT_res;
 800020c:	7bfb      	ldrb	r3, [r7, #15]
}
 800020e:	4618      	mov	r0, r3
 8000210:	3714      	adds	r7, #20
 8000212:	46bd      	mov	sp, r7
 8000214:	bc80      	pop	{r7}
 8000216:	4770      	bx	lr

08000218 <SF_N_PCI_FrameTypeHandle>:

uint8_t SF_N_PCI_FrameTypeHandle(uint8_t byteString) //SF_PCI: Single Frame Protocol Control Info: FT + DL
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
	return (byteString >> 4) & 0x03;
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	091b      	lsrs	r3, r3, #4
 8000226:	b2db      	uxtb	r3, r3
 8000228:	f003 0303 	and.w	r3, r3, #3
 800022c:	b2db      	uxtb	r3, r3
}
 800022e:	4618      	mov	r0, r3
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr

08000238 <ReadSingleFrame_handle>:


void ReadSingleFrame_handle(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	//oled debugger - in ra du lieu vua nhan duoc thong qua single frame
	memset(Tx_Buffer,0,sizeof(Tx_Buffer)); //clear buffer before write
 800023c:	2237      	movs	r2, #55	; 0x37
 800023e:	2100      	movs	r1, #0
 8000240:	4809      	ldr	r0, [pc, #36]	; (8000268 <ReadSingleFrame_handle+0x30>)
 8000242:	f003 ff33 	bl	80040ac <memset>
	sprintf((char*)Tx_Buffer,"%s",Tester_RxData);
 8000246:	4a09      	ldr	r2, [pc, #36]	; (800026c <ReadSingleFrame_handle+0x34>)
 8000248:	4909      	ldr	r1, [pc, #36]	; (8000270 <ReadSingleFrame_handle+0x38>)
 800024a:	4807      	ldr	r0, [pc, #28]	; (8000268 <ReadSingleFrame_handle+0x30>)
 800024c:	f003 ff0e 	bl	800406c <siprintf>
	HAL_UART_Transmit(&huart1,Tx_Buffer,sizeof(Tx_Buffer), 10);
 8000250:	230a      	movs	r3, #10
 8000252:	2237      	movs	r2, #55	; 0x37
 8000254:	4904      	ldr	r1, [pc, #16]	; (8000268 <ReadSingleFrame_handle+0x30>)
 8000256:	4807      	ldr	r0, [pc, #28]	; (8000274 <ReadSingleFrame_handle+0x3c>)
 8000258:	f003 f934 	bl	80034c4 <HAL_UART_Transmit>

	HAL_Delay(200);
 800025c:	20c8      	movs	r0, #200	; 0xc8
 800025e:	f000 ff13 	bl	8001088 <HAL_Delay>
}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	20000194 	.word	0x20000194
 800026c:	2000017c 	.word	0x2000017c
 8000270:	080049e8 	.word	0x080049e8
 8000274:	200000fc 	.word	0x200000fc

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b08a      	sub	sp, #40	; 0x28
 800027c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027e:	f000 fea1 	bl	8000fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000282:	f000 fb5f 	bl	8000944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000286:	f000 fc53 	bl	8000b30 <MX_GPIO_Init>
  MX_CAN_Init();
 800028a:	f000 fba1 	bl	80009d0 <MX_CAN_Init>
  MX_TIM4_Init();
 800028e:	f000 fbd7 	bl	8000a40 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000292:	f000 fc23 	bl	8000adc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Init(&hcan);
 8000296:	488c      	ldr	r0, [pc, #560]	; (80004c8 <main+0x250>)
 8000298:	f000 ff1a 	bl	80010d0 <HAL_CAN_Init>

  //Send notify signal to recieve message from actuator node
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800029c:	2110      	movs	r1, #16
 800029e:	488a      	ldr	r0, [pc, #552]	; (80004c8 <main+0x250>)
 80002a0:	f001 fb0e 	bl	80018c0 <HAL_CAN_ActivateNotification>

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80002a4:	2301      	movs	r3, #1
 80002a6:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 1;  // anything between 0 to SlaveStartFilterBank
 80002a8:	2301      	movs	r3, #1
 80002aa:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 80002ac:	2301      	movs	r3, #1
 80002ae:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x7A2 << 5;
 80002b0:	f24f 4340 	movw	r3, #62528	; 0xf440
 80002b4:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 80002b6:	2300      	movs	r3, #0
 80002b8:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x7A2 << 5;
 80002ba:	f24f 4340 	movw	r3, #62528	; 0xf440
 80002be:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80002c4:	2300      	movs	r3, #0
 80002c6:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80002c8:	2301      	movs	r3, #1
 80002ca:	61fb      	str	r3, [r7, #28]
   //canfilterconfig.SlaveStartFilterBank = 14;
  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80002cc:	463b      	mov	r3, r7
 80002ce:	4619      	mov	r1, r3
 80002d0:	487d      	ldr	r0, [pc, #500]	; (80004c8 <main+0x250>)
 80002d2:	f000 fff8 	bl	80012c6 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan);
 80002d6:	487c      	ldr	r0, [pc, #496]	; (80004c8 <main+0x250>)
 80002d8:	f001 f8be 	bl	8001458 <HAL_CAN_Start>

  //Config CAN header
  Tester_TxHeader.DLC = 8;
 80002dc:	4b7b      	ldr	r3, [pc, #492]	; (80004cc <main+0x254>)
 80002de:	2208      	movs	r2, #8
 80002e0:	611a      	str	r2, [r3, #16]
  Tester_TxHeader.ExtId = 0;
 80002e2:	4b7a      	ldr	r3, [pc, #488]	; (80004cc <main+0x254>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	605a      	str	r2, [r3, #4]
  Tester_TxHeader.IDE = CAN_ID_STD;
 80002e8:	4b78      	ldr	r3, [pc, #480]	; (80004cc <main+0x254>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  Tester_TxHeader.RTR = CAN_RTR_DATA;
 80002ee:	4b77      	ldr	r3, [pc, #476]	; (80004cc <main+0x254>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	60da      	str	r2, [r3, #12]
  Tester_TxHeader.StdId = 0x712;
 80002f4:	4b75      	ldr	r3, [pc, #468]	; (80004cc <main+0x254>)
 80002f6:	f240 7212 	movw	r2, #1810	; 0x712
 80002fa:	601a      	str	r2, [r3, #0]
  Tester_TxHeader.TransmitGlobalTime = DISABLE;
 80002fc:	4b73      	ldr	r3, [pc, #460]	; (80004cc <main+0x254>)
 80002fe:	2200      	movs	r2, #0
 8000300:	751a      	strb	r2, [r3, #20]

  button_Init(&BTN1, GPIOB, GPIO_PIN_0); //BTN1
 8000302:	2201      	movs	r2, #1
 8000304:	4972      	ldr	r1, [pc, #456]	; (80004d0 <main+0x258>)
 8000306:	4873      	ldr	r0, [pc, #460]	; (80004d4 <main+0x25c>)
 8000308:	f7ff ff20 	bl	800014c <button_Init>
  HAL_TIM_Base_Start_IT(&htim4);
 800030c:	4872      	ldr	r0, [pc, #456]	; (80004d8 <main+0x260>)
 800030e:	f002 fcdb 	bl	8002cc8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(500);
 8000312:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000316:	f000 feb7 	bl	8001088 <HAL_Delay>
	  switch(tester_state) //change state
 800031a:	4b70      	ldr	r3, [pc, #448]	; (80004dc <main+0x264>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	2b03      	cmp	r3, #3
 8000320:	d8f7      	bhi.n	8000312 <main+0x9a>
 8000322:	a201      	add	r2, pc, #4	; (adr r2, 8000328 <main+0xb0>)
 8000324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000328:	08000339 	.word	0x08000339
 800032c:	0800035b 	.word	0x0800035b
 8000330:	080003cb 	.word	0x080003cb
 8000334:	08000477 	.word	0x08000477
	  {
	 	case INIT_STATE:
		{
			//check buton_state
			if(button_sig==0)
 8000338:	4b69      	ldr	r3, [pc, #420]	; (80004e0 <main+0x268>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d103      	bne.n	8000348 <main+0xd0>
			{
				tester_state = REQUEST_READ;
 8000340:	4b66      	ldr	r3, [pc, #408]	; (80004dc <main+0x264>)
 8000342:	2201      	movs	r2, #1
 8000344:	701a      	strb	r2, [r3, #0]
			} else if(button_sig==1)
			{
				tester_state = REQUEST_WRITE;
				//button_sig = 0;
			}
			break;
 8000346:	e2d3      	b.n	80008f0 <main+0x678>
			} else if(button_sig==1)
 8000348:	4b65      	ldr	r3, [pc, #404]	; (80004e0 <main+0x268>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	2b01      	cmp	r3, #1
 800034e:	f040 82cf 	bne.w	80008f0 <main+0x678>
				tester_state = REQUEST_WRITE;
 8000352:	4b62      	ldr	r3, [pc, #392]	; (80004dc <main+0x264>)
 8000354:	2202      	movs	r2, #2
 8000356:	701a      	strb	r2, [r3, #0]
			break;
 8000358:	e2ca      	b.n	80008f0 <main+0x678>
		}
	 	case REQUEST_READ: //send to ECU
	 	{
	 		//Gui theo chu ky 1s, tuc la cu 1 giay gui goi tin de doc 1 lan
			HAL_Delay(1000);
 800035a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800035e:	f000 fe93 	bl	8001088 <HAL_Delay>

			if (HAL_CAN_AddTxMessage(&hcan, &Tester_TxHeader, ReadRq_TxData, &Tester_TxMailbox) != HAL_OK)
 8000362:	4b60      	ldr	r3, [pc, #384]	; (80004e4 <main+0x26c>)
 8000364:	4a60      	ldr	r2, [pc, #384]	; (80004e8 <main+0x270>)
 8000366:	4959      	ldr	r1, [pc, #356]	; (80004cc <main+0x254>)
 8000368:	4857      	ldr	r0, [pc, #348]	; (80004c8 <main+0x250>)
 800036a:	f001 f8b9 	bl	80014e0 <HAL_CAN_AddTxMessage>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d003      	beq.n	800037c <main+0x104>
			{
				error_flag = 1;
 8000374:	4b5d      	ldr	r3, [pc, #372]	; (80004ec <main+0x274>)
 8000376:	2201      	movs	r2, #1
 8000378:	701a      	strb	r2, [r3, #0]
 800037a:	e002      	b.n	8000382 <main+0x10a>
			} else //Transmit oke
			{
				error_flag = 0;
 800037c:	4b5b      	ldr	r3, [pc, #364]	; (80004ec <main+0x274>)
 800037e:	2200      	movs	r2, #0
 8000380:	701a      	strb	r2, [r3, #0]
			}

	 		if(flag_read_response == 1) {
 8000382:	4b5b      	ldr	r3, [pc, #364]	; (80004f0 <main+0x278>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b01      	cmp	r3, #1
 8000388:	f040 82b4 	bne.w	80008f4 <main+0x67c>
	 			FT_String = SF_N_PCI_FrameTypeHandle(Tester_RxData[3]);
 800038c:	4b59      	ldr	r3, [pc, #356]	; (80004f4 <main+0x27c>)
 800038e:	78db      	ldrb	r3, [r3, #3]
 8000390:	4618      	mov	r0, r3
 8000392:	f7ff ff41 	bl	8000218 <SF_N_PCI_FrameTypeHandle>
 8000396:	4603      	mov	r3, r0
 8000398:	461a      	mov	r2, r3
 800039a:	4b57      	ldr	r3, [pc, #348]	; (80004f8 <main+0x280>)
 800039c:	701a      	strb	r2, [r3, #0]
	 			FrameType = GetFrameType(FT_String); //check
 800039e:	4b56      	ldr	r3, [pc, #344]	; (80004f8 <main+0x280>)
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff ff12 	bl	80001cc <GetFrameType>
 80003a8:	4603      	mov	r3, r0
 80003aa:	461a      	mov	r2, r3
 80003ac:	4b53      	ldr	r3, [pc, #332]	; (80004fc <main+0x284>)
 80003ae:	701a      	strb	r2, [r3, #0]
	 			if(FrameType == FT_SINGLEFRAME)
 80003b0:	4b52      	ldr	r3, [pc, #328]	; (80004fc <main+0x284>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d104      	bne.n	80003c2 <main+0x14a>
	 			{
	 				ReadSingleFrame_handle();
 80003b8:	f7ff ff3e 	bl	8000238 <ReadSingleFrame_handle>
	 				tester_state = INIT_STATE;
 80003bc:	4b47      	ldr	r3, [pc, #284]	; (80004dc <main+0x264>)
 80003be:	2200      	movs	r2, #0
 80003c0:	701a      	strb	r2, [r3, #0]
	 			}
	 			flag_read_response = 0;
 80003c2:	4b4b      	ldr	r3, [pc, #300]	; (80004f0 <main+0x278>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	701a      	strb	r2, [r3, #0]
	 		}
	 		break;
 80003c8:	e294      	b.n	80008f4 <main+0x67c>
	 	}
	 	case REQUEST_WRITE:
	 	{
	 		switch(write_state)
 80003ca:	4b4d      	ldr	r3, [pc, #308]	; (8000500 <main+0x288>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d002      	beq.n	80003d8 <main+0x160>
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d020      	beq.n	8000418 <main+0x1a0>
	 				}
	 				break;
	 			}
	 		}

	 		break;
 80003d6:	e291      	b.n	80008fc <main+0x684>
	 				if(security_flag == 0)
 80003d8:	4b4a      	ldr	r3, [pc, #296]	; (8000504 <main+0x28c>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d103      	bne.n	80003e8 <main+0x170>
	 					 tester_state = REQUEST_SECURITY_ACCESS;
 80003e0:	4b3e      	ldr	r3, [pc, #248]	; (80004dc <main+0x264>)
 80003e2:	2203      	movs	r2, #3
 80003e4:	701a      	strb	r2, [r3, #0]
	 				break;
 80003e6:	e042      	b.n	800046e <main+0x1f6>
	 				} else if (security_flag == 1)
 80003e8:	4b46      	ldr	r3, [pc, #280]	; (8000504 <main+0x28c>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d13e      	bne.n	800046e <main+0x1f6>
	 					if(HAL_CAN_AddTxMessage(&hcan,&Tester_TxHeader,ReadRq_TxData,&Tester_TxMailbox)!=HAL_OK)
 80003f0:	4b3c      	ldr	r3, [pc, #240]	; (80004e4 <main+0x26c>)
 80003f2:	4a3d      	ldr	r2, [pc, #244]	; (80004e8 <main+0x270>)
 80003f4:	4935      	ldr	r1, [pc, #212]	; (80004cc <main+0x254>)
 80003f6:	4834      	ldr	r0, [pc, #208]	; (80004c8 <main+0x250>)
 80003f8:	f001 f872 	bl	80014e0 <HAL_CAN_AddTxMessage>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d003      	beq.n	800040a <main+0x192>
	 						error_flag = 1;
 8000402:	4b3a      	ldr	r3, [pc, #232]	; (80004ec <main+0x274>)
 8000404:	2201      	movs	r2, #1
 8000406:	701a      	strb	r2, [r3, #0]
	 				break;
 8000408:	e031      	b.n	800046e <main+0x1f6>
	 						error_flag = 0;
 800040a:	4b38      	ldr	r3, [pc, #224]	; (80004ec <main+0x274>)
 800040c:	2200      	movs	r2, #0
 800040e:	701a      	strb	r2, [r3, #0]
	 					 	write_state = WRITE_RESPONSE;
 8000410:	4b3b      	ldr	r3, [pc, #236]	; (8000500 <main+0x288>)
 8000412:	2201      	movs	r2, #1
 8000414:	701a      	strb	r2, [r3, #0]
	 				break;
 8000416:	e02a      	b.n	800046e <main+0x1f6>
	 				if(flag_read_response == 1)
 8000418:	4b35      	ldr	r3, [pc, #212]	; (80004f0 <main+0x278>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b01      	cmp	r3, #1
 800041e:	d128      	bne.n	8000472 <main+0x1fa>
	 					FT_String = SF_N_PCI_FrameTypeHandle(Tester_RxData[0]);
 8000420:	4b34      	ldr	r3, [pc, #208]	; (80004f4 <main+0x27c>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	4618      	mov	r0, r3
 8000426:	f7ff fef7 	bl	8000218 <SF_N_PCI_FrameTypeHandle>
 800042a:	4603      	mov	r3, r0
 800042c:	461a      	mov	r2, r3
 800042e:	4b32      	ldr	r3, [pc, #200]	; (80004f8 <main+0x280>)
 8000430:	701a      	strb	r2, [r3, #0]
	 					FrameType = GetFrameType(FT_String);
 8000432:	4b31      	ldr	r3, [pc, #196]	; (80004f8 <main+0x280>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff fec8 	bl	80001cc <GetFrameType>
 800043c:	4603      	mov	r3, r0
 800043e:	461a      	mov	r2, r3
 8000440:	4b2e      	ldr	r3, [pc, #184]	; (80004fc <main+0x284>)
 8000442:	701a      	strb	r2, [r3, #0]
	 					if(FrameType==0)
 8000444:	4b2d      	ldr	r3, [pc, #180]	; (80004fc <main+0x284>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d10c      	bne.n	8000466 <main+0x1ee>
	 						switch(Tester_RxData[1])
 800044c:	4b29      	ldr	r3, [pc, #164]	; (80004f4 <main+0x27c>)
 800044e:	785b      	ldrb	r3, [r3, #1]
 8000450:	2b6e      	cmp	r3, #110	; 0x6e
 8000452:	d002      	beq.n	800045a <main+0x1e2>
 8000454:	2b7f      	cmp	r3, #127	; 0x7f
 8000456:	d003      	beq.n	8000460 <main+0x1e8>
 8000458:	e005      	b.n	8000466 <main+0x1ee>
	 								tester_state = INIT_STATE; //positive response -> get back to init state
 800045a:	4b20      	ldr	r3, [pc, #128]	; (80004dc <main+0x264>)
 800045c:	2200      	movs	r2, #0
 800045e:	701a      	strb	r2, [r3, #0]
									tester_state = INIT_STATE;
 8000460:	4b1e      	ldr	r3, [pc, #120]	; (80004dc <main+0x264>)
 8000462:	2200      	movs	r2, #0
 8000464:	701a      	strb	r2, [r3, #0]
	 					flag_read_response = 0;
 8000466:	4b22      	ldr	r3, [pc, #136]	; (80004f0 <main+0x278>)
 8000468:	2200      	movs	r2, #0
 800046a:	701a      	strb	r2, [r3, #0]
	 				break;
 800046c:	e001      	b.n	8000472 <main+0x1fa>
	 				break;
 800046e:	bf00      	nop
 8000470:	e244      	b.n	80008fc <main+0x684>
	 				break;
 8000472:	bf00      	nop
	 		break;
 8000474:	e242      	b.n	80008fc <main+0x684>
	 	}
	 	case REQUEST_SECURITY_ACCESS:
	 	{
	 		switch(security_state)
 8000476:	4b24      	ldr	r3, [pc, #144]	; (8000508 <main+0x290>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	2b02      	cmp	r3, #2
 800047c:	f000 81ff 	beq.w	800087e <main+0x606>
 8000480:	2b02      	cmp	r3, #2
 8000482:	f300 8239 	bgt.w	80008f8 <main+0x680>
 8000486:	2b00      	cmp	r3, #0
 8000488:	d003      	beq.n	8000492 <main+0x21a>
 800048a:	2b01      	cmp	r3, #1
 800048c:	f000 80e2 	beq.w	8000654 <main+0x3dc>

	 		//sau khi nhan duoc du lieu accept security access tien hanh
	 		//quay ve trang thai write
	 		//dong thoi bat den - kich hoat flag o timer
	 		//
	 		break;
 8000490:	e232      	b.n	80008f8 <main+0x680>
					switch(request_seedsend_flag)
 8000492:	4b1e      	ldr	r3, [pc, #120]	; (800050c <main+0x294>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d002      	beq.n	80004a0 <main+0x228>
 800049a:	2b01      	cmp	r3, #1
 800049c:	d03a      	beq.n	8000514 <main+0x29c>
	 				break;
 800049e:	e226      	b.n	80008ee <main+0x676>
							if(HAL_CAN_AddTxMessage(&hcan,&Tester_TxHeader,SecARq_TxData, &Tester_TxMailbox) != HAL_OK)
 80004a0:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <main+0x26c>)
 80004a2:	4a1b      	ldr	r2, [pc, #108]	; (8000510 <main+0x298>)
 80004a4:	4909      	ldr	r1, [pc, #36]	; (80004cc <main+0x254>)
 80004a6:	4808      	ldr	r0, [pc, #32]	; (80004c8 <main+0x250>)
 80004a8:	f001 f81a 	bl	80014e0 <HAL_CAN_AddTxMessage>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d003      	beq.n	80004ba <main+0x242>
								error_flag = 1;
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <main+0x274>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	701a      	strb	r2, [r3, #0]
							break;
 80004b8:	e0cb      	b.n	8000652 <main+0x3da>
								error_flag = 0;
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <main+0x274>)
 80004bc:	2200      	movs	r2, #0
 80004be:	701a      	strb	r2, [r3, #0]
								request_seedsend_flag = 1; // co bao hieu da gui seed request
 80004c0:	4b12      	ldr	r3, [pc, #72]	; (800050c <main+0x294>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	701a      	strb	r2, [r3, #0]
							break;
 80004c6:	e0c4      	b.n	8000652 <main+0x3da>
 80004c8:	2000008c 	.word	0x2000008c
 80004cc:	20000144 	.word	0x20000144
 80004d0:	40010c00 	.word	0x40010c00
 80004d4:	200001d8 	.word	0x200001d8
 80004d8:	200000b4 	.word	0x200000b4
 80004dc:	200001f0 	.word	0x200001f0
 80004e0:	20000010 	.word	0x20000010
 80004e4:	20000178 	.word	0x20000178
 80004e8:	20000000 	.word	0x20000000
 80004ec:	200001cf 	.word	0x200001cf
 80004f0:	200001cd 	.word	0x200001cd
 80004f4:	2000017c 	.word	0x2000017c
 80004f8:	200001cb 	.word	0x200001cb
 80004fc:	200001cc 	.word	0x200001cc
 8000500:	200001f3 	.word	0x200001f3
 8000504:	200001ce 	.word	0x200001ce
 8000508:	200001f1 	.word	0x200001f1
 800050c:	200001d0 	.word	0x200001d0
 8000510:	20000008 	.word	0x20000008
							if(flag_read_response)
 8000514:	4b93      	ldr	r3, [pc, #588]	; (8000764 <main+0x4ec>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	f000 8099 	beq.w	8000650 <main+0x3d8>
				 				seed[0] = Tester_RxData[3];
 800051e:	4b92      	ldr	r3, [pc, #584]	; (8000768 <main+0x4f0>)
 8000520:	78da      	ldrb	r2, [r3, #3]
 8000522:	4b92      	ldr	r3, [pc, #584]	; (800076c <main+0x4f4>)
 8000524:	701a      	strb	r2, [r3, #0]
				 				seed[1] = Tester_RxData[4];
 8000526:	4b90      	ldr	r3, [pc, #576]	; (8000768 <main+0x4f0>)
 8000528:	791a      	ldrb	r2, [r3, #4]
 800052a:	4b90      	ldr	r3, [pc, #576]	; (800076c <main+0x4f4>)
 800052c:	705a      	strb	r2, [r3, #1]
				 				seed[2] = Tester_RxData[5];
 800052e:	4b8e      	ldr	r3, [pc, #568]	; (8000768 <main+0x4f0>)
 8000530:	795a      	ldrb	r2, [r3, #5]
 8000532:	4b8e      	ldr	r3, [pc, #568]	; (800076c <main+0x4f4>)
 8000534:	709a      	strb	r2, [r3, #2]
				 				seed[3] = Tester_RxData[6];
 8000536:	4b8c      	ldr	r3, [pc, #560]	; (8000768 <main+0x4f0>)
 8000538:	799a      	ldrb	r2, [r3, #6]
 800053a:	4b8c      	ldr	r3, [pc, #560]	; (800076c <main+0x4f4>)
 800053c:	70da      	strb	r2, [r3, #3]
				 				key[0] = seed[0] ^ seed[1]; //xor
 800053e:	4b8b      	ldr	r3, [pc, #556]	; (800076c <main+0x4f4>)
 8000540:	781a      	ldrb	r2, [r3, #0]
 8000542:	4b8a      	ldr	r3, [pc, #552]	; (800076c <main+0x4f4>)
 8000544:	785b      	ldrb	r3, [r3, #1]
 8000546:	4053      	eors	r3, r2
 8000548:	b2da      	uxtb	r2, r3
 800054a:	4b89      	ldr	r3, [pc, #548]	; (8000770 <main+0x4f8>)
 800054c:	701a      	strb	r2, [r3, #0]
				 				key[1] = seed[1] + seed[2];
 800054e:	4b87      	ldr	r3, [pc, #540]	; (800076c <main+0x4f4>)
 8000550:	785a      	ldrb	r2, [r3, #1]
 8000552:	4b86      	ldr	r3, [pc, #536]	; (800076c <main+0x4f4>)
 8000554:	789b      	ldrb	r3, [r3, #2]
 8000556:	4413      	add	r3, r2
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4b85      	ldr	r3, [pc, #532]	; (8000770 <main+0x4f8>)
 800055c:	705a      	strb	r2, [r3, #1]
				 				key[2] = seed[2] ^ seed[3];
 800055e:	4b83      	ldr	r3, [pc, #524]	; (800076c <main+0x4f4>)
 8000560:	789a      	ldrb	r2, [r3, #2]
 8000562:	4b82      	ldr	r3, [pc, #520]	; (800076c <main+0x4f4>)
 8000564:	78db      	ldrb	r3, [r3, #3]
 8000566:	4053      	eors	r3, r2
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4b81      	ldr	r3, [pc, #516]	; (8000770 <main+0x4f8>)
 800056c:	709a      	strb	r2, [r3, #2]
				 				key[3] = seed[3] + seed[0];
 800056e:	4b7f      	ldr	r3, [pc, #508]	; (800076c <main+0x4f4>)
 8000570:	78da      	ldrb	r2, [r3, #3]
 8000572:	4b7e      	ldr	r3, [pc, #504]	; (800076c <main+0x4f4>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	4413      	add	r3, r2
 8000578:	b2da      	uxtb	r2, r3
 800057a:	4b7d      	ldr	r3, [pc, #500]	; (8000770 <main+0x4f8>)
 800057c:	70da      	strb	r2, [r3, #3]
				 				key[4] = seed[0] | seed[1];
 800057e:	4b7b      	ldr	r3, [pc, #492]	; (800076c <main+0x4f4>)
 8000580:	781a      	ldrb	r2, [r3, #0]
 8000582:	4b7a      	ldr	r3, [pc, #488]	; (800076c <main+0x4f4>)
 8000584:	785b      	ldrb	r3, [r3, #1]
 8000586:	4313      	orrs	r3, r2
 8000588:	b2da      	uxtb	r2, r3
 800058a:	4b79      	ldr	r3, [pc, #484]	; (8000770 <main+0x4f8>)
 800058c:	711a      	strb	r2, [r3, #4]
				 				key[5] = seed[1] + seed[2];
 800058e:	4b77      	ldr	r3, [pc, #476]	; (800076c <main+0x4f4>)
 8000590:	785a      	ldrb	r2, [r3, #1]
 8000592:	4b76      	ldr	r3, [pc, #472]	; (800076c <main+0x4f4>)
 8000594:	789b      	ldrb	r3, [r3, #2]
 8000596:	4413      	add	r3, r2
 8000598:	b2da      	uxtb	r2, r3
 800059a:	4b75      	ldr	r3, [pc, #468]	; (8000770 <main+0x4f8>)
 800059c:	715a      	strb	r2, [r3, #5]
				 				key[6] = seed[2] | seed[3];
 800059e:	4b73      	ldr	r3, [pc, #460]	; (800076c <main+0x4f4>)
 80005a0:	789a      	ldrb	r2, [r3, #2]
 80005a2:	4b72      	ldr	r3, [pc, #456]	; (800076c <main+0x4f4>)
 80005a4:	78db      	ldrb	r3, [r3, #3]
 80005a6:	4313      	orrs	r3, r2
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b71      	ldr	r3, [pc, #452]	; (8000770 <main+0x4f8>)
 80005ac:	719a      	strb	r2, [r3, #6]
				 				key[7] = seed[3] + seed[0];
 80005ae:	4b6f      	ldr	r3, [pc, #444]	; (800076c <main+0x4f4>)
 80005b0:	78da      	ldrb	r2, [r3, #3]
 80005b2:	4b6e      	ldr	r3, [pc, #440]	; (800076c <main+0x4f4>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4b6d      	ldr	r3, [pc, #436]	; (8000770 <main+0x4f8>)
 80005bc:	71da      	strb	r2, [r3, #7]
				 				key[8] = seed[0] & seed[1];
 80005be:	4b6b      	ldr	r3, [pc, #428]	; (800076c <main+0x4f4>)
 80005c0:	781a      	ldrb	r2, [r3, #0]
 80005c2:	4b6a      	ldr	r3, [pc, #424]	; (800076c <main+0x4f4>)
 80005c4:	785b      	ldrb	r3, [r3, #1]
 80005c6:	4013      	ands	r3, r2
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	4b69      	ldr	r3, [pc, #420]	; (8000770 <main+0x4f8>)
 80005cc:	721a      	strb	r2, [r3, #8]
				 				key[9] = seed[1] + seed[2];
 80005ce:	4b67      	ldr	r3, [pc, #412]	; (800076c <main+0x4f4>)
 80005d0:	785a      	ldrb	r2, [r3, #1]
 80005d2:	4b66      	ldr	r3, [pc, #408]	; (800076c <main+0x4f4>)
 80005d4:	789b      	ldrb	r3, [r3, #2]
 80005d6:	4413      	add	r3, r2
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4b65      	ldr	r3, [pc, #404]	; (8000770 <main+0x4f8>)
 80005dc:	725a      	strb	r2, [r3, #9]
				 				key[10] = seed[2] & seed[3];
 80005de:	4b63      	ldr	r3, [pc, #396]	; (800076c <main+0x4f4>)
 80005e0:	789a      	ldrb	r2, [r3, #2]
 80005e2:	4b62      	ldr	r3, [pc, #392]	; (800076c <main+0x4f4>)
 80005e4:	78db      	ldrb	r3, [r3, #3]
 80005e6:	4013      	ands	r3, r2
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	4b61      	ldr	r3, [pc, #388]	; (8000770 <main+0x4f8>)
 80005ec:	729a      	strb	r2, [r3, #10]
				 				key[11] = seed[3] + seed[0];
 80005ee:	4b5f      	ldr	r3, [pc, #380]	; (800076c <main+0x4f4>)
 80005f0:	78da      	ldrb	r2, [r3, #3]
 80005f2:	4b5e      	ldr	r3, [pc, #376]	; (800076c <main+0x4f4>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	4413      	add	r3, r2
 80005f8:	b2da      	uxtb	r2, r3
 80005fa:	4b5d      	ldr	r3, [pc, #372]	; (8000770 <main+0x4f8>)
 80005fc:	72da      	strb	r2, [r3, #11]
				 				key[12] = seed[0] - seed[1];
 80005fe:	4b5b      	ldr	r3, [pc, #364]	; (800076c <main+0x4f4>)
 8000600:	781a      	ldrb	r2, [r3, #0]
 8000602:	4b5a      	ldr	r3, [pc, #360]	; (800076c <main+0x4f4>)
 8000604:	785b      	ldrb	r3, [r3, #1]
 8000606:	1ad3      	subs	r3, r2, r3
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4b59      	ldr	r3, [pc, #356]	; (8000770 <main+0x4f8>)
 800060c:	731a      	strb	r2, [r3, #12]
				 				key[13] = seed[1] + seed[2];
 800060e:	4b57      	ldr	r3, [pc, #348]	; (800076c <main+0x4f4>)
 8000610:	785a      	ldrb	r2, [r3, #1]
 8000612:	4b56      	ldr	r3, [pc, #344]	; (800076c <main+0x4f4>)
 8000614:	789b      	ldrb	r3, [r3, #2]
 8000616:	4413      	add	r3, r2
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4b55      	ldr	r3, [pc, #340]	; (8000770 <main+0x4f8>)
 800061c:	735a      	strb	r2, [r3, #13]
				 				key[14] = seed[2] - seed[3];
 800061e:	4b53      	ldr	r3, [pc, #332]	; (800076c <main+0x4f4>)
 8000620:	789a      	ldrb	r2, [r3, #2]
 8000622:	4b52      	ldr	r3, [pc, #328]	; (800076c <main+0x4f4>)
 8000624:	78db      	ldrb	r3, [r3, #3]
 8000626:	1ad3      	subs	r3, r2, r3
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4b51      	ldr	r3, [pc, #324]	; (8000770 <main+0x4f8>)
 800062c:	739a      	strb	r2, [r3, #14]
				 				key[15] = seed[3] + seed[0];
 800062e:	4b4f      	ldr	r3, [pc, #316]	; (800076c <main+0x4f4>)
 8000630:	78da      	ldrb	r2, [r3, #3]
 8000632:	4b4e      	ldr	r3, [pc, #312]	; (800076c <main+0x4f4>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	4413      	add	r3, r2
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b4d      	ldr	r3, [pc, #308]	; (8000770 <main+0x4f8>)
 800063c:	73da      	strb	r2, [r3, #15]
								security_state = SEND_KEY;
 800063e:	4b4d      	ldr	r3, [pc, #308]	; (8000774 <main+0x4fc>)
 8000640:	2201      	movs	r2, #1
 8000642:	701a      	strb	r2, [r3, #0]
								flag_read_response = 0;
 8000644:	4b47      	ldr	r3, [pc, #284]	; (8000764 <main+0x4ec>)
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
								request_seedsend_flag = 0;
 800064a:	4b4b      	ldr	r3, [pc, #300]	; (8000778 <main+0x500>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
							break;
 8000650:	bf00      	nop
	 				break;
 8000652:	e14c      	b.n	80008ee <main+0x676>
	 				switch(multiflow_state)
 8000654:	4b49      	ldr	r3, [pc, #292]	; (800077c <main+0x504>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b02      	cmp	r3, #2
 800065a:	f000 80a3 	beq.w	80007a4 <main+0x52c>
 800065e:	2b02      	cmp	r3, #2
 8000660:	f300 8142 	bgt.w	80008e8 <main+0x670>
 8000664:	2b00      	cmp	r3, #0
 8000666:	d002      	beq.n	800066e <main+0x3f6>
 8000668:	2b01      	cmp	r3, #1
 800066a:	d04e      	beq.n	800070a <main+0x492>
	 				break; //break for SEND KEY
 800066c:	e13c      	b.n	80008e8 <main+0x670>
	 						switch(send_firstframe_flag)
 800066e:	4b44      	ldr	r3, [pc, #272]	; (8000780 <main+0x508>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d002      	beq.n	800067c <main+0x404>
 8000676:	2b01      	cmp	r3, #1
 8000678:	d038      	beq.n	80006ec <main+0x474>
	 						break;
 800067a:	e0ff      	b.n	800087c <main+0x604>
	 								UnlockRq_TxData[0] = 0x10;
 800067c:	4b41      	ldr	r3, [pc, #260]	; (8000784 <main+0x50c>)
 800067e:	2210      	movs	r2, #16
 8000680:	701a      	strb	r2, [r3, #0]
	 								UnlockRq_TxData[1] = 0x16; //0-15 KEY DATA
 8000682:	4b40      	ldr	r3, [pc, #256]	; (8000784 <main+0x50c>)
 8000684:	2216      	movs	r2, #22
 8000686:	705a      	strb	r2, [r3, #1]
	 								UnlockRq_TxData[2] = 0x27; //securiy SID
 8000688:	4b3e      	ldr	r3, [pc, #248]	; (8000784 <main+0x50c>)
 800068a:	2227      	movs	r2, #39	; 0x27
 800068c:	709a      	strb	r2, [r3, #2]
	 								UnlockRq_TxData[3] = 0x02; //security key - level 1
 800068e:	4b3d      	ldr	r3, [pc, #244]	; (8000784 <main+0x50c>)
 8000690:	2202      	movs	r2, #2
 8000692:	70da      	strb	r2, [r3, #3]
	 								for(index_array=0;index_array<4;index_array++)
 8000694:	4b3c      	ldr	r3, [pc, #240]	; (8000788 <main+0x510>)
 8000696:	2200      	movs	r2, #0
 8000698:	801a      	strh	r2, [r3, #0]
 800069a:	e00f      	b.n	80006bc <main+0x444>
	 									UnlockRq_TxData[index_array+4] = key[index_array];
 800069c:	4b3a      	ldr	r3, [pc, #232]	; (8000788 <main+0x510>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	4619      	mov	r1, r3
 80006a2:	4b39      	ldr	r3, [pc, #228]	; (8000788 <main+0x510>)
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	3304      	adds	r3, #4
 80006a8:	4a31      	ldr	r2, [pc, #196]	; (8000770 <main+0x4f8>)
 80006aa:	5c51      	ldrb	r1, [r2, r1]
 80006ac:	4a35      	ldr	r2, [pc, #212]	; (8000784 <main+0x50c>)
 80006ae:	54d1      	strb	r1, [r2, r3]
	 								for(index_array=0;index_array<4;index_array++)
 80006b0:	4b35      	ldr	r3, [pc, #212]	; (8000788 <main+0x510>)
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	4b33      	ldr	r3, [pc, #204]	; (8000788 <main+0x510>)
 80006ba:	801a      	strh	r2, [r3, #0]
 80006bc:	4b32      	ldr	r3, [pc, #200]	; (8000788 <main+0x510>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	2b03      	cmp	r3, #3
 80006c2:	d9eb      	bls.n	800069c <main+0x424>
	 								if(HAL_CAN_AddTxMessage(&hcan,&Tester_TxHeader,UnlockRq_TxData,&Tester_TxMailbox) != HAL_OK)
 80006c4:	4b31      	ldr	r3, [pc, #196]	; (800078c <main+0x514>)
 80006c6:	4a2f      	ldr	r2, [pc, #188]	; (8000784 <main+0x50c>)
 80006c8:	4931      	ldr	r1, [pc, #196]	; (8000790 <main+0x518>)
 80006ca:	4832      	ldr	r0, [pc, #200]	; (8000794 <main+0x51c>)
 80006cc:	f000 ff08 	bl	80014e0 <HAL_CAN_AddTxMessage>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d003      	beq.n	80006de <main+0x466>
	 									error_flag = 1;
 80006d6:	4b30      	ldr	r3, [pc, #192]	; (8000798 <main+0x520>)
 80006d8:	2201      	movs	r2, #1
 80006da:	701a      	strb	r2, [r3, #0]
	 								break;
 80006dc:	e014      	b.n	8000708 <main+0x490>
	 									error_flag = 0;
 80006de:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <main+0x520>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
	 									send_firstframe_flag = 1; // co bao hieu da gui first frame
 80006e4:	4b26      	ldr	r3, [pc, #152]	; (8000780 <main+0x508>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	701a      	strb	r2, [r3, #0]
	 								break;
 80006ea:	e00d      	b.n	8000708 <main+0x490>
	 								if(flag_read_response) //recieve flow control
 80006ec:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <main+0x4ec>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d008      	beq.n	8000706 <main+0x48e>
	 									multiflow_state = FlOWCONTROL_CHECK;
 80006f4:	4b21      	ldr	r3, [pc, #132]	; (800077c <main+0x504>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	701a      	strb	r2, [r3, #0]
	 									flag_read_response = 0;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <main+0x4ec>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
	 									send_firstframe_flag = 0;
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <main+0x508>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
	 								break;
 8000706:	bf00      	nop
	 						break;
 8000708:	e0b8      	b.n	800087c <main+0x604>
	 						FT_String = SF_N_PCI_FrameTypeHandle(Tester_RxData[0]);
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <main+0x4f0>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fd82 	bl	8000218 <SF_N_PCI_FrameTypeHandle>
 8000714:	4603      	mov	r3, r0
 8000716:	461a      	mov	r2, r3
 8000718:	4b20      	ldr	r3, [pc, #128]	; (800079c <main+0x524>)
 800071a:	701a      	strb	r2, [r3, #0]
	 						FrameType = GetFrameType(FT_String);
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <main+0x524>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fd53 	bl	80001cc <GetFrameType>
 8000726:	4603      	mov	r3, r0
 8000728:	461a      	mov	r2, r3
 800072a:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <main+0x528>)
 800072c:	701a      	strb	r2, [r3, #0]
	 						if(FrameType == 3) //Frametype = 3 -> Frame nhan la Frame flow control tu Tester
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <main+0x528>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b03      	cmp	r3, #3
 8000734:	f040 80a1 	bne.w	800087a <main+0x602>
	 							switch(Tester_RxData[0] & 0x0f)
 8000738:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <main+0x4f0>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	f003 030f 	and.w	r3, r3, #15
 8000740:	2b02      	cmp	r3, #2
 8000742:	d00b      	beq.n	800075c <main+0x4e4>
 8000744:	2b02      	cmp	r3, #2
 8000746:	f300 8098 	bgt.w	800087a <main+0x602>
 800074a:	2b00      	cmp	r3, #0
 800074c:	d002      	beq.n	8000754 <main+0x4dc>
 800074e:	2b01      	cmp	r3, #1
 8000750:	d006      	beq.n	8000760 <main+0x4e8>
	 						break;
 8000752:	e092      	b.n	800087a <main+0x602>
	 							 		multiflow_state = CONSECUTIVEFRAME_SEND;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <main+0x504>)
 8000756:	2202      	movs	r2, #2
 8000758:	701a      	strb	r2, [r3, #0]
	 							 	break;
 800075a:	e002      	b.n	8000762 <main+0x4ea>
	 							 	break;
 800075c:	bf00      	nop
 800075e:	e08c      	b.n	800087a <main+0x602>
	 							 	break;
 8000760:	bf00      	nop
	 						break;
 8000762:	e08a      	b.n	800087a <main+0x602>
 8000764:	200001cd 	.word	0x200001cd
 8000768:	2000017c 	.word	0x2000017c
 800076c:	20000204 	.word	0x20000204
 8000770:	200001f4 	.word	0x200001f4
 8000774:	200001f1 	.word	0x200001f1
 8000778:	200001d0 	.word	0x200001d0
 800077c:	200001f2 	.word	0x200001f2
 8000780:	200001d1 	.word	0x200001d1
 8000784:	20000184 	.word	0x20000184
 8000788:	200001d4 	.word	0x200001d4
 800078c:	20000178 	.word	0x20000178
 8000790:	20000144 	.word	0x20000144
 8000794:	2000008c 	.word	0x2000008c
 8000798:	200001cf 	.word	0x200001cf
 800079c:	200001cb 	.word	0x200001cb
 80007a0:	200001cc 	.word	0x200001cc
	 						if(MaxConsecutiveFrame_count < sequence_num) 	//done transmitting - wait for ecu response
 80007a4:	4b56      	ldr	r3, [pc, #344]	; (8000900 <main+0x688>)
 80007a6:	781a      	ldrb	r2, [r3, #0]
 80007a8:	4b56      	ldr	r3, [pc, #344]	; (8000904 <main+0x68c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d207      	bcs.n	80007c0 <main+0x548>
	 							security_state = AUTHENTICATE_RESPONSE;
 80007b0:	4b55      	ldr	r3, [pc, #340]	; (8000908 <main+0x690>)
 80007b2:	2202      	movs	r2, #2
 80007b4:	701a      	strb	r2, [r3, #0]
	 							sequence_num = 1;
 80007b6:	4b53      	ldr	r3, [pc, #332]	; (8000904 <main+0x68c>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
	 							break;
 80007bc:	bf00      	nop
	 						break;
 80007be:	e05d      	b.n	800087c <main+0x604>
	 						KeySend_TxData[0] = FT_CONSECUTIVEFRAME + sequence_num; //0x20 FT Consecutive Frame
 80007c0:	4b50      	ldr	r3, [pc, #320]	; (8000904 <main+0x68c>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	3320      	adds	r3, #32
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b50      	ldr	r3, [pc, #320]	; (800090c <main+0x694>)
 80007ca:	701a      	strb	r2, [r3, #0]
	 						for(index_array = prev_index_array;index_array<prev_index_array+7;index_array++)
 80007cc:	4b50      	ldr	r3, [pc, #320]	; (8000910 <main+0x698>)
 80007ce:	881a      	ldrh	r2, [r3, #0]
 80007d0:	4b50      	ldr	r3, [pc, #320]	; (8000914 <main+0x69c>)
 80007d2:	801a      	strh	r2, [r3, #0]
 80007d4:	e02b      	b.n	800082e <main+0x5b6>
	 							if(index_array>= 16) {
 80007d6:	4b4f      	ldr	r3, [pc, #316]	; (8000914 <main+0x69c>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	2b0f      	cmp	r3, #15
 80007dc:	d90f      	bls.n	80007fe <main+0x586>
	 								KeySend_TxData[3] = 0x00;
 80007de:	4b4b      	ldr	r3, [pc, #300]	; (800090c <main+0x694>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	70da      	strb	r2, [r3, #3]
	 								KeySend_TxData[4] = 0x00;
 80007e4:	4b49      	ldr	r3, [pc, #292]	; (800090c <main+0x694>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	711a      	strb	r2, [r3, #4]
	 								KeySend_TxData[5] = 0x00;
 80007ea:	4b48      	ldr	r3, [pc, #288]	; (800090c <main+0x694>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	715a      	strb	r2, [r3, #5]
	 								KeySend_TxData[6] = 0x00;
 80007f0:	4b46      	ldr	r3, [pc, #280]	; (800090c <main+0x694>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	719a      	strb	r2, [r3, #6]
	 								KeySend_TxData[7] = 0x00;
 80007f6:	4b45      	ldr	r3, [pc, #276]	; (800090c <main+0x694>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	71da      	strb	r2, [r3, #7]
	 								break;
 80007fc:	e01e      	b.n	800083c <main+0x5c4>
	 							} else if(index_array<16)
 80007fe:	4b45      	ldr	r3, [pc, #276]	; (8000914 <main+0x69c>)
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	2b0f      	cmp	r3, #15
 8000804:	d80d      	bhi.n	8000822 <main+0x5aa>
	 								KeySend_TxData[(index_array-prev_index_array)+1] = key[index_array];
 8000806:	4b43      	ldr	r3, [pc, #268]	; (8000914 <main+0x69c>)
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	4619      	mov	r1, r3
 800080c:	4b41      	ldr	r3, [pc, #260]	; (8000914 <main+0x69c>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	4b3f      	ldr	r3, [pc, #252]	; (8000910 <main+0x698>)
 8000814:	881b      	ldrh	r3, [r3, #0]
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	3301      	adds	r3, #1
 800081a:	4a3f      	ldr	r2, [pc, #252]	; (8000918 <main+0x6a0>)
 800081c:	5c51      	ldrb	r1, [r2, r1]
 800081e:	4a3b      	ldr	r2, [pc, #236]	; (800090c <main+0x694>)
 8000820:	54d1      	strb	r1, [r2, r3]
	 						for(index_array = prev_index_array;index_array<prev_index_array+7;index_array++)
 8000822:	4b3c      	ldr	r3, [pc, #240]	; (8000914 <main+0x69c>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	3301      	adds	r3, #1
 8000828:	b29a      	uxth	r2, r3
 800082a:	4b3a      	ldr	r3, [pc, #232]	; (8000914 <main+0x69c>)
 800082c:	801a      	strh	r2, [r3, #0]
 800082e:	4b38      	ldr	r3, [pc, #224]	; (8000910 <main+0x698>)
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	3306      	adds	r3, #6
 8000834:	4a37      	ldr	r2, [pc, #220]	; (8000914 <main+0x69c>)
 8000836:	8812      	ldrh	r2, [r2, #0]
 8000838:	4293      	cmp	r3, r2
 800083a:	dacc      	bge.n	80007d6 <main+0x55e>
	 						prev_index_array = index_array;
 800083c:	4b35      	ldr	r3, [pc, #212]	; (8000914 <main+0x69c>)
 800083e:	881a      	ldrh	r2, [r3, #0]
 8000840:	4b33      	ldr	r3, [pc, #204]	; (8000910 <main+0x698>)
 8000842:	801a      	strh	r2, [r3, #0]
	 						if(HAL_CAN_AddTxMessage(&hcan,&Tester_TxHeader,KeySend_TxData,&Tester_TxMailbox) != HAL_OK)
 8000844:	4b35      	ldr	r3, [pc, #212]	; (800091c <main+0x6a4>)
 8000846:	4a31      	ldr	r2, [pc, #196]	; (800090c <main+0x694>)
 8000848:	4935      	ldr	r1, [pc, #212]	; (8000920 <main+0x6a8>)
 800084a:	4836      	ldr	r0, [pc, #216]	; (8000924 <main+0x6ac>)
 800084c:	f000 fe48 	bl	80014e0 <HAL_CAN_AddTxMessage>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d003      	beq.n	800085e <main+0x5e6>
	 							error_flag = 1;
 8000856:	4b34      	ldr	r3, [pc, #208]	; (8000928 <main+0x6b0>)
 8000858:	2201      	movs	r2, #1
 800085a:	701a      	strb	r2, [r3, #0]
 800085c:	e008      	b.n	8000870 <main+0x5f8>
	 								error_flag = 0;
 800085e:	4b32      	ldr	r3, [pc, #200]	; (8000928 <main+0x6b0>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
	 								sequence_num++;
 8000864:	4b27      	ldr	r3, [pc, #156]	; (8000904 <main+0x68c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	3301      	adds	r3, #1
 800086a:	b2da      	uxtb	r2, r3
 800086c:	4b25      	ldr	r3, [pc, #148]	; (8000904 <main+0x68c>)
 800086e:	701a      	strb	r2, [r3, #0]
	 						HAL_Delay(1500); //500ms send once CF#n
 8000870:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000874:	f000 fc08 	bl	8001088 <HAL_Delay>
	 						if(MaxConsecutiveFrame_count < sequence_num) 	//done transmitting - wait for ecu response
 8000878:	e794      	b.n	80007a4 <main+0x52c>
	 						break;
 800087a:	bf00      	nop
	 				break; //break for SEND KEY
 800087c:	e034      	b.n	80008e8 <main+0x670>
	 				if(flag_read_response==1)
 800087e:	4b2b      	ldr	r3, [pc, #172]	; (800092c <main+0x6b4>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d132      	bne.n	80008ec <main+0x674>
	 					FT_String = SF_N_PCI_FrameTypeHandle(Tester_RxData[0]);
 8000886:	4b2a      	ldr	r3, [pc, #168]	; (8000930 <main+0x6b8>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fcc4 	bl	8000218 <SF_N_PCI_FrameTypeHandle>
 8000890:	4603      	mov	r3, r0
 8000892:	461a      	mov	r2, r3
 8000894:	4b27      	ldr	r3, [pc, #156]	; (8000934 <main+0x6bc>)
 8000896:	701a      	strb	r2, [r3, #0]
	 					FrameType = GetFrameType(FT_String);
 8000898:	4b26      	ldr	r3, [pc, #152]	; (8000934 <main+0x6bc>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fc95 	bl	80001cc <GetFrameType>
 80008a2:	4603      	mov	r3, r0
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b24      	ldr	r3, [pc, #144]	; (8000938 <main+0x6c0>)
 80008a8:	701a      	strb	r2, [r3, #0]
	 					if(FrameType == 0) //normal single frame
 80008aa:	4b23      	ldr	r3, [pc, #140]	; (8000938 <main+0x6c0>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d114      	bne.n	80008dc <main+0x664>
	 						if(Tester_RxData[1]==(0x27+0x40)) //positive
 80008b2:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <main+0x6b8>)
 80008b4:	785b      	ldrb	r3, [r3, #1]
 80008b6:	2b67      	cmp	r3, #103	; 0x67
 80008b8:	d106      	bne.n	80008c8 <main+0x650>
	 							security_flag = 1;
 80008ba:	4b20      	ldr	r3, [pc, #128]	; (800093c <main+0x6c4>)
 80008bc:	2201      	movs	r2, #1
 80008be:	701a      	strb	r2, [r3, #0]
	 							tester_state = INIT_STATE;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <main+0x6c8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
 80008c6:	e009      	b.n	80008dc <main+0x664>
	 						} else if(Tester_RxData[1]==0x7F) //negative with invalid key error
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <main+0x6b8>)
 80008ca:	785b      	ldrb	r3, [r3, #1]
 80008cc:	2b7f      	cmp	r3, #127	; 0x7f
 80008ce:	d105      	bne.n	80008dc <main+0x664>
	 							security_flag = 0;
 80008d0:	4b1a      	ldr	r3, [pc, #104]	; (800093c <main+0x6c4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
	 							tester_state = INIT_STATE;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <main+0x6c8>)
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
	 					ReadSingleFrame_handle(); //for debugging purpose
 80008dc:	f7ff fcac 	bl	8000238 <ReadSingleFrame_handle>
	 					flag_read_response = 0;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <main+0x6b4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
	 				break;
 80008e6:	e001      	b.n	80008ec <main+0x674>
	 				break; //break for SEND KEY
 80008e8:	bf00      	nop
 80008ea:	e005      	b.n	80008f8 <main+0x680>
	 				break;
 80008ec:	bf00      	nop
	 		break;
 80008ee:	e003      	b.n	80008f8 <main+0x680>
			break;
 80008f0:	bf00      	nop
 80008f2:	e50e      	b.n	8000312 <main+0x9a>
	 		break;
 80008f4:	bf00      	nop
 80008f6:	e50c      	b.n	8000312 <main+0x9a>
	 		break;
 80008f8:	bf00      	nop
 80008fa:	e50a      	b.n	8000312 <main+0x9a>
	  HAL_Delay(500);
 80008fc:	e509      	b.n	8000312 <main+0x9a>
 80008fe:	bf00      	nop
 8000900:	20000011 	.word	0x20000011
 8000904:	20000012 	.word	0x20000012
 8000908:	200001f1 	.word	0x200001f1
 800090c:	2000018c 	.word	0x2000018c
 8000910:	200001d6 	.word	0x200001d6
 8000914:	200001d4 	.word	0x200001d4
 8000918:	200001f4 	.word	0x200001f4
 800091c:	20000178 	.word	0x20000178
 8000920:	20000144 	.word	0x20000144
 8000924:	2000008c 	.word	0x2000008c
 8000928:	200001cf 	.word	0x200001cf
 800092c:	200001cd 	.word	0x200001cd
 8000930:	2000017c 	.word	0x2000017c
 8000934:	200001cb 	.word	0x200001cb
 8000938:	200001cc 	.word	0x200001cc
 800093c:	200001ce 	.word	0x200001ce
 8000940:	200001f0 	.word	0x200001f0

08000944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b090      	sub	sp, #64	; 0x40
 8000948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094a:	f107 0318 	add.w	r3, r7, #24
 800094e:	2228      	movs	r2, #40	; 0x28
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f003 fbaa 	bl	80040ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000966:	2301      	movs	r3, #1
 8000968:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800096a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800096e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000974:	2301      	movs	r3, #1
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000978:	2302      	movs	r3, #2
 800097a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800097c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000980:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000982:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000986:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000988:	f107 0318 	add.w	r3, r7, #24
 800098c:	4618      	mov	r0, r3
 800098e:	f001 fd3b 	bl	8002408 <HAL_RCC_OscConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000998:	f000 f952 	bl	8000c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099c:	230f      	movs	r3, #15
 800099e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a0:	2302      	movs	r3, #2
 80009a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2102      	movs	r1, #2
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 ffa8 	bl	800290c <HAL_RCC_ClockConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009c2:	f000 f93d 	bl	8000c40 <Error_Handler>
  }
}
 80009c6:	bf00      	nop
 80009c8:	3740      	adds	r7, #64	; 0x40
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80009d4:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <MX_CAN_Init+0x68>)
 80009d6:	4a19      	ldr	r2, [pc, #100]	; (8000a3c <MX_CAN_Init+0x6c>)
 80009d8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80009da:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <MX_CAN_Init+0x68>)
 80009dc:	2204      	movs	r2, #4
 80009de:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <MX_CAN_Init+0x68>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_CAN_Init+0x68>)
 80009e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80009ec:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_CAN_Init+0x68>)
 80009f0:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80009f4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <MX_CAN_Init+0x68>)
 80009f8:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80009fc:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_CAN_Init+0x68>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_CAN_Init+0x68>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <MX_CAN_Init+0x68>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_CAN_Init+0x68>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <MX_CAN_Init+0x68>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_CAN_Init+0x68>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_CAN_Init+0x68>)
 8000a24:	f000 fb54 	bl	80010d0 <HAL_CAN_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000a2e:	f000 f907 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2000008c 	.word	0x2000008c
 8000a3c:	40006400 	.word	0x40006400

08000a40 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a46:	f107 0308 	add.w	r3, r7, #8
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a54:	463b      	mov	r3, r7
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <MX_TIM4_Init+0x94>)
 8000a5e:	4a1e      	ldr	r2, [pc, #120]	; (8000ad8 <MX_TIM4_Init+0x98>)
 8000a60:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8000a62:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <MX_TIM4_Init+0x94>)
 8000a64:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000a68:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_TIM4_Init+0x94>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_TIM4_Init+0x94>)
 8000a72:	2209      	movs	r2, #9
 8000a74:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <MX_TIM4_Init+0x94>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <MX_TIM4_Init+0x94>)
 8000a7e:	2280      	movs	r2, #128	; 0x80
 8000a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a82:	4814      	ldr	r0, [pc, #80]	; (8000ad4 <MX_TIM4_Init+0x94>)
 8000a84:	f002 f8d0 	bl	8002c28 <HAL_TIM_Base_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000a8e:	f000 f8d7 	bl	8000c40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a98:	f107 0308 	add.w	r3, r7, #8
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <MX_TIM4_Init+0x94>)
 8000aa0:	f002 fa6c 	bl	8002f7c <HAL_TIM_ConfigClockSource>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000aaa:	f000 f8c9 	bl	8000c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <MX_TIM4_Init+0x94>)
 8000abc:	f002 fc42 	bl	8003344 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000ac6:	f000 f8bb 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200000b4 	.word	0x200000b4
 8000ad8:	40000800 	.word	0x40000800

08000adc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000ae2:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <MX_USART1_UART_Init+0x50>)
 8000ae4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000ae8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000b14:	f002 fc86 	bl	8003424 <HAL_UART_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b1e:	f000 f88f 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000fc 	.word	0x200000fc
 8000b2c:	40013800 	.word	0x40013800

08000b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b36:	f107 0310 	add.w	r3, r7, #16
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b44:	4b23      	ldr	r3, [pc, #140]	; (8000bd4 <MX_GPIO_Init+0xa4>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a22      	ldr	r2, [pc, #136]	; (8000bd4 <MX_GPIO_Init+0xa4>)
 8000b4a:	f043 0320 	orr.w	r3, r3, #32
 8000b4e:	6193      	str	r3, [r2, #24]
 8000b50:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <MX_GPIO_Init+0xa4>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f003 0320 	and.w	r3, r3, #32
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <MX_GPIO_Init+0xa4>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a1c      	ldr	r2, [pc, #112]	; (8000bd4 <MX_GPIO_Init+0xa4>)
 8000b62:	f043 0308 	orr.w	r3, r3, #8
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <MX_GPIO_Init+0xa4>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f003 0308 	and.w	r3, r3, #8
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <MX_GPIO_Init+0xa4>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a16      	ldr	r2, [pc, #88]	; (8000bd4 <MX_GPIO_Init+0xa4>)
 8000b7a:	f043 0304 	orr.w	r3, r3, #4
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_GPIO_Init+0xa4>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Tester_SecA_LED_GPIO_Port, Tester_SecA_LED_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2108      	movs	r1, #8
 8000b90:	4811      	ldr	r0, [pc, #68]	; (8000bd8 <MX_GPIO_Init+0xa8>)
 8000b92:	f001 fc21 	bl	80023d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8000b96:	2301      	movs	r3, #1
 8000b98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480b      	ldr	r0, [pc, #44]	; (8000bd8 <MX_GPIO_Init+0xa8>)
 8000baa:	f001 fa91 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Tester_SecA_LED_Pin */
  GPIO_InitStruct.Pin = Tester_SecA_LED_Pin;
 8000bae:	2308      	movs	r3, #8
 8000bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Tester_SecA_LED_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 0310 	add.w	r3, r7, #16
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <MX_GPIO_Init+0xa8>)
 8000bc6:	f001 fa83 	bl	80020d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bca:	bf00      	nop
 8000bcc:	3720      	adds	r7, #32
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40010c00 	.word	0x40010c00

08000bdc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //!WARNING: Don't change
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	if(htim == &htim4) //behavior led function timer
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d11d      	bne.n	8000c28 <HAL_TIM_PeriodElapsedCallback+0x4c>
	{
		if(security_flag == 1)
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d119      	bne.n	8000c28 <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			//turn on led
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	2108      	movs	r1, #8
 8000bf8:	480f      	ldr	r0, [pc, #60]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000bfa:	f001 fbed 	bl	80023d8 <HAL_GPIO_WritePin>
//					  }
//					break;
//				  }
//				}
//			} //end while
			if(timer_cnt++==5000)
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	b291      	uxth	r1, r2
 8000c06:	4a0d      	ldr	r2, [pc, #52]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000c08:	8011      	strh	r1, [r2, #0]
 8000c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d10a      	bne.n	8000c28 <HAL_TIM_PeriodElapsedCallback+0x4c>
			{
				//turn off led
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2108      	movs	r1, #8
 8000c16:	4808      	ldr	r0, [pc, #32]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000c18:	f001 fbde 	bl	80023d8 <HAL_GPIO_WritePin>
				security_flag = 0;
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
				//reset timer
				timer_cnt = 0; //reset timer
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	801a      	strh	r2, [r3, #0]
			}
		}
	}
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200000b4 	.word	0x200000b4
 8000c34:	200001ce 	.word	0x200001ce
 8000c38:	40010c00 	.word	0x40010c00
 8000c3c:	200001d2 	.word	0x200001d2

08000c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c44:	b672      	cpsid	i
}
 8000c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <Error_Handler+0x8>
	...

08000c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_MspInit+0x5c>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <HAL_MspInit+0x5c>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6193      	str	r3, [r2, #24]
 8000c5e:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_MspInit+0x5c>)
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <HAL_MspInit+0x5c>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <HAL_MspInit+0x5c>)
 8000c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c74:	61d3      	str	r3, [r2, #28]
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <HAL_MspInit+0x5c>)
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <HAL_MspInit+0x60>)
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <HAL_MspInit+0x60>)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40010000 	.word	0x40010000

08000cb0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a29      	ldr	r2, [pc, #164]	; (8000d70 <HAL_CAN_MspInit+0xc0>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d14b      	bne.n	8000d68 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cd0:	4b28      	ldr	r3, [pc, #160]	; (8000d74 <HAL_CAN_MspInit+0xc4>)
 8000cd2:	69db      	ldr	r3, [r3, #28]
 8000cd4:	4a27      	ldr	r2, [pc, #156]	; (8000d74 <HAL_CAN_MspInit+0xc4>)
 8000cd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cda:	61d3      	str	r3, [r2, #28]
 8000cdc:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <HAL_CAN_MspInit+0xc4>)
 8000cde:	69db      	ldr	r3, [r3, #28]
 8000ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce8:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <HAL_CAN_MspInit+0xc4>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a21      	ldr	r2, [pc, #132]	; (8000d74 <HAL_CAN_MspInit+0xc4>)
 8000cee:	f043 0308 	orr.w	r3, r3, #8
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <HAL_CAN_MspInit+0xc4>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0308 	and.w	r3, r3, #8
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	4818      	ldr	r0, [pc, #96]	; (8000d78 <HAL_CAN_MspInit+0xc8>)
 8000d16:	f001 f9db 	bl	80020d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4812      	ldr	r0, [pc, #72]	; (8000d78 <HAL_CAN_MspInit+0xc8>)
 8000d30:	f001 f9ce 	bl	80020d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_CAN_MspInit+0xcc>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
 8000d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d44:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <HAL_CAN_MspInit+0xcc>)
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2015      	movs	r0, #21
 8000d5e:	f001 f8ce 	bl	8001efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000d62:	2015      	movs	r0, #21
 8000d64:	f001 f8e7 	bl	8001f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d68:	bf00      	nop
 8000d6a:	3728      	adds	r7, #40	; 0x28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40006400 	.word	0x40006400
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010c00 	.word	0x40010c00
 8000d7c:	40010000 	.word	0x40010000

08000d80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <HAL_TIM_Base_MspInit+0x44>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d113      	bne.n	8000dba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d92:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <HAL_TIM_Base_MspInit+0x48>)
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	4a0c      	ldr	r2, [pc, #48]	; (8000dc8 <HAL_TIM_Base_MspInit+0x48>)
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	61d3      	str	r3, [r2, #28]
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <HAL_TIM_Base_MspInit+0x48>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2102      	movs	r1, #2
 8000dae:	201e      	movs	r0, #30
 8000db0:	f001 f8a5 	bl	8001efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000db4:	201e      	movs	r0, #30
 8000db6:	f001 f8be 	bl	8001f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40000800 	.word	0x40000800
 8000dc8:	40021000 	.word	0x40021000

08000dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a20      	ldr	r2, [pc, #128]	; (8000e68 <HAL_UART_MspInit+0x9c>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d139      	bne.n	8000e60 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dec:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <HAL_UART_MspInit+0xa0>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	4a1e      	ldr	r2, [pc, #120]	; (8000e6c <HAL_UART_MspInit+0xa0>)
 8000df2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df6:	6193      	str	r3, [r2, #24]
 8000df8:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <HAL_UART_MspInit+0xa0>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e04:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <HAL_UART_MspInit+0xa0>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	4a18      	ldr	r2, [pc, #96]	; (8000e6c <HAL_UART_MspInit+0xa0>)
 8000e0a:	f043 0304 	orr.w	r3, r3, #4
 8000e0e:	6193      	str	r3, [r2, #24]
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <HAL_UART_MspInit+0xa0>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	f003 0304 	and.w	r3, r3, #4
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 0310 	add.w	r3, r7, #16
 8000e2e:	4619      	mov	r1, r3
 8000e30:	480f      	ldr	r0, [pc, #60]	; (8000e70 <HAL_UART_MspInit+0xa4>)
 8000e32:	f001 f94d 	bl	80020d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4809      	ldr	r0, [pc, #36]	; (8000e70 <HAL_UART_MspInit+0xa4>)
 8000e4c:	f001 f940 	bl	80020d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2100      	movs	r1, #0
 8000e54:	2025      	movs	r0, #37	; 0x25
 8000e56:	f001 f852 	bl	8001efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e5a:	2025      	movs	r0, #37	; 0x25
 8000e5c:	f001 f86b 	bl	8001f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e60:	bf00      	nop
 8000e62:	3720      	adds	r7, #32
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40013800 	.word	0x40013800
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40010800 	.word	0x40010800

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr

08000e9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr

08000eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr

08000eb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eba:	f000 f8c9 	bl	8001050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <CAN1_RX1_IRQHandler+0x10>)
 8000eca:	f000 fd1e 	bl	800190a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2000008c 	.word	0x2000008c

08000ed8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <TIM4_IRQHandler+0x10>)
 8000ede:	f001 ff45 	bl	8002d6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200000b4 	.word	0x200000b4

08000eec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <USART1_IRQHandler+0x10>)
 8000ef2:	f002 fb6b 	bl	80035cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200000fc 	.word	0x200000fc

08000f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f08:	4a14      	ldr	r2, [pc, #80]	; (8000f5c <_sbrk+0x5c>)
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <_sbrk+0x60>)
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <_sbrk+0x64>)
 8000f1e:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <_sbrk+0x68>)
 8000f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d207      	bcs.n	8000f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f30:	f003 f8c4 	bl	80040bc <__errno>
 8000f34:	4603      	mov	r3, r0
 8000f36:	220c      	movs	r2, #12
 8000f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3e:	e009      	b.n	8000f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f46:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <_sbrk+0x64>)
 8000f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f52:	68fb      	ldr	r3, [r7, #12]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20005000 	.word	0x20005000
 8000f60:	00000400 	.word	0x00000400
 8000f64:	20000208 	.word	0x20000208
 8000f68:	20000358 	.word	0x20000358

08000f6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f78:	f7ff fff8 	bl	8000f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f7c:	480b      	ldr	r0, [pc, #44]	; (8000fac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f7e:	490c      	ldr	r1, [pc, #48]	; (8000fb0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f80:	4a0c      	ldr	r2, [pc, #48]	; (8000fb4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f84:	e002      	b.n	8000f8c <LoopCopyDataInit>

08000f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8a:	3304      	adds	r3, #4

08000f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f90:	d3f9      	bcc.n	8000f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f92:	4a09      	ldr	r2, [pc, #36]	; (8000fb8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f94:	4c09      	ldr	r4, [pc, #36]	; (8000fbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f98:	e001      	b.n	8000f9e <LoopFillZerobss>

08000f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f9c:	3204      	adds	r2, #4

08000f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa0:	d3fb      	bcc.n	8000f9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa2:	f003 f891 	bl	80040c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fa6:	f7ff f967 	bl	8000278 <main>
  bx lr
 8000faa:	4770      	bx	lr
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fb4:	08004a54 	.word	0x08004a54
  ldr r2, =_sbss
 8000fb8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fbc:	20000358 	.word	0x20000358

08000fc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC1_2_IRQHandler>
	...

08000fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_Init+0x28>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a07      	ldr	r2, [pc, #28]	; (8000fec <HAL_Init+0x28>)
 8000fce:	f043 0310 	orr.w	r3, r3, #16
 8000fd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f000 ff87 	bl	8001ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fda:	200f      	movs	r0, #15
 8000fdc:	f000 f808 	bl	8000ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe0:	f7ff fe34 	bl	8000c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40022000 	.word	0x40022000

08000ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_InitTick+0x54>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_InitTick+0x58>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001006:	fbb3 f3f1 	udiv	r3, r3, r1
 800100a:	fbb2 f3f3 	udiv	r3, r2, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f000 ff9f 	bl	8001f52 <HAL_SYSTICK_Config>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e00e      	b.n	800103c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b0f      	cmp	r3, #15
 8001022:	d80a      	bhi.n	800103a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001024:	2200      	movs	r2, #0
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	f000 ff67 	bl	8001efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001030:	4a06      	ldr	r2, [pc, #24]	; (800104c <HAL_InitTick+0x5c>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	e000      	b.n	800103c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000014 	.word	0x20000014
 8001048:	2000001c 	.word	0x2000001c
 800104c:	20000018 	.word	0x20000018

08001050 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <HAL_IncTick+0x1c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b05      	ldr	r3, [pc, #20]	; (8001070 <HAL_IncTick+0x20>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	4a03      	ldr	r2, [pc, #12]	; (8001070 <HAL_IncTick+0x20>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	2000001c 	.word	0x2000001c
 8001070:	2000020c 	.word	0x2000020c

08001074 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;
 8001078:	4b02      	ldr	r3, [pc, #8]	; (8001084 <HAL_GetTick+0x10>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	2000020c 	.word	0x2000020c

08001088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001090:	f7ff fff0 	bl	8001074 <HAL_GetTick>
 8001094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a0:	d005      	beq.n	80010ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_Delay+0x44>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ae:	bf00      	nop
 80010b0:	f7ff ffe0 	bl	8001074 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d8f7      	bhi.n	80010b0 <HAL_Delay+0x28>
  {
  }
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2000001c 	.word	0x2000001c

080010d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e0ed      	b.n	80012be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d102      	bne.n	80010f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff fdde 	bl	8000cb0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 0201 	orr.w	r2, r2, #1
 8001102:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001104:	f7ff ffb6 	bl	8001074 <HAL_GetTick>
 8001108:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800110a:	e012      	b.n	8001132 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800110c:	f7ff ffb2 	bl	8001074 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b0a      	cmp	r3, #10
 8001118:	d90b      	bls.n	8001132 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2205      	movs	r2, #5
 800112a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e0c5      	b.n	80012be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0e5      	beq.n	800110c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 0202 	bic.w	r2, r2, #2
 800114e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001150:	f7ff ff90 	bl	8001074 <HAL_GetTick>
 8001154:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001156:	e012      	b.n	800117e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001158:	f7ff ff8c 	bl	8001074 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b0a      	cmp	r3, #10
 8001164:	d90b      	bls.n	800117e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2205      	movs	r2, #5
 8001176:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e09f      	b.n	80012be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1e5      	bne.n	8001158 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7e1b      	ldrb	r3, [r3, #24]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d108      	bne.n	80011a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	e007      	b.n	80011b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7e5b      	ldrb	r3, [r3, #25]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d108      	bne.n	80011d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	e007      	b.n	80011e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	7e9b      	ldrb	r3, [r3, #26]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d108      	bne.n	80011fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f042 0220 	orr.w	r2, r2, #32
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	e007      	b.n	800120a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 0220 	bic.w	r2, r2, #32
 8001208:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	7edb      	ldrb	r3, [r3, #27]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d108      	bne.n	8001224 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f022 0210 	bic.w	r2, r2, #16
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	e007      	b.n	8001234 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 0210 	orr.w	r2, r2, #16
 8001232:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	7f1b      	ldrb	r3, [r3, #28]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d108      	bne.n	800124e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 0208 	orr.w	r2, r2, #8
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	e007      	b.n	800125e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 0208 	bic.w	r2, r2, #8
 800125c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	7f5b      	ldrb	r3, [r3, #29]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d108      	bne.n	8001278 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f042 0204 	orr.w	r2, r2, #4
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	e007      	b.n	8001288 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0204 	bic.w	r2, r2, #4
 8001286:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	431a      	orrs	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	431a      	orrs	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	ea42 0103 	orr.w	r1, r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	1e5a      	subs	r2, r3, #1
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b087      	sub	sp, #28
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012dc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80012de:	7cfb      	ldrb	r3, [r7, #19]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d003      	beq.n	80012ec <HAL_CAN_ConfigFilter+0x26>
 80012e4:	7cfb      	ldrb	r3, [r7, #19]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	f040 80aa 	bne.w	8001440 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012f2:	f043 0201 	orr.w	r2, r3, #1
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	f003 031f 	and.w	r3, r3, #31
 8001304:	2201      	movs	r2, #1
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	43db      	mvns	r3, r3
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d123      	bne.n	800136e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	43db      	mvns	r3, r3
 8001330:	401a      	ands	r2, r3
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001348:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3248      	adds	r2, #72	; 0x48
 800134e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001362:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001364:	6979      	ldr	r1, [r7, #20]
 8001366:	3348      	adds	r3, #72	; 0x48
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	440b      	add	r3, r1
 800136c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d122      	bne.n	80013bc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	431a      	orrs	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001396:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	3248      	adds	r2, #72	; 0x48
 800139c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013b0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013b2:	6979      	ldr	r1, [r7, #20]
 80013b4:	3348      	adds	r3, #72	; 0x48
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	440b      	add	r3, r1
 80013ba:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d109      	bne.n	80013d8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	401a      	ands	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80013d6:	e007      	b.n	80013e8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	431a      	orrs	r2, r3
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d109      	bne.n	8001404 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001402:	e007      	b.n	8001414 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	431a      	orrs	r2, r3
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d107      	bne.n	800142c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	431a      	orrs	r2, r3
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001432:	f023 0201 	bic.w	r2, r3, #1
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	e006      	b.n	800144e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001444:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
  }
}
 800144e:	4618      	mov	r0, r3
 8001450:	371c      	adds	r7, #28
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b01      	cmp	r3, #1
 800146a:	d12e      	bne.n	80014ca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2202      	movs	r2, #2
 8001470:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0201 	bic.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001484:	f7ff fdf6 	bl	8001074 <HAL_GetTick>
 8001488:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800148a:	e012      	b.n	80014b2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800148c:	f7ff fdf2 	bl	8001074 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b0a      	cmp	r3, #10
 8001498:	d90b      	bls.n	80014b2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2205      	movs	r2, #5
 80014aa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e012      	b.n	80014d8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1e5      	bne.n	800148c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	e006      	b.n	80014d8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
  }
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014fe:	7ffb      	ldrb	r3, [r7, #31]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d003      	beq.n	800150c <HAL_CAN_AddTxMessage+0x2c>
 8001504:	7ffb      	ldrb	r3, [r7, #31]
 8001506:	2b02      	cmp	r3, #2
 8001508:	f040 80ad 	bne.w	8001666 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10a      	bne.n	800152c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800151c:	2b00      	cmp	r3, #0
 800151e:	d105      	bne.n	800152c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 8095 	beq.w	8001656 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	0e1b      	lsrs	r3, r3, #24
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001536:	2201      	movs	r2, #1
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	409a      	lsls	r2, r3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d10d      	bne.n	8001564 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001552:	68f9      	ldr	r1, [r7, #12]
 8001554:	6809      	ldr	r1, [r1, #0]
 8001556:	431a      	orrs	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	3318      	adds	r3, #24
 800155c:	011b      	lsls	r3, r3, #4
 800155e:	440b      	add	r3, r1
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	e00f      	b.n	8001584 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800156e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001574:	68f9      	ldr	r1, [r7, #12]
 8001576:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001578:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3318      	adds	r3, #24
 800157e:	011b      	lsls	r3, r3, #4
 8001580:	440b      	add	r3, r1
 8001582:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6819      	ldr	r1, [r3, #0]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	691a      	ldr	r2, [r3, #16]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	3318      	adds	r3, #24
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	440b      	add	r3, r1
 8001594:	3304      	adds	r3, #4
 8001596:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	7d1b      	ldrb	r3, [r3, #20]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d111      	bne.n	80015c4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	3318      	adds	r3, #24
 80015a8:	011b      	lsls	r3, r3, #4
 80015aa:	4413      	add	r3, r2
 80015ac:	3304      	adds	r3, #4
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	6811      	ldr	r1, [r2, #0]
 80015b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	3318      	adds	r3, #24
 80015bc:	011b      	lsls	r3, r3, #4
 80015be:	440b      	add	r3, r1
 80015c0:	3304      	adds	r3, #4
 80015c2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3307      	adds	r3, #7
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	061a      	lsls	r2, r3, #24
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3306      	adds	r3, #6
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	041b      	lsls	r3, r3, #16
 80015d4:	431a      	orrs	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3305      	adds	r3, #5
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	4313      	orrs	r3, r2
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	3204      	adds	r2, #4
 80015e4:	7812      	ldrb	r2, [r2, #0]
 80015e6:	4610      	mov	r0, r2
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	6811      	ldr	r1, [r2, #0]
 80015ec:	ea43 0200 	orr.w	r2, r3, r0
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	440b      	add	r3, r1
 80015f6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80015fa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3303      	adds	r3, #3
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	061a      	lsls	r2, r3, #24
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3302      	adds	r3, #2
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	041b      	lsls	r3, r3, #16
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3301      	adds	r3, #1
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	4313      	orrs	r3, r2
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	7812      	ldrb	r2, [r2, #0]
 800161c:	4610      	mov	r0, r2
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	6811      	ldr	r1, [r2, #0]
 8001622:	ea43 0200 	orr.w	r2, r3, r0
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	440b      	add	r3, r1
 800162c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001630:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	3318      	adds	r3, #24
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	4413      	add	r3, r2
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	6811      	ldr	r1, [r2, #0]
 8001644:	f043 0201 	orr.w	r2, r3, #1
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	3318      	adds	r3, #24
 800164c:	011b      	lsls	r3, r3, #4
 800164e:	440b      	add	r3, r1
 8001650:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	e00e      	b.n	8001674 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e006      	b.n	8001674 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
  }
}
 8001674:	4618      	mov	r0, r3
 8001676:	3724      	adds	r7, #36	; 0x24
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr

0800167e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800167e:	b480      	push	{r7}
 8001680:	b087      	sub	sp, #28
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001692:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001694:	7dfb      	ldrb	r3, [r7, #23]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d003      	beq.n	80016a2 <HAL_CAN_GetRxMessage+0x24>
 800169a:	7dfb      	ldrb	r3, [r7, #23]
 800169c:	2b02      	cmp	r3, #2
 800169e:	f040 8103 	bne.w	80018a8 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10e      	bne.n	80016c6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d116      	bne.n	80016e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e0f7      	b.n	80018b6 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d107      	bne.n	80016e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e0e8      	b.n	80018b6 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	331b      	adds	r3, #27
 80016ec:	011b      	lsls	r3, r3, #4
 80016ee:	4413      	add	r3, r2
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0204 	and.w	r2, r3, #4
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10c      	bne.n	800171c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	331b      	adds	r3, #27
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	4413      	add	r3, r2
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	0d5b      	lsrs	r3, r3, #21
 8001712:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	e00b      	b.n	8001734 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	331b      	adds	r3, #27
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	4413      	add	r3, r2
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	08db      	lsrs	r3, r3, #3
 800172c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	331b      	adds	r3, #27
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	4413      	add	r3, r2
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0202 	and.w	r2, r3, #2
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	331b      	adds	r3, #27
 8001752:	011b      	lsls	r3, r3, #4
 8001754:	4413      	add	r3, r2
 8001756:	3304      	adds	r3, #4
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2208      	movs	r2, #8
 8001766:	611a      	str	r2, [r3, #16]
 8001768:	e00b      	b.n	8001782 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	331b      	adds	r3, #27
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	4413      	add	r3, r2
 8001776:	3304      	adds	r3, #4
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 020f 	and.w	r2, r3, #15
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	331b      	adds	r3, #27
 800178a:	011b      	lsls	r3, r3, #4
 800178c:	4413      	add	r3, r2
 800178e:	3304      	adds	r3, #4
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	0a1b      	lsrs	r3, r3, #8
 8001794:	b2da      	uxtb	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	331b      	adds	r3, #27
 80017a2:	011b      	lsls	r3, r3, #4
 80017a4:	4413      	add	r3, r2
 80017a6:	3304      	adds	r3, #4
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	0c1b      	lsrs	r3, r3, #16
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	4413      	add	r3, r2
 80017bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	4413      	add	r3, r2
 80017d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	0a1a      	lsrs	r2, r3, #8
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	3301      	adds	r3, #1
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	011b      	lsls	r3, r3, #4
 80017ea:	4413      	add	r3, r2
 80017ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	0c1a      	lsrs	r2, r3, #16
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	3302      	adds	r3, #2
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	4413      	add	r3, r2
 8001806:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	0e1a      	lsrs	r2, r3, #24
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	3303      	adds	r3, #3
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	4413      	add	r3, r2
 8001820:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	3304      	adds	r3, #4
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	4413      	add	r3, r2
 8001838:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	0a1a      	lsrs	r2, r3, #8
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	3305      	adds	r3, #5
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	011b      	lsls	r3, r3, #4
 8001850:	4413      	add	r3, r2
 8001852:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	0c1a      	lsrs	r2, r3, #16
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	3306      	adds	r3, #6
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	4413      	add	r3, r2
 800186c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	0e1a      	lsrs	r2, r3, #24
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	3307      	adds	r3, #7
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d108      	bne.n	8001894 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f042 0220 	orr.w	r2, r2, #32
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	e007      	b.n	80018a4 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	691a      	ldr	r2, [r3, #16]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 0220 	orr.w	r2, r2, #32
 80018a2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	e006      	b.n	80018b6 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
  }
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	371c      	adds	r7, #28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d002      	beq.n	80018de <HAL_CAN_ActivateNotification+0x1e>
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d109      	bne.n	80018f2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6959      	ldr	r1, [r3, #20]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	e006      	b.n	8001900 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
  }
}
 8001900:	4618      	mov	r0, r3
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr

0800190a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b08a      	sub	sp, #40	; 0x28
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001946:	6a3b      	ldr	r3, [r7, #32]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d07c      	beq.n	8001a4a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d023      	beq.n	80019a2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2201      	movs	r2, #1
 8001960:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 f983 	bl	8001c78 <HAL_CAN_TxMailbox0CompleteCallback>
 8001972:	e016      	b.n	80019a2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b00      	cmp	r3, #0
 800197c:	d004      	beq.n	8001988 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
 8001986:	e00c      	b.n	80019a2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d004      	beq.n	800199c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
 800199a:	e002      	b.n	80019a2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f986 	bl	8001cae <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d024      	beq.n	80019f6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f962 	bl	8001c8a <HAL_CAN_TxMailbox1CompleteCallback>
 80019c6:	e016      	b.n	80019f6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d004      	beq.n	80019dc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
 80019da:	e00c      	b.n	80019f6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d004      	beq.n	80019f0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
 80019ee:	e002      	b.n	80019f6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f965 	bl	8001cc0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d024      	beq.n	8001a4a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a08:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f941 	bl	8001c9c <HAL_CAN_TxMailbox2CompleteCallback>
 8001a1a:	e016      	b.n	8001a4a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d004      	beq.n	8001a30 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2e:	e00c      	b.n	8001a4a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d004      	beq.n	8001a44 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
 8001a42:	e002      	b.n	8001a4a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 f944 	bl	8001cd2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00c      	beq.n	8001a6e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d007      	beq.n	8001a6e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2210      	movs	r2, #16
 8001a6c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d00b      	beq.n	8001a90 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d006      	beq.n	8001a90 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2208      	movs	r2, #8
 8001a88:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f933 	bl	8001cf6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d009      	beq.n	8001aae <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f91b 	bl	8001ce4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00c      	beq.n	8001ad2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	f003 0310 	and.w	r3, r3, #16
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d007      	beq.n	8001ad2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2210      	movs	r2, #16
 8001ad0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	f003 0320 	and.w	r3, r3, #32
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00b      	beq.n	8001af4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d006      	beq.n	8001af4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2208      	movs	r2, #8
 8001aec:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f90a 	bl	8001d08 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d009      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7fe fb39 	bl	8000184 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00b      	beq.n	8001b34 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d006      	beq.n	8001b34 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2210      	movs	r2, #16
 8001b2c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f8f3 	bl	8001d1a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00b      	beq.n	8001b56 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d006      	beq.n	8001b56 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2208      	movs	r2, #8
 8001b4e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f8eb 	bl	8001d2c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d07b      	beq.n	8001c58 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d072      	beq.n	8001c50 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d008      	beq.n	8001b86 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	f043 0304 	orr.w	r3, r3, #4
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bbe:	6a3b      	ldr	r3, [r7, #32]
 8001bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d043      	beq.n	8001c50 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d03e      	beq.n	8001c50 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bd8:	2b60      	cmp	r3, #96	; 0x60
 8001bda:	d02b      	beq.n	8001c34 <HAL_CAN_IRQHandler+0x32a>
 8001bdc:	2b60      	cmp	r3, #96	; 0x60
 8001bde:	d82e      	bhi.n	8001c3e <HAL_CAN_IRQHandler+0x334>
 8001be0:	2b50      	cmp	r3, #80	; 0x50
 8001be2:	d022      	beq.n	8001c2a <HAL_CAN_IRQHandler+0x320>
 8001be4:	2b50      	cmp	r3, #80	; 0x50
 8001be6:	d82a      	bhi.n	8001c3e <HAL_CAN_IRQHandler+0x334>
 8001be8:	2b40      	cmp	r3, #64	; 0x40
 8001bea:	d019      	beq.n	8001c20 <HAL_CAN_IRQHandler+0x316>
 8001bec:	2b40      	cmp	r3, #64	; 0x40
 8001bee:	d826      	bhi.n	8001c3e <HAL_CAN_IRQHandler+0x334>
 8001bf0:	2b30      	cmp	r3, #48	; 0x30
 8001bf2:	d010      	beq.n	8001c16 <HAL_CAN_IRQHandler+0x30c>
 8001bf4:	2b30      	cmp	r3, #48	; 0x30
 8001bf6:	d822      	bhi.n	8001c3e <HAL_CAN_IRQHandler+0x334>
 8001bf8:	2b10      	cmp	r3, #16
 8001bfa:	d002      	beq.n	8001c02 <HAL_CAN_IRQHandler+0x2f8>
 8001bfc:	2b20      	cmp	r3, #32
 8001bfe:	d005      	beq.n	8001c0c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c00:	e01d      	b.n	8001c3e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	f043 0308 	orr.w	r3, r3, #8
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c0a:	e019      	b.n	8001c40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	f043 0310 	orr.w	r3, r3, #16
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c14:	e014      	b.n	8001c40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	f043 0320 	orr.w	r3, r3, #32
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c1e:	e00f      	b.n	8001c40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c28:	e00a      	b.n	8001c40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c32:	e005      	b.n	8001c40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c3c:	e000      	b.n	8001c40 <HAL_CAN_IRQHandler+0x336>
            break;
 8001c3e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699a      	ldr	r2, [r3, #24]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c4e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2204      	movs	r2, #4
 8001c56:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d008      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f867 	bl	8001d3e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c70:	bf00      	nop
 8001c72:	3728      	adds	r7, #40	; 0x28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr

08001c8a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr

08001cae <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr

08001d1a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr

08001d3e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d82:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	60d3      	str	r3, [r2, #12]
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	f003 0307 	and.w	r3, r3, #7
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	db0b      	blt.n	8001dde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	4906      	ldr	r1, [pc, #24]	; (8001de8 <__NVIC_EnableIRQ+0x34>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	e000e100 	.word	0xe000e100

08001dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	db0a      	blt.n	8001e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	490c      	ldr	r1, [pc, #48]	; (8001e38 <__NVIC_SetPriority+0x4c>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	0112      	lsls	r2, r2, #4
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e14:	e00a      	b.n	8001e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4908      	ldr	r1, [pc, #32]	; (8001e3c <__NVIC_SetPriority+0x50>)
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	3b04      	subs	r3, #4
 8001e24:	0112      	lsls	r2, r2, #4
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	440b      	add	r3, r1
 8001e2a:	761a      	strb	r2, [r3, #24]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000e100 	.word	0xe000e100
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f1c3 0307 	rsb	r3, r3, #7
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	bf28      	it	cs
 8001e5e:	2304      	movcs	r3, #4
 8001e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3304      	adds	r3, #4
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d902      	bls.n	8001e70 <NVIC_EncodePriority+0x30>
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3b03      	subs	r3, #3
 8001e6e:	e000      	b.n	8001e72 <NVIC_EncodePriority+0x32>
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	f04f 32ff 	mov.w	r2, #4294967295
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	401a      	ands	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e88:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	43d9      	mvns	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	4313      	orrs	r3, r2
         );
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3724      	adds	r7, #36	; 0x24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb4:	d301      	bcc.n	8001eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e00f      	b.n	8001eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eba:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <SysTick_Config+0x40>)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec2:	210f      	movs	r1, #15
 8001ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec8:	f7ff ff90 	bl	8001dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <SysTick_Config+0x40>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed2:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <SysTick_Config+0x40>)
 8001ed4:	2207      	movs	r2, #7
 8001ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	e000e010 	.word	0xe000e010

08001ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff ff2d 	bl	8001d50 <__NVIC_SetPriorityGrouping>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b086      	sub	sp, #24
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f10:	f7ff ff42 	bl	8001d98 <__NVIC_GetPriorityGrouping>
 8001f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	6978      	ldr	r0, [r7, #20]
 8001f1c:	f7ff ff90 	bl	8001e40 <NVIC_EncodePriority>
 8001f20:	4602      	mov	r2, r0
 8001f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff5f 	bl	8001dec <__NVIC_SetPriority>
}
 8001f2e:	bf00      	nop
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff35 	bl	8001db4 <__NVIC_EnableIRQ>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ffa2 	bl	8001ea4 <SysTick_Config>
 8001f60:	4603      	mov	r3, r0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b085      	sub	sp, #20
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d008      	beq.n	8001f94 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2204      	movs	r2, #4
 8001f86:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e020      	b.n	8001fd6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 020e 	bic.w	r2, r2, #14
 8001fa2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0201 	bic.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d005      	beq.n	8002004 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	73fb      	strb	r3, [r7, #15]
 8002002:	e051      	b.n	80020a8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 020e 	bic.w	r2, r2, #14
 8002012:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0201 	bic.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a22      	ldr	r2, [pc, #136]	; (80020b4 <HAL_DMA_Abort_IT+0xd4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d029      	beq.n	8002082 <HAL_DMA_Abort_IT+0xa2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a21      	ldr	r2, [pc, #132]	; (80020b8 <HAL_DMA_Abort_IT+0xd8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d022      	beq.n	800207e <HAL_DMA_Abort_IT+0x9e>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a1f      	ldr	r2, [pc, #124]	; (80020bc <HAL_DMA_Abort_IT+0xdc>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d01a      	beq.n	8002078 <HAL_DMA_Abort_IT+0x98>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a1e      	ldr	r2, [pc, #120]	; (80020c0 <HAL_DMA_Abort_IT+0xe0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d012      	beq.n	8002072 <HAL_DMA_Abort_IT+0x92>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a1c      	ldr	r2, [pc, #112]	; (80020c4 <HAL_DMA_Abort_IT+0xe4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00a      	beq.n	800206c <HAL_DMA_Abort_IT+0x8c>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a1b      	ldr	r2, [pc, #108]	; (80020c8 <HAL_DMA_Abort_IT+0xe8>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d102      	bne.n	8002066 <HAL_DMA_Abort_IT+0x86>
 8002060:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002064:	e00e      	b.n	8002084 <HAL_DMA_Abort_IT+0xa4>
 8002066:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800206a:	e00b      	b.n	8002084 <HAL_DMA_Abort_IT+0xa4>
 800206c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002070:	e008      	b.n	8002084 <HAL_DMA_Abort_IT+0xa4>
 8002072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002076:	e005      	b.n	8002084 <HAL_DMA_Abort_IT+0xa4>
 8002078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800207c:	e002      	b.n	8002084 <HAL_DMA_Abort_IT+0xa4>
 800207e:	2310      	movs	r3, #16
 8002080:	e000      	b.n	8002084 <HAL_DMA_Abort_IT+0xa4>
 8002082:	2301      	movs	r3, #1
 8002084:	4a11      	ldr	r2, [pc, #68]	; (80020cc <HAL_DMA_Abort_IT+0xec>)
 8002086:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	4798      	blx	r3
    } 
  }
  return status;
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40020008 	.word	0x40020008
 80020b8:	4002001c 	.word	0x4002001c
 80020bc:	40020030 	.word	0x40020030
 80020c0:	40020044 	.word	0x40020044
 80020c4:	40020058 	.word	0x40020058
 80020c8:	4002006c 	.word	0x4002006c
 80020cc:	40020000 	.word	0x40020000

080020d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b08b      	sub	sp, #44	; 0x2c
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020de:	2300      	movs	r3, #0
 80020e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020e2:	e169      	b.n	80023b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020e4:	2201      	movs	r2, #1
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	f040 8158 	bne.w	80023b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	4a9a      	ldr	r2, [pc, #616]	; (8002370 <HAL_GPIO_Init+0x2a0>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d05e      	beq.n	80021ca <HAL_GPIO_Init+0xfa>
 800210c:	4a98      	ldr	r2, [pc, #608]	; (8002370 <HAL_GPIO_Init+0x2a0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d875      	bhi.n	80021fe <HAL_GPIO_Init+0x12e>
 8002112:	4a98      	ldr	r2, [pc, #608]	; (8002374 <HAL_GPIO_Init+0x2a4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d058      	beq.n	80021ca <HAL_GPIO_Init+0xfa>
 8002118:	4a96      	ldr	r2, [pc, #600]	; (8002374 <HAL_GPIO_Init+0x2a4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d86f      	bhi.n	80021fe <HAL_GPIO_Init+0x12e>
 800211e:	4a96      	ldr	r2, [pc, #600]	; (8002378 <HAL_GPIO_Init+0x2a8>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d052      	beq.n	80021ca <HAL_GPIO_Init+0xfa>
 8002124:	4a94      	ldr	r2, [pc, #592]	; (8002378 <HAL_GPIO_Init+0x2a8>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d869      	bhi.n	80021fe <HAL_GPIO_Init+0x12e>
 800212a:	4a94      	ldr	r2, [pc, #592]	; (800237c <HAL_GPIO_Init+0x2ac>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d04c      	beq.n	80021ca <HAL_GPIO_Init+0xfa>
 8002130:	4a92      	ldr	r2, [pc, #584]	; (800237c <HAL_GPIO_Init+0x2ac>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d863      	bhi.n	80021fe <HAL_GPIO_Init+0x12e>
 8002136:	4a92      	ldr	r2, [pc, #584]	; (8002380 <HAL_GPIO_Init+0x2b0>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d046      	beq.n	80021ca <HAL_GPIO_Init+0xfa>
 800213c:	4a90      	ldr	r2, [pc, #576]	; (8002380 <HAL_GPIO_Init+0x2b0>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d85d      	bhi.n	80021fe <HAL_GPIO_Init+0x12e>
 8002142:	2b12      	cmp	r3, #18
 8002144:	d82a      	bhi.n	800219c <HAL_GPIO_Init+0xcc>
 8002146:	2b12      	cmp	r3, #18
 8002148:	d859      	bhi.n	80021fe <HAL_GPIO_Init+0x12e>
 800214a:	a201      	add	r2, pc, #4	; (adr r2, 8002150 <HAL_GPIO_Init+0x80>)
 800214c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002150:	080021cb 	.word	0x080021cb
 8002154:	080021a5 	.word	0x080021a5
 8002158:	080021b7 	.word	0x080021b7
 800215c:	080021f9 	.word	0x080021f9
 8002160:	080021ff 	.word	0x080021ff
 8002164:	080021ff 	.word	0x080021ff
 8002168:	080021ff 	.word	0x080021ff
 800216c:	080021ff 	.word	0x080021ff
 8002170:	080021ff 	.word	0x080021ff
 8002174:	080021ff 	.word	0x080021ff
 8002178:	080021ff 	.word	0x080021ff
 800217c:	080021ff 	.word	0x080021ff
 8002180:	080021ff 	.word	0x080021ff
 8002184:	080021ff 	.word	0x080021ff
 8002188:	080021ff 	.word	0x080021ff
 800218c:	080021ff 	.word	0x080021ff
 8002190:	080021ff 	.word	0x080021ff
 8002194:	080021ad 	.word	0x080021ad
 8002198:	080021c1 	.word	0x080021c1
 800219c:	4a79      	ldr	r2, [pc, #484]	; (8002384 <HAL_GPIO_Init+0x2b4>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d013      	beq.n	80021ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021a2:	e02c      	b.n	80021fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	623b      	str	r3, [r7, #32]
          break;
 80021aa:	e029      	b.n	8002200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	3304      	adds	r3, #4
 80021b2:	623b      	str	r3, [r7, #32]
          break;
 80021b4:	e024      	b.n	8002200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	3308      	adds	r3, #8
 80021bc:	623b      	str	r3, [r7, #32]
          break;
 80021be:	e01f      	b.n	8002200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	330c      	adds	r3, #12
 80021c6:	623b      	str	r3, [r7, #32]
          break;
 80021c8:	e01a      	b.n	8002200 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d102      	bne.n	80021d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021d2:	2304      	movs	r3, #4
 80021d4:	623b      	str	r3, [r7, #32]
          break;
 80021d6:	e013      	b.n	8002200 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d105      	bne.n	80021ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021e0:	2308      	movs	r3, #8
 80021e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69fa      	ldr	r2, [r7, #28]
 80021e8:	611a      	str	r2, [r3, #16]
          break;
 80021ea:	e009      	b.n	8002200 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021ec:	2308      	movs	r3, #8
 80021ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69fa      	ldr	r2, [r7, #28]
 80021f4:	615a      	str	r2, [r3, #20]
          break;
 80021f6:	e003      	b.n	8002200 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021f8:	2300      	movs	r3, #0
 80021fa:	623b      	str	r3, [r7, #32]
          break;
 80021fc:	e000      	b.n	8002200 <HAL_GPIO_Init+0x130>
          break;
 80021fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	2bff      	cmp	r3, #255	; 0xff
 8002204:	d801      	bhi.n	800220a <HAL_GPIO_Init+0x13a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	e001      	b.n	800220e <HAL_GPIO_Init+0x13e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3304      	adds	r3, #4
 800220e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	2bff      	cmp	r3, #255	; 0xff
 8002214:	d802      	bhi.n	800221c <HAL_GPIO_Init+0x14c>
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	e002      	b.n	8002222 <HAL_GPIO_Init+0x152>
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	3b08      	subs	r3, #8
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	210f      	movs	r1, #15
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	fa01 f303 	lsl.w	r3, r1, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	401a      	ands	r2, r3
 8002234:	6a39      	ldr	r1, [r7, #32]
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	431a      	orrs	r2, r3
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 80b1 	beq.w	80023b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002250:	4b4d      	ldr	r3, [pc, #308]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	4a4c      	ldr	r2, [pc, #304]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	6193      	str	r3, [r2, #24]
 800225c:	4b4a      	ldr	r3, [pc, #296]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002268:	4a48      	ldr	r2, [pc, #288]	; (800238c <HAL_GPIO_Init+0x2bc>)
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	089b      	lsrs	r3, r3, #2
 800226e:	3302      	adds	r3, #2
 8002270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002274:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	220f      	movs	r2, #15
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4013      	ands	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a40      	ldr	r2, [pc, #256]	; (8002390 <HAL_GPIO_Init+0x2c0>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d013      	beq.n	80022bc <HAL_GPIO_Init+0x1ec>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a3f      	ldr	r2, [pc, #252]	; (8002394 <HAL_GPIO_Init+0x2c4>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d00d      	beq.n	80022b8 <HAL_GPIO_Init+0x1e8>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a3e      	ldr	r2, [pc, #248]	; (8002398 <HAL_GPIO_Init+0x2c8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d007      	beq.n	80022b4 <HAL_GPIO_Init+0x1e4>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a3d      	ldr	r2, [pc, #244]	; (800239c <HAL_GPIO_Init+0x2cc>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d101      	bne.n	80022b0 <HAL_GPIO_Init+0x1e0>
 80022ac:	2303      	movs	r3, #3
 80022ae:	e006      	b.n	80022be <HAL_GPIO_Init+0x1ee>
 80022b0:	2304      	movs	r3, #4
 80022b2:	e004      	b.n	80022be <HAL_GPIO_Init+0x1ee>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e002      	b.n	80022be <HAL_GPIO_Init+0x1ee>
 80022b8:	2301      	movs	r3, #1
 80022ba:	e000      	b.n	80022be <HAL_GPIO_Init+0x1ee>
 80022bc:	2300      	movs	r3, #0
 80022be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c0:	f002 0203 	and.w	r2, r2, #3
 80022c4:	0092      	lsls	r2, r2, #2
 80022c6:	4093      	lsls	r3, r2
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022ce:	492f      	ldr	r1, [pc, #188]	; (800238c <HAL_GPIO_Init+0x2bc>)
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	089b      	lsrs	r3, r3, #2
 80022d4:	3302      	adds	r3, #2
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d006      	beq.n	80022f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022e8:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	492c      	ldr	r1, [pc, #176]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	608b      	str	r3, [r1, #8]
 80022f4:	e006      	b.n	8002304 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022f6:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	4928      	ldr	r1, [pc, #160]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 8002300:	4013      	ands	r3, r2
 8002302:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d006      	beq.n	800231e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002310:	4b23      	ldr	r3, [pc, #140]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	4922      	ldr	r1, [pc, #136]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	60cb      	str	r3, [r1, #12]
 800231c:	e006      	b.n	800232c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800231e:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	43db      	mvns	r3, r3
 8002326:	491e      	ldr	r1, [pc, #120]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 8002328:	4013      	ands	r3, r2
 800232a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d006      	beq.n	8002346 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002338:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	4918      	ldr	r1, [pc, #96]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	604b      	str	r3, [r1, #4]
 8002344:	e006      	b.n	8002354 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002346:	4b16      	ldr	r3, [pc, #88]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	43db      	mvns	r3, r3
 800234e:	4914      	ldr	r1, [pc, #80]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 8002350:	4013      	ands	r3, r2
 8002352:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d021      	beq.n	80023a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002360:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	490e      	ldr	r1, [pc, #56]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	600b      	str	r3, [r1, #0]
 800236c:	e021      	b.n	80023b2 <HAL_GPIO_Init+0x2e2>
 800236e:	bf00      	nop
 8002370:	10320000 	.word	0x10320000
 8002374:	10310000 	.word	0x10310000
 8002378:	10220000 	.word	0x10220000
 800237c:	10210000 	.word	0x10210000
 8002380:	10120000 	.word	0x10120000
 8002384:	10110000 	.word	0x10110000
 8002388:	40021000 	.word	0x40021000
 800238c:	40010000 	.word	0x40010000
 8002390:	40010800 	.word	0x40010800
 8002394:	40010c00 	.word	0x40010c00
 8002398:	40011000 	.word	0x40011000
 800239c:	40011400 	.word	0x40011400
 80023a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_GPIO_Init+0x304>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	43db      	mvns	r3, r3
 80023ac:	4909      	ldr	r1, [pc, #36]	; (80023d4 <HAL_GPIO_Init+0x304>)
 80023ae:	4013      	ands	r3, r2
 80023b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	3301      	adds	r3, #1
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	fa22 f303 	lsr.w	r3, r2, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f47f ae8e 	bne.w	80020e4 <HAL_GPIO_Init+0x14>
  }
}
 80023c8:	bf00      	nop
 80023ca:	bf00      	nop
 80023cc:	372c      	adds	r7, #44	; 0x2c
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	40010400 	.word	0x40010400

080023d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	807b      	strh	r3, [r7, #2]
 80023e4:	4613      	mov	r3, r2
 80023e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023e8:	787b      	ldrb	r3, [r7, #1]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ee:	887a      	ldrh	r2, [r7, #2]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023f4:	e003      	b.n	80023fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023f6:	887b      	ldrh	r3, [r7, #2]
 80023f8:	041a      	lsls	r2, r3, #16
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	611a      	str	r2, [r3, #16]
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e272      	b.n	8002900 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 8087 	beq.w	8002536 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002428:	4b92      	ldr	r3, [pc, #584]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	2b04      	cmp	r3, #4
 8002432:	d00c      	beq.n	800244e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002434:	4b8f      	ldr	r3, [pc, #572]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 030c 	and.w	r3, r3, #12
 800243c:	2b08      	cmp	r3, #8
 800243e:	d112      	bne.n	8002466 <HAL_RCC_OscConfig+0x5e>
 8002440:	4b8c      	ldr	r3, [pc, #560]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800244c:	d10b      	bne.n	8002466 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244e:	4b89      	ldr	r3, [pc, #548]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d06c      	beq.n	8002534 <HAL_RCC_OscConfig+0x12c>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d168      	bne.n	8002534 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e24c      	b.n	8002900 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800246e:	d106      	bne.n	800247e <HAL_RCC_OscConfig+0x76>
 8002470:	4b80      	ldr	r3, [pc, #512]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a7f      	ldr	r2, [pc, #508]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 8002476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	e02e      	b.n	80024dc <HAL_RCC_OscConfig+0xd4>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x98>
 8002486:	4b7b      	ldr	r3, [pc, #492]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a7a      	ldr	r2, [pc, #488]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 800248c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	4b78      	ldr	r3, [pc, #480]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a77      	ldr	r2, [pc, #476]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 8002498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	e01d      	b.n	80024dc <HAL_RCC_OscConfig+0xd4>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCC_OscConfig+0xbc>
 80024aa:	4b72      	ldr	r3, [pc, #456]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a71      	ldr	r2, [pc, #452]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	4b6f      	ldr	r3, [pc, #444]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a6e      	ldr	r2, [pc, #440]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	e00b      	b.n	80024dc <HAL_RCC_OscConfig+0xd4>
 80024c4:	4b6b      	ldr	r3, [pc, #428]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a6a      	ldr	r2, [pc, #424]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 80024ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ce:	6013      	str	r3, [r2, #0]
 80024d0:	4b68      	ldr	r3, [pc, #416]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a67      	ldr	r2, [pc, #412]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 80024d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d013      	beq.n	800250c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e4:	f7fe fdc6 	bl	8001074 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ec:	f7fe fdc2 	bl	8001074 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b64      	cmp	r3, #100	; 0x64
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e200      	b.n	8002900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fe:	4b5d      	ldr	r3, [pc, #372]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0xe4>
 800250a:	e014      	b.n	8002536 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7fe fdb2 	bl	8001074 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002514:	f7fe fdae 	bl	8001074 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b64      	cmp	r3, #100	; 0x64
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e1ec      	b.n	8002900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002526:	4b53      	ldr	r3, [pc, #332]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x10c>
 8002532:	e000      	b.n	8002536 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d063      	beq.n	800260a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002542:	4b4c      	ldr	r3, [pc, #304]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00b      	beq.n	8002566 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800254e:	4b49      	ldr	r3, [pc, #292]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b08      	cmp	r3, #8
 8002558:	d11c      	bne.n	8002594 <HAL_RCC_OscConfig+0x18c>
 800255a:	4b46      	ldr	r3, [pc, #280]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d116      	bne.n	8002594 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002566:	4b43      	ldr	r3, [pc, #268]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d005      	beq.n	800257e <HAL_RCC_OscConfig+0x176>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d001      	beq.n	800257e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e1c0      	b.n	8002900 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257e:	4b3d      	ldr	r3, [pc, #244]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4939      	ldr	r1, [pc, #228]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002592:	e03a      	b.n	800260a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d020      	beq.n	80025de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800259c:	4b36      	ldr	r3, [pc, #216]	; (8002678 <HAL_RCC_OscConfig+0x270>)
 800259e:	2201      	movs	r2, #1
 80025a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a2:	f7fe fd67 	bl	8001074 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025aa:	f7fe fd63 	bl	8001074 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e1a1      	b.n	8002900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025bc:	4b2d      	ldr	r3, [pc, #180]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c8:	4b2a      	ldr	r3, [pc, #168]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	4927      	ldr	r1, [pc, #156]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	600b      	str	r3, [r1, #0]
 80025dc:	e015      	b.n	800260a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025de:	4b26      	ldr	r3, [pc, #152]	; (8002678 <HAL_RCC_OscConfig+0x270>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7fe fd46 	bl	8001074 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ec:	f7fe fd42 	bl	8001074 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e180      	b.n	8002900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fe:	4b1d      	ldr	r3, [pc, #116]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d03a      	beq.n	800268c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d019      	beq.n	8002652 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800261e:	4b17      	ldr	r3, [pc, #92]	; (800267c <HAL_RCC_OscConfig+0x274>)
 8002620:	2201      	movs	r2, #1
 8002622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002624:	f7fe fd26 	bl	8001074 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800262c:	f7fe fd22 	bl	8001074 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e160      	b.n	8002900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263e:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <HAL_RCC_OscConfig+0x26c>)
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800264a:	2001      	movs	r0, #1
 800264c:	f000 face 	bl	8002bec <RCC_Delay>
 8002650:	e01c      	b.n	800268c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002652:	4b0a      	ldr	r3, [pc, #40]	; (800267c <HAL_RCC_OscConfig+0x274>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002658:	f7fe fd0c 	bl	8001074 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800265e:	e00f      	b.n	8002680 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002660:	f7fe fd08 	bl	8001074 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d908      	bls.n	8002680 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e146      	b.n	8002900 <HAL_RCC_OscConfig+0x4f8>
 8002672:	bf00      	nop
 8002674:	40021000 	.word	0x40021000
 8002678:	42420000 	.word	0x42420000
 800267c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002680:	4b92      	ldr	r3, [pc, #584]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1e9      	bne.n	8002660 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 80a6 	beq.w	80027e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800269a:	2300      	movs	r3, #0
 800269c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800269e:	4b8b      	ldr	r3, [pc, #556]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10d      	bne.n	80026c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026aa:	4b88      	ldr	r3, [pc, #544]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	4a87      	ldr	r2, [pc, #540]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b4:	61d3      	str	r3, [r2, #28]
 80026b6:	4b85      	ldr	r3, [pc, #532]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c2:	2301      	movs	r3, #1
 80026c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c6:	4b82      	ldr	r3, [pc, #520]	; (80028d0 <HAL_RCC_OscConfig+0x4c8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d118      	bne.n	8002704 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d2:	4b7f      	ldr	r3, [pc, #508]	; (80028d0 <HAL_RCC_OscConfig+0x4c8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a7e      	ldr	r2, [pc, #504]	; (80028d0 <HAL_RCC_OscConfig+0x4c8>)
 80026d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026de:	f7fe fcc9 	bl	8001074 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e6:	f7fe fcc5 	bl	8001074 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b64      	cmp	r3, #100	; 0x64
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e103      	b.n	8002900 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f8:	4b75      	ldr	r3, [pc, #468]	; (80028d0 <HAL_RCC_OscConfig+0x4c8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d106      	bne.n	800271a <HAL_RCC_OscConfig+0x312>
 800270c:	4b6f      	ldr	r3, [pc, #444]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	4a6e      	ldr	r2, [pc, #440]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6213      	str	r3, [r2, #32]
 8002718:	e02d      	b.n	8002776 <HAL_RCC_OscConfig+0x36e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10c      	bne.n	800273c <HAL_RCC_OscConfig+0x334>
 8002722:	4b6a      	ldr	r3, [pc, #424]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	4a69      	ldr	r2, [pc, #420]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 8002728:	f023 0301 	bic.w	r3, r3, #1
 800272c:	6213      	str	r3, [r2, #32]
 800272e:	4b67      	ldr	r3, [pc, #412]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	4a66      	ldr	r2, [pc, #408]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 8002734:	f023 0304 	bic.w	r3, r3, #4
 8002738:	6213      	str	r3, [r2, #32]
 800273a:	e01c      	b.n	8002776 <HAL_RCC_OscConfig+0x36e>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b05      	cmp	r3, #5
 8002742:	d10c      	bne.n	800275e <HAL_RCC_OscConfig+0x356>
 8002744:	4b61      	ldr	r3, [pc, #388]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	4a60      	ldr	r2, [pc, #384]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 800274a:	f043 0304 	orr.w	r3, r3, #4
 800274e:	6213      	str	r3, [r2, #32]
 8002750:	4b5e      	ldr	r3, [pc, #376]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	4a5d      	ldr	r2, [pc, #372]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6213      	str	r3, [r2, #32]
 800275c:	e00b      	b.n	8002776 <HAL_RCC_OscConfig+0x36e>
 800275e:	4b5b      	ldr	r3, [pc, #364]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	4a5a      	ldr	r2, [pc, #360]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 8002764:	f023 0301 	bic.w	r3, r3, #1
 8002768:	6213      	str	r3, [r2, #32]
 800276a:	4b58      	ldr	r3, [pc, #352]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	4a57      	ldr	r2, [pc, #348]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 8002770:	f023 0304 	bic.w	r3, r3, #4
 8002774:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d015      	beq.n	80027aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277e:	f7fe fc79 	bl	8001074 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002784:	e00a      	b.n	800279c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002786:	f7fe fc75 	bl	8001074 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	f241 3288 	movw	r2, #5000	; 0x1388
 8002794:	4293      	cmp	r3, r2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e0b1      	b.n	8002900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279c:	4b4b      	ldr	r3, [pc, #300]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0ee      	beq.n	8002786 <HAL_RCC_OscConfig+0x37e>
 80027a8:	e014      	b.n	80027d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027aa:	f7fe fc63 	bl	8001074 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b0:	e00a      	b.n	80027c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b2:	f7fe fc5f 	bl	8001074 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e09b      	b.n	8002900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c8:	4b40      	ldr	r3, [pc, #256]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1ee      	bne.n	80027b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027d4:	7dfb      	ldrb	r3, [r7, #23]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d105      	bne.n	80027e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027da:	4b3c      	ldr	r3, [pc, #240]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	4a3b      	ldr	r2, [pc, #236]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 80027e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 8087 	beq.w	80028fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027f0:	4b36      	ldr	r3, [pc, #216]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 030c 	and.w	r3, r3, #12
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d061      	beq.n	80028c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d146      	bne.n	8002892 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002804:	4b33      	ldr	r3, [pc, #204]	; (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280a:	f7fe fc33 	bl	8001074 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002812:	f7fe fc2f 	bl	8001074 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e06d      	b.n	8002900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002824:	4b29      	ldr	r3, [pc, #164]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1f0      	bne.n	8002812 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002838:	d108      	bne.n	800284c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800283a:	4b24      	ldr	r3, [pc, #144]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	4921      	ldr	r1, [pc, #132]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 8002848:	4313      	orrs	r3, r2
 800284a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800284c:	4b1f      	ldr	r3, [pc, #124]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a19      	ldr	r1, [r3, #32]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	430b      	orrs	r3, r1
 800285e:	491b      	ldr	r1, [pc, #108]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 8002860:	4313      	orrs	r3, r2
 8002862:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002864:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 8002866:	2201      	movs	r2, #1
 8002868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286a:	f7fe fc03 	bl	8001074 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002872:	f7fe fbff 	bl	8001074 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e03d      	b.n	8002900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0f0      	beq.n	8002872 <HAL_RCC_OscConfig+0x46a>
 8002890:	e035      	b.n	80028fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002892:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <HAL_RCC_OscConfig+0x4cc>)
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7fe fbec 	bl	8001074 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a0:	f7fe fbe8 	bl	8001074 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e026      	b.n	8002900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x498>
 80028be:	e01e      	b.n	80028fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d107      	bne.n	80028d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e019      	b.n	8002900 <HAL_RCC_OscConfig+0x4f8>
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40007000 	.word	0x40007000
 80028d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HAL_RCC_OscConfig+0x500>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d106      	bne.n	80028fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d001      	beq.n	80028fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40021000 	.word	0x40021000

0800290c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0d0      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002920:	4b6a      	ldr	r3, [pc, #424]	; (8002acc <HAL_RCC_ClockConfig+0x1c0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d910      	bls.n	8002950 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b67      	ldr	r3, [pc, #412]	; (8002acc <HAL_RCC_ClockConfig+0x1c0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 0207 	bic.w	r2, r3, #7
 8002936:	4965      	ldr	r1, [pc, #404]	; (8002acc <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	4313      	orrs	r3, r2
 800293c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800293e:	4b63      	ldr	r3, [pc, #396]	; (8002acc <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d001      	beq.n	8002950 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0b8      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d020      	beq.n	800299e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002968:	4b59      	ldr	r3, [pc, #356]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a58      	ldr	r2, [pc, #352]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002972:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002980:	4b53      	ldr	r3, [pc, #332]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	4a52      	ldr	r2, [pc, #328]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8002986:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800298a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800298c:	4b50      	ldr	r3, [pc, #320]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	494d      	ldr	r1, [pc, #308]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d040      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d107      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b2:	4b47      	ldr	r3, [pc, #284]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d115      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e07f      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d107      	bne.n	80029da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ca:	4b41      	ldr	r3, [pc, #260]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d109      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e073      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029da:	4b3d      	ldr	r3, [pc, #244]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e06b      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ea:	4b39      	ldr	r3, [pc, #228]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f023 0203 	bic.w	r2, r3, #3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4936      	ldr	r1, [pc, #216]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029fc:	f7fe fb3a 	bl	8001074 <HAL_GetTick>
 8002a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a02:	e00a      	b.n	8002a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a04:	f7fe fb36 	bl	8001074 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e053      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1a:	4b2d      	ldr	r3, [pc, #180]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 020c 	and.w	r2, r3, #12
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d1eb      	bne.n	8002a04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b27      	ldr	r3, [pc, #156]	; (8002acc <HAL_RCC_ClockConfig+0x1c0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d210      	bcs.n	8002a5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b24      	ldr	r3, [pc, #144]	; (8002acc <HAL_RCC_ClockConfig+0x1c0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 0207 	bic.w	r2, r3, #7
 8002a42:	4922      	ldr	r1, [pc, #136]	; (8002acc <HAL_RCC_ClockConfig+0x1c0>)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4a:	4b20      	ldr	r3, [pc, #128]	; (8002acc <HAL_RCC_ClockConfig+0x1c0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d001      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e032      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d008      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a68:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4916      	ldr	r1, [pc, #88]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d009      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a86:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	490e      	ldr	r1, [pc, #56]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a9a:	f000 f821 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	490a      	ldr	r1, [pc, #40]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8002aac:	5ccb      	ldrb	r3, [r1, r3]
 8002aae:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab2:	4a09      	ldr	r2, [pc, #36]	; (8002ad8 <HAL_RCC_ClockConfig+0x1cc>)
 8002ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ab6:	4b09      	ldr	r3, [pc, #36]	; (8002adc <HAL_RCC_ClockConfig+0x1d0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fa98 	bl	8000ff0 <HAL_InitTick>

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40022000 	.word	0x40022000
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	080049ec 	.word	0x080049ec
 8002ad8:	20000014 	.word	0x20000014
 8002adc:	20000018 	.word	0x20000018

08002ae0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	2300      	movs	r3, #0
 8002af4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002afa:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x94>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d002      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0x30>
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d003      	beq.n	8002b16 <HAL_RCC_GetSysClockFreq+0x36>
 8002b0e:	e027      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b10:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b12:	613b      	str	r3, [r7, #16]
      break;
 8002b14:	e027      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	0c9b      	lsrs	r3, r3, #18
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	4a17      	ldr	r2, [pc, #92]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b20:	5cd3      	ldrb	r3, [r2, r3]
 8002b22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d010      	beq.n	8002b50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	0c5b      	lsrs	r3, r3, #17
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	4a11      	ldr	r2, [pc, #68]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b3a:	5cd3      	ldrb	r3, [r2, r3]
 8002b3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a0d      	ldr	r2, [pc, #52]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b42:	fb03 f202 	mul.w	r2, r3, r2
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	e004      	b.n	8002b5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a0c      	ldr	r2, [pc, #48]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b54:	fb02 f303 	mul.w	r3, r2, r3
 8002b58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	613b      	str	r3, [r7, #16]
      break;
 8002b5e:	e002      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b60:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b62:	613b      	str	r3, [r7, #16]
      break;
 8002b64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b66:	693b      	ldr	r3, [r7, #16]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	371c      	adds	r7, #28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40021000 	.word	0x40021000
 8002b78:	007a1200 	.word	0x007a1200
 8002b7c:	08004a04 	.word	0x08004a04
 8002b80:	08004a14 	.word	0x08004a14
 8002b84:	003d0900 	.word	0x003d0900

08002b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b8c:	4b02      	ldr	r3, [pc, #8]	; (8002b98 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr
 8002b98:	20000014 	.word	0x20000014

08002b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ba0:	f7ff fff2 	bl	8002b88 <HAL_RCC_GetHCLKFreq>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	0a1b      	lsrs	r3, r3, #8
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	4903      	ldr	r1, [pc, #12]	; (8002bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bb2:	5ccb      	ldrb	r3, [r1, r3]
 8002bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	080049fc 	.word	0x080049fc

08002bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bc8:	f7ff ffde 	bl	8002b88 <HAL_RCC_GetHCLKFreq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	0adb      	lsrs	r3, r3, #11
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	4903      	ldr	r1, [pc, #12]	; (8002be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bda:	5ccb      	ldrb	r3, [r1, r3]
 8002bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40021000 	.word	0x40021000
 8002be8:	080049fc 	.word	0x080049fc

08002bec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bf4:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <RCC_Delay+0x34>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a0a      	ldr	r2, [pc, #40]	; (8002c24 <RCC_Delay+0x38>)
 8002bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfe:	0a5b      	lsrs	r3, r3, #9
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	fb02 f303 	mul.w	r3, r2, r3
 8002c06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c08:	bf00      	nop
  }
  while (Delay --);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1e5a      	subs	r2, r3, #1
 8002c0e:	60fa      	str	r2, [r7, #12]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f9      	bne.n	8002c08 <RCC_Delay+0x1c>
}
 8002c14:	bf00      	nop
 8002c16:	bf00      	nop
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr
 8002c20:	20000014 	.word	0x20000014
 8002c24:	10624dd3 	.word	0x10624dd3

08002c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e041      	b.n	8002cbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d106      	bne.n	8002c54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7fe f896 	bl	8000d80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3304      	adds	r3, #4
 8002c64:	4619      	mov	r1, r3
 8002c66:	4610      	mov	r0, r2
 8002c68:	f000 fa74 	bl	8003154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d001      	beq.n	8002ce0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e03a      	b.n	8002d56 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a18      	ldr	r2, [pc, #96]	; (8002d60 <HAL_TIM_Base_Start_IT+0x98>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00e      	beq.n	8002d20 <HAL_TIM_Base_Start_IT+0x58>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d0a:	d009      	beq.n	8002d20 <HAL_TIM_Base_Start_IT+0x58>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a14      	ldr	r2, [pc, #80]	; (8002d64 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d004      	beq.n	8002d20 <HAL_TIM_Base_Start_IT+0x58>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a13      	ldr	r2, [pc, #76]	; (8002d68 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d111      	bne.n	8002d44 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2b06      	cmp	r3, #6
 8002d30:	d010      	beq.n	8002d54 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f042 0201 	orr.w	r2, r2, #1
 8002d40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d42:	e007      	b.n	8002d54 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0201 	orr.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr
 8002d60:	40012c00 	.word	0x40012c00
 8002d64:	40000400 	.word	0x40000400
 8002d68:	40000800 	.word	0x40000800

08002d6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d122      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d11b      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0202 	mvn.w	r2, #2
 8002d98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f9b4 	bl	800311c <HAL_TIM_IC_CaptureCallback>
 8002db4:	e005      	b.n	8002dc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f9a7 	bl	800310a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f9b6 	bl	800312e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d122      	bne.n	8002e1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b04      	cmp	r3, #4
 8002de2:	d11b      	bne.n	8002e1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0204 	mvn.w	r2, #4
 8002dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2202      	movs	r2, #2
 8002df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f98a 	bl	800311c <HAL_TIM_IC_CaptureCallback>
 8002e08:	e005      	b.n	8002e16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f97d 	bl	800310a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f98c 	bl	800312e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d122      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d11b      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f06f 0208 	mvn.w	r2, #8
 8002e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2204      	movs	r2, #4
 8002e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f960 	bl	800311c <HAL_TIM_IC_CaptureCallback>
 8002e5c:	e005      	b.n	8002e6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f953 	bl	800310a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f962 	bl	800312e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f003 0310 	and.w	r3, r3, #16
 8002e7a:	2b10      	cmp	r3, #16
 8002e7c:	d122      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0310 	and.w	r3, r3, #16
 8002e88:	2b10      	cmp	r3, #16
 8002e8a:	d11b      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f06f 0210 	mvn.w	r2, #16
 8002e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2208      	movs	r2, #8
 8002e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f936 	bl	800311c <HAL_TIM_IC_CaptureCallback>
 8002eb0:	e005      	b.n	8002ebe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f929 	bl	800310a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f938 	bl	800312e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d10e      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d107      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 0201 	mvn.w	r2, #1
 8002ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7fd fe76 	bl	8000bdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efa:	2b80      	cmp	r3, #128	; 0x80
 8002efc:	d10e      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f08:	2b80      	cmp	r3, #128	; 0x80
 8002f0a:	d107      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 fa7b 	bl	8003412 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f26:	2b40      	cmp	r3, #64	; 0x40
 8002f28:	d10e      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f34:	2b40      	cmp	r3, #64	; 0x40
 8002f36:	d107      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f8fc 	bl	8003140 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0320 	and.w	r3, r3, #32
 8002f52:	2b20      	cmp	r3, #32
 8002f54:	d10e      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0320 	and.w	r3, r3, #32
 8002f60:	2b20      	cmp	r3, #32
 8002f62:	d107      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0220 	mvn.w	r2, #32
 8002f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fa46 	bl	8003400 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f74:	bf00      	nop
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_TIM_ConfigClockSource+0x1c>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e0b4      	b.n	8003102 <HAL_TIM_ConfigClockSource+0x186>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd0:	d03e      	beq.n	8003050 <HAL_TIM_ConfigClockSource+0xd4>
 8002fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd6:	f200 8087 	bhi.w	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fde:	f000 8086 	beq.w	80030ee <HAL_TIM_ConfigClockSource+0x172>
 8002fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe6:	d87f      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe8:	2b70      	cmp	r3, #112	; 0x70
 8002fea:	d01a      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0xa6>
 8002fec:	2b70      	cmp	r3, #112	; 0x70
 8002fee:	d87b      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff0:	2b60      	cmp	r3, #96	; 0x60
 8002ff2:	d050      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0x11a>
 8002ff4:	2b60      	cmp	r3, #96	; 0x60
 8002ff6:	d877      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff8:	2b50      	cmp	r3, #80	; 0x50
 8002ffa:	d03c      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0xfa>
 8002ffc:	2b50      	cmp	r3, #80	; 0x50
 8002ffe:	d873      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003000:	2b40      	cmp	r3, #64	; 0x40
 8003002:	d058      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x13a>
 8003004:	2b40      	cmp	r3, #64	; 0x40
 8003006:	d86f      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003008:	2b30      	cmp	r3, #48	; 0x30
 800300a:	d064      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x15a>
 800300c:	2b30      	cmp	r3, #48	; 0x30
 800300e:	d86b      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003010:	2b20      	cmp	r3, #32
 8003012:	d060      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x15a>
 8003014:	2b20      	cmp	r3, #32
 8003016:	d867      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003018:	2b00      	cmp	r3, #0
 800301a:	d05c      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x15a>
 800301c:	2b10      	cmp	r3, #16
 800301e:	d05a      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x15a>
 8003020:	e062      	b.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003032:	f000 f968 	bl	8003306 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003044:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	609a      	str	r2, [r3, #8]
      break;
 800304e:	e04f      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003060:	f000 f951 	bl	8003306 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003072:	609a      	str	r2, [r3, #8]
      break;
 8003074:	e03c      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003082:	461a      	mov	r2, r3
 8003084:	f000 f8c8 	bl	8003218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2150      	movs	r1, #80	; 0x50
 800308e:	4618      	mov	r0, r3
 8003090:	f000 f91f 	bl	80032d2 <TIM_ITRx_SetConfig>
      break;
 8003094:	e02c      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030a2:	461a      	mov	r2, r3
 80030a4:	f000 f8e6 	bl	8003274 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2160      	movs	r1, #96	; 0x60
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 f90f 	bl	80032d2 <TIM_ITRx_SetConfig>
      break;
 80030b4:	e01c      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030c2:	461a      	mov	r2, r3
 80030c4:	f000 f8a8 	bl	8003218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2140      	movs	r1, #64	; 0x40
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 f8ff 	bl	80032d2 <TIM_ITRx_SetConfig>
      break;
 80030d4:	e00c      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4619      	mov	r1, r3
 80030e0:	4610      	mov	r0, r2
 80030e2:	f000 f8f6 	bl	80032d2 <TIM_ITRx_SetConfig>
      break;
 80030e6:	e003      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      break;
 80030ec:	e000      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003100:	7bfb      	ldrb	r3, [r7, #15]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr

0800311c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr

0800312e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr

08003140 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr
	...

08003154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a29      	ldr	r2, [pc, #164]	; (800320c <TIM_Base_SetConfig+0xb8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d00b      	beq.n	8003184 <TIM_Base_SetConfig+0x30>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003172:	d007      	beq.n	8003184 <TIM_Base_SetConfig+0x30>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a26      	ldr	r2, [pc, #152]	; (8003210 <TIM_Base_SetConfig+0xbc>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d003      	beq.n	8003184 <TIM_Base_SetConfig+0x30>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a25      	ldr	r2, [pc, #148]	; (8003214 <TIM_Base_SetConfig+0xc0>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d108      	bne.n	8003196 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a1c      	ldr	r2, [pc, #112]	; (800320c <TIM_Base_SetConfig+0xb8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d00b      	beq.n	80031b6 <TIM_Base_SetConfig+0x62>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a4:	d007      	beq.n	80031b6 <TIM_Base_SetConfig+0x62>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a19      	ldr	r2, [pc, #100]	; (8003210 <TIM_Base_SetConfig+0xbc>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d003      	beq.n	80031b6 <TIM_Base_SetConfig+0x62>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a18      	ldr	r2, [pc, #96]	; (8003214 <TIM_Base_SetConfig+0xc0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d108      	bne.n	80031c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a07      	ldr	r2, [pc, #28]	; (800320c <TIM_Base_SetConfig+0xb8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d103      	bne.n	80031fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	615a      	str	r2, [r3, #20]
}
 8003202:	bf00      	nop
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr
 800320c:	40012c00 	.word	0x40012c00
 8003210:	40000400 	.word	0x40000400
 8003214:	40000800 	.word	0x40000800

08003218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003218:	b480      	push	{r7}
 800321a:	b087      	sub	sp, #28
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	f023 0201 	bic.w	r2, r3, #1
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f023 030a 	bic.w	r3, r3, #10
 8003254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	621a      	str	r2, [r3, #32]
}
 800326a:	bf00      	nop
 800326c:	371c      	adds	r7, #28
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	f023 0210 	bic.w	r2, r3, #16
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800329e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	031b      	lsls	r3, r3, #12
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	621a      	str	r2, [r3, #32]
}
 80032c8:	bf00      	nop
 80032ca:	371c      	adds	r7, #28
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr

080032d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b085      	sub	sp, #20
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	f043 0307 	orr.w	r3, r3, #7
 80032f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	609a      	str	r2, [r3, #8]
}
 80032fc:	bf00      	nop
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr

08003306 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003306:	b480      	push	{r7}
 8003308:	b087      	sub	sp, #28
 800330a:	af00      	add	r7, sp, #0
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003320:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	021a      	lsls	r2, r3, #8
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	431a      	orrs	r2, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	4313      	orrs	r3, r2
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	609a      	str	r2, [r3, #8]
}
 800333a:	bf00      	nop
 800333c:	371c      	adds	r7, #28
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr

08003344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003358:	2302      	movs	r3, #2
 800335a:	e046      	b.n	80033ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a16      	ldr	r2, [pc, #88]	; (80033f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d00e      	beq.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a8:	d009      	beq.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a12      	ldr	r2, [pc, #72]	; (80033f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d004      	beq.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a10      	ldr	r2, [pc, #64]	; (80033fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d10c      	bne.n	80033d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr
 80033f4:	40012c00 	.word	0x40012c00
 80033f8:	40000400 	.word	0x40000400
 80033fc:	40000800 	.word	0x40000800

08003400 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr

08003412 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e042      	b.n	80034bc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7fd fcbe 	bl	8000dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2224      	movs	r2, #36	; 0x24
 8003454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003466:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 fd71 	bl	8003f50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800347c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695a      	ldr	r2, [r3, #20]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800348c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800349c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08a      	sub	sp, #40	; 0x28
 80034c8:	af02      	add	r7, sp, #8
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	603b      	str	r3, [r7, #0]
 80034d0:	4613      	mov	r3, r2
 80034d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b20      	cmp	r3, #32
 80034e2:	d16d      	bne.n	80035c0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <HAL_UART_Transmit+0x2c>
 80034ea:	88fb      	ldrh	r3, [r7, #6]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e066      	b.n	80035c2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2221      	movs	r2, #33	; 0x21
 80034fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003502:	f7fd fdb7 	bl	8001074 <HAL_GetTick>
 8003506:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	88fa      	ldrh	r2, [r7, #6]
 800350c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	88fa      	ldrh	r2, [r7, #6]
 8003512:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800351c:	d108      	bne.n	8003530 <HAL_UART_Transmit+0x6c>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d104      	bne.n	8003530 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003526:	2300      	movs	r3, #0
 8003528:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	61bb      	str	r3, [r7, #24]
 800352e:	e003      	b.n	8003538 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003534:	2300      	movs	r3, #0
 8003536:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003538:	e02a      	b.n	8003590 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2200      	movs	r2, #0
 8003542:	2180      	movs	r1, #128	; 0x80
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 faf9 	bl	8003b3c <UART_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e036      	b.n	80035c2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10b      	bne.n	8003572 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003568:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	3302      	adds	r3, #2
 800356e:	61bb      	str	r3, [r7, #24]
 8003570:	e007      	b.n	8003582 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	781a      	ldrb	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	3301      	adds	r3, #1
 8003580:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1cf      	bne.n	800353a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2200      	movs	r2, #0
 80035a2:	2140      	movs	r1, #64	; 0x40
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 fac9 	bl	8003b3c <UART_WaitOnFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e006      	b.n	80035c2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	e000      	b.n	80035c2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80035c0:	2302      	movs	r3, #2
  }
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3720      	adds	r7, #32
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b0ba      	sub	sp, #232	; 0xe8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800360a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10f      	bne.n	8003632 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	2b00      	cmp	r3, #0
 800361c:	d009      	beq.n	8003632 <HAL_UART_IRQHandler+0x66>
 800361e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fbd1 	bl	8003dd2 <UART_Receive_IT>
      return;
 8003630:	e25b      	b.n	8003aea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003632:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 80de 	beq.w	80037f8 <HAL_UART_IRQHandler+0x22c>
 800363c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d106      	bne.n	8003656 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800364c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 80d1 	beq.w	80037f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00b      	beq.n	800367a <HAL_UART_IRQHandler+0xae>
 8003662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003672:	f043 0201 	orr.w	r2, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800367a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00b      	beq.n	800369e <HAL_UART_IRQHandler+0xd2>
 8003686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d005      	beq.n	800369e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	f043 0202 	orr.w	r2, r3, #2
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800369e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00b      	beq.n	80036c2 <HAL_UART_IRQHandler+0xf6>
 80036aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	f043 0204 	orr.w	r2, r3, #4
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d011      	beq.n	80036f2 <HAL_UART_IRQHandler+0x126>
 80036ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d105      	bne.n	80036e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d005      	beq.n	80036f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ea:	f043 0208 	orr.w	r2, r3, #8
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 81f2 	beq.w	8003ae0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_UART_IRQHandler+0x14e>
 8003708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 fb5c 	bl	8003dd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003724:	2b00      	cmp	r3, #0
 8003726:	bf14      	ite	ne
 8003728:	2301      	movne	r3, #1
 800372a:	2300      	moveq	r3, #0
 800372c:	b2db      	uxtb	r3, r3
 800372e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d103      	bne.n	8003746 <HAL_UART_IRQHandler+0x17a>
 800373e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003742:	2b00      	cmp	r3, #0
 8003744:	d04f      	beq.n	80037e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fa66 	bl	8003c18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003756:	2b00      	cmp	r3, #0
 8003758:	d041      	beq.n	80037de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3314      	adds	r3, #20
 8003760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003764:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003768:	e853 3f00 	ldrex	r3, [r3]
 800376c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003770:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3314      	adds	r3, #20
 8003782:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003786:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800378a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003792:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003796:	e841 2300 	strex	r3, r2, [r1]
 800379a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800379e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1d9      	bne.n	800375a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d013      	beq.n	80037d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b2:	4a7e      	ldr	r2, [pc, #504]	; (80039ac <HAL_UART_IRQHandler+0x3e0>)
 80037b4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fe fc10 	bl	8001fe0 <HAL_DMA_Abort_IT>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d016      	beq.n	80037f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037d0:	4610      	mov	r0, r2
 80037d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d4:	e00e      	b.n	80037f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f99c 	bl	8003b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037dc:	e00a      	b.n	80037f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f998 	bl	8003b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e4:	e006      	b.n	80037f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f994 	bl	8003b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80037f2:	e175      	b.n	8003ae0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f4:	bf00      	nop
    return;
 80037f6:	e173      	b.n	8003ae0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	f040 814f 	bne.w	8003aa0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003806:	f003 0310 	and.w	r3, r3, #16
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 8148 	beq.w	8003aa0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003814:	f003 0310 	and.w	r3, r3, #16
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 8141 	beq.w	8003aa0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800381e:	2300      	movs	r3, #0
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 80b6 	beq.w	80039b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003850:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 8145 	beq.w	8003ae4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800385e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003862:	429a      	cmp	r2, r3
 8003864:	f080 813e 	bcs.w	8003ae4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800386e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	2b20      	cmp	r3, #32
 8003878:	f000 8088 	beq.w	800398c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	330c      	adds	r3, #12
 8003882:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003886:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800388a:	e853 3f00 	ldrex	r3, [r3]
 800388e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003892:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003896:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800389a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	330c      	adds	r3, #12
 80038a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80038a8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80038b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038b8:	e841 2300 	strex	r3, r2, [r1]
 80038bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80038c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1d9      	bne.n	800387c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3314      	adds	r3, #20
 80038ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038d2:	e853 3f00 	ldrex	r3, [r3]
 80038d6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80038d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038da:	f023 0301 	bic.w	r3, r3, #1
 80038de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	3314      	adds	r3, #20
 80038e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038ec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80038f8:	e841 2300 	strex	r3, r2, [r1]
 80038fc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e1      	bne.n	80038c8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	3314      	adds	r3, #20
 800390a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800390e:	e853 3f00 	ldrex	r3, [r3]
 8003912:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003916:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800391a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3314      	adds	r3, #20
 8003924:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003928:	66fa      	str	r2, [r7, #108]	; 0x6c
 800392a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800392e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003930:	e841 2300 	strex	r3, r2, [r1]
 8003934:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003936:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1e3      	bne.n	8003904 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	330c      	adds	r3, #12
 8003950:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003954:	e853 3f00 	ldrex	r3, [r3]
 8003958:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800395a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800395c:	f023 0310 	bic.w	r3, r3, #16
 8003960:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	330c      	adds	r3, #12
 800396a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800396e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003970:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003972:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003974:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003976:	e841 2300 	strex	r3, r2, [r1]
 800397a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800397c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1e3      	bne.n	800394a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe faef 	bl	8001f6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800399a:	b29b      	uxth	r3, r3
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	b29b      	uxth	r3, r3
 80039a0:	4619      	mov	r1, r3
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f8bf 	bl	8003b26 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039a8:	e09c      	b.n	8003ae4 <HAL_UART_IRQHandler+0x518>
 80039aa:	bf00      	nop
 80039ac:	08003cdd 	.word	0x08003cdd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 808e 	beq.w	8003ae8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80039cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 8089 	beq.w	8003ae8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	330c      	adds	r3, #12
 80039dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e0:	e853 3f00 	ldrex	r3, [r3]
 80039e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	330c      	adds	r3, #12
 80039f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80039fa:	647a      	str	r2, [r7, #68]	; 0x44
 80039fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a02:	e841 2300 	strex	r3, r2, [r1]
 8003a06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1e3      	bne.n	80039d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3314      	adds	r3, #20
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	e853 3f00 	ldrex	r3, [r3]
 8003a1c:	623b      	str	r3, [r7, #32]
   return(result);
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	f023 0301 	bic.w	r3, r3, #1
 8003a24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	3314      	adds	r3, #20
 8003a2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a32:	633a      	str	r2, [r7, #48]	; 0x30
 8003a34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a3a:	e841 2300 	strex	r3, r2, [r1]
 8003a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1e3      	bne.n	8003a0e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	330c      	adds	r3, #12
 8003a5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
 8003a62:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0310 	bic.w	r3, r3, #16
 8003a6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	330c      	adds	r3, #12
 8003a74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a78:	61fa      	str	r2, [r7, #28]
 8003a7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7c:	69b9      	ldr	r1, [r7, #24]
 8003a7e:	69fa      	ldr	r2, [r7, #28]
 8003a80:	e841 2300 	strex	r3, r2, [r1]
 8003a84:	617b      	str	r3, [r7, #20]
   return(result);
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e3      	bne.n	8003a54 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a96:	4619      	mov	r1, r3
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f844 	bl	8003b26 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a9e:	e023      	b.n	8003ae8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d009      	beq.n	8003ac0 <HAL_UART_IRQHandler+0x4f4>
 8003aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f923 	bl	8003d04 <UART_Transmit_IT>
    return;
 8003abe:	e014      	b.n	8003aea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00e      	beq.n	8003aea <HAL_UART_IRQHandler+0x51e>
 8003acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f962 	bl	8003da2 <UART_EndTransmit_IT>
    return;
 8003ade:	e004      	b.n	8003aea <HAL_UART_IRQHandler+0x51e>
    return;
 8003ae0:	bf00      	nop
 8003ae2:	e002      	b.n	8003aea <HAL_UART_IRQHandler+0x51e>
      return;
 8003ae4:	bf00      	nop
 8003ae6:	e000      	b.n	8003aea <HAL_UART_IRQHandler+0x51e>
      return;
 8003ae8:	bf00      	nop
  }
}
 8003aea:	37e8      	adds	r7, #232	; 0xe8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr

08003b02 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr

08003b14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bc80      	pop	{r7}
 8003b24:	4770      	bx	lr

08003b26 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	460b      	mov	r3, r1
 8003b30:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr

08003b3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b090      	sub	sp, #64	; 0x40
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b4c:	e050      	b.n	8003bf0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d04c      	beq.n	8003bf0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d007      	beq.n	8003b6c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b5c:	f7fd fa8a 	bl	8001074 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d241      	bcs.n	8003bf0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	330c      	adds	r3, #12
 8003b72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b76:	e853 3f00 	ldrex	r3, [r3]
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	330c      	adds	r3, #12
 8003b8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b8c:	637a      	str	r2, [r7, #52]	; 0x34
 8003b8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b94:	e841 2300 	strex	r3, r2, [r1]
 8003b98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e5      	bne.n	8003b6c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3314      	adds	r3, #20
 8003ba6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	e853 3f00 	ldrex	r3, [r3]
 8003bae:	613b      	str	r3, [r7, #16]
   return(result);
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f023 0301 	bic.w	r3, r3, #1
 8003bb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3314      	adds	r3, #20
 8003bbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bc0:	623a      	str	r2, [r7, #32]
 8003bc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc4:	69f9      	ldr	r1, [r7, #28]
 8003bc6:	6a3a      	ldr	r2, [r7, #32]
 8003bc8:	e841 2300 	strex	r3, r2, [r1]
 8003bcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e5      	bne.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e00f      	b.n	8003c10 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	461a      	mov	r2, r3
 8003c08:	79fb      	ldrb	r3, [r7, #7]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d09f      	beq.n	8003b4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3740      	adds	r7, #64	; 0x40
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b095      	sub	sp, #84	; 0x54
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	330c      	adds	r3, #12
 8003c26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c2a:	e853 3f00 	ldrex	r3, [r3]
 8003c2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c40:	643a      	str	r2, [r7, #64]	; 0x40
 8003c42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c48:	e841 2300 	strex	r3, r2, [r1]
 8003c4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e5      	bne.n	8003c20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3314      	adds	r3, #20
 8003c5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	e853 3f00 	ldrex	r3, [r3]
 8003c62:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f023 0301 	bic.w	r3, r3, #1
 8003c6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3314      	adds	r3, #20
 8003c72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c7c:	e841 2300 	strex	r3, r2, [r1]
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e5      	bne.n	8003c54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d119      	bne.n	8003cc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	330c      	adds	r3, #12
 8003c96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	e853 3f00 	ldrex	r3, [r3]
 8003c9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f023 0310 	bic.w	r3, r3, #16
 8003ca6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	330c      	adds	r3, #12
 8003cae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cb0:	61ba      	str	r2, [r7, #24]
 8003cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb4:	6979      	ldr	r1, [r7, #20]
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	e841 2300 	strex	r3, r2, [r1]
 8003cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1e5      	bne.n	8003c90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003cd2:	bf00      	nop
 8003cd4:	3754      	adds	r7, #84	; 0x54
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr

08003cdc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f7ff ff0c 	bl	8003b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cfc:	bf00      	nop
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b21      	cmp	r3, #33	; 0x21
 8003d16:	d13e      	bne.n	8003d96 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d20:	d114      	bne.n	8003d4c <UART_Transmit_IT+0x48>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d110      	bne.n	8003d4c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d3e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	1c9a      	adds	r2, r3, #2
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	621a      	str	r2, [r3, #32]
 8003d4a:	e008      	b.n	8003d5e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	1c59      	adds	r1, r3, #1
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6211      	str	r1, [r2, #32]
 8003d56:	781a      	ldrb	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10f      	bne.n	8003d92 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	e000      	b.n	8003d98 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d96:	2302      	movs	r3, #2
  }
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bc80      	pop	{r7}
 8003da0:	4770      	bx	lr

08003da2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b082      	sub	sp, #8
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003db8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7ff fe94 	bl	8003af0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b08c      	sub	sp, #48	; 0x30
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b22      	cmp	r3, #34	; 0x22
 8003de4:	f040 80ae 	bne.w	8003f44 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df0:	d117      	bne.n	8003e22 <UART_Receive_IT+0x50>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d113      	bne.n	8003e22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1a:	1c9a      	adds	r2, r3, #2
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	629a      	str	r2, [r3, #40]	; 0x28
 8003e20:	e026      	b.n	8003e70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e34:	d007      	beq.n	8003e46 <UART_Receive_IT+0x74>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10a      	bne.n	8003e54 <UART_Receive_IT+0x82>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d106      	bne.n	8003e54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e50:	701a      	strb	r2, [r3, #0]
 8003e52:	e008      	b.n	8003e66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d15d      	bne.n	8003f40 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0220 	bic.w	r2, r2, #32
 8003e92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ea2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695a      	ldr	r2, [r3, #20]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0201 	bic.w	r2, r2, #1
 8003eb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d135      	bne.n	8003f36 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	330c      	adds	r3, #12
 8003ed6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	e853 3f00 	ldrex	r3, [r3]
 8003ede:	613b      	str	r3, [r7, #16]
   return(result);
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f023 0310 	bic.w	r3, r3, #16
 8003ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	330c      	adds	r3, #12
 8003eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef0:	623a      	str	r2, [r7, #32]
 8003ef2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef4:	69f9      	ldr	r1, [r7, #28]
 8003ef6:	6a3a      	ldr	r2, [r7, #32]
 8003ef8:	e841 2300 	strex	r3, r2, [r1]
 8003efc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e5      	bne.n	8003ed0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0310 	and.w	r3, r3, #16
 8003f0e:	2b10      	cmp	r3, #16
 8003f10:	d10a      	bne.n	8003f28 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7ff fdf9 	bl	8003b26 <HAL_UARTEx_RxEventCallback>
 8003f34:	e002      	b.n	8003f3c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff fde3 	bl	8003b02 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	e002      	b.n	8003f46 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003f40:	2300      	movs	r3, #0
 8003f42:	e000      	b.n	8003f46 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003f44:	2302      	movs	r3, #2
  }
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3730      	adds	r7, #48	; 0x30
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f8a:	f023 030c 	bic.w	r3, r3, #12
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6812      	ldr	r2, [r2, #0]
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	430b      	orrs	r3, r1
 8003f96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699a      	ldr	r2, [r3, #24]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a2c      	ldr	r2, [pc, #176]	; (8004064 <UART_SetConfig+0x114>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d103      	bne.n	8003fc0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003fb8:	f7fe fe04 	bl	8002bc4 <HAL_RCC_GetPCLK2Freq>
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	e002      	b.n	8003fc6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003fc0:	f7fe fdec 	bl	8002b9c <HAL_RCC_GetPCLK1Freq>
 8003fc4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	009a      	lsls	r2, r3, #2
 8003fd0:	441a      	add	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fdc:	4a22      	ldr	r2, [pc, #136]	; (8004068 <UART_SetConfig+0x118>)
 8003fde:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe2:	095b      	lsrs	r3, r3, #5
 8003fe4:	0119      	lsls	r1, r3, #4
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	009a      	lsls	r2, r3, #2
 8003ff0:	441a      	add	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ffc:	4b1a      	ldr	r3, [pc, #104]	; (8004068 <UART_SetConfig+0x118>)
 8003ffe:	fba3 0302 	umull	r0, r3, r3, r2
 8004002:	095b      	lsrs	r3, r3, #5
 8004004:	2064      	movs	r0, #100	; 0x64
 8004006:	fb00 f303 	mul.w	r3, r0, r3
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	3332      	adds	r3, #50	; 0x32
 8004010:	4a15      	ldr	r2, [pc, #84]	; (8004068 <UART_SetConfig+0x118>)
 8004012:	fba2 2303 	umull	r2, r3, r2, r3
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800401c:	4419      	add	r1, r3
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	4613      	mov	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	009a      	lsls	r2, r3, #2
 8004028:	441a      	add	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	fbb2 f2f3 	udiv	r2, r2, r3
 8004034:	4b0c      	ldr	r3, [pc, #48]	; (8004068 <UART_SetConfig+0x118>)
 8004036:	fba3 0302 	umull	r0, r3, r3, r2
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	2064      	movs	r0, #100	; 0x64
 800403e:	fb00 f303 	mul.w	r3, r0, r3
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	3332      	adds	r3, #50	; 0x32
 8004048:	4a07      	ldr	r2, [pc, #28]	; (8004068 <UART_SetConfig+0x118>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	f003 020f 	and.w	r2, r3, #15
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	440a      	add	r2, r1
 800405a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800405c:	bf00      	nop
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40013800 	.word	0x40013800
 8004068:	51eb851f 	.word	0x51eb851f

0800406c <siprintf>:
 800406c:	b40e      	push	{r1, r2, r3}
 800406e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004072:	b500      	push	{lr}
 8004074:	b09c      	sub	sp, #112	; 0x70
 8004076:	ab1d      	add	r3, sp, #116	; 0x74
 8004078:	9002      	str	r0, [sp, #8]
 800407a:	9006      	str	r0, [sp, #24]
 800407c:	9107      	str	r1, [sp, #28]
 800407e:	9104      	str	r1, [sp, #16]
 8004080:	4808      	ldr	r0, [pc, #32]	; (80040a4 <siprintf+0x38>)
 8004082:	4909      	ldr	r1, [pc, #36]	; (80040a8 <siprintf+0x3c>)
 8004084:	f853 2b04 	ldr.w	r2, [r3], #4
 8004088:	9105      	str	r1, [sp, #20]
 800408a:	6800      	ldr	r0, [r0, #0]
 800408c:	a902      	add	r1, sp, #8
 800408e:	9301      	str	r3, [sp, #4]
 8004090:	f000 f98e 	bl	80043b0 <_svfiprintf_r>
 8004094:	2200      	movs	r2, #0
 8004096:	9b02      	ldr	r3, [sp, #8]
 8004098:	701a      	strb	r2, [r3, #0]
 800409a:	b01c      	add	sp, #112	; 0x70
 800409c:	f85d eb04 	ldr.w	lr, [sp], #4
 80040a0:	b003      	add	sp, #12
 80040a2:	4770      	bx	lr
 80040a4:	2000006c 	.word	0x2000006c
 80040a8:	ffff0208 	.word	0xffff0208

080040ac <memset>:
 80040ac:	4603      	mov	r3, r0
 80040ae:	4402      	add	r2, r0
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d100      	bne.n	80040b6 <memset+0xa>
 80040b4:	4770      	bx	lr
 80040b6:	f803 1b01 	strb.w	r1, [r3], #1
 80040ba:	e7f9      	b.n	80040b0 <memset+0x4>

080040bc <__errno>:
 80040bc:	4b01      	ldr	r3, [pc, #4]	; (80040c4 <__errno+0x8>)
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	2000006c 	.word	0x2000006c

080040c8 <__libc_init_array>:
 80040c8:	b570      	push	{r4, r5, r6, lr}
 80040ca:	2600      	movs	r6, #0
 80040cc:	4d0c      	ldr	r5, [pc, #48]	; (8004100 <__libc_init_array+0x38>)
 80040ce:	4c0d      	ldr	r4, [pc, #52]	; (8004104 <__libc_init_array+0x3c>)
 80040d0:	1b64      	subs	r4, r4, r5
 80040d2:	10a4      	asrs	r4, r4, #2
 80040d4:	42a6      	cmp	r6, r4
 80040d6:	d109      	bne.n	80040ec <__libc_init_array+0x24>
 80040d8:	f000 fc7a 	bl	80049d0 <_init>
 80040dc:	2600      	movs	r6, #0
 80040de:	4d0a      	ldr	r5, [pc, #40]	; (8004108 <__libc_init_array+0x40>)
 80040e0:	4c0a      	ldr	r4, [pc, #40]	; (800410c <__libc_init_array+0x44>)
 80040e2:	1b64      	subs	r4, r4, r5
 80040e4:	10a4      	asrs	r4, r4, #2
 80040e6:	42a6      	cmp	r6, r4
 80040e8:	d105      	bne.n	80040f6 <__libc_init_array+0x2e>
 80040ea:	bd70      	pop	{r4, r5, r6, pc}
 80040ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80040f0:	4798      	blx	r3
 80040f2:	3601      	adds	r6, #1
 80040f4:	e7ee      	b.n	80040d4 <__libc_init_array+0xc>
 80040f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040fa:	4798      	blx	r3
 80040fc:	3601      	adds	r6, #1
 80040fe:	e7f2      	b.n	80040e6 <__libc_init_array+0x1e>
 8004100:	08004a4c 	.word	0x08004a4c
 8004104:	08004a4c 	.word	0x08004a4c
 8004108:	08004a4c 	.word	0x08004a4c
 800410c:	08004a50 	.word	0x08004a50

08004110 <__retarget_lock_acquire_recursive>:
 8004110:	4770      	bx	lr

08004112 <__retarget_lock_release_recursive>:
 8004112:	4770      	bx	lr

08004114 <_free_r>:
 8004114:	b538      	push	{r3, r4, r5, lr}
 8004116:	4605      	mov	r5, r0
 8004118:	2900      	cmp	r1, #0
 800411a:	d040      	beq.n	800419e <_free_r+0x8a>
 800411c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004120:	1f0c      	subs	r4, r1, #4
 8004122:	2b00      	cmp	r3, #0
 8004124:	bfb8      	it	lt
 8004126:	18e4      	addlt	r4, r4, r3
 8004128:	f000 f8dc 	bl	80042e4 <__malloc_lock>
 800412c:	4a1c      	ldr	r2, [pc, #112]	; (80041a0 <_free_r+0x8c>)
 800412e:	6813      	ldr	r3, [r2, #0]
 8004130:	b933      	cbnz	r3, 8004140 <_free_r+0x2c>
 8004132:	6063      	str	r3, [r4, #4]
 8004134:	6014      	str	r4, [r2, #0]
 8004136:	4628      	mov	r0, r5
 8004138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800413c:	f000 b8d8 	b.w	80042f0 <__malloc_unlock>
 8004140:	42a3      	cmp	r3, r4
 8004142:	d908      	bls.n	8004156 <_free_r+0x42>
 8004144:	6820      	ldr	r0, [r4, #0]
 8004146:	1821      	adds	r1, r4, r0
 8004148:	428b      	cmp	r3, r1
 800414a:	bf01      	itttt	eq
 800414c:	6819      	ldreq	r1, [r3, #0]
 800414e:	685b      	ldreq	r3, [r3, #4]
 8004150:	1809      	addeq	r1, r1, r0
 8004152:	6021      	streq	r1, [r4, #0]
 8004154:	e7ed      	b.n	8004132 <_free_r+0x1e>
 8004156:	461a      	mov	r2, r3
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	b10b      	cbz	r3, 8004160 <_free_r+0x4c>
 800415c:	42a3      	cmp	r3, r4
 800415e:	d9fa      	bls.n	8004156 <_free_r+0x42>
 8004160:	6811      	ldr	r1, [r2, #0]
 8004162:	1850      	adds	r0, r2, r1
 8004164:	42a0      	cmp	r0, r4
 8004166:	d10b      	bne.n	8004180 <_free_r+0x6c>
 8004168:	6820      	ldr	r0, [r4, #0]
 800416a:	4401      	add	r1, r0
 800416c:	1850      	adds	r0, r2, r1
 800416e:	4283      	cmp	r3, r0
 8004170:	6011      	str	r1, [r2, #0]
 8004172:	d1e0      	bne.n	8004136 <_free_r+0x22>
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4408      	add	r0, r1
 800417a:	6010      	str	r0, [r2, #0]
 800417c:	6053      	str	r3, [r2, #4]
 800417e:	e7da      	b.n	8004136 <_free_r+0x22>
 8004180:	d902      	bls.n	8004188 <_free_r+0x74>
 8004182:	230c      	movs	r3, #12
 8004184:	602b      	str	r3, [r5, #0]
 8004186:	e7d6      	b.n	8004136 <_free_r+0x22>
 8004188:	6820      	ldr	r0, [r4, #0]
 800418a:	1821      	adds	r1, r4, r0
 800418c:	428b      	cmp	r3, r1
 800418e:	bf01      	itttt	eq
 8004190:	6819      	ldreq	r1, [r3, #0]
 8004192:	685b      	ldreq	r3, [r3, #4]
 8004194:	1809      	addeq	r1, r1, r0
 8004196:	6021      	streq	r1, [r4, #0]
 8004198:	6063      	str	r3, [r4, #4]
 800419a:	6054      	str	r4, [r2, #4]
 800419c:	e7cb      	b.n	8004136 <_free_r+0x22>
 800419e:	bd38      	pop	{r3, r4, r5, pc}
 80041a0:	20000350 	.word	0x20000350

080041a4 <sbrk_aligned>:
 80041a4:	b570      	push	{r4, r5, r6, lr}
 80041a6:	4e0e      	ldr	r6, [pc, #56]	; (80041e0 <sbrk_aligned+0x3c>)
 80041a8:	460c      	mov	r4, r1
 80041aa:	6831      	ldr	r1, [r6, #0]
 80041ac:	4605      	mov	r5, r0
 80041ae:	b911      	cbnz	r1, 80041b6 <sbrk_aligned+0x12>
 80041b0:	f000 fbaa 	bl	8004908 <_sbrk_r>
 80041b4:	6030      	str	r0, [r6, #0]
 80041b6:	4621      	mov	r1, r4
 80041b8:	4628      	mov	r0, r5
 80041ba:	f000 fba5 	bl	8004908 <_sbrk_r>
 80041be:	1c43      	adds	r3, r0, #1
 80041c0:	d00a      	beq.n	80041d8 <sbrk_aligned+0x34>
 80041c2:	1cc4      	adds	r4, r0, #3
 80041c4:	f024 0403 	bic.w	r4, r4, #3
 80041c8:	42a0      	cmp	r0, r4
 80041ca:	d007      	beq.n	80041dc <sbrk_aligned+0x38>
 80041cc:	1a21      	subs	r1, r4, r0
 80041ce:	4628      	mov	r0, r5
 80041d0:	f000 fb9a 	bl	8004908 <_sbrk_r>
 80041d4:	3001      	adds	r0, #1
 80041d6:	d101      	bne.n	80041dc <sbrk_aligned+0x38>
 80041d8:	f04f 34ff 	mov.w	r4, #4294967295
 80041dc:	4620      	mov	r0, r4
 80041de:	bd70      	pop	{r4, r5, r6, pc}
 80041e0:	20000354 	.word	0x20000354

080041e4 <_malloc_r>:
 80041e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041e8:	1ccd      	adds	r5, r1, #3
 80041ea:	f025 0503 	bic.w	r5, r5, #3
 80041ee:	3508      	adds	r5, #8
 80041f0:	2d0c      	cmp	r5, #12
 80041f2:	bf38      	it	cc
 80041f4:	250c      	movcc	r5, #12
 80041f6:	2d00      	cmp	r5, #0
 80041f8:	4607      	mov	r7, r0
 80041fa:	db01      	blt.n	8004200 <_malloc_r+0x1c>
 80041fc:	42a9      	cmp	r1, r5
 80041fe:	d905      	bls.n	800420c <_malloc_r+0x28>
 8004200:	230c      	movs	r3, #12
 8004202:	2600      	movs	r6, #0
 8004204:	603b      	str	r3, [r7, #0]
 8004206:	4630      	mov	r0, r6
 8004208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800420c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80042e0 <_malloc_r+0xfc>
 8004210:	f000 f868 	bl	80042e4 <__malloc_lock>
 8004214:	f8d8 3000 	ldr.w	r3, [r8]
 8004218:	461c      	mov	r4, r3
 800421a:	bb5c      	cbnz	r4, 8004274 <_malloc_r+0x90>
 800421c:	4629      	mov	r1, r5
 800421e:	4638      	mov	r0, r7
 8004220:	f7ff ffc0 	bl	80041a4 <sbrk_aligned>
 8004224:	1c43      	adds	r3, r0, #1
 8004226:	4604      	mov	r4, r0
 8004228:	d155      	bne.n	80042d6 <_malloc_r+0xf2>
 800422a:	f8d8 4000 	ldr.w	r4, [r8]
 800422e:	4626      	mov	r6, r4
 8004230:	2e00      	cmp	r6, #0
 8004232:	d145      	bne.n	80042c0 <_malloc_r+0xdc>
 8004234:	2c00      	cmp	r4, #0
 8004236:	d048      	beq.n	80042ca <_malloc_r+0xe6>
 8004238:	6823      	ldr	r3, [r4, #0]
 800423a:	4631      	mov	r1, r6
 800423c:	4638      	mov	r0, r7
 800423e:	eb04 0903 	add.w	r9, r4, r3
 8004242:	f000 fb61 	bl	8004908 <_sbrk_r>
 8004246:	4581      	cmp	r9, r0
 8004248:	d13f      	bne.n	80042ca <_malloc_r+0xe6>
 800424a:	6821      	ldr	r1, [r4, #0]
 800424c:	4638      	mov	r0, r7
 800424e:	1a6d      	subs	r5, r5, r1
 8004250:	4629      	mov	r1, r5
 8004252:	f7ff ffa7 	bl	80041a4 <sbrk_aligned>
 8004256:	3001      	adds	r0, #1
 8004258:	d037      	beq.n	80042ca <_malloc_r+0xe6>
 800425a:	6823      	ldr	r3, [r4, #0]
 800425c:	442b      	add	r3, r5
 800425e:	6023      	str	r3, [r4, #0]
 8004260:	f8d8 3000 	ldr.w	r3, [r8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d038      	beq.n	80042da <_malloc_r+0xf6>
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	42a2      	cmp	r2, r4
 800426c:	d12b      	bne.n	80042c6 <_malloc_r+0xe2>
 800426e:	2200      	movs	r2, #0
 8004270:	605a      	str	r2, [r3, #4]
 8004272:	e00f      	b.n	8004294 <_malloc_r+0xb0>
 8004274:	6822      	ldr	r2, [r4, #0]
 8004276:	1b52      	subs	r2, r2, r5
 8004278:	d41f      	bmi.n	80042ba <_malloc_r+0xd6>
 800427a:	2a0b      	cmp	r2, #11
 800427c:	d917      	bls.n	80042ae <_malloc_r+0xca>
 800427e:	1961      	adds	r1, r4, r5
 8004280:	42a3      	cmp	r3, r4
 8004282:	6025      	str	r5, [r4, #0]
 8004284:	bf18      	it	ne
 8004286:	6059      	strne	r1, [r3, #4]
 8004288:	6863      	ldr	r3, [r4, #4]
 800428a:	bf08      	it	eq
 800428c:	f8c8 1000 	streq.w	r1, [r8]
 8004290:	5162      	str	r2, [r4, r5]
 8004292:	604b      	str	r3, [r1, #4]
 8004294:	4638      	mov	r0, r7
 8004296:	f104 060b 	add.w	r6, r4, #11
 800429a:	f000 f829 	bl	80042f0 <__malloc_unlock>
 800429e:	f026 0607 	bic.w	r6, r6, #7
 80042a2:	1d23      	adds	r3, r4, #4
 80042a4:	1af2      	subs	r2, r6, r3
 80042a6:	d0ae      	beq.n	8004206 <_malloc_r+0x22>
 80042a8:	1b9b      	subs	r3, r3, r6
 80042aa:	50a3      	str	r3, [r4, r2]
 80042ac:	e7ab      	b.n	8004206 <_malloc_r+0x22>
 80042ae:	42a3      	cmp	r3, r4
 80042b0:	6862      	ldr	r2, [r4, #4]
 80042b2:	d1dd      	bne.n	8004270 <_malloc_r+0x8c>
 80042b4:	f8c8 2000 	str.w	r2, [r8]
 80042b8:	e7ec      	b.n	8004294 <_malloc_r+0xb0>
 80042ba:	4623      	mov	r3, r4
 80042bc:	6864      	ldr	r4, [r4, #4]
 80042be:	e7ac      	b.n	800421a <_malloc_r+0x36>
 80042c0:	4634      	mov	r4, r6
 80042c2:	6876      	ldr	r6, [r6, #4]
 80042c4:	e7b4      	b.n	8004230 <_malloc_r+0x4c>
 80042c6:	4613      	mov	r3, r2
 80042c8:	e7cc      	b.n	8004264 <_malloc_r+0x80>
 80042ca:	230c      	movs	r3, #12
 80042cc:	4638      	mov	r0, r7
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	f000 f80e 	bl	80042f0 <__malloc_unlock>
 80042d4:	e797      	b.n	8004206 <_malloc_r+0x22>
 80042d6:	6025      	str	r5, [r4, #0]
 80042d8:	e7dc      	b.n	8004294 <_malloc_r+0xb0>
 80042da:	605b      	str	r3, [r3, #4]
 80042dc:	deff      	udf	#255	; 0xff
 80042de:	bf00      	nop
 80042e0:	20000350 	.word	0x20000350

080042e4 <__malloc_lock>:
 80042e4:	4801      	ldr	r0, [pc, #4]	; (80042ec <__malloc_lock+0x8>)
 80042e6:	f7ff bf13 	b.w	8004110 <__retarget_lock_acquire_recursive>
 80042ea:	bf00      	nop
 80042ec:	2000034c 	.word	0x2000034c

080042f0 <__malloc_unlock>:
 80042f0:	4801      	ldr	r0, [pc, #4]	; (80042f8 <__malloc_unlock+0x8>)
 80042f2:	f7ff bf0e 	b.w	8004112 <__retarget_lock_release_recursive>
 80042f6:	bf00      	nop
 80042f8:	2000034c 	.word	0x2000034c

080042fc <__ssputs_r>:
 80042fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004300:	461f      	mov	r7, r3
 8004302:	688e      	ldr	r6, [r1, #8]
 8004304:	4682      	mov	sl, r0
 8004306:	42be      	cmp	r6, r7
 8004308:	460c      	mov	r4, r1
 800430a:	4690      	mov	r8, r2
 800430c:	680b      	ldr	r3, [r1, #0]
 800430e:	d82c      	bhi.n	800436a <__ssputs_r+0x6e>
 8004310:	898a      	ldrh	r2, [r1, #12]
 8004312:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004316:	d026      	beq.n	8004366 <__ssputs_r+0x6a>
 8004318:	6965      	ldr	r5, [r4, #20]
 800431a:	6909      	ldr	r1, [r1, #16]
 800431c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004320:	eba3 0901 	sub.w	r9, r3, r1
 8004324:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004328:	1c7b      	adds	r3, r7, #1
 800432a:	444b      	add	r3, r9
 800432c:	106d      	asrs	r5, r5, #1
 800432e:	429d      	cmp	r5, r3
 8004330:	bf38      	it	cc
 8004332:	461d      	movcc	r5, r3
 8004334:	0553      	lsls	r3, r2, #21
 8004336:	d527      	bpl.n	8004388 <__ssputs_r+0x8c>
 8004338:	4629      	mov	r1, r5
 800433a:	f7ff ff53 	bl	80041e4 <_malloc_r>
 800433e:	4606      	mov	r6, r0
 8004340:	b360      	cbz	r0, 800439c <__ssputs_r+0xa0>
 8004342:	464a      	mov	r2, r9
 8004344:	6921      	ldr	r1, [r4, #16]
 8004346:	f000 fafd 	bl	8004944 <memcpy>
 800434a:	89a3      	ldrh	r3, [r4, #12]
 800434c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004354:	81a3      	strh	r3, [r4, #12]
 8004356:	6126      	str	r6, [r4, #16]
 8004358:	444e      	add	r6, r9
 800435a:	6026      	str	r6, [r4, #0]
 800435c:	463e      	mov	r6, r7
 800435e:	6165      	str	r5, [r4, #20]
 8004360:	eba5 0509 	sub.w	r5, r5, r9
 8004364:	60a5      	str	r5, [r4, #8]
 8004366:	42be      	cmp	r6, r7
 8004368:	d900      	bls.n	800436c <__ssputs_r+0x70>
 800436a:	463e      	mov	r6, r7
 800436c:	4632      	mov	r2, r6
 800436e:	4641      	mov	r1, r8
 8004370:	6820      	ldr	r0, [r4, #0]
 8004372:	f000 faaf 	bl	80048d4 <memmove>
 8004376:	2000      	movs	r0, #0
 8004378:	68a3      	ldr	r3, [r4, #8]
 800437a:	1b9b      	subs	r3, r3, r6
 800437c:	60a3      	str	r3, [r4, #8]
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	4433      	add	r3, r6
 8004382:	6023      	str	r3, [r4, #0]
 8004384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004388:	462a      	mov	r2, r5
 800438a:	f000 fae9 	bl	8004960 <_realloc_r>
 800438e:	4606      	mov	r6, r0
 8004390:	2800      	cmp	r0, #0
 8004392:	d1e0      	bne.n	8004356 <__ssputs_r+0x5a>
 8004394:	4650      	mov	r0, sl
 8004396:	6921      	ldr	r1, [r4, #16]
 8004398:	f7ff febc 	bl	8004114 <_free_r>
 800439c:	230c      	movs	r3, #12
 800439e:	f8ca 3000 	str.w	r3, [sl]
 80043a2:	89a3      	ldrh	r3, [r4, #12]
 80043a4:	f04f 30ff 	mov.w	r0, #4294967295
 80043a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043ac:	81a3      	strh	r3, [r4, #12]
 80043ae:	e7e9      	b.n	8004384 <__ssputs_r+0x88>

080043b0 <_svfiprintf_r>:
 80043b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043b4:	4698      	mov	r8, r3
 80043b6:	898b      	ldrh	r3, [r1, #12]
 80043b8:	4607      	mov	r7, r0
 80043ba:	061b      	lsls	r3, r3, #24
 80043bc:	460d      	mov	r5, r1
 80043be:	4614      	mov	r4, r2
 80043c0:	b09d      	sub	sp, #116	; 0x74
 80043c2:	d50e      	bpl.n	80043e2 <_svfiprintf_r+0x32>
 80043c4:	690b      	ldr	r3, [r1, #16]
 80043c6:	b963      	cbnz	r3, 80043e2 <_svfiprintf_r+0x32>
 80043c8:	2140      	movs	r1, #64	; 0x40
 80043ca:	f7ff ff0b 	bl	80041e4 <_malloc_r>
 80043ce:	6028      	str	r0, [r5, #0]
 80043d0:	6128      	str	r0, [r5, #16]
 80043d2:	b920      	cbnz	r0, 80043de <_svfiprintf_r+0x2e>
 80043d4:	230c      	movs	r3, #12
 80043d6:	603b      	str	r3, [r7, #0]
 80043d8:	f04f 30ff 	mov.w	r0, #4294967295
 80043dc:	e0d0      	b.n	8004580 <_svfiprintf_r+0x1d0>
 80043de:	2340      	movs	r3, #64	; 0x40
 80043e0:	616b      	str	r3, [r5, #20]
 80043e2:	2300      	movs	r3, #0
 80043e4:	9309      	str	r3, [sp, #36]	; 0x24
 80043e6:	2320      	movs	r3, #32
 80043e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043ec:	2330      	movs	r3, #48	; 0x30
 80043ee:	f04f 0901 	mov.w	r9, #1
 80043f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80043f6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004598 <_svfiprintf_r+0x1e8>
 80043fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043fe:	4623      	mov	r3, r4
 8004400:	469a      	mov	sl, r3
 8004402:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004406:	b10a      	cbz	r2, 800440c <_svfiprintf_r+0x5c>
 8004408:	2a25      	cmp	r2, #37	; 0x25
 800440a:	d1f9      	bne.n	8004400 <_svfiprintf_r+0x50>
 800440c:	ebba 0b04 	subs.w	fp, sl, r4
 8004410:	d00b      	beq.n	800442a <_svfiprintf_r+0x7a>
 8004412:	465b      	mov	r3, fp
 8004414:	4622      	mov	r2, r4
 8004416:	4629      	mov	r1, r5
 8004418:	4638      	mov	r0, r7
 800441a:	f7ff ff6f 	bl	80042fc <__ssputs_r>
 800441e:	3001      	adds	r0, #1
 8004420:	f000 80a9 	beq.w	8004576 <_svfiprintf_r+0x1c6>
 8004424:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004426:	445a      	add	r2, fp
 8004428:	9209      	str	r2, [sp, #36]	; 0x24
 800442a:	f89a 3000 	ldrb.w	r3, [sl]
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 80a1 	beq.w	8004576 <_svfiprintf_r+0x1c6>
 8004434:	2300      	movs	r3, #0
 8004436:	f04f 32ff 	mov.w	r2, #4294967295
 800443a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800443e:	f10a 0a01 	add.w	sl, sl, #1
 8004442:	9304      	str	r3, [sp, #16]
 8004444:	9307      	str	r3, [sp, #28]
 8004446:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800444a:	931a      	str	r3, [sp, #104]	; 0x68
 800444c:	4654      	mov	r4, sl
 800444e:	2205      	movs	r2, #5
 8004450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004454:	4850      	ldr	r0, [pc, #320]	; (8004598 <_svfiprintf_r+0x1e8>)
 8004456:	f000 fa67 	bl	8004928 <memchr>
 800445a:	9a04      	ldr	r2, [sp, #16]
 800445c:	b9d8      	cbnz	r0, 8004496 <_svfiprintf_r+0xe6>
 800445e:	06d0      	lsls	r0, r2, #27
 8004460:	bf44      	itt	mi
 8004462:	2320      	movmi	r3, #32
 8004464:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004468:	0711      	lsls	r1, r2, #28
 800446a:	bf44      	itt	mi
 800446c:	232b      	movmi	r3, #43	; 0x2b
 800446e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004472:	f89a 3000 	ldrb.w	r3, [sl]
 8004476:	2b2a      	cmp	r3, #42	; 0x2a
 8004478:	d015      	beq.n	80044a6 <_svfiprintf_r+0xf6>
 800447a:	4654      	mov	r4, sl
 800447c:	2000      	movs	r0, #0
 800447e:	f04f 0c0a 	mov.w	ip, #10
 8004482:	9a07      	ldr	r2, [sp, #28]
 8004484:	4621      	mov	r1, r4
 8004486:	f811 3b01 	ldrb.w	r3, [r1], #1
 800448a:	3b30      	subs	r3, #48	; 0x30
 800448c:	2b09      	cmp	r3, #9
 800448e:	d94d      	bls.n	800452c <_svfiprintf_r+0x17c>
 8004490:	b1b0      	cbz	r0, 80044c0 <_svfiprintf_r+0x110>
 8004492:	9207      	str	r2, [sp, #28]
 8004494:	e014      	b.n	80044c0 <_svfiprintf_r+0x110>
 8004496:	eba0 0308 	sub.w	r3, r0, r8
 800449a:	fa09 f303 	lsl.w	r3, r9, r3
 800449e:	4313      	orrs	r3, r2
 80044a0:	46a2      	mov	sl, r4
 80044a2:	9304      	str	r3, [sp, #16]
 80044a4:	e7d2      	b.n	800444c <_svfiprintf_r+0x9c>
 80044a6:	9b03      	ldr	r3, [sp, #12]
 80044a8:	1d19      	adds	r1, r3, #4
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	9103      	str	r1, [sp, #12]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	bfbb      	ittet	lt
 80044b2:	425b      	neglt	r3, r3
 80044b4:	f042 0202 	orrlt.w	r2, r2, #2
 80044b8:	9307      	strge	r3, [sp, #28]
 80044ba:	9307      	strlt	r3, [sp, #28]
 80044bc:	bfb8      	it	lt
 80044be:	9204      	strlt	r2, [sp, #16]
 80044c0:	7823      	ldrb	r3, [r4, #0]
 80044c2:	2b2e      	cmp	r3, #46	; 0x2e
 80044c4:	d10c      	bne.n	80044e0 <_svfiprintf_r+0x130>
 80044c6:	7863      	ldrb	r3, [r4, #1]
 80044c8:	2b2a      	cmp	r3, #42	; 0x2a
 80044ca:	d134      	bne.n	8004536 <_svfiprintf_r+0x186>
 80044cc:	9b03      	ldr	r3, [sp, #12]
 80044ce:	3402      	adds	r4, #2
 80044d0:	1d1a      	adds	r2, r3, #4
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	9203      	str	r2, [sp, #12]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	bfb8      	it	lt
 80044da:	f04f 33ff 	movlt.w	r3, #4294967295
 80044de:	9305      	str	r3, [sp, #20]
 80044e0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800459c <_svfiprintf_r+0x1ec>
 80044e4:	2203      	movs	r2, #3
 80044e6:	4650      	mov	r0, sl
 80044e8:	7821      	ldrb	r1, [r4, #0]
 80044ea:	f000 fa1d 	bl	8004928 <memchr>
 80044ee:	b138      	cbz	r0, 8004500 <_svfiprintf_r+0x150>
 80044f0:	2240      	movs	r2, #64	; 0x40
 80044f2:	9b04      	ldr	r3, [sp, #16]
 80044f4:	eba0 000a 	sub.w	r0, r0, sl
 80044f8:	4082      	lsls	r2, r0
 80044fa:	4313      	orrs	r3, r2
 80044fc:	3401      	adds	r4, #1
 80044fe:	9304      	str	r3, [sp, #16]
 8004500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004504:	2206      	movs	r2, #6
 8004506:	4826      	ldr	r0, [pc, #152]	; (80045a0 <_svfiprintf_r+0x1f0>)
 8004508:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800450c:	f000 fa0c 	bl	8004928 <memchr>
 8004510:	2800      	cmp	r0, #0
 8004512:	d038      	beq.n	8004586 <_svfiprintf_r+0x1d6>
 8004514:	4b23      	ldr	r3, [pc, #140]	; (80045a4 <_svfiprintf_r+0x1f4>)
 8004516:	bb1b      	cbnz	r3, 8004560 <_svfiprintf_r+0x1b0>
 8004518:	9b03      	ldr	r3, [sp, #12]
 800451a:	3307      	adds	r3, #7
 800451c:	f023 0307 	bic.w	r3, r3, #7
 8004520:	3308      	adds	r3, #8
 8004522:	9303      	str	r3, [sp, #12]
 8004524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004526:	4433      	add	r3, r6
 8004528:	9309      	str	r3, [sp, #36]	; 0x24
 800452a:	e768      	b.n	80043fe <_svfiprintf_r+0x4e>
 800452c:	460c      	mov	r4, r1
 800452e:	2001      	movs	r0, #1
 8004530:	fb0c 3202 	mla	r2, ip, r2, r3
 8004534:	e7a6      	b.n	8004484 <_svfiprintf_r+0xd4>
 8004536:	2300      	movs	r3, #0
 8004538:	f04f 0c0a 	mov.w	ip, #10
 800453c:	4619      	mov	r1, r3
 800453e:	3401      	adds	r4, #1
 8004540:	9305      	str	r3, [sp, #20]
 8004542:	4620      	mov	r0, r4
 8004544:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004548:	3a30      	subs	r2, #48	; 0x30
 800454a:	2a09      	cmp	r2, #9
 800454c:	d903      	bls.n	8004556 <_svfiprintf_r+0x1a6>
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0c6      	beq.n	80044e0 <_svfiprintf_r+0x130>
 8004552:	9105      	str	r1, [sp, #20]
 8004554:	e7c4      	b.n	80044e0 <_svfiprintf_r+0x130>
 8004556:	4604      	mov	r4, r0
 8004558:	2301      	movs	r3, #1
 800455a:	fb0c 2101 	mla	r1, ip, r1, r2
 800455e:	e7f0      	b.n	8004542 <_svfiprintf_r+0x192>
 8004560:	ab03      	add	r3, sp, #12
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	462a      	mov	r2, r5
 8004566:	4638      	mov	r0, r7
 8004568:	4b0f      	ldr	r3, [pc, #60]	; (80045a8 <_svfiprintf_r+0x1f8>)
 800456a:	a904      	add	r1, sp, #16
 800456c:	f3af 8000 	nop.w
 8004570:	1c42      	adds	r2, r0, #1
 8004572:	4606      	mov	r6, r0
 8004574:	d1d6      	bne.n	8004524 <_svfiprintf_r+0x174>
 8004576:	89ab      	ldrh	r3, [r5, #12]
 8004578:	065b      	lsls	r3, r3, #25
 800457a:	f53f af2d 	bmi.w	80043d8 <_svfiprintf_r+0x28>
 800457e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004580:	b01d      	add	sp, #116	; 0x74
 8004582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004586:	ab03      	add	r3, sp, #12
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	462a      	mov	r2, r5
 800458c:	4638      	mov	r0, r7
 800458e:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <_svfiprintf_r+0x1f8>)
 8004590:	a904      	add	r1, sp, #16
 8004592:	f000 f87d 	bl	8004690 <_printf_i>
 8004596:	e7eb      	b.n	8004570 <_svfiprintf_r+0x1c0>
 8004598:	08004a16 	.word	0x08004a16
 800459c:	08004a1c 	.word	0x08004a1c
 80045a0:	08004a20 	.word	0x08004a20
 80045a4:	00000000 	.word	0x00000000
 80045a8:	080042fd 	.word	0x080042fd

080045ac <_printf_common>:
 80045ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045b0:	4616      	mov	r6, r2
 80045b2:	4699      	mov	r9, r3
 80045b4:	688a      	ldr	r2, [r1, #8]
 80045b6:	690b      	ldr	r3, [r1, #16]
 80045b8:	4607      	mov	r7, r0
 80045ba:	4293      	cmp	r3, r2
 80045bc:	bfb8      	it	lt
 80045be:	4613      	movlt	r3, r2
 80045c0:	6033      	str	r3, [r6, #0]
 80045c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045c6:	460c      	mov	r4, r1
 80045c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045cc:	b10a      	cbz	r2, 80045d2 <_printf_common+0x26>
 80045ce:	3301      	adds	r3, #1
 80045d0:	6033      	str	r3, [r6, #0]
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	0699      	lsls	r1, r3, #26
 80045d6:	bf42      	ittt	mi
 80045d8:	6833      	ldrmi	r3, [r6, #0]
 80045da:	3302      	addmi	r3, #2
 80045dc:	6033      	strmi	r3, [r6, #0]
 80045de:	6825      	ldr	r5, [r4, #0]
 80045e0:	f015 0506 	ands.w	r5, r5, #6
 80045e4:	d106      	bne.n	80045f4 <_printf_common+0x48>
 80045e6:	f104 0a19 	add.w	sl, r4, #25
 80045ea:	68e3      	ldr	r3, [r4, #12]
 80045ec:	6832      	ldr	r2, [r6, #0]
 80045ee:	1a9b      	subs	r3, r3, r2
 80045f0:	42ab      	cmp	r3, r5
 80045f2:	dc2b      	bgt.n	800464c <_printf_common+0xa0>
 80045f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045f8:	1e13      	subs	r3, r2, #0
 80045fa:	6822      	ldr	r2, [r4, #0]
 80045fc:	bf18      	it	ne
 80045fe:	2301      	movne	r3, #1
 8004600:	0692      	lsls	r2, r2, #26
 8004602:	d430      	bmi.n	8004666 <_printf_common+0xba>
 8004604:	4649      	mov	r1, r9
 8004606:	4638      	mov	r0, r7
 8004608:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800460c:	47c0      	blx	r8
 800460e:	3001      	adds	r0, #1
 8004610:	d023      	beq.n	800465a <_printf_common+0xae>
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	6922      	ldr	r2, [r4, #16]
 8004616:	f003 0306 	and.w	r3, r3, #6
 800461a:	2b04      	cmp	r3, #4
 800461c:	bf14      	ite	ne
 800461e:	2500      	movne	r5, #0
 8004620:	6833      	ldreq	r3, [r6, #0]
 8004622:	f04f 0600 	mov.w	r6, #0
 8004626:	bf08      	it	eq
 8004628:	68e5      	ldreq	r5, [r4, #12]
 800462a:	f104 041a 	add.w	r4, r4, #26
 800462e:	bf08      	it	eq
 8004630:	1aed      	subeq	r5, r5, r3
 8004632:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004636:	bf08      	it	eq
 8004638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800463c:	4293      	cmp	r3, r2
 800463e:	bfc4      	itt	gt
 8004640:	1a9b      	subgt	r3, r3, r2
 8004642:	18ed      	addgt	r5, r5, r3
 8004644:	42b5      	cmp	r5, r6
 8004646:	d11a      	bne.n	800467e <_printf_common+0xd2>
 8004648:	2000      	movs	r0, #0
 800464a:	e008      	b.n	800465e <_printf_common+0xb2>
 800464c:	2301      	movs	r3, #1
 800464e:	4652      	mov	r2, sl
 8004650:	4649      	mov	r1, r9
 8004652:	4638      	mov	r0, r7
 8004654:	47c0      	blx	r8
 8004656:	3001      	adds	r0, #1
 8004658:	d103      	bne.n	8004662 <_printf_common+0xb6>
 800465a:	f04f 30ff 	mov.w	r0, #4294967295
 800465e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004662:	3501      	adds	r5, #1
 8004664:	e7c1      	b.n	80045ea <_printf_common+0x3e>
 8004666:	2030      	movs	r0, #48	; 0x30
 8004668:	18e1      	adds	r1, r4, r3
 800466a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004674:	4422      	add	r2, r4
 8004676:	3302      	adds	r3, #2
 8004678:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800467c:	e7c2      	b.n	8004604 <_printf_common+0x58>
 800467e:	2301      	movs	r3, #1
 8004680:	4622      	mov	r2, r4
 8004682:	4649      	mov	r1, r9
 8004684:	4638      	mov	r0, r7
 8004686:	47c0      	blx	r8
 8004688:	3001      	adds	r0, #1
 800468a:	d0e6      	beq.n	800465a <_printf_common+0xae>
 800468c:	3601      	adds	r6, #1
 800468e:	e7d9      	b.n	8004644 <_printf_common+0x98>

08004690 <_printf_i>:
 8004690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004694:	7e0f      	ldrb	r7, [r1, #24]
 8004696:	4691      	mov	r9, r2
 8004698:	2f78      	cmp	r7, #120	; 0x78
 800469a:	4680      	mov	r8, r0
 800469c:	460c      	mov	r4, r1
 800469e:	469a      	mov	sl, r3
 80046a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046a6:	d807      	bhi.n	80046b8 <_printf_i+0x28>
 80046a8:	2f62      	cmp	r7, #98	; 0x62
 80046aa:	d80a      	bhi.n	80046c2 <_printf_i+0x32>
 80046ac:	2f00      	cmp	r7, #0
 80046ae:	f000 80d5 	beq.w	800485c <_printf_i+0x1cc>
 80046b2:	2f58      	cmp	r7, #88	; 0x58
 80046b4:	f000 80c1 	beq.w	800483a <_printf_i+0x1aa>
 80046b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046c0:	e03a      	b.n	8004738 <_printf_i+0xa8>
 80046c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046c6:	2b15      	cmp	r3, #21
 80046c8:	d8f6      	bhi.n	80046b8 <_printf_i+0x28>
 80046ca:	a101      	add	r1, pc, #4	; (adr r1, 80046d0 <_printf_i+0x40>)
 80046cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046d0:	08004729 	.word	0x08004729
 80046d4:	0800473d 	.word	0x0800473d
 80046d8:	080046b9 	.word	0x080046b9
 80046dc:	080046b9 	.word	0x080046b9
 80046e0:	080046b9 	.word	0x080046b9
 80046e4:	080046b9 	.word	0x080046b9
 80046e8:	0800473d 	.word	0x0800473d
 80046ec:	080046b9 	.word	0x080046b9
 80046f0:	080046b9 	.word	0x080046b9
 80046f4:	080046b9 	.word	0x080046b9
 80046f8:	080046b9 	.word	0x080046b9
 80046fc:	08004843 	.word	0x08004843
 8004700:	08004769 	.word	0x08004769
 8004704:	080047fd 	.word	0x080047fd
 8004708:	080046b9 	.word	0x080046b9
 800470c:	080046b9 	.word	0x080046b9
 8004710:	08004865 	.word	0x08004865
 8004714:	080046b9 	.word	0x080046b9
 8004718:	08004769 	.word	0x08004769
 800471c:	080046b9 	.word	0x080046b9
 8004720:	080046b9 	.word	0x080046b9
 8004724:	08004805 	.word	0x08004805
 8004728:	682b      	ldr	r3, [r5, #0]
 800472a:	1d1a      	adds	r2, r3, #4
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	602a      	str	r2, [r5, #0]
 8004730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004734:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004738:	2301      	movs	r3, #1
 800473a:	e0a0      	b.n	800487e <_printf_i+0x1ee>
 800473c:	6820      	ldr	r0, [r4, #0]
 800473e:	682b      	ldr	r3, [r5, #0]
 8004740:	0607      	lsls	r7, r0, #24
 8004742:	f103 0104 	add.w	r1, r3, #4
 8004746:	6029      	str	r1, [r5, #0]
 8004748:	d501      	bpl.n	800474e <_printf_i+0xbe>
 800474a:	681e      	ldr	r6, [r3, #0]
 800474c:	e003      	b.n	8004756 <_printf_i+0xc6>
 800474e:	0646      	lsls	r6, r0, #25
 8004750:	d5fb      	bpl.n	800474a <_printf_i+0xba>
 8004752:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004756:	2e00      	cmp	r6, #0
 8004758:	da03      	bge.n	8004762 <_printf_i+0xd2>
 800475a:	232d      	movs	r3, #45	; 0x2d
 800475c:	4276      	negs	r6, r6
 800475e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004762:	230a      	movs	r3, #10
 8004764:	4859      	ldr	r0, [pc, #356]	; (80048cc <_printf_i+0x23c>)
 8004766:	e012      	b.n	800478e <_printf_i+0xfe>
 8004768:	682b      	ldr	r3, [r5, #0]
 800476a:	6820      	ldr	r0, [r4, #0]
 800476c:	1d19      	adds	r1, r3, #4
 800476e:	6029      	str	r1, [r5, #0]
 8004770:	0605      	lsls	r5, r0, #24
 8004772:	d501      	bpl.n	8004778 <_printf_i+0xe8>
 8004774:	681e      	ldr	r6, [r3, #0]
 8004776:	e002      	b.n	800477e <_printf_i+0xee>
 8004778:	0641      	lsls	r1, r0, #25
 800477a:	d5fb      	bpl.n	8004774 <_printf_i+0xe4>
 800477c:	881e      	ldrh	r6, [r3, #0]
 800477e:	2f6f      	cmp	r7, #111	; 0x6f
 8004780:	bf0c      	ite	eq
 8004782:	2308      	moveq	r3, #8
 8004784:	230a      	movne	r3, #10
 8004786:	4851      	ldr	r0, [pc, #324]	; (80048cc <_printf_i+0x23c>)
 8004788:	2100      	movs	r1, #0
 800478a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800478e:	6865      	ldr	r5, [r4, #4]
 8004790:	2d00      	cmp	r5, #0
 8004792:	bfa8      	it	ge
 8004794:	6821      	ldrge	r1, [r4, #0]
 8004796:	60a5      	str	r5, [r4, #8]
 8004798:	bfa4      	itt	ge
 800479a:	f021 0104 	bicge.w	r1, r1, #4
 800479e:	6021      	strge	r1, [r4, #0]
 80047a0:	b90e      	cbnz	r6, 80047a6 <_printf_i+0x116>
 80047a2:	2d00      	cmp	r5, #0
 80047a4:	d04b      	beq.n	800483e <_printf_i+0x1ae>
 80047a6:	4615      	mov	r5, r2
 80047a8:	fbb6 f1f3 	udiv	r1, r6, r3
 80047ac:	fb03 6711 	mls	r7, r3, r1, r6
 80047b0:	5dc7      	ldrb	r7, [r0, r7]
 80047b2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047b6:	4637      	mov	r7, r6
 80047b8:	42bb      	cmp	r3, r7
 80047ba:	460e      	mov	r6, r1
 80047bc:	d9f4      	bls.n	80047a8 <_printf_i+0x118>
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d10b      	bne.n	80047da <_printf_i+0x14a>
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	07de      	lsls	r6, r3, #31
 80047c6:	d508      	bpl.n	80047da <_printf_i+0x14a>
 80047c8:	6923      	ldr	r3, [r4, #16]
 80047ca:	6861      	ldr	r1, [r4, #4]
 80047cc:	4299      	cmp	r1, r3
 80047ce:	bfde      	ittt	le
 80047d0:	2330      	movle	r3, #48	; 0x30
 80047d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80047da:	1b52      	subs	r2, r2, r5
 80047dc:	6122      	str	r2, [r4, #16]
 80047de:	464b      	mov	r3, r9
 80047e0:	4621      	mov	r1, r4
 80047e2:	4640      	mov	r0, r8
 80047e4:	f8cd a000 	str.w	sl, [sp]
 80047e8:	aa03      	add	r2, sp, #12
 80047ea:	f7ff fedf 	bl	80045ac <_printf_common>
 80047ee:	3001      	adds	r0, #1
 80047f0:	d14a      	bne.n	8004888 <_printf_i+0x1f8>
 80047f2:	f04f 30ff 	mov.w	r0, #4294967295
 80047f6:	b004      	add	sp, #16
 80047f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	f043 0320 	orr.w	r3, r3, #32
 8004802:	6023      	str	r3, [r4, #0]
 8004804:	2778      	movs	r7, #120	; 0x78
 8004806:	4832      	ldr	r0, [pc, #200]	; (80048d0 <_printf_i+0x240>)
 8004808:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800480c:	6823      	ldr	r3, [r4, #0]
 800480e:	6829      	ldr	r1, [r5, #0]
 8004810:	061f      	lsls	r7, r3, #24
 8004812:	f851 6b04 	ldr.w	r6, [r1], #4
 8004816:	d402      	bmi.n	800481e <_printf_i+0x18e>
 8004818:	065f      	lsls	r7, r3, #25
 800481a:	bf48      	it	mi
 800481c:	b2b6      	uxthmi	r6, r6
 800481e:	07df      	lsls	r7, r3, #31
 8004820:	bf48      	it	mi
 8004822:	f043 0320 	orrmi.w	r3, r3, #32
 8004826:	6029      	str	r1, [r5, #0]
 8004828:	bf48      	it	mi
 800482a:	6023      	strmi	r3, [r4, #0]
 800482c:	b91e      	cbnz	r6, 8004836 <_printf_i+0x1a6>
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	f023 0320 	bic.w	r3, r3, #32
 8004834:	6023      	str	r3, [r4, #0]
 8004836:	2310      	movs	r3, #16
 8004838:	e7a6      	b.n	8004788 <_printf_i+0xf8>
 800483a:	4824      	ldr	r0, [pc, #144]	; (80048cc <_printf_i+0x23c>)
 800483c:	e7e4      	b.n	8004808 <_printf_i+0x178>
 800483e:	4615      	mov	r5, r2
 8004840:	e7bd      	b.n	80047be <_printf_i+0x12e>
 8004842:	682b      	ldr	r3, [r5, #0]
 8004844:	6826      	ldr	r6, [r4, #0]
 8004846:	1d18      	adds	r0, r3, #4
 8004848:	6961      	ldr	r1, [r4, #20]
 800484a:	6028      	str	r0, [r5, #0]
 800484c:	0635      	lsls	r5, r6, #24
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	d501      	bpl.n	8004856 <_printf_i+0x1c6>
 8004852:	6019      	str	r1, [r3, #0]
 8004854:	e002      	b.n	800485c <_printf_i+0x1cc>
 8004856:	0670      	lsls	r0, r6, #25
 8004858:	d5fb      	bpl.n	8004852 <_printf_i+0x1c2>
 800485a:	8019      	strh	r1, [r3, #0]
 800485c:	2300      	movs	r3, #0
 800485e:	4615      	mov	r5, r2
 8004860:	6123      	str	r3, [r4, #16]
 8004862:	e7bc      	b.n	80047de <_printf_i+0x14e>
 8004864:	682b      	ldr	r3, [r5, #0]
 8004866:	2100      	movs	r1, #0
 8004868:	1d1a      	adds	r2, r3, #4
 800486a:	602a      	str	r2, [r5, #0]
 800486c:	681d      	ldr	r5, [r3, #0]
 800486e:	6862      	ldr	r2, [r4, #4]
 8004870:	4628      	mov	r0, r5
 8004872:	f000 f859 	bl	8004928 <memchr>
 8004876:	b108      	cbz	r0, 800487c <_printf_i+0x1ec>
 8004878:	1b40      	subs	r0, r0, r5
 800487a:	6060      	str	r0, [r4, #4]
 800487c:	6863      	ldr	r3, [r4, #4]
 800487e:	6123      	str	r3, [r4, #16]
 8004880:	2300      	movs	r3, #0
 8004882:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004886:	e7aa      	b.n	80047de <_printf_i+0x14e>
 8004888:	462a      	mov	r2, r5
 800488a:	4649      	mov	r1, r9
 800488c:	4640      	mov	r0, r8
 800488e:	6923      	ldr	r3, [r4, #16]
 8004890:	47d0      	blx	sl
 8004892:	3001      	adds	r0, #1
 8004894:	d0ad      	beq.n	80047f2 <_printf_i+0x162>
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	079b      	lsls	r3, r3, #30
 800489a:	d413      	bmi.n	80048c4 <_printf_i+0x234>
 800489c:	68e0      	ldr	r0, [r4, #12]
 800489e:	9b03      	ldr	r3, [sp, #12]
 80048a0:	4298      	cmp	r0, r3
 80048a2:	bfb8      	it	lt
 80048a4:	4618      	movlt	r0, r3
 80048a6:	e7a6      	b.n	80047f6 <_printf_i+0x166>
 80048a8:	2301      	movs	r3, #1
 80048aa:	4632      	mov	r2, r6
 80048ac:	4649      	mov	r1, r9
 80048ae:	4640      	mov	r0, r8
 80048b0:	47d0      	blx	sl
 80048b2:	3001      	adds	r0, #1
 80048b4:	d09d      	beq.n	80047f2 <_printf_i+0x162>
 80048b6:	3501      	adds	r5, #1
 80048b8:	68e3      	ldr	r3, [r4, #12]
 80048ba:	9903      	ldr	r1, [sp, #12]
 80048bc:	1a5b      	subs	r3, r3, r1
 80048be:	42ab      	cmp	r3, r5
 80048c0:	dcf2      	bgt.n	80048a8 <_printf_i+0x218>
 80048c2:	e7eb      	b.n	800489c <_printf_i+0x20c>
 80048c4:	2500      	movs	r5, #0
 80048c6:	f104 0619 	add.w	r6, r4, #25
 80048ca:	e7f5      	b.n	80048b8 <_printf_i+0x228>
 80048cc:	08004a27 	.word	0x08004a27
 80048d0:	08004a38 	.word	0x08004a38

080048d4 <memmove>:
 80048d4:	4288      	cmp	r0, r1
 80048d6:	b510      	push	{r4, lr}
 80048d8:	eb01 0402 	add.w	r4, r1, r2
 80048dc:	d902      	bls.n	80048e4 <memmove+0x10>
 80048de:	4284      	cmp	r4, r0
 80048e0:	4623      	mov	r3, r4
 80048e2:	d807      	bhi.n	80048f4 <memmove+0x20>
 80048e4:	1e43      	subs	r3, r0, #1
 80048e6:	42a1      	cmp	r1, r4
 80048e8:	d008      	beq.n	80048fc <memmove+0x28>
 80048ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048f2:	e7f8      	b.n	80048e6 <memmove+0x12>
 80048f4:	4601      	mov	r1, r0
 80048f6:	4402      	add	r2, r0
 80048f8:	428a      	cmp	r2, r1
 80048fa:	d100      	bne.n	80048fe <memmove+0x2a>
 80048fc:	bd10      	pop	{r4, pc}
 80048fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004902:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004906:	e7f7      	b.n	80048f8 <memmove+0x24>

08004908 <_sbrk_r>:
 8004908:	b538      	push	{r3, r4, r5, lr}
 800490a:	2300      	movs	r3, #0
 800490c:	4d05      	ldr	r5, [pc, #20]	; (8004924 <_sbrk_r+0x1c>)
 800490e:	4604      	mov	r4, r0
 8004910:	4608      	mov	r0, r1
 8004912:	602b      	str	r3, [r5, #0]
 8004914:	f7fc faf4 	bl	8000f00 <_sbrk>
 8004918:	1c43      	adds	r3, r0, #1
 800491a:	d102      	bne.n	8004922 <_sbrk_r+0x1a>
 800491c:	682b      	ldr	r3, [r5, #0]
 800491e:	b103      	cbz	r3, 8004922 <_sbrk_r+0x1a>
 8004920:	6023      	str	r3, [r4, #0]
 8004922:	bd38      	pop	{r3, r4, r5, pc}
 8004924:	20000348 	.word	0x20000348

08004928 <memchr>:
 8004928:	4603      	mov	r3, r0
 800492a:	b510      	push	{r4, lr}
 800492c:	b2c9      	uxtb	r1, r1
 800492e:	4402      	add	r2, r0
 8004930:	4293      	cmp	r3, r2
 8004932:	4618      	mov	r0, r3
 8004934:	d101      	bne.n	800493a <memchr+0x12>
 8004936:	2000      	movs	r0, #0
 8004938:	e003      	b.n	8004942 <memchr+0x1a>
 800493a:	7804      	ldrb	r4, [r0, #0]
 800493c:	3301      	adds	r3, #1
 800493e:	428c      	cmp	r4, r1
 8004940:	d1f6      	bne.n	8004930 <memchr+0x8>
 8004942:	bd10      	pop	{r4, pc}

08004944 <memcpy>:
 8004944:	440a      	add	r2, r1
 8004946:	4291      	cmp	r1, r2
 8004948:	f100 33ff 	add.w	r3, r0, #4294967295
 800494c:	d100      	bne.n	8004950 <memcpy+0xc>
 800494e:	4770      	bx	lr
 8004950:	b510      	push	{r4, lr}
 8004952:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004956:	4291      	cmp	r1, r2
 8004958:	f803 4f01 	strb.w	r4, [r3, #1]!
 800495c:	d1f9      	bne.n	8004952 <memcpy+0xe>
 800495e:	bd10      	pop	{r4, pc}

08004960 <_realloc_r>:
 8004960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004964:	4680      	mov	r8, r0
 8004966:	4614      	mov	r4, r2
 8004968:	460e      	mov	r6, r1
 800496a:	b921      	cbnz	r1, 8004976 <_realloc_r+0x16>
 800496c:	4611      	mov	r1, r2
 800496e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004972:	f7ff bc37 	b.w	80041e4 <_malloc_r>
 8004976:	b92a      	cbnz	r2, 8004984 <_realloc_r+0x24>
 8004978:	f7ff fbcc 	bl	8004114 <_free_r>
 800497c:	4625      	mov	r5, r4
 800497e:	4628      	mov	r0, r5
 8004980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004984:	f000 f81b 	bl	80049be <_malloc_usable_size_r>
 8004988:	4284      	cmp	r4, r0
 800498a:	4607      	mov	r7, r0
 800498c:	d802      	bhi.n	8004994 <_realloc_r+0x34>
 800498e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004992:	d812      	bhi.n	80049ba <_realloc_r+0x5a>
 8004994:	4621      	mov	r1, r4
 8004996:	4640      	mov	r0, r8
 8004998:	f7ff fc24 	bl	80041e4 <_malloc_r>
 800499c:	4605      	mov	r5, r0
 800499e:	2800      	cmp	r0, #0
 80049a0:	d0ed      	beq.n	800497e <_realloc_r+0x1e>
 80049a2:	42bc      	cmp	r4, r7
 80049a4:	4622      	mov	r2, r4
 80049a6:	4631      	mov	r1, r6
 80049a8:	bf28      	it	cs
 80049aa:	463a      	movcs	r2, r7
 80049ac:	f7ff ffca 	bl	8004944 <memcpy>
 80049b0:	4631      	mov	r1, r6
 80049b2:	4640      	mov	r0, r8
 80049b4:	f7ff fbae 	bl	8004114 <_free_r>
 80049b8:	e7e1      	b.n	800497e <_realloc_r+0x1e>
 80049ba:	4635      	mov	r5, r6
 80049bc:	e7df      	b.n	800497e <_realloc_r+0x1e>

080049be <_malloc_usable_size_r>:
 80049be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049c2:	1f18      	subs	r0, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	bfbc      	itt	lt
 80049c8:	580b      	ldrlt	r3, [r1, r0]
 80049ca:	18c0      	addlt	r0, r0, r3
 80049cc:	4770      	bx	lr
	...

080049d0 <_init>:
 80049d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d2:	bf00      	nop
 80049d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d6:	bc08      	pop	{r3}
 80049d8:	469e      	mov	lr, r3
 80049da:	4770      	bx	lr

080049dc <_fini>:
 80049dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049de:	bf00      	nop
 80049e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e2:	bc08      	pop	{r3}
 80049e4:	469e      	mov	lr, r3
 80049e6:	4770      	bx	lr
